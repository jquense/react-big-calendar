;(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined'
    ? factory(exports)
    : typeof define === 'function' && define.amd
    ? define(['exports'], factory)
    : ((global =
        typeof globalThis !== 'undefined' ? globalThis : global || self),
      factory((global.ReactBigCalendar = {})))
})(this, function (exports) {
  'use strict'

  function NoopWrapper(props) {
    return props.children
  }

  function _typeof(obj) {
    '@babel/helpers - typeof'

    return (
      (_typeof =
        'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
          ? function (obj) {
              return typeof obj
            }
          : function (obj) {
              return obj &&
                'function' == typeof Symbol &&
                obj.constructor === Symbol &&
                obj !== Symbol.prototype
                ? 'symbol'
                : typeof obj
            }),
      _typeof(obj)
    )
  }

  function _toPrimitive(input, hint) {
    if (_typeof(input) !== 'object' || input === null) return input
    var prim = input[Symbol.toPrimitive]
    if (prim !== undefined) {
      var res = prim.call(input, hint || 'default')
      if (_typeof(res) !== 'object') return res
      throw new TypeError('@@toPrimitive must return a primitive value.')
    }
    return (hint === 'string' ? String : Number)(input)
  }

  function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, 'string')
    return _typeof(key) === 'symbol' ? key : String(key)
  }

  function _defineProperty$1(obj, key, value) {
    key = _toPropertyKey(key)
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true,
      })
    } else {
      obj[key] = value
    }
    return obj
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object)
    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object)
      enumerableOnly &&
        (symbols = symbols.filter(function (sym) {
          return Object.getOwnPropertyDescriptor(object, sym).enumerable
        })),
        keys.push.apply(keys, symbols)
    }
    return keys
  }
  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {}
      i % 2
        ? ownKeys(Object(source), !0).forEach(function (key) {
            _defineProperty$1(target, key, source[key])
          })
        : Object.getOwnPropertyDescriptors
        ? Object.defineProperties(
            target,
            Object.getOwnPropertyDescriptors(source)
          )
        : ownKeys(Object(source)).forEach(function (key) {
            Object.defineProperty(
              target,
              key,
              Object.getOwnPropertyDescriptor(source, key)
            )
          })
    }
    return target
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {}
    var target = {}
    var sourceKeys = Object.keys(source)
    var key, i
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i]
      if (excluded.indexOf(key) >= 0) continue
      target[key] = source[key]
    }
    return target
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {}
    var target = _objectWithoutPropertiesLoose(source, excluded)
    var key, i
    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source)
      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i]
        if (excluded.indexOf(key) >= 0) continue
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue
        target[key] = source[key]
      }
    }
    return target
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError('Cannot call a class as a function')
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i]
      descriptor.enumerable = descriptor.enumerable || false
      descriptor.configurable = true
      if ('value' in descriptor) descriptor.writable = true
      Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor)
    }
  }
  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps)
    if (staticProps) _defineProperties(Constructor, staticProps)
    Object.defineProperty(Constructor, 'prototype', {
      writable: false,
    })
    return Constructor
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf
      ? Object.setPrototypeOf.bind()
      : function _setPrototypeOf(o, p) {
          o.__proto__ = p
          return o
        }
    return _setPrototypeOf(o, p)
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== 'function' && superClass !== null) {
      throw new TypeError('Super expression must either be null or a function')
    }
    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true,
      },
    })
    Object.defineProperty(subClass, 'prototype', {
      writable: false,
    })
    if (superClass) _setPrototypeOf(subClass, superClass)
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf
      ? Object.getPrototypeOf.bind()
      : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o)
        }
    return _getPrototypeOf(o)
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === 'undefined' || !Reflect.construct) return false
    if (Reflect.construct.sham) return false
    if (typeof Proxy === 'function') return true
    try {
      Boolean.prototype.valueOf.call(
        Reflect.construct(Boolean, [], function () {})
      )
      return true
    } catch (e) {
      return false
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError(
        "this hasn't been initialised - super() hasn't been called"
      )
    }
    return self
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (_typeof(call) === 'object' || typeof call === 'function')) {
      return call
    } else if (call !== void 0) {
      throw new TypeError(
        'Derived constructors may only return object or undefined'
      )
    }
    return _assertThisInitialized(self)
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct()
    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
        result
      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor
        result = Reflect.construct(Super, arguments, NewTarget)
      } else {
        result = Super.apply(this, arguments)
      }
      return _possibleConstructorReturn(this, result)
    }
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr
  }

  function _iterableToArrayLimit(arr, i) {
    var _i =
      null == arr
        ? null
        : ('undefined' != typeof Symbol && arr[Symbol.iterator]) ||
          arr['@@iterator']
    if (null != _i) {
      var _s,
        _e,
        _x,
        _r,
        _arr = [],
        _n = !0,
        _d = !1
      try {
        if (((_x = (_i = _i.call(arr)).next), 0 === i)) {
          if (Object(_i) !== _i) return
          _n = !1
        } else
          for (
            ;
            !(_n = (_s = _x.call(_i)).done) &&
            (_arr.push(_s.value), _arr.length !== i);
            _n = !0
          );
      } catch (err) {
        ;(_d = !0), (_e = err)
      } finally {
        try {
          if (
            !_n &&
            null != _i['return'] &&
            ((_r = _i['return']()), Object(_r) !== _r)
          )
            return
        } finally {
          if (_d) throw _e
        }
      }
      return _arr
    }
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]
    return arr2
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return
    if (typeof o === 'string') return _arrayLikeToArray(o, minLen)
    var n = Object.prototype.toString.call(o).slice(8, -1)
    if (n === 'Object' && o.constructor) n = o.constructor.name
    if (n === 'Map' || n === 'Set') return Array.from(o)
    if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
      return _arrayLikeToArray(o, minLen)
  }

  function _nonIterableRest() {
    throw new TypeError(
      'Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
  }

  function _slicedToArray(arr, i) {
    return (
      _arrayWithHoles(arr) ||
      _iterableToArrayLimit(arr, i) ||
      _unsupportedIterableToArray(arr, i) ||
      _nonIterableRest()
    )
  }

  var commonjsGlobal =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : typeof self !== 'undefined'
      ? self
      : {}

  function getDefaultExportFromCjs(x) {
    return x &&
      x.__esModule &&
      Object.prototype.hasOwnProperty.call(x, 'default')
      ? x['default']
      : x
  }

  var reactExports = {}
  var react = {
    get exports() {
      return reactExports
    },
    set exports(v) {
      reactExports = v
    },
  }

  var react_development = {}

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols
  var hasOwnProperty$e = Object.prototype.hasOwnProperty
  var propIsEnumerable = Object.prototype.propertyIsEnumerable

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError(
        'Object.assign cannot be called with null or undefined'
      )
    }

    return Object(val)
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false
      }

      // Detect buggy property enumeration order in older V8 versions.

      // https://bugs.chromium.org/p/v8/issues/detail?id=4118
      var test1 = new String('abc') // eslint-disable-line no-new-wrappers
      test1[5] = 'de'
      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false
      }

      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test2 = {}
      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i
      }
      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n]
      })
      if (order2.join('') !== '0123456789') {
        return false
      }

      // https://bugs.chromium.org/p/v8/issues/detail?id=3056
      var test3 = {}
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter
      })
      if (
        Object.keys(Object.assign({}, test3)).join('') !==
        'abcdefghijklmnopqrst'
      ) {
        return false
      }

      return true
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false
    }
  }

  var objectAssign = shouldUseNative()
    ? Object.assign
    : function (target, source) {
        var from
        var to = toObject(target)
        var symbols

        for (var s = 1; s < arguments.length; s++) {
          from = Object(arguments[s])

          for (var key in from) {
            if (hasOwnProperty$e.call(from, key)) {
              to[key] = from[key]
            }
          }

          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from)
            for (var i = 0; i < symbols.length; i++) {
              if (propIsEnumerable.call(from, symbols[i])) {
                to[symbols[i]] = from[symbols[i]]
              }
            }
          }
        }

        return to
      }

  /** @license React v17.0.2
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  ;(function (exports) {
    {
      ;(function () {
        var _assign = objectAssign

        // TODO: this is special because it gets imported during build.
        var ReactVersion = '17.0.2'

        // ATTENTION
        // When adding new symbols to this file,
        // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
        // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
        // nor polyfill, then a plain number is used for performance.
        var REACT_ELEMENT_TYPE = 0xeac7
        var REACT_PORTAL_TYPE = 0xeaca
        exports.Fragment = 0xeacb
        exports.StrictMode = 0xeacc
        exports.Profiler = 0xead2
        var REACT_PROVIDER_TYPE = 0xeacd
        var REACT_CONTEXT_TYPE = 0xeace
        var REACT_FORWARD_REF_TYPE = 0xead0
        exports.Suspense = 0xead1
        var REACT_SUSPENSE_LIST_TYPE = 0xead8
        var REACT_MEMO_TYPE = 0xead3
        var REACT_LAZY_TYPE = 0xead4
        var REACT_BLOCK_TYPE = 0xead9
        var REACT_SERVER_BLOCK_TYPE = 0xeada
        var REACT_FUNDAMENTAL_TYPE = 0xead5
        var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1
        var REACT_LEGACY_HIDDEN_TYPE = 0xeae3

        if (typeof Symbol === 'function' && Symbol.for) {
          var symbolFor = Symbol.for
          REACT_ELEMENT_TYPE = symbolFor('react.element')
          REACT_PORTAL_TYPE = symbolFor('react.portal')
          exports.Fragment = symbolFor('react.fragment')
          exports.StrictMode = symbolFor('react.strict_mode')
          exports.Profiler = symbolFor('react.profiler')
          REACT_PROVIDER_TYPE = symbolFor('react.provider')
          REACT_CONTEXT_TYPE = symbolFor('react.context')
          REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref')
          exports.Suspense = symbolFor('react.suspense')
          REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list')
          REACT_MEMO_TYPE = symbolFor('react.memo')
          REACT_LAZY_TYPE = symbolFor('react.lazy')
          REACT_BLOCK_TYPE = symbolFor('react.block')
          REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block')
          REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental')
          symbolFor('react.scope')
          symbolFor('react.opaque.id')
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode')
          symbolFor('react.offscreen')
          REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden')
        }

        var MAYBE_ITERATOR_SYMBOL =
          typeof Symbol === 'function' && Symbol.iterator
        var FAUX_ITERATOR_SYMBOL = '@@iterator'
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== 'object') {
            return null
          }

          var maybeIterator =
            (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
            maybeIterable[FAUX_ITERATOR_SYMBOL]

          if (typeof maybeIterator === 'function') {
            return maybeIterator
          }

          return null
        }

        /**
         * Keeps track of the current dispatcher.
         */
        var ReactCurrentDispatcher = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null,
        }

        /**
         * Keeps track of the current batch's configuration such as how long an update
         * should suspend for if it needs to.
         */
        var ReactCurrentBatchConfig = {
          transition: 0,
        }

        /**
         * Keeps track of the current owner.
         *
         * The current owner is the component who should own any components that are
         * currently being constructed.
         */
        var ReactCurrentOwner = {
          /**
           * @internal
           * @type {ReactComponent}
           */
          current: null,
        }

        var ReactDebugCurrentFrame = {}
        var currentExtraStackFrame = null
        function setExtraStackFrame(stack) {
          {
            currentExtraStackFrame = stack
          }
        }

        {
          ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
            {
              currentExtraStackFrame = stack
            }
          } // Stack implementation injected by the current renderer.

          ReactDebugCurrentFrame.getCurrentStack = null

          ReactDebugCurrentFrame.getStackAddendum = function () {
            var stack = '' // Add an extra top frame while an element is being validated

            if (currentExtraStackFrame) {
              stack += currentExtraStackFrame
            } // Delegate to the injected renderer-specific implementation

            var impl = ReactDebugCurrentFrame.getCurrentStack

            if (impl) {
              stack += impl() || ''
            }

            return stack
          }
        }

        /**
         * Used by act() to track whether you're inside an act() scope.
         */
        var IsSomeRendererActing = {
          current: false,
        }

        var ReactSharedInternals = {
          ReactCurrentDispatcher: ReactCurrentDispatcher,
          ReactCurrentBatchConfig: ReactCurrentBatchConfig,
          ReactCurrentOwner: ReactCurrentOwner,
          IsSomeRendererActing: IsSomeRendererActing,
          // Used by renderers to avoid bundling object-assign twice in UMD bundles:
          assign: _assign,
        }

        {
          ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame
        }

        // by calls to these methods by a Babel plugin.
        //
        // In PROD (or in packages without access to React internals),
        // they are left as they are instead.

        function warn(format) {
          {
            for (
              var _len = arguments.length,
                args = new Array(_len > 1 ? _len - 1 : 0),
                _key = 1;
              _key < _len;
              _key++
            ) {
              args[_key - 1] = arguments[_key]
            }

            printWarning('warn', format, args)
          }
        }
        function error(format) {
          {
            for (
              var _len2 = arguments.length,
                args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                _key2 = 1;
              _key2 < _len2;
              _key2++
            ) {
              args[_key2 - 1] = arguments[_key2]
            }

            printWarning('error', format, args)
          }
        }

        function printWarning(level, format, args) {
          // When changing this logic, you might want to also
          // update consoleWithStackDev.www.js as well.
          {
            var ReactDebugCurrentFrame =
              ReactSharedInternals.ReactDebugCurrentFrame
            var stack = ReactDebugCurrentFrame.getStackAddendum()

            if (stack !== '') {
              format += '%s'
              args = args.concat([stack])
            }

            var argsWithFormat = args.map(function (item) {
              return '' + item
            }) // Careful: RN currently depends on this prefix

            argsWithFormat.unshift('Warning: ' + format) // We intentionally don't use spread (or .apply) directly because it
            // breaks IE9: https://github.com/facebook/react/issues/13610
            // eslint-disable-next-line react-internal/no-production-logging

            Function.prototype.apply.call(
              console[level],
              console,
              argsWithFormat
            )
          }
        }

        var didWarnStateUpdateForUnmountedComponent = {}

        function warnNoop(publicInstance, callerName) {
          {
            var _constructor = publicInstance.constructor
            var componentName =
              (_constructor &&
                (_constructor.displayName || _constructor.name)) ||
              'ReactClass'
            var warningKey = componentName + '.' + callerName

            if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
              return
            }

            error(
              "Can't call %s on a component that is not yet mounted. " +
                'This is a no-op, but it might indicate a bug in your application. ' +
                'Instead, assign to `this.state` directly or define a `state = {};` ' +
                'class property with the desired state in the %s component.',
              callerName,
              componentName
            )

            didWarnStateUpdateForUnmountedComponent[warningKey] = true
          }
        }
        /**
         * This is the abstract API for an update queue.
         */

        var ReactNoopUpdateQueue = {
          /**
           * Checks whether or not this composite component is mounted.
           * @param {ReactClass} publicInstance The instance we want to test.
           * @return {boolean} True if mounted, false otherwise.
           * @protected
           * @final
           */
          isMounted: function (publicInstance) {
            return false
          },

          /**
           * Forces an update. This should only be invoked when it is known with
           * certainty that we are **not** in a DOM transaction.
           *
           * You may want to call this when you know that some deeper aspect of the
           * component's state has changed but `setState` was not called.
           *
           * This will not invoke `shouldComponentUpdate`, but it will invoke
           * `componentWillUpdate` and `componentDidUpdate`.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueForceUpdate: function (publicInstance, callback, callerName) {
            warnNoop(publicInstance, 'forceUpdate')
          },

          /**
           * Replaces all of the state. Always use this or `setState` to mutate state.
           * You should treat `this.state` as immutable.
           *
           * There is no guarantee that `this.state` will be immediately updated, so
           * accessing `this.state` after calling this method may return the old value.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} completeState Next state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} callerName name of the calling function in the public API.
           * @internal
           */
          enqueueReplaceState: function (
            publicInstance,
            completeState,
            callback,
            callerName
          ) {
            warnNoop(publicInstance, 'replaceState')
          },

          /**
           * Sets a subset of the state. This only exists because _pendingState is
           * internal. This provides a merging strategy that is not available to deep
           * properties which is confusing. TODO: Expose pendingState or don't use it
           * during the merge.
           *
           * @param {ReactClass} publicInstance The instance that should rerender.
           * @param {object} partialState Next partial state to be merged with state.
           * @param {?function} callback Called after component is updated.
           * @param {?string} Name of the calling function in the public API.
           * @internal
           */
          enqueueSetState: function (
            publicInstance,
            partialState,
            callback,
            callerName
          ) {
            warnNoop(publicInstance, 'setState')
          },
        }

        var emptyObject = {}

        {
          Object.freeze(emptyObject)
        }
        /**
         * Base class helpers for the updating state of a component.
         */

        function Component(props, context, updater) {
          this.props = props
          this.context = context // If a component has string refs, we will assign a different object later.

          this.refs = emptyObject // We initialize the default updater but the real one gets injected by the
          // renderer.

          this.updater = updater || ReactNoopUpdateQueue
        }

        Component.prototype.isReactComponent = {}
        /**
         * Sets a subset of the state. Always use this to mutate
         * state. You should treat `this.state` as immutable.
         *
         * There is no guarantee that `this.state` will be immediately updated, so
         * accessing `this.state` after calling this method may return the old value.
         *
         * There is no guarantee that calls to `setState` will run synchronously,
         * as they may eventually be batched together.  You can provide an optional
         * callback that will be executed when the call to setState is actually
         * completed.
         *
         * When a function is provided to setState, it will be called at some point in
         * the future (not synchronously). It will be called with the up to date
         * component arguments (state, props, context). These values can be different
         * from this.* because your function may be called after receiveProps but before
         * shouldComponentUpdate, and this new state, props, and context will not yet be
         * assigned to this.
         *
         * @param {object|function} partialState Next partial state or function to
         *        produce next partial state to be merged with current state.
         * @param {?function} callback Called after state is updated.
         * @final
         * @protected
         */

        Component.prototype.setState = function (partialState, callback) {
          if (
            !(
              typeof partialState === 'object' ||
              typeof partialState === 'function' ||
              partialState == null
            )
          ) {
            {
              throw Error(
                'setState(...): takes an object of state variables to update or a function which returns an object of state variables.'
              )
            }
          }

          this.updater.enqueueSetState(this, partialState, callback, 'setState')
        }
        /**
         * Forces an update. This should only be invoked when it is known with
         * certainty that we are **not** in a DOM transaction.
         *
         * You may want to call this when you know that some deeper aspect of the
         * component's state has changed but `setState` was not called.
         *
         * This will not invoke `shouldComponentUpdate`, but it will invoke
         * `componentWillUpdate` and `componentDidUpdate`.
         *
         * @param {?function} callback Called after update is complete.
         * @final
         * @protected
         */

        Component.prototype.forceUpdate = function (callback) {
          this.updater.enqueueForceUpdate(this, callback, 'forceUpdate')
        }
        /**
         * Deprecated APIs. These APIs used to exist on classic React classes but since
         * we would like to deprecate them, we're not going to move them over to this
         * modern base class. Instead, we define a getter that warns if it's accessed.
         */

        {
          var deprecatedAPIs = {
            isMounted: [
              'isMounted',
              'Instead, make sure to clean up subscriptions and pending requests in ' +
                'componentWillUnmount to prevent memory leaks.',
            ],
            replaceState: [
              'replaceState',
              'Refactor your code to use setState instead (see ' +
                'https://github.com/facebook/react/issues/3236).',
            ],
          }

          var defineDeprecationWarning = function (methodName, info) {
            Object.defineProperty(Component.prototype, methodName, {
              get: function () {
                warn(
                  '%s(...) is deprecated in plain JavaScript React classes. %s',
                  info[0],
                  info[1]
                )

                return undefined
              },
            })
          }

          for (var fnName in deprecatedAPIs) {
            if (deprecatedAPIs.hasOwnProperty(fnName)) {
              defineDeprecationWarning(fnName, deprecatedAPIs[fnName])
            }
          }
        }

        function ComponentDummy() {}

        ComponentDummy.prototype = Component.prototype
        /**
         * Convenience component with default shallow equality check for sCU.
         */

        function PureComponent(props, context, updater) {
          this.props = props
          this.context = context // If a component has string refs, we will assign a different object later.

          this.refs = emptyObject
          this.updater = updater || ReactNoopUpdateQueue
        }

        var pureComponentPrototype = (PureComponent.prototype =
          new ComponentDummy())
        pureComponentPrototype.constructor = PureComponent // Avoid an extra prototype jump for these methods.

        _assign(pureComponentPrototype, Component.prototype)

        pureComponentPrototype.isPureReactComponent = true

        // an immutable object with a single mutable value
        function createRef() {
          var refObject = {
            current: null,
          }

          {
            Object.seal(refObject)
          }

          return refObject
        }

        function getWrappedName(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || ''
          return (
            outerType.displayName ||
            (functionName !== ''
              ? wrapperName + '(' + functionName + ')'
              : wrapperName)
          )
        }

        function getContextName(type) {
          return type.displayName || 'Context'
        }

        function getComponentName(type) {
          if (type == null) {
            // Host root, text node or just invalid type.
            return null
          }

          {
            if (typeof type.tag === 'number') {
              error(
                'Received an unexpected object in getComponentName(). ' +
                  'This is likely a bug in React. Please file an issue.'
              )
            }
          }

          if (typeof type === 'function') {
            return type.displayName || type.name || null
          }

          if (typeof type === 'string') {
            return type
          }

          switch (type) {
            case exports.Fragment:
              return 'Fragment'

            case REACT_PORTAL_TYPE:
              return 'Portal'

            case exports.Profiler:
              return 'Profiler'

            case exports.StrictMode:
              return 'StrictMode'

            case exports.Suspense:
              return 'Suspense'

            case REACT_SUSPENSE_LIST_TYPE:
              return 'SuspenseList'
          }

          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type
                return getContextName(context) + '.Consumer'

              case REACT_PROVIDER_TYPE:
                var provider = type
                return getContextName(provider._context) + '.Provider'

              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, 'ForwardRef')

              case REACT_MEMO_TYPE:
                return getComponentName(type.type)

              case REACT_BLOCK_TYPE:
                return getComponentName(type._render)

              case REACT_LAZY_TYPE: {
                var lazyComponent = type
                var payload = lazyComponent._payload
                var init = lazyComponent._init

                try {
                  return getComponentName(init(payload))
                } catch (x) {
                  return null
                }
              }
            }
          }

          return null
        }

        var hasOwnProperty = Object.prototype.hasOwnProperty
        var RESERVED_PROPS = {
          key: true,
          ref: true,
          __self: true,
          __source: true,
        }
        var specialPropKeyWarningShown,
          specialPropRefWarningShown,
          didWarnAboutStringRefs

        {
          didWarnAboutStringRefs = {}
        }

        function hasValidRef(config) {
          {
            if (hasOwnProperty.call(config, 'ref')) {
              var getter = Object.getOwnPropertyDescriptor(config, 'ref').get

              if (getter && getter.isReactWarning) {
                return false
              }
            }
          }

          return config.ref !== undefined
        }

        function hasValidKey(config) {
          {
            if (hasOwnProperty.call(config, 'key')) {
              var getter = Object.getOwnPropertyDescriptor(config, 'key').get

              if (getter && getter.isReactWarning) {
                return false
              }
            }
          }

          return config.key !== undefined
        }

        function defineKeyPropWarningGetter(props, displayName) {
          var warnAboutAccessingKey = function () {
            {
              if (!specialPropKeyWarningShown) {
                specialPropKeyWarningShown = true

                error(
                  '%s: `key` is not a prop. Trying to access it will result ' +
                    'in `undefined` being returned. If you need to access the same ' +
                    'value within the child component, you should pass it as a different ' +
                    'prop. (https://reactjs.org/link/special-props)',
                  displayName
                )
              }
            }
          }

          warnAboutAccessingKey.isReactWarning = true
          Object.defineProperty(props, 'key', {
            get: warnAboutAccessingKey,
            configurable: true,
          })
        }

        function defineRefPropWarningGetter(props, displayName) {
          var warnAboutAccessingRef = function () {
            {
              if (!specialPropRefWarningShown) {
                specialPropRefWarningShown = true

                error(
                  '%s: `ref` is not a prop. Trying to access it will result ' +
                    'in `undefined` being returned. If you need to access the same ' +
                    'value within the child component, you should pass it as a different ' +
                    'prop. (https://reactjs.org/link/special-props)',
                  displayName
                )
              }
            }
          }

          warnAboutAccessingRef.isReactWarning = true
          Object.defineProperty(props, 'ref', {
            get: warnAboutAccessingRef,
            configurable: true,
          })
        }

        function warnIfStringRefCannotBeAutoConverted(config) {
          {
            if (
              typeof config.ref === 'string' &&
              ReactCurrentOwner.current &&
              config.__self &&
              ReactCurrentOwner.current.stateNode !== config.__self
            ) {
              var componentName = getComponentName(
                ReactCurrentOwner.current.type
              )

              if (!didWarnAboutStringRefs[componentName]) {
                error(
                  'Component "%s" contains the string ref "%s". ' +
                    'Support for string refs will be removed in a future major release. ' +
                    'This case cannot be automatically converted to an arrow function. ' +
                    'We ask you to manually fix this case by using useRef() or createRef() instead. ' +
                    'Learn more about using refs safely here: ' +
                    'https://reactjs.org/link/strict-mode-string-ref',
                  componentName,
                  config.ref
                )

                didWarnAboutStringRefs[componentName] = true
              }
            }
          }
        }
        /**
         * Factory method to create a new React element. This no longer adheres to
         * the class pattern, so do not use new to call it. Also, instanceof check
         * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
         * if something is a React Element.
         *
         * @param {*} type
         * @param {*} props
         * @param {*} key
         * @param {string|object} ref
         * @param {*} owner
         * @param {*} self A *temporary* helper to detect places where `this` is
         * different from the `owner` when React.createElement is called, so that we
         * can warn. We want to get rid of owner and replace string `ref`s with arrow
         * functions, and as long as `this` and owner are the same, there will be no
         * change in behavior.
         * @param {*} source An annotation object (added by a transpiler or otherwise)
         * indicating filename, line number, and/or other information.
         * @internal
         */

        var ReactElement = function (
          type,
          key,
          ref,
          self,
          source,
          owner,
          props
        ) {
          var element = {
            // This tag allows us to uniquely identify this as a React Element
            $$typeof: REACT_ELEMENT_TYPE,
            // Built-in properties that belong on the element
            type: type,
            key: key,
            ref: ref,
            props: props,
            // Record the component responsible for creating this element.
            _owner: owner,
          }

          {
            // The validation flag is currently mutative. We put it on
            // an external backing store so that we can freeze the whole object.
            // This can be replaced with a WeakMap once they are implemented in
            // commonly used development environments.
            element._store = {} // To make comparing ReactElements easier for testing purposes, we make
            // the validation flag non-enumerable (where possible, which should
            // include every environment we run tests in), so the test framework
            // ignores it.

            Object.defineProperty(element._store, 'validated', {
              configurable: false,
              enumerable: false,
              writable: true,
              value: false,
            }) // self and source are DEV only properties.

            Object.defineProperty(element, '_self', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: self,
            }) // Two elements created in two different places should be considered
            // equal for testing purposes and therefore we hide it from enumeration.

            Object.defineProperty(element, '_source', {
              configurable: false,
              enumerable: false,
              writable: false,
              value: source,
            })

            if (Object.freeze) {
              Object.freeze(element.props)
              Object.freeze(element)
            }
          }

          return element
        }
        /**
         * Create and return a new ReactElement of the given type.
         * See https://reactjs.org/docs/react-api.html#createelement
         */

        function createElement(type, config, children) {
          var propName // Reserved names are extracted

          var props = {}
          var key = null
          var ref = null
          var self = null
          var source = null

          if (config != null) {
            if (hasValidRef(config)) {
              ref = config.ref

              {
                warnIfStringRefCannotBeAutoConverted(config)
              }
            }

            if (hasValidKey(config)) {
              key = '' + config.key
            }

            self = config.__self === undefined ? null : config.__self
            source = config.__source === undefined ? null : config.__source // Remaining properties are added to a new props object

            for (propName in config) {
              if (
                hasOwnProperty.call(config, propName) &&
                !RESERVED_PROPS.hasOwnProperty(propName)
              ) {
                props[propName] = config[propName]
              }
            }
          } // Children can be more than one argument, and those are transferred onto
          // the newly allocated props object.

          var childrenLength = arguments.length - 2

          if (childrenLength === 1) {
            props.children = children
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength)

            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2]
            }

            {
              if (Object.freeze) {
                Object.freeze(childArray)
              }
            }

            props.children = childArray
          } // Resolve default props

          if (type && type.defaultProps) {
            var defaultProps = type.defaultProps

            for (propName in defaultProps) {
              if (props[propName] === undefined) {
                props[propName] = defaultProps[propName]
              }
            }
          }

          {
            if (key || ref) {
              var displayName =
                typeof type === 'function'
                  ? type.displayName || type.name || 'Unknown'
                  : type

              if (key) {
                defineKeyPropWarningGetter(props, displayName)
              }

              if (ref) {
                defineRefPropWarningGetter(props, displayName)
              }
            }
          }

          return ReactElement(
            type,
            key,
            ref,
            self,
            source,
            ReactCurrentOwner.current,
            props
          )
        }
        function cloneAndReplaceKey(oldElement, newKey) {
          var newElement = ReactElement(
            oldElement.type,
            newKey,
            oldElement.ref,
            oldElement._self,
            oldElement._source,
            oldElement._owner,
            oldElement.props
          )
          return newElement
        }
        /**
         * Clone and return a new ReactElement using element as the starting point.
         * See https://reactjs.org/docs/react-api.html#cloneelement
         */

        function cloneElement(element, config, children) {
          if (!!(element === null || element === undefined)) {
            {
              throw Error(
                'React.cloneElement(...): The argument must be a React element, but you passed ' +
                  element +
                  '.'
              )
            }
          }

          var propName // Original props are copied

          var props = _assign({}, element.props) // Reserved names are extracted

          var key = element.key
          var ref = element.ref // Self is preserved since the owner is preserved.

          var self = element._self // Source is preserved since cloneElement is unlikely to be targeted by a
          // transpiler, and the original source is probably a better indicator of the
          // true owner.

          var source = element._source // Owner will be preserved, unless ref is overridden

          var owner = element._owner

          if (config != null) {
            if (hasValidRef(config)) {
              // Silently steal the ref from the parent.
              ref = config.ref
              owner = ReactCurrentOwner.current
            }

            if (hasValidKey(config)) {
              key = '' + config.key
            } // Remaining properties override existing props

            var defaultProps

            if (element.type && element.type.defaultProps) {
              defaultProps = element.type.defaultProps
            }

            for (propName in config) {
              if (
                hasOwnProperty.call(config, propName) &&
                !RESERVED_PROPS.hasOwnProperty(propName)
              ) {
                if (
                  config[propName] === undefined &&
                  defaultProps !== undefined
                ) {
                  // Resolve default props
                  props[propName] = defaultProps[propName]
                } else {
                  props[propName] = config[propName]
                }
              }
            }
          } // Children can be more than one argument, and those are transferred onto
          // the newly allocated props object.

          var childrenLength = arguments.length - 2

          if (childrenLength === 1) {
            props.children = children
          } else if (childrenLength > 1) {
            var childArray = Array(childrenLength)

            for (var i = 0; i < childrenLength; i++) {
              childArray[i] = arguments[i + 2]
            }

            props.children = childArray
          }

          return ReactElement(
            element.type,
            key,
            ref,
            self,
            source,
            owner,
            props
          )
        }
        /**
         * Verifies the object is a ReactElement.
         * See https://reactjs.org/docs/react-api.html#isvalidelement
         * @param {?object} object
         * @return {boolean} True if `object` is a ReactElement.
         * @final
         */

        function isValidElement(object) {
          return (
            typeof object === 'object' &&
            object !== null &&
            object.$$typeof === REACT_ELEMENT_TYPE
          )
        }

        var SEPARATOR = '.'
        var SUBSEPARATOR = ':'
        /**
         * Escape and wrap key so it is safe to use as a reactid
         *
         * @param {string} key to be escaped.
         * @return {string} the escaped key.
         */

        function escape(key) {
          var escapeRegex = /[=:]/g
          var escaperLookup = {
            '=': '=0',
            ':': '=2',
          }
          var escapedString = key.replace(escapeRegex, function (match) {
            return escaperLookup[match]
          })
          return '$' + escapedString
        }
        /**
         * TODO: Test that a single child and an array with one item have the same key
         * pattern.
         */

        var didWarnAboutMaps = false
        var userProvidedKeyEscapeRegex = /\/+/g

        function escapeUserProvidedKey(text) {
          return text.replace(userProvidedKeyEscapeRegex, '$&/')
        }
        /**
         * Generate a key string that identifies a element within a set.
         *
         * @param {*} element A element that could contain a manual key.
         * @param {number} index Index that is used if a manual key is not provided.
         * @return {string}
         */

        function getElementKey(element, index) {
          // Do some typechecking here since we call this blindly. We want to ensure
          // that we don't block potential future ES APIs.
          if (
            typeof element === 'object' &&
            element !== null &&
            element.key != null
          ) {
            // Explicit key
            return escape('' + element.key)
          } // Implicit key determined by the index in the set

          return index.toString(36)
        }

        function mapIntoArray(
          children,
          array,
          escapedPrefix,
          nameSoFar,
          callback
        ) {
          var type = typeof children

          if (type === 'undefined' || type === 'boolean') {
            // All of the above are perceived as null.
            children = null
          }

          var invokeCallback = false

          if (children === null) {
            invokeCallback = true
          } else {
            switch (type) {
              case 'string':
              case 'number':
                invokeCallback = true
                break

              case 'object':
                switch (children.$$typeof) {
                  case REACT_ELEMENT_TYPE:
                  case REACT_PORTAL_TYPE:
                    invokeCallback = true
                }
            }
          }

          if (invokeCallback) {
            var _child = children
            var mappedChild = callback(_child) // If it's the only child, treat the name as if it was wrapped in an array
            // so that it's consistent if the number of children grows:

            var childKey =
              nameSoFar === ''
                ? SEPARATOR + getElementKey(_child, 0)
                : nameSoFar

            if (Array.isArray(mappedChild)) {
              var escapedChildKey = ''

              if (childKey != null) {
                escapedChildKey = escapeUserProvidedKey(childKey) + '/'
              }

              mapIntoArray(
                mappedChild,
                array,
                escapedChildKey,
                '',
                function (c) {
                  return c
                }
              )
            } else if (mappedChild != null) {
              if (isValidElement(mappedChild)) {
                mappedChild = cloneAndReplaceKey(
                  mappedChild, // Keep both the (mapped) and old keys if they differ, just as
                  // traverseAllChildren used to do for objects as children
                  escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key &&
                    (!_child || _child.key !== mappedChild.key) // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      ? escapeUserProvidedKey('' + mappedChild.key) + '/'
                      : '') +
                    childKey
                )
              }

              array.push(mappedChild)
            }

            return 1
          }

          var child
          var nextName
          var subtreeCount = 0 // Count of children found in the current subtree.

          var nextNamePrefix =
            nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR

          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              child = children[i]
              nextName = nextNamePrefix + getElementKey(child, i)
              subtreeCount += mapIntoArray(
                child,
                array,
                escapedPrefix,
                nextName,
                callback
              )
            }
          } else {
            var iteratorFn = getIteratorFn(children)

            if (typeof iteratorFn === 'function') {
              var iterableChildren = children

              {
                // Warn about using Maps as children
                if (iteratorFn === iterableChildren.entries) {
                  if (!didWarnAboutMaps) {
                    warn(
                      'Using Maps as children is not supported. ' +
                        'Use an array of keyed ReactElements instead.'
                    )
                  }

                  didWarnAboutMaps = true
                }
              }

              var iterator = iteratorFn.call(iterableChildren)
              var step
              var ii = 0

              while (!(step = iterator.next()).done) {
                child = step.value
                nextName = nextNamePrefix + getElementKey(child, ii++)
                subtreeCount += mapIntoArray(
                  child,
                  array,
                  escapedPrefix,
                  nextName,
                  callback
                )
              }
            } else if (type === 'object') {
              var childrenString = '' + children

              {
                {
                  throw Error(
                    'Objects are not valid as a React child (found: ' +
                      (childrenString === '[object Object]'
                        ? 'object with keys {' +
                          Object.keys(children).join(', ') +
                          '}'
                        : childrenString) +
                      '). If you meant to render a collection of children, use an array instead.'
                  )
                }
              }
            }
          }

          return subtreeCount
        }

        /**
         * Maps children that are typically specified as `props.children`.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrenmap
         *
         * The provided mapFunction(child, index) will be called for each
         * leaf child.
         *
         * @param {?*} children Children tree container.
         * @param {function(*, int)} func The map function.
         * @param {*} context Context for mapFunction.
         * @return {object} Object containing the ordered map of results.
         */
        function mapChildren(children, func, context) {
          if (children == null) {
            return children
          }

          var result = []
          var count = 0
          mapIntoArray(children, result, '', '', function (child) {
            return func.call(context, child, count++)
          })
          return result
        }
        /**
         * Count the number of children that are typically specified as
         * `props.children`.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrencount
         *
         * @param {?*} children Children tree container.
         * @return {number} The number of children.
         */

        function countChildren(children) {
          var n = 0
          mapChildren(children, function () {
            n++ // Don't return anything
          })
          return n
        }

        /**
         * Iterates through children that are typically specified as `props.children`.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
         *
         * The provided forEachFunc(child, index) will be called for each
         * leaf child.
         *
         * @param {?*} children Children tree container.
         * @param {function(*, int)} forEachFunc
         * @param {*} forEachContext Context for forEachContext.
         */
        function forEachChildren(children, forEachFunc, forEachContext) {
          mapChildren(
            children,
            function () {
              forEachFunc.apply(this, arguments) // Don't return anything.
            },
            forEachContext
          )
        }
        /**
         * Flatten a children object (typically specified as `props.children`) and
         * return an array with appropriately re-keyed children.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
         */

        function toArray(children) {
          return (
            mapChildren(children, function (child) {
              return child
            }) || []
          )
        }
        /**
         * Returns the first child in a collection of children and verifies that there
         * is only one child in the collection.
         *
         * See https://reactjs.org/docs/react-api.html#reactchildrenonly
         *
         * The current implementation of this function assumes that a single child gets
         * passed without a wrapper, but the purpose of this helper function is to
         * abstract away the particular structure of children.
         *
         * @param {?object} children Child collection structure.
         * @return {ReactElement} The first and only `ReactElement` contained in the
         * structure.
         */

        function onlyChild(children) {
          if (!isValidElement(children)) {
            {
              throw Error(
                'React.Children.only expected to receive a single React element child.'
              )
            }
          }

          return children
        }

        function createContext(defaultValue, calculateChangedBits) {
          if (calculateChangedBits === undefined) {
            calculateChangedBits = null
          } else {
            {
              if (
                calculateChangedBits !== null &&
                typeof calculateChangedBits !== 'function'
              ) {
                error(
                  'createContext: Expected the optional second argument to be a ' +
                    'function. Instead received: %s',
                  calculateChangedBits
                )
              }
            }
          }

          var context = {
            $$typeof: REACT_CONTEXT_TYPE,
            _calculateChangedBits: calculateChangedBits,
            // As a workaround to support multiple concurrent renderers, we categorize
            // some renderers as primary and others as secondary. We only expect
            // there to be two concurrent renderers at most: React Native (primary) and
            // Fabric (secondary); React DOM (primary) and React ART (secondary).
            // Secondary renderers store their context values on separate fields.
            _currentValue: defaultValue,
            _currentValue2: defaultValue,
            // Used to track how many concurrent renderers this context currently
            // supports within in a single renderer. Such as parallel server rendering.
            _threadCount: 0,
            // These are circular
            Provider: null,
            Consumer: null,
          }
          context.Provider = {
            $$typeof: REACT_PROVIDER_TYPE,
            _context: context,
          }
          var hasWarnedAboutUsingNestedContextConsumers = false
          var hasWarnedAboutUsingConsumerProvider = false
          var hasWarnedAboutDisplayNameOnConsumer = false

          {
            // A separate object, but proxies back to the original context object for
            // backwards compatibility. It has a different $$typeof, so we can properly
            // warn for the incorrect usage of Context as a Consumer.
            var Consumer = {
              $$typeof: REACT_CONTEXT_TYPE,
              _context: context,
              _calculateChangedBits: context._calculateChangedBits,
            } // $FlowFixMe: Flow complains about not setting a value, which is intentional here

            Object.defineProperties(Consumer, {
              Provider: {
                get: function () {
                  if (!hasWarnedAboutUsingConsumerProvider) {
                    hasWarnedAboutUsingConsumerProvider = true

                    error(
                      'Rendering <Context.Consumer.Provider> is not supported and will be removed in ' +
                        'a future major release. Did you mean to render <Context.Provider> instead?'
                    )
                  }

                  return context.Provider
                },
                set: function (_Provider) {
                  context.Provider = _Provider
                },
              },
              _currentValue: {
                get: function () {
                  return context._currentValue
                },
                set: function (_currentValue) {
                  context._currentValue = _currentValue
                },
              },
              _currentValue2: {
                get: function () {
                  return context._currentValue2
                },
                set: function (_currentValue2) {
                  context._currentValue2 = _currentValue2
                },
              },
              _threadCount: {
                get: function () {
                  return context._threadCount
                },
                set: function (_threadCount) {
                  context._threadCount = _threadCount
                },
              },
              Consumer: {
                get: function () {
                  if (!hasWarnedAboutUsingNestedContextConsumers) {
                    hasWarnedAboutUsingNestedContextConsumers = true

                    error(
                      'Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' +
                        'a future major release. Did you mean to render <Context.Consumer> instead?'
                    )
                  }

                  return context.Consumer
                },
              },
              displayName: {
                get: function () {
                  return context.displayName
                },
                set: function (displayName) {
                  if (!hasWarnedAboutDisplayNameOnConsumer) {
                    warn(
                      'Setting `displayName` on Context.Consumer has no effect. ' +
                        "You should set it directly on the context with Context.displayName = '%s'.",
                      displayName
                    )

                    hasWarnedAboutDisplayNameOnConsumer = true
                  }
                },
              },
            }) // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

            context.Consumer = Consumer
          }

          {
            context._currentRenderer = null
            context._currentRenderer2 = null
          }

          return context
        }

        var Uninitialized = -1
        var Pending = 0
        var Resolved = 1
        var Rejected = 2

        function lazyInitializer(payload) {
          if (payload._status === Uninitialized) {
            var ctor = payload._result
            var thenable = ctor() // Transition to the next state.

            var pending = payload
            pending._status = Pending
            pending._result = thenable
            thenable.then(
              function (moduleObject) {
                if (payload._status === Pending) {
                  var defaultExport = moduleObject.default

                  {
                    if (defaultExport === undefined) {
                      error(
                        'lazy: Expected the result of a dynamic import() call. ' +
                          'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
                          'const MyComponent = lazy(() => imp' +
                          "ort('./MyComponent'))",
                        moduleObject
                      )
                    }
                  } // Transition to the next state.

                  var resolved = payload
                  resolved._status = Resolved
                  resolved._result = defaultExport
                }
              },
              function (error) {
                if (payload._status === Pending) {
                  // Transition to the next state.
                  var rejected = payload
                  rejected._status = Rejected
                  rejected._result = error
                }
              }
            )
          }

          if (payload._status === Resolved) {
            return payload._result
          } else {
            throw payload._result
          }
        }

        function lazy(ctor) {
          var payload = {
            // We use these fields to store the result.
            _status: -1,
            _result: ctor,
          }
          var lazyType = {
            $$typeof: REACT_LAZY_TYPE,
            _payload: payload,
            _init: lazyInitializer,
          }

          {
            // In production, this would just set it on the object.
            var defaultProps
            var propTypes // $FlowFixMe

            Object.defineProperties(lazyType, {
              defaultProps: {
                configurable: true,
                get: function () {
                  return defaultProps
                },
                set: function (newDefaultProps) {
                  error(
                    'React.lazy(...): It is not supported to assign `defaultProps` to ' +
                      'a lazy component import. Either specify them where the component ' +
                      'is defined, or create a wrapping component around it.'
                  )

                  defaultProps = newDefaultProps // Match production behavior more closely:
                  // $FlowFixMe

                  Object.defineProperty(lazyType, 'defaultProps', {
                    enumerable: true,
                  })
                },
              },
              propTypes: {
                configurable: true,
                get: function () {
                  return propTypes
                },
                set: function (newPropTypes) {
                  error(
                    'React.lazy(...): It is not supported to assign `propTypes` to ' +
                      'a lazy component import. Either specify them where the component ' +
                      'is defined, or create a wrapping component around it.'
                  )

                  propTypes = newPropTypes // Match production behavior more closely:
                  // $FlowFixMe

                  Object.defineProperty(lazyType, 'propTypes', {
                    enumerable: true,
                  })
                },
              },
            })
          }

          return lazyType
        }

        function forwardRef(render) {
          {
            if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
              error(
                'forwardRef requires a render function but received a `memo` ' +
                  'component. Instead of forwardRef(memo(...)), use ' +
                  'memo(forwardRef(...)).'
              )
            } else if (typeof render !== 'function') {
              error(
                'forwardRef requires a render function but was given %s.',
                render === null ? 'null' : typeof render
              )
            } else {
              if (render.length !== 0 && render.length !== 2) {
                error(
                  'forwardRef render functions accept exactly two parameters: props and ref. %s',
                  render.length === 1
                    ? 'Did you forget to use the ref parameter?'
                    : 'Any additional parameter will be undefined.'
                )
              }
            }

            if (render != null) {
              if (render.defaultProps != null || render.propTypes != null) {
                error(
                  'forwardRef render functions do not support propTypes or defaultProps. ' +
                    'Did you accidentally pass a React component?'
                )
              }
            }
          }

          var elementType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: render,
          }

          {
            var ownName
            Object.defineProperty(elementType, 'displayName', {
              enumerable: false,
              configurable: true,
              get: function () {
                return ownName
              },
              set: function (name) {
                ownName = name

                if (render.displayName == null) {
                  render.displayName = name
                }
              },
            })
          }

          return elementType
        }

        // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

        var enableScopeAPI = false // Experimental Create Event Handle API.

        function isValidElementType(type) {
          if (typeof type === 'string' || typeof type === 'function') {
            return true
          } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).

          if (
            type === exports.Fragment ||
            type === exports.Profiler ||
            type === REACT_DEBUG_TRACING_MODE_TYPE ||
            type === exports.StrictMode ||
            type === exports.Suspense ||
            type === REACT_SUSPENSE_LIST_TYPE ||
            type === REACT_LEGACY_HIDDEN_TYPE ||
            enableScopeAPI
          ) {
            return true
          }

          if (typeof type === 'object' && type !== null) {
            if (
              type.$$typeof === REACT_LAZY_TYPE ||
              type.$$typeof === REACT_MEMO_TYPE ||
              type.$$typeof === REACT_PROVIDER_TYPE ||
              type.$$typeof === REACT_CONTEXT_TYPE ||
              type.$$typeof === REACT_FORWARD_REF_TYPE ||
              type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
              type.$$typeof === REACT_BLOCK_TYPE ||
              type[0] === REACT_SERVER_BLOCK_TYPE
            ) {
              return true
            }
          }

          return false
        }

        function memo(type, compare) {
          {
            if (!isValidElementType(type)) {
              error(
                'memo: The first argument must be a component. Instead ' +
                  'received: %s',
                type === null ? 'null' : typeof type
              )
            }
          }

          var elementType = {
            $$typeof: REACT_MEMO_TYPE,
            type: type,
            compare: compare === undefined ? null : compare,
          }

          {
            var ownName
            Object.defineProperty(elementType, 'displayName', {
              enumerable: false,
              configurable: true,
              get: function () {
                return ownName
              },
              set: function (name) {
                ownName = name

                if (type.displayName == null) {
                  type.displayName = name
                }
              },
            })
          }

          return elementType
        }

        function resolveDispatcher() {
          var dispatcher = ReactCurrentDispatcher.current

          if (!(dispatcher !== null)) {
            {
              throw Error(
                'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.'
              )
            }
          }

          return dispatcher
        }

        function useContext(Context, unstable_observedBits) {
          var dispatcher = resolveDispatcher()

          {
            if (unstable_observedBits !== undefined) {
              error(
                'useContext() second argument is reserved for future ' +
                  'use in React. Passing it is not supported. ' +
                  'You passed: %s.%s',
                unstable_observedBits,
                typeof unstable_observedBits === 'number' &&
                  Array.isArray(arguments[2])
                  ? '\n\nDid you call array.map(useContext)? ' +
                      'Calling Hooks inside a loop is not supported. ' +
                      'Learn more at https://reactjs.org/link/rules-of-hooks'
                  : ''
              )
            } // TODO: add a more generic warning for invalid values.

            if (Context._context !== undefined) {
              var realContext = Context._context // Don't deduplicate because this legitimately causes bugs
              // and nobody should be using this in existing code.

              if (realContext.Consumer === Context) {
                error(
                  'Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' +
                    'removed in a future major release. Did you mean to call useContext(Context) instead?'
                )
              } else if (realContext.Provider === Context) {
                error(
                  'Calling useContext(Context.Provider) is not supported. ' +
                    'Did you mean to call useContext(Context) instead?'
                )
              }
            }
          }

          return dispatcher.useContext(Context, unstable_observedBits)
        }
        function useState(initialState) {
          var dispatcher = resolveDispatcher()
          return dispatcher.useState(initialState)
        }
        function useReducer(reducer, initialArg, init) {
          var dispatcher = resolveDispatcher()
          return dispatcher.useReducer(reducer, initialArg, init)
        }
        function useRef(initialValue) {
          var dispatcher = resolveDispatcher()
          return dispatcher.useRef(initialValue)
        }
        function useEffect(create, deps) {
          var dispatcher = resolveDispatcher()
          return dispatcher.useEffect(create, deps)
        }
        function useLayoutEffect(create, deps) {
          var dispatcher = resolveDispatcher()
          return dispatcher.useLayoutEffect(create, deps)
        }
        function useCallback(callback, deps) {
          var dispatcher = resolveDispatcher()
          return dispatcher.useCallback(callback, deps)
        }
        function useMemo(create, deps) {
          var dispatcher = resolveDispatcher()
          return dispatcher.useMemo(create, deps)
        }
        function useImperativeHandle(ref, create, deps) {
          var dispatcher = resolveDispatcher()
          return dispatcher.useImperativeHandle(ref, create, deps)
        }
        function useDebugValue(value, formatterFn) {
          {
            var dispatcher = resolveDispatcher()
            return dispatcher.useDebugValue(value, formatterFn)
          }
        }

        // Helpers to patch console.logs to avoid logging during side-effect free
        // replaying on render function. This currently only patches the object
        // lazily which won't cover if the log function was extracted eagerly.
        // We could also eagerly patch the method.
        var disabledDepth = 0
        var prevLog
        var prevInfo
        var prevWarn
        var prevError
        var prevGroup
        var prevGroupCollapsed
        var prevGroupEnd

        function disabledLog() {}

        disabledLog.__reactDisabledLog = true
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              prevLog = console.log
              prevInfo = console.info
              prevWarn = console.warn
              prevError = console.error
              prevGroup = console.group
              prevGroupCollapsed = console.groupCollapsed
              prevGroupEnd = console.groupEnd // https://github.com/facebook/react/issues/19099

              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true,
              } // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props,
              })
              /* eslint-enable react-internal/no-production-logging */
            }

            disabledDepth++
          }
        }
        function reenableLogs() {
          {
            disabledDepth--

            if (disabledDepth === 0) {
              /* eslint-disable react-internal/no-production-logging */
              var props = {
                configurable: true,
                enumerable: true,
                writable: true,
              } // $FlowFixMe Flow thinks console is immutable.

              Object.defineProperties(console, {
                log: _assign({}, props, {
                  value: prevLog,
                }),
                info: _assign({}, props, {
                  value: prevInfo,
                }),
                warn: _assign({}, props, {
                  value: prevWarn,
                }),
                error: _assign({}, props, {
                  value: prevError,
                }),
                group: _assign({}, props, {
                  value: prevGroup,
                }),
                groupCollapsed: _assign({}, props, {
                  value: prevGroupCollapsed,
                }),
                groupEnd: _assign({}, props, {
                  value: prevGroupEnd,
                }),
              })
              /* eslint-enable react-internal/no-production-logging */
            }

            if (disabledDepth < 0) {
              error(
                'disabledDepth fell below zero. ' +
                  'This is a bug in React. Please file an issue.'
              )
            }
          }
        }

        var ReactCurrentDispatcher$1 =
          ReactSharedInternals.ReactCurrentDispatcher
        var prefix
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === undefined) {
              // Extract the VM specific prefix used by each line.
              try {
                throw Error()
              } catch (x) {
                var match = x.stack.trim().match(/\n( *(at )?)/)
                prefix = (match && match[1]) || ''
              }
            } // We use the prefix to ensure our stacks line up with native stack frames.

            return '\n' + prefix + name
          }
        }
        var reentry = false
        var componentFrameCache

        {
          var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map
          componentFrameCache = new PossiblyWeakMap()
        }

        function describeNativeComponentFrame(fn, construct) {
          // If something asked for a stack inside a fake render, it should get ignored.
          if (!fn || reentry) {
            return ''
          }

          {
            var frame = componentFrameCache.get(fn)

            if (frame !== undefined) {
              return frame
            }
          }

          var control
          reentry = true
          var previousPrepareStackTrace = Error.prepareStackTrace // $FlowFixMe It does accept undefined.

          Error.prepareStackTrace = undefined
          var previousDispatcher

          {
            previousDispatcher = ReactCurrentDispatcher$1.current // Set the dispatcher in DEV because this might be call in the render function
            // for warnings.

            ReactCurrentDispatcher$1.current = null
            disableLogs()
          }

          try {
            // This should throw.
            if (construct) {
              // Something should be setting the props in the constructor.
              var Fake = function () {
                throw Error()
              } // $FlowFixMe

              Object.defineProperty(Fake.prototype, 'props', {
                set: function () {
                  // We use a throwing setter instead of frozen or non-writable props
                  // because that won't throw in a non-strict mode function.
                  throw Error()
                },
              })

              if (typeof Reflect === 'object' && Reflect.construct) {
                // We construct a different control for this case to include any extra
                // frames added by the construct call.
                try {
                  Reflect.construct(Fake, [])
                } catch (x) {
                  control = x
                }

                Reflect.construct(fn, [], Fake)
              } else {
                try {
                  Fake.call()
                } catch (x) {
                  control = x
                }

                fn.call(Fake.prototype)
              }
            } else {
              try {
                throw Error()
              } catch (x) {
                control = x
              }

              fn()
            }
          } catch (sample) {
            // This is inlined manually because closure doesn't do it for us.
            if (sample && control && typeof sample.stack === 'string') {
              // This extracts the first frame from the sample that isn't also in the control.
              // Skipping one frame that we assume is the frame that calls the two.
              var sampleLines = sample.stack.split('\n')
              var controlLines = control.stack.split('\n')
              var s = sampleLines.length - 1
              var c = controlLines.length - 1

              while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                // We expect at least one stack frame to be shared.
                // Typically this will be the root most one. However, stack frames may be
                // cut off due to maximum stack limits. In this case, one maybe cut off
                // earlier than the other. We assume that the sample is longer or the same
                // and there for cut off earlier. So we should find the root most frame in
                // the sample somewhere in the control.
                c--
              }

              for (; s >= 1 && c >= 0; s--, c--) {
                // Next we find the first one that isn't the same which should be the
                // frame that called our sample function and the control.
                if (sampleLines[s] !== controlLines[c]) {
                  // In V8, the first line is describing the message but other VMs don't.
                  // If we're about to return the first line, and the control is also on the same
                  // line, that's a pretty good indicator that our sample threw at same line as
                  // the control. I.e. before we entered the sample frame. So we ignore this result.
                  // This can happen if you passed a class to function component, or non-function.
                  if (s !== 1 || c !== 1) {
                    do {
                      s--
                      c-- // We may still have similar intermediate frames from the construct call.
                      // The next one that isn't the same should be our match though.

                      if (c < 0 || sampleLines[s] !== controlLines[c]) {
                        // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                        var _frame =
                          '\n' + sampleLines[s].replace(' at new ', ' at ')

                        {
                          if (typeof fn === 'function') {
                            componentFrameCache.set(fn, _frame)
                          }
                        } // Return the line we found.

                        return _frame
                      }
                    } while (s >= 1 && c >= 0)
                  }

                  break
                }
              }
            }
          } finally {
            reentry = false

            {
              ReactCurrentDispatcher$1.current = previousDispatcher
              reenableLogs()
            }

            Error.prepareStackTrace = previousPrepareStackTrace
          } // Fallback to just using the name if we couldn't make it throw.

          var name = fn ? fn.displayName || fn.name : ''
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : ''

          {
            if (typeof fn === 'function') {
              componentFrameCache.set(fn, syntheticFrame)
            }
          }

          return syntheticFrame
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false)
          }
        }

        function shouldConstruct(Component) {
          var prototype = Component.prototype
          return !!(prototype && prototype.isReactComponent)
        }

        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return ''
          }

          if (typeof type === 'function') {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type))
            }
          }

          if (typeof type === 'string') {
            return describeBuiltInComponentFrame(type)
          }

          switch (type) {
            case exports.Suspense:
              return describeBuiltInComponentFrame('Suspense')

            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame('SuspenseList')
          }

          if (typeof type === 'object') {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render)

              case REACT_MEMO_TYPE:
                // Memo may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(
                  type.type,
                  source,
                  ownerFn
                )

              case REACT_BLOCK_TYPE:
                return describeFunctionComponentFrame(type._render)

              case REACT_LAZY_TYPE: {
                var lazyComponent = type
                var payload = lazyComponent._payload
                var init = lazyComponent._init

                try {
                  // Lazy may contain any component type so we recursively resolve it.
                  return describeUnknownElementTypeFrameInDEV(
                    init(payload),
                    source,
                    ownerFn
                  )
                } catch (x) {}
              }
            }
          }

          return ''
        }

        var loggedTypeFailures = {}
        var ReactDebugCurrentFrame$1 =
          ReactSharedInternals.ReactDebugCurrentFrame

        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null
              )
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack)
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null)
            }
          }
        }

        function checkPropTypes(
          typeSpecs,
          values,
          location,
          componentName,
          element
        ) {
          {
            // $FlowFixMe This is okay but Flow doesn't know it.
            var has = Function.call.bind(Object.prototype.hasOwnProperty)

            for (var typeSpecName in typeSpecs) {
              if (has(typeSpecs, typeSpecName)) {
                var error$1 = void 0 // Prop type validation may throw. In case they do, we don't want to
                // fail the render phase where it didn't fail before. So we log it.
                // After these have been cleaned up, we'll let them throw.

                try {
                  // This is intentionally an invariant that gets caught. It's the same
                  // behavior as without this statement except with a better message.
                  if (typeof typeSpecs[typeSpecName] !== 'function') {
                    var err = Error(
                      (componentName || 'React class') +
                        ': ' +
                        location +
                        ' type `' +
                        typeSpecName +
                        '` is invalid; ' +
                        'it must be a function, usually from the `prop-types` package, but received `' +
                        typeof typeSpecs[typeSpecName] +
                        '`.' +
                        'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
                    )
                    err.name = 'Invariant Violation'
                    throw err
                  }

                  error$1 = typeSpecs[typeSpecName](
                    values,
                    typeSpecName,
                    componentName,
                    location,
                    null,
                    'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'
                  )
                } catch (ex) {
                  error$1 = ex
                }

                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element)

                  error(
                    '%s: type specification of %s' +
                      ' `%s` is invalid; the type checker ' +
                      'function must return `null` or an `Error` but returned a %s. ' +
                      'You may have forgotten to pass an argument to the type checker ' +
                      'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                      'shape all require an argument).',
                    componentName || 'React class',
                    location,
                    typeSpecName,
                    typeof error$1
                  )

                  setCurrentlyValidatingElement(null)
                }

                if (
                  error$1 instanceof Error &&
                  !(error$1.message in loggedTypeFailures)
                ) {
                  // Only monitor this failure once because there tends to be a lot of the
                  // same error.
                  loggedTypeFailures[error$1.message] = true
                  setCurrentlyValidatingElement(element)

                  error('Failed %s type: %s', location, error$1.message)

                  setCurrentlyValidatingElement(null)
                }
              }
            }
          }
        }

        function setCurrentlyValidatingElement$1(element) {
          {
            if (element) {
              var owner = element._owner
              var stack = describeUnknownElementTypeFrameInDEV(
                element.type,
                element._source,
                owner ? owner.type : null
              )
              setExtraStackFrame(stack)
            } else {
              setExtraStackFrame(null)
            }
          }
        }

        var propTypesMisspellWarningShown

        {
          propTypesMisspellWarningShown = false
        }

        function getDeclarationErrorAddendum() {
          if (ReactCurrentOwner.current) {
            var name = getComponentName(ReactCurrentOwner.current.type)

            if (name) {
              return '\n\nCheck the render method of `' + name + '`.'
            }
          }

          return ''
        }

        function getSourceInfoErrorAddendum(source) {
          if (source !== undefined) {
            var fileName = source.fileName.replace(/^.*[\\\/]/, '')
            var lineNumber = source.lineNumber
            return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.'
          }

          return ''
        }

        function getSourceInfoErrorAddendumForProps(elementProps) {
          if (elementProps !== null && elementProps !== undefined) {
            return getSourceInfoErrorAddendum(elementProps.__source)
          }

          return ''
        }
        /**
         * Warn if there's no key explicitly set on dynamic arrays of children or
         * object keys are not valid. This allows us to keep track of children between
         * updates.
         */

        var ownerHasKeyUseWarning = {}

        function getCurrentComponentErrorInfo(parentType) {
          var info = getDeclarationErrorAddendum()

          if (!info) {
            var parentName =
              typeof parentType === 'string'
                ? parentType
                : parentType.displayName || parentType.name

            if (parentName) {
              info =
                '\n\nCheck the top-level render call using <' +
                parentName +
                '>.'
            }
          }

          return info
        }
        /**
         * Warn if the element doesn't have an explicit key assigned to it.
         * This element is in an array. The array could grow and shrink or be
         * reordered. All children that haven't already been validated are required to
         * have a "key" property assigned to it. Error statuses are cached so a warning
         * will only be shown once.
         *
         * @internal
         * @param {ReactElement} element Element that requires a key.
         * @param {*} parentType element's parent's type.
         */

        function validateExplicitKey(element, parentType) {
          if (
            !element._store ||
            element._store.validated ||
            element.key != null
          ) {
            return
          }

          element._store.validated = true
          var currentComponentErrorInfo =
            getCurrentComponentErrorInfo(parentType)

          if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
            return
          }

          ownerHasKeyUseWarning[currentComponentErrorInfo] = true // Usually the current owner is the offender, but if it accepts children as a
          // property, it may be the creator of the child that's responsible for
          // assigning it a key.

          var childOwner = ''

          if (
            element &&
            element._owner &&
            element._owner !== ReactCurrentOwner.current
          ) {
            // Give the component that originally created this child.
            childOwner =
              ' It was passed a child from ' +
              getComponentName(element._owner.type) +
              '.'
          }

          {
            setCurrentlyValidatingElement$1(element)

            error(
              'Each child in a list should have a unique "key" prop.' +
                '%s%s See https://reactjs.org/link/warning-keys for more information.',
              currentComponentErrorInfo,
              childOwner
            )

            setCurrentlyValidatingElement$1(null)
          }
        }
        /**
         * Ensure that every element either is passed in a static location, in an
         * array with an explicit keys property defined, or in an object literal
         * with valid key property.
         *
         * @internal
         * @param {ReactNode} node Statically passed child of any type.
         * @param {*} parentType node's parent's type.
         */

        function validateChildKeys(node, parentType) {
          if (typeof node !== 'object') {
            return
          }

          if (Array.isArray(node)) {
            for (var i = 0; i < node.length; i++) {
              var child = node[i]

              if (isValidElement(child)) {
                validateExplicitKey(child, parentType)
              }
            }
          } else if (isValidElement(node)) {
            // This element was passed in a valid location.
            if (node._store) {
              node._store.validated = true
            }
          } else if (node) {
            var iteratorFn = getIteratorFn(node)

            if (typeof iteratorFn === 'function') {
              // Entry iterators used to provide implicit keys,
              // but now we print a separate warning for them later.
              if (iteratorFn !== node.entries) {
                var iterator = iteratorFn.call(node)
                var step

                while (!(step = iterator.next()).done) {
                  if (isValidElement(step.value)) {
                    validateExplicitKey(step.value, parentType)
                  }
                }
              }
            }
          }
        }
        /**
         * Given an element, validate that its props follow the propTypes definition,
         * provided by the type.
         *
         * @param {ReactElement} element
         */

        function validatePropTypes(element) {
          {
            var type = element.type

            if (
              type === null ||
              type === undefined ||
              typeof type === 'string'
            ) {
              return
            }

            var propTypes

            if (typeof type === 'function') {
              propTypes = type.propTypes
            } else if (
              typeof type === 'object' &&
              (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
                // Inner props are checked in the reconciler.
                type.$$typeof === REACT_MEMO_TYPE)
            ) {
              propTypes = type.propTypes
            } else {
              return
            }

            if (propTypes) {
              // Intentionally inside to avoid triggering lazy initializers:
              var name = getComponentName(type)
              checkPropTypes(propTypes, element.props, 'prop', name, element)
            } else if (
              type.PropTypes !== undefined &&
              !propTypesMisspellWarningShown
            ) {
              propTypesMisspellWarningShown = true // Intentionally inside to avoid triggering lazy initializers:

              var _name = getComponentName(type)

              error(
                'Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?',
                _name || 'Unknown'
              )
            }

            if (
              typeof type.getDefaultProps === 'function' &&
              !type.getDefaultProps.isReactClassApproved
            ) {
              error(
                'getDefaultProps is only used on classic React.createClass ' +
                  'definitions. Use a static property named `defaultProps` instead.'
              )
            }
          }
        }
        /**
         * Given a fragment, validate that it can only be provided with fragment props
         * @param {ReactElement} fragment
         */

        function validateFragmentProps(fragment) {
          {
            var keys = Object.keys(fragment.props)

            for (var i = 0; i < keys.length; i++) {
              var key = keys[i]

              if (key !== 'children' && key !== 'key') {
                setCurrentlyValidatingElement$1(fragment)

                error(
                  'Invalid prop `%s` supplied to `React.Fragment`. ' +
                    'React.Fragment can only have `key` and `children` props.',
                  key
                )

                setCurrentlyValidatingElement$1(null)
                break
              }
            }

            if (fragment.ref !== null) {
              setCurrentlyValidatingElement$1(fragment)

              error('Invalid attribute `ref` supplied to `React.Fragment`.')

              setCurrentlyValidatingElement$1(null)
            }
          }
        }
        function createElementWithValidation(type, props, children) {
          var validType = isValidElementType(type) // We warn in this case but don't throw. We expect the element creation to
          // succeed and there will likely be errors in render.

          if (!validType) {
            var info = ''

            if (
              type === undefined ||
              (typeof type === 'object' &&
                type !== null &&
                Object.keys(type).length === 0)
            ) {
              info +=
                ' You likely forgot to export your component from the file ' +
                "it's defined in, or you might have mixed up default and named imports."
            }

            var sourceInfo = getSourceInfoErrorAddendumForProps(props)

            if (sourceInfo) {
              info += sourceInfo
            } else {
              info += getDeclarationErrorAddendum()
            }

            var typeString

            if (type === null) {
              typeString = 'null'
            } else if (Array.isArray(type)) {
              typeString = 'array'
            } else if (
              type !== undefined &&
              type.$$typeof === REACT_ELEMENT_TYPE
            ) {
              typeString =
                '<' + (getComponentName(type.type) || 'Unknown') + ' />'
              info =
                ' Did you accidentally export a JSX literal instead of a component?'
            } else {
              typeString = typeof type
            }

            {
              error(
                'React.createElement: type is invalid -- expected a string (for ' +
                  'built-in components) or a class/function (for composite ' +
                  'components) but got: %s.%s',
                typeString,
                info
              )
            }
          }

          var element = createElement.apply(this, arguments) // The result can be nullish if a mock or a custom function is used.
          // TODO: Drop this when these are no longer allowed as the type argument.

          if (element == null) {
            return element
          } // Skip key warning if the type isn't valid since our key validation logic
          // doesn't expect a non-string/function type and can throw confusing errors.
          // We don't want exception behavior to differ between dev and prod.
          // (Rendering will throw with a helpful message and as soon as the type is
          // fixed, the key warnings will appear.)

          if (validType) {
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], type)
            }
          }

          if (type === exports.Fragment) {
            validateFragmentProps(element)
          } else {
            validatePropTypes(element)
          }

          return element
        }
        var didWarnAboutDeprecatedCreateFactory = false
        function createFactoryWithValidation(type) {
          var validatedFactory = createElementWithValidation.bind(null, type)
          validatedFactory.type = type

          {
            if (!didWarnAboutDeprecatedCreateFactory) {
              didWarnAboutDeprecatedCreateFactory = true

              warn(
                'React.createFactory() is deprecated and will be removed in ' +
                  'a future major release. Consider using JSX ' +
                  'or use React.createElement() directly instead.'
              )
            } // Legacy hook: remove it

            Object.defineProperty(validatedFactory, 'type', {
              enumerable: false,
              get: function () {
                warn(
                  'Factory.type is deprecated. Access the class directly ' +
                    'before passing it to createFactory.'
                )

                Object.defineProperty(this, 'type', {
                  value: type,
                })
                return type
              },
            })
          }

          return validatedFactory
        }
        function cloneElementWithValidation(element, props, children) {
          var newElement = cloneElement.apply(this, arguments)

          for (var i = 2; i < arguments.length; i++) {
            validateChildKeys(arguments[i], newElement.type)
          }

          validatePropTypes(newElement)
          return newElement
        }

        {
          try {
            var frozenObject = Object.freeze({})
            /* eslint-disable no-new */

            new Map([[frozenObject, null]])
            new Set([frozenObject])
            /* eslint-enable no-new */
          } catch (e) {}
        }

        var createElement$1 = createElementWithValidation
        var cloneElement$1 = cloneElementWithValidation
        var createFactory = createFactoryWithValidation
        var Children = {
          map: mapChildren,
          forEach: forEachChildren,
          count: countChildren,
          toArray: toArray,
          only: onlyChild,
        }

        exports.Children = Children
        exports.Component = Component
        exports.PureComponent = PureComponent
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED =
          ReactSharedInternals
        exports.cloneElement = cloneElement$1
        exports.createContext = createContext
        exports.createElement = createElement$1
        exports.createFactory = createFactory
        exports.createRef = createRef
        exports.forwardRef = forwardRef
        exports.isValidElement = isValidElement
        exports.lazy = lazy
        exports.memo = memo
        exports.useCallback = useCallback
        exports.useContext = useContext
        exports.useDebugValue = useDebugValue
        exports.useEffect = useEffect
        exports.useImperativeHandle = useImperativeHandle
        exports.useLayoutEffect = useLayoutEffect
        exports.useMemo = useMemo
        exports.useReducer = useReducer
        exports.useRef = useRef
        exports.useState = useState
        exports.version = ReactVersion
      })()
    }
  })(react_development)

  ;(function (module) {
    {
      module.exports = react_development
    }
  })(react)

  var React = /*@__PURE__*/ getDefaultExportFromCjs(reactExports)

  function _extends() {
    _extends = Object.assign
      ? Object.assign.bind()
      : function (target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i]
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key]
              }
            }
          }
          return target
        }
    return _extends.apply(this, arguments)
  }

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var invariant = function (condition, format, a, b, c, d, e, f) {
    {
      if (format === undefined) {
        throw new Error('invariant requires an error message argument')
      }
    }

    if (!condition) {
      var error
      if (format === undefined) {
        error = new Error(
          'Minified exception occurred; use the non-minified dev environment ' +
            'for the full error message and additional helpful warnings.'
        )
      } else {
        var args = [a, b, c, d, e, f]
        var argIndex = 0
        error = new Error(
          format.replace(/%s/g, function () {
            return args[argIndex++]
          })
        )
        error.name = 'Invariant Violation'
      }

      error.framesToPop = 1 // we don't care about invariant's own frame
      throw error
    }
  }

  var invariant_1 = invariant

  var noop$1 = function noop() {}

  function readOnlyPropType(handler, name) {
    return function (props, propName) {
      if (props[propName] !== undefined) {
        if (!props[handler]) {
          return new Error(
            'You have provided a `' +
              propName +
              '` prop to `' +
              name +
              '` ' +
              ('without an `' +
                handler +
                '` handler prop. This will render a read-only field. ') +
              ('If the field should be mutable use `' +
                defaultKey(propName) +
                '`. ') +
              ('Otherwise, set `' + handler + '`.')
          )
        }
      }
    }
  }

  function uncontrolledPropTypes(controlledValues, displayName) {
    var propTypes = {}
    Object.keys(controlledValues).forEach(function (prop) {
      // add default propTypes for folks that use runtime checks
      propTypes[defaultKey(prop)] = noop$1

      {
        var handler = controlledValues[prop]
        !(typeof handler === 'string' && handler.trim().length)
          ? invariant_1(
              false,
              'Uncontrollable - [%s]: the prop `%s` needs a valid handler key name in order to make it uncontrollable',
              displayName,
              prop
            )
          : void 0
        propTypes[prop] = readOnlyPropType(handler, displayName)
      }
    })
    return propTypes
  }
  function isProp(props, prop) {
    return props[prop] !== undefined
  }
  function defaultKey(key) {
    return 'default' + key.charAt(0).toUpperCase() + key.substr(1)
  }
  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   */

  function canAcceptRef(component) {
    return (
      !!component &&
      (typeof component !== 'function' ||
        (component.prototype && component.prototype.isReactComponent))
    )
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype)
    subClass.prototype.constructor = subClass
    _setPrototypeOf(subClass, superClass)
  }

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  function componentWillMount() {
    // Call this.constructor.gDSFP to support sub-classes.
    var state = this.constructor.getDerivedStateFromProps(
      this.props,
      this.state
    )
    if (state !== null && state !== undefined) {
      this.setState(state)
    }
  }

  function componentWillReceiveProps(nextProps) {
    // Call this.constructor.gDSFP to support sub-classes.
    // Use the setState() updater to ensure state isn't stale in certain edge cases.
    function updater(prevState) {
      var state = this.constructor.getDerivedStateFromProps(
        nextProps,
        prevState
      )
      return state !== null && state !== undefined ? state : null
    }
    // Binding "this" is important for shallow renderer support.
    this.setState(updater.bind(this))
  }

  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props
      var prevState = this.state
      this.props = nextProps
      this.state = nextState
      this.__reactInternalSnapshotFlag = true
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
        prevProps,
        prevState
      )
    } finally {
      this.props = prevProps
      this.state = prevState
    }
  }

  // React may warn about cWM/cWRP/cWU methods being deprecated.
  // Add a flag to suppress these warnings for this special case.
  componentWillMount.__suppressDeprecationWarning = true
  componentWillReceiveProps.__suppressDeprecationWarning = true
  componentWillUpdate.__suppressDeprecationWarning = true

  function polyfill(Component) {
    var prototype = Component.prototype

    if (!prototype || !prototype.isReactComponent) {
      throw new Error('Can only polyfill class components')
    }

    if (
      typeof Component.getDerivedStateFromProps !== 'function' &&
      typeof prototype.getSnapshotBeforeUpdate !== 'function'
    ) {
      return Component
    }

    // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Error if any of these lifecycles are present,
    // Because they would work differently between older and newer (16.3+) versions of React.
    var foundWillMountName = null
    var foundWillReceivePropsName = null
    var foundWillUpdateName = null
    if (typeof prototype.componentWillMount === 'function') {
      foundWillMountName = 'componentWillMount'
    } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
      foundWillMountName = 'UNSAFE_componentWillMount'
    }
    if (typeof prototype.componentWillReceiveProps === 'function') {
      foundWillReceivePropsName = 'componentWillReceiveProps'
    } else if (
      typeof prototype.UNSAFE_componentWillReceiveProps === 'function'
    ) {
      foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps'
    }
    if (typeof prototype.componentWillUpdate === 'function') {
      foundWillUpdateName = 'componentWillUpdate'
    } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
      foundWillUpdateName = 'UNSAFE_componentWillUpdate'
    }
    if (
      foundWillMountName !== null ||
      foundWillReceivePropsName !== null ||
      foundWillUpdateName !== null
    ) {
      var componentName = Component.displayName || Component.name
      var newApiName =
        typeof Component.getDerivedStateFromProps === 'function'
          ? 'getDerivedStateFromProps()'
          : 'getSnapshotBeforeUpdate()'

      throw Error(
        'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
          componentName +
          ' uses ' +
          newApiName +
          ' but also contains the following legacy lifecycles:' +
          (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
          (foundWillReceivePropsName !== null
            ? '\n  ' + foundWillReceivePropsName
            : '') +
          (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
          '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
          'https://fb.me/react-async-component-lifecycle-hooks'
      )
    }

    // React <= 16.2 does not support static getDerivedStateFromProps.
    // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
    // Newer versions of React will ignore these lifecycles if gDSFP exists.
    if (typeof Component.getDerivedStateFromProps === 'function') {
      prototype.componentWillMount = componentWillMount
      prototype.componentWillReceiveProps = componentWillReceiveProps
    }

    // React <= 16.2 does not support getSnapshotBeforeUpdate.
    // As a workaround, use cWU to invoke the new lifecycle.
    // Newer versions of React will ignore that lifecycle if gSBU exists.
    if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
      if (typeof prototype.componentDidUpdate !== 'function') {
        throw new Error(
          'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
        )
      }

      prototype.componentWillUpdate = componentWillUpdate

      var componentDidUpdate = prototype.componentDidUpdate

      prototype.componentDidUpdate = function componentDidUpdatePolyfill(
        prevProps,
        prevState,
        maybeSnapshot
      ) {
        // 16.3+ will not execute our will-update method;
        // It will pass a snapshot value to did-update though.
        // Older versions will require our polyfilled will-update value.
        // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
        // Because for <= 15.x versions this might be a "prevContext" object.
        // We also can't just check "__reactInternalSnapshot",
        // Because get-snapshot might return a falsy value.
        // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
        var snapshot = this.__reactInternalSnapshotFlag
          ? this.__reactInternalSnapshot
          : maybeSnapshot

        componentDidUpdate.call(this, prevProps, prevState, snapshot)
      }
    }

    return Component
  }

  var _jsxFileName = '/Users/jquense/src/uncontrollable/src/uncontrollable.js'
  function uncontrollable(Component, controlledValues, methods) {
    if (methods === void 0) {
      methods = []
    }

    var displayName = Component.displayName || Component.name || 'Component'
    var canAcceptRef$1 = canAcceptRef(Component)
    var controlledProps = Object.keys(controlledValues)
    var PROPS_TO_OMIT = controlledProps.map(defaultKey)
    !(canAcceptRef$1 || !methods.length)
      ? invariant_1(
          false,
          '[uncontrollable] stateless function components cannot pass through methods ' +
            'because they have no associated instances. Check component: ' +
            displayName +
            ', ' +
            'attempting to pass through methods: ' +
            methods.join(', ')
        )
      : void 0

    var UncontrolledComponent =
      /*#__PURE__*/
      (function (_React$Component) {
        _inheritsLoose(UncontrolledComponent, _React$Component)

        function UncontrolledComponent() {
          var _this

          for (
            var _len = arguments.length, args = new Array(_len), _key = 0;
            _key < _len;
            _key++
          ) {
            args[_key] = arguments[_key]
          }

          _this =
            _React$Component.call.apply(
              _React$Component,
              [this].concat(args)
            ) || this
          _this.handlers = Object.create(null)
          controlledProps.forEach(function (propName) {
            var handlerName = controlledValues[propName]

            var handleChange = function handleChange(value) {
              if (_this.props[handlerName]) {
                var _this$props

                _this._notifying = true

                for (
                  var _len2 = arguments.length,
                    args = new Array(_len2 > 1 ? _len2 - 1 : 0),
                    _key2 = 1;
                  _key2 < _len2;
                  _key2++
                ) {
                  args[_key2 - 1] = arguments[_key2]
                }

                ;(_this$props = _this.props)[handlerName].apply(
                  _this$props,
                  [value].concat(args)
                )

                _this._notifying = false
              }

              if (!_this.unmounted)
                _this.setState(function (_ref) {
                  var _extends2

                  var values = _ref.values
                  return {
                    values: _extends(
                      Object.create(null),
                      values,
                      ((_extends2 = {}),
                      (_extends2[propName] = value),
                      _extends2)
                    ),
                  }
                })
            }

            _this.handlers[handlerName] = handleChange
          })
          if (methods.length)
            _this.attachRef = function (ref) {
              _this.inner = ref
            }
          var values = Object.create(null)
          controlledProps.forEach(function (key) {
            values[key] = _this.props[defaultKey(key)]
          })
          _this.state = {
            values: values,
            prevProps: {},
          }
          return _this
        }

        var _proto = UncontrolledComponent.prototype

        _proto.shouldComponentUpdate = function shouldComponentUpdate() {
          //let setState trigger the update
          return !this._notifying
        }

        UncontrolledComponent.getDerivedStateFromProps =
          function getDerivedStateFromProps(props, _ref2) {
            var values = _ref2.values,
              prevProps = _ref2.prevProps
            var nextState = {
              values: _extends(Object.create(null), values),
              prevProps: {},
            }
            controlledProps.forEach(function (key) {
              /**
               * If a prop switches from controlled to Uncontrolled
               * reset its value to the defaultValue
               */
              nextState.prevProps[key] = props[key]

              if (!isProp(props, key) && isProp(prevProps, key)) {
                nextState.values[key] = props[defaultKey(key)]
              }
            })
            return nextState
          }

        _proto.componentWillUnmount = function componentWillUnmount() {
          this.unmounted = true
        }

        _proto.render = function render() {
          var _this2 = this

          var _this$props2 = this.props,
            innerRef = _this$props2.innerRef,
            props = _objectWithoutPropertiesLoose(_this$props2, ['innerRef'])

          PROPS_TO_OMIT.forEach(function (prop) {
            delete props[prop]
          })
          var newProps = {}
          controlledProps.forEach(function (propName) {
            var propValue = _this2.props[propName]
            newProps[propName] =
              propValue !== undefined
                ? propValue
                : _this2.state.values[propName]
          })
          return React.createElement(
            Component,
            _extends({}, props, newProps, this.handlers, {
              ref: innerRef || this.attachRef,
            })
          )
        }

        return UncontrolledComponent
      })(React.Component)

    polyfill(UncontrolledComponent)
    UncontrolledComponent.displayName = 'Uncontrolled(' + displayName + ')'
    UncontrolledComponent.propTypes = _extends(
      {
        innerRef: function innerRef() {},
      },
      uncontrolledPropTypes(controlledValues, displayName)
    )
    methods.forEach(function (method) {
      UncontrolledComponent.prototype[method] = function $proxiedMethod() {
        var _this$inner

        return (_this$inner = this.inner)[method].apply(_this$inner, arguments)
      }
    })
    var WrappedComponent = UncontrolledComponent

    if (React.forwardRef) {
      WrappedComponent = React.forwardRef(function (props, ref) {
        return React.createElement(
          UncontrolledComponent,
          _extends({}, props, {
            innerRef: ref,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 128,
            },
            __self: this,
          })
        )
      })
      WrappedComponent.propTypes = UncontrolledComponent.propTypes
    }

    WrappedComponent.ControlledComponent = Component
    /**
     * useful when wrapping a Component and you want to control
     * everything
     */

    WrappedComponent.deferControlTo = function (
      newComponent,
      additions,
      nextMethods
    ) {
      if (additions === void 0) {
        additions = {}
      }

      return uncontrollable(
        newComponent,
        _extends({}, controlledValues, additions),
        nextMethods
      )
    }

    return WrappedComponent
  }

  function r(e) {
    var t,
      f,
      n = ''
    if ('string' == typeof e || 'number' == typeof e) n += e
    else if ('object' == typeof e)
      if (Array.isArray(e))
        for (t = 0; t < e.length; t++)
          e[t] && (f = r(e[t])) && (n && (n += ' '), (n += f))
      else for (t in e) e[t] && (n && (n += ' '), (n += t))
    return n
  }
  function clsx() {
    for (var e, t, f = 0, n = ''; f < arguments.length; )
      (e = arguments[f++]) && (t = r(e)) && (n && (n += ' '), (n += t))
    return n
  }

  var propTypesExports = {}
  var propTypes = {
    get exports() {
      return propTypesExports
    },
    set exports(v) {
      propTypesExports = v
    },
  }

  var reactIsExports = {}
  var reactIs = {
    get exports() {
      return reactIsExports
    },
    set exports(v) {
      reactIsExports = v
    },
  }

  var reactIs_development = {}

  /** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    ;(function () {
      // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
      // nor polyfill, then a plain number is used for performance.
      var hasSymbol = typeof Symbol === 'function' && Symbol.for
      var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7
      var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca
      var REACT_FRAGMENT_TYPE = hasSymbol
        ? Symbol.for('react.fragment')
        : 0xeacb
      var REACT_STRICT_MODE_TYPE = hasSymbol
        ? Symbol.for('react.strict_mode')
        : 0xeacc
      var REACT_PROFILER_TYPE = hasSymbol
        ? Symbol.for('react.profiler')
        : 0xead2
      var REACT_PROVIDER_TYPE = hasSymbol
        ? Symbol.for('react.provider')
        : 0xeacd
      var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
      // (unstable) APIs that have been removed. Can we remove the symbols?

      var REACT_ASYNC_MODE_TYPE = hasSymbol
        ? Symbol.for('react.async_mode')
        : 0xeacf
      var REACT_CONCURRENT_MODE_TYPE = hasSymbol
        ? Symbol.for('react.concurrent_mode')
        : 0xeacf
      var REACT_FORWARD_REF_TYPE = hasSymbol
        ? Symbol.for('react.forward_ref')
        : 0xead0
      var REACT_SUSPENSE_TYPE = hasSymbol
        ? Symbol.for('react.suspense')
        : 0xead1
      var REACT_SUSPENSE_LIST_TYPE = hasSymbol
        ? Symbol.for('react.suspense_list')
        : 0xead8
      var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3
      var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4
      var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9
      var REACT_FUNDAMENTAL_TYPE = hasSymbol
        ? Symbol.for('react.fundamental')
        : 0xead5
      var REACT_RESPONDER_TYPE = hasSymbol
        ? Symbol.for('react.responder')
        : 0xead6
      var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7

      function isValidElementType(type) {
        return (
          typeof type === 'string' ||
          typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE ||
          type === REACT_CONCURRENT_MODE_TYPE ||
          type === REACT_PROFILER_TYPE ||
          type === REACT_STRICT_MODE_TYPE ||
          type === REACT_SUSPENSE_TYPE ||
          type === REACT_SUSPENSE_LIST_TYPE ||
          (typeof type === 'object' &&
            type !== null &&
            (type.$$typeof === REACT_LAZY_TYPE ||
              type.$$typeof === REACT_MEMO_TYPE ||
              type.$$typeof === REACT_PROVIDER_TYPE ||
              type.$$typeof === REACT_CONTEXT_TYPE ||
              type.$$typeof === REACT_FORWARD_REF_TYPE ||
              type.$$typeof === REACT_FUNDAMENTAL_TYPE ||
              type.$$typeof === REACT_RESPONDER_TYPE ||
              type.$$typeof === REACT_SCOPE_TYPE ||
              type.$$typeof === REACT_BLOCK_TYPE))
        )
      }

      function typeOf(object) {
        if (typeof object === 'object' && object !== null) {
          var $$typeof = object.$$typeof

          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              var type = object.type

              switch (type) {
                case REACT_ASYNC_MODE_TYPE:
                case REACT_CONCURRENT_MODE_TYPE:
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                  return type

                default:
                  var $$typeofType = type && type.$$typeof

                  switch ($$typeofType) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE:
                    case REACT_PROVIDER_TYPE:
                      return $$typeofType

                    default:
                      return $$typeof
                  }
              }

            case REACT_PORTAL_TYPE:
              return $$typeof
          }
        }

        return undefined
      } // AsyncMode is deprecated along with isAsyncMode

      var AsyncMode = REACT_ASYNC_MODE_TYPE
      var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE
      var ContextConsumer = REACT_CONTEXT_TYPE
      var ContextProvider = REACT_PROVIDER_TYPE
      var Element = REACT_ELEMENT_TYPE
      var ForwardRef = REACT_FORWARD_REF_TYPE
      var Fragment = REACT_FRAGMENT_TYPE
      var Lazy = REACT_LAZY_TYPE
      var Memo = REACT_MEMO_TYPE
      var Portal = REACT_PORTAL_TYPE
      var Profiler = REACT_PROFILER_TYPE
      var StrictMode = REACT_STRICT_MODE_TYPE
      var Suspense = REACT_SUSPENSE_TYPE
      var hasWarnedAboutDeprecatedIsAsyncMode = false // AsyncMode should be deprecated

      function isAsyncMode(object) {
        {
          if (!hasWarnedAboutDeprecatedIsAsyncMode) {
            hasWarnedAboutDeprecatedIsAsyncMode = true // Using console['warn'] to evade Babel and ESLint

            console['warn'](
              'The ReactIs.isAsyncMode() alias has been deprecated, ' +
                'and will be removed in React 17+. Update your code to use ' +
                'ReactIs.isConcurrentMode() instead. It has the exact same API.'
            )
          }
        }

        return (
          isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE
        )
      }
      function isConcurrentMode(object) {
        return typeOf(object) === REACT_CONCURRENT_MODE_TYPE
      }
      function isContextConsumer(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE
      }
      function isContextProvider(object) {
        return typeOf(object) === REACT_PROVIDER_TYPE
      }
      function isElement(object) {
        return (
          typeof object === 'object' &&
          object !== null &&
          object.$$typeof === REACT_ELEMENT_TYPE
        )
      }
      function isForwardRef(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE
      }
      function isFragment(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE
      }
      function isLazy(object) {
        return typeOf(object) === REACT_LAZY_TYPE
      }
      function isMemo(object) {
        return typeOf(object) === REACT_MEMO_TYPE
      }
      function isPortal(object) {
        return typeOf(object) === REACT_PORTAL_TYPE
      }
      function isProfiler(object) {
        return typeOf(object) === REACT_PROFILER_TYPE
      }
      function isStrictMode(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE
      }
      function isSuspense(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE
      }

      reactIs_development.AsyncMode = AsyncMode
      reactIs_development.ConcurrentMode = ConcurrentMode
      reactIs_development.ContextConsumer = ContextConsumer
      reactIs_development.ContextProvider = ContextProvider
      reactIs_development.Element = Element
      reactIs_development.ForwardRef = ForwardRef
      reactIs_development.Fragment = Fragment
      reactIs_development.Lazy = Lazy
      reactIs_development.Memo = Memo
      reactIs_development.Portal = Portal
      reactIs_development.Profiler = Profiler
      reactIs_development.StrictMode = StrictMode
      reactIs_development.Suspense = Suspense
      reactIs_development.isAsyncMode = isAsyncMode
      reactIs_development.isConcurrentMode = isConcurrentMode
      reactIs_development.isContextConsumer = isContextConsumer
      reactIs_development.isContextProvider = isContextProvider
      reactIs_development.isElement = isElement
      reactIs_development.isForwardRef = isForwardRef
      reactIs_development.isFragment = isFragment
      reactIs_development.isLazy = isLazy
      reactIs_development.isMemo = isMemo
      reactIs_development.isPortal = isPortal
      reactIs_development.isProfiler = isProfiler
      reactIs_development.isStrictMode = isStrictMode
      reactIs_development.isSuspense = isSuspense
      reactIs_development.isValidElementType = isValidElementType
      reactIs_development.typeOf = typeOf
    })()
  }

  ;(function (module) {
    {
      module.exports = reactIs_development
    }
  })(reactIs)

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'

  var ReactPropTypesSecret_1 = ReactPropTypesSecret$2

  var has$2 = Function.call.bind(Object.prototype.hasOwnProperty)

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var printWarning$2 = function () {}

  {
    var ReactPropTypesSecret$1 = ReactPropTypesSecret_1
    var loggedTypeFailures = {}
    var has$1 = has$2

    printWarning$2 = function (text) {
      var message = 'Warning: ' + text
      if (typeof console !== 'undefined') {
        console.error(message)
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message)
      } catch (x) {
        /**/
      }
    }
  }

  /**
   * Assert that the values match with the type specs.
   * Error messages are memorized and will only be shown once.
   *
   * @param {object} typeSpecs Map of name to a ReactPropType
   * @param {object} values Runtime values that need to be type-checked
   * @param {string} location e.g. "prop", "context", "child context"
   * @param {string} componentName Name of the component for error messages.
   * @param {?Function} getStack Returns the component stack.
   * @private
   */
  function checkPropTypes$1(
    typeSpecs,
    values,
    location,
    componentName,
    getStack
  ) {
    {
      for (var typeSpecName in typeSpecs) {
        if (has$1(typeSpecs, typeSpecName)) {
          var error
          // Prop type validation may throw. In case they do, we don't want to
          // fail the render phase where it didn't fail before. So we log it.
          // After these have been cleaned up, we'll let them throw.
          try {
            // This is intentionally an invariant that gets caught. It's the same
            // behavior as without this statement except with a better message.
            if (typeof typeSpecs[typeSpecName] !== 'function') {
              var err = Error(
                (componentName || 'React class') +
                  ': ' +
                  location +
                  ' type `' +
                  typeSpecName +
                  '` is invalid; ' +
                  'it must be a function, usually from the `prop-types` package, but received `' +
                  typeof typeSpecs[typeSpecName] +
                  '`.' +
                  'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
              )
              err.name = 'Invariant Violation'
              throw err
            }
            error = typeSpecs[typeSpecName](
              values,
              typeSpecName,
              componentName,
              location,
              null,
              ReactPropTypesSecret$1
            )
          } catch (ex) {
            error = ex
          }
          if (error && !(error instanceof Error)) {
            printWarning$2(
              (componentName || 'React class') +
                ': type specification of ' +
                location +
                ' `' +
                typeSpecName +
                '` is invalid; the type checker ' +
                'function must return `null` or an `Error` but returned a ' +
                typeof error +
                '. ' +
                'You may have forgotten to pass an argument to the type checker ' +
                'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                'shape all require an argument).'
            )
          }
          if (
            error instanceof Error &&
            !(error.message in loggedTypeFailures)
          ) {
            // Only monitor this failure once because there tends to be a lot of the
            // same error.
            loggedTypeFailures[error.message] = true

            var stack = getStack ? getStack() : ''

            printWarning$2(
              'Failed ' +
                location +
                ' type: ' +
                error.message +
                (stack != null ? stack : '')
            )
          }
        }
      }
    }
  }

  /**
   * Resets warning cache when testing.
   *
   * @private
   */
  checkPropTypes$1.resetWarningCache = function () {
    {
      loggedTypeFailures = {}
    }
  }

  var checkPropTypes_1 = checkPropTypes$1

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var ReactIs$1 = reactIsExports
  var assign = objectAssign

  var ReactPropTypesSecret = ReactPropTypesSecret_1
  var has = has$2
  var checkPropTypes = checkPropTypes_1

  var printWarning$1 = function () {}

  {
    printWarning$1 = function (text) {
      var message = 'Warning: ' + text
      if (typeof console !== 'undefined') {
        console.error(message)
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message)
      } catch (x) {}
    }
  }

  function emptyFunctionThatReturnsNull() {
    return null
  }

  var factoryWithTypeCheckers = function (isValidElement, throwOnDirectAccess) {
    /* global Symbol */
    var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator
    var FAUX_ITERATOR_SYMBOL = '@@iterator' // Before Symbol spec.

    /**
     * Returns the iterator method function contained on the iterable object.
     *
     * Be sure to invoke the function with the iterable as context:
     *
     *     var iteratorFn = getIteratorFn(myIterable);
     *     if (iteratorFn) {
     *       var iterator = iteratorFn.call(myIterable);
     *       ...
     *     }
     *
     * @param {?object} maybeIterable
     * @return {?function}
     */
    function getIteratorFn(maybeIterable) {
      var iteratorFn =
        maybeIterable &&
        ((ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL]) ||
          maybeIterable[FAUX_ITERATOR_SYMBOL])
      if (typeof iteratorFn === 'function') {
        return iteratorFn
      }
    }

    /**
     * Collection of methods that allow declaration and validation of props that are
     * supplied to React components. Example usage:
     *
     *   var Props = require('ReactPropTypes');
     *   var MyArticle = React.createClass({
     *     propTypes: {
     *       // An optional string prop named "description".
     *       description: Props.string,
     *
     *       // A required enum prop named "category".
     *       category: Props.oneOf(['News','Photos']).isRequired,
     *
     *       // A prop named "dialog" that requires an instance of Dialog.
     *       dialog: Props.instanceOf(Dialog).isRequired
     *     },
     *     render: function() { ... }
     *   });
     *
     * A more formal specification of how these methods are used:
     *
     *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
     *   decl := ReactPropTypes.{type}(.isRequired)?
     *
     * Each and every declaration produces a function with the same signature. This
     * allows the creation of custom validation functions. For example:
     *
     *  var MyLink = React.createClass({
     *    propTypes: {
     *      // An optional string or URI prop named "href".
     *      href: function(props, propName, componentName) {
     *        var propValue = props[propName];
     *        if (propValue != null && typeof propValue !== 'string' &&
     *            !(propValue instanceof URI)) {
     *          return new Error(
     *            'Expected a string or an URI for ' + propName + ' in ' +
     *            componentName
     *          );
     *        }
     *      }
     *    },
     *    render: function() {...}
     *  });
     *
     * @internal
     */

    var ANONYMOUS = '<<anonymous>>'

    // Important!
    // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
    var ReactPropTypes = {
      array: createPrimitiveTypeChecker('array'),
      bigint: createPrimitiveTypeChecker('bigint'),
      bool: createPrimitiveTypeChecker('boolean'),
      func: createPrimitiveTypeChecker('function'),
      number: createPrimitiveTypeChecker('number'),
      object: createPrimitiveTypeChecker('object'),
      string: createPrimitiveTypeChecker('string'),
      symbol: createPrimitiveTypeChecker('symbol'),

      any: createAnyTypeChecker(),
      arrayOf: createArrayOfTypeChecker,
      element: createElementTypeChecker(),
      elementType: createElementTypeTypeChecker(),
      instanceOf: createInstanceTypeChecker,
      node: createNodeChecker(),
      objectOf: createObjectOfTypeChecker,
      oneOf: createEnumTypeChecker,
      oneOfType: createUnionTypeChecker,
      shape: createShapeTypeChecker,
      exact: createStrictShapeTypeChecker,
    }

    /**
     * inlined Object.is polyfill to avoid requiring consumers ship their own
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
     */
    /*eslint-disable no-self-compare*/
    function is(x, y) {
      // SameValue algorithm
      if (x === y) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return x !== 0 || 1 / x === 1 / y
      } else {
        // Step 6.a: NaN == NaN
        return x !== x && y !== y
      }
    }
    /*eslint-enable no-self-compare*/

    /**
     * We use an Error-like object for backward compatibility as people may call
     * PropTypes directly and inspect their output. However, we don't use real
     * Errors anymore. We don't inspect their stack anyway, and creating them
     * is prohibitively expensive if they are created too often, such as what
     * happens in oneOfType() for any type before the one that matched.
     */
    function PropTypeError(message, data) {
      this.message = message
      this.data = data && typeof data === 'object' ? data : {}
      this.stack = ''
    }
    // Make `instanceof Error` still work for returned errors.
    PropTypeError.prototype = Error.prototype

    function createChainableTypeChecker(validate) {
      {
        var manualPropTypeCallCache = {}
        var manualPropTypeWarningCount = 0
      }
      function checkType(
        isRequired,
        props,
        propName,
        componentName,
        location,
        propFullName,
        secret
      ) {
        componentName = componentName || ANONYMOUS
        propFullName = propFullName || propName

        if (secret !== ReactPropTypesSecret) {
          if (throwOnDirectAccess) {
            // New behavior only for users of `prop-types` package
            var err = new Error(
              'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
                'Use `PropTypes.checkPropTypes()` to call them. ' +
                'Read more at http://fb.me/use-check-prop-types'
            )
            err.name = 'Invariant Violation'
            throw err
          } else if (typeof console !== 'undefined') {
            // Old behavior for people using React.PropTypes
            var cacheKey = componentName + ':' + propName
            if (
              !manualPropTypeCallCache[cacheKey] &&
              // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3
            ) {
              printWarning$1(
                'You are manually calling a React.PropTypes validation ' +
                  'function for the `' +
                  propFullName +
                  '` prop on `' +
                  componentName +
                  '`. This is deprecated ' +
                  'and will throw in the standalone `prop-types` package. ' +
                  'You may be seeing this warning due to a third-party PropTypes ' +
                  'library. See https://fb.me/react-warning-dont-call-proptypes ' +
                  'for details.'
              )
              manualPropTypeCallCache[cacheKey] = true
              manualPropTypeWarningCount++
            }
          }
        }
        if (props[propName] == null) {
          if (isRequired) {
            if (props[propName] === null) {
              return new PropTypeError(
                'The ' +
                  location +
                  ' `' +
                  propFullName +
                  '` is marked as required ' +
                  ('in `' + componentName + '`, but its value is `null`.')
              )
            }
            return new PropTypeError(
              'The ' +
                location +
                ' `' +
                propFullName +
                '` is marked as required in ' +
                ('`' + componentName + '`, but its value is `undefined`.')
            )
          }
          return null
        } else {
          return validate(
            props,
            propName,
            componentName,
            location,
            propFullName
          )
        }
      }

      var chainedCheckType = checkType.bind(null, false)
      chainedCheckType.isRequired = checkType.bind(null, true)

      return chainedCheckType
    }

    function createPrimitiveTypeChecker(expectedType) {
      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName,
        secret
      ) {
        var propValue = props[propName]
        var propType = getPropType(propValue)
        if (propType !== expectedType) {
          // `propValue` being instance of, say, date/regexp, pass the 'object'
          // check, but we can offer a more precise error message here rather than
          // 'of type `object`'.
          var preciseType = getPreciseType(propValue)

          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' +
                preciseType +
                '` supplied to `' +
                componentName +
                '`, expected ') +
              ('`' + expectedType + '`.'),
            { expectedType: expectedType }
          )
        }
        return null
      }
      return createChainableTypeChecker(validate)
    }

    function createAnyTypeChecker() {
      return createChainableTypeChecker(emptyFunctionThatReturnsNull)
    }

    function createArrayOfTypeChecker(typeChecker) {
      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError(
            'Property `' +
              propFullName +
              '` of component `' +
              componentName +
              '` has invalid PropType notation inside arrayOf.'
          )
        }
        var propValue = props[propName]
        if (!Array.isArray(propValue)) {
          var propType = getPropType(propValue)
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' +
                propType +
                '` supplied to `' +
                componentName +
                '`, expected an array.')
          )
        }
        for (var i = 0; i < propValue.length; i++) {
          var error = typeChecker(
            propValue,
            i,
            componentName,
            location,
            propFullName + '[' + i + ']',
            ReactPropTypesSecret
          )
          if (error instanceof Error) {
            return error
          }
        }
        return null
      }
      return createChainableTypeChecker(validate)
    }

    function createElementTypeChecker() {
      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        var propValue = props[propName]
        if (!isValidElement(propValue)) {
          var propType = getPropType(propValue)
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' +
                propType +
                '` supplied to `' +
                componentName +
                '`, expected a single ReactElement.')
          )
        }
        return null
      }
      return createChainableTypeChecker(validate)
    }

    function createElementTypeTypeChecker() {
      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        var propValue = props[propName]
        if (!ReactIs$1.isValidElementType(propValue)) {
          var propType = getPropType(propValue)
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' +
                propType +
                '` supplied to `' +
                componentName +
                '`, expected a single ReactElement type.')
          )
        }
        return null
      }
      return createChainableTypeChecker(validate)
    }

    function createInstanceTypeChecker(expectedClass) {
      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        if (!(props[propName] instanceof expectedClass)) {
          var expectedClassName = expectedClass.name || ANONYMOUS
          var actualClassName = getClassName(props[propName])
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' +
                actualClassName +
                '` supplied to `' +
                componentName +
                '`, expected ') +
              ('instance of `' + expectedClassName + '`.')
          )
        }
        return null
      }
      return createChainableTypeChecker(validate)
    }

    function createEnumTypeChecker(expectedValues) {
      if (!Array.isArray(expectedValues)) {
        {
          if (arguments.length > 1) {
            printWarning$1(
              'Invalid arguments supplied to oneOf, expected an array, got ' +
                arguments.length +
                ' arguments. ' +
                'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
            )
          } else {
            printWarning$1(
              'Invalid argument supplied to oneOf, expected an array.'
            )
          }
        }
        return emptyFunctionThatReturnsNull
      }

      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        var propValue = props[propName]
        for (var i = 0; i < expectedValues.length; i++) {
          if (is(propValue, expectedValues[i])) {
            return null
          }
        }

        var valuesString = JSON.stringify(
          expectedValues,
          function replacer(key, value) {
            var type = getPreciseType(value)
            if (type === 'symbol') {
              return String(value)
            }
            return value
          }
        )
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` of value `' +
            String(propValue) +
            '` ' +
            ('supplied to `' +
              componentName +
              '`, expected one of ' +
              valuesString +
              '.')
        )
      }
      return createChainableTypeChecker(validate)
    }

    function createObjectOfTypeChecker(typeChecker) {
      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        if (typeof typeChecker !== 'function') {
          return new PropTypeError(
            'Property `' +
              propFullName +
              '` of component `' +
              componentName +
              '` has invalid PropType notation inside objectOf.'
          )
        }
        var propValue = props[propName]
        var propType = getPropType(propValue)
        if (propType !== 'object') {
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type ' +
              ('`' +
                propType +
                '` supplied to `' +
                componentName +
                '`, expected an object.')
          )
        }
        for (var key in propValue) {
          if (has(propValue, key)) {
            var error = typeChecker(
              propValue,
              key,
              componentName,
              location,
              propFullName + '.' + key,
              ReactPropTypesSecret
            )
            if (error instanceof Error) {
              return error
            }
          }
        }
        return null
      }
      return createChainableTypeChecker(validate)
    }

    function createUnionTypeChecker(arrayOfTypeCheckers) {
      if (!Array.isArray(arrayOfTypeCheckers)) {
        printWarning$1(
          'Invalid argument supplied to oneOfType, expected an instance of array.'
        )
        return emptyFunctionThatReturnsNull
      }

      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i]
        if (typeof checker !== 'function') {
          printWarning$1(
            'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
              'received ' +
              getPostfixForTypeWarning(checker) +
              ' at index ' +
              i +
              '.'
          )
          return emptyFunctionThatReturnsNull
        }
      }

      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        var expectedTypes = []
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i]
          var checkerResult = checker(
            props,
            propName,
            componentName,
            location,
            propFullName,
            ReactPropTypesSecret
          )
          if (checkerResult == null) {
            return null
          }
          if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
            expectedTypes.push(checkerResult.data.expectedType)
          }
        }
        var expectedTypesMessage =
          expectedTypes.length > 0
            ? ', expected one of type [' + expectedTypes.join(', ') + ']'
            : ''
        return new PropTypeError(
          'Invalid ' +
            location +
            ' `' +
            propFullName +
            '` supplied to ' +
            ('`' + componentName + '`' + expectedTypesMessage + '.')
        )
      }
      return createChainableTypeChecker(validate)
    }

    function createNodeChecker() {
      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        if (!isNode(props[propName])) {
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` supplied to ' +
              ('`' + componentName + '`, expected a ReactNode.')
          )
        }
        return null
      }
      return createChainableTypeChecker(validate)
    }

    function invalidValidatorError(
      componentName,
      location,
      propFullName,
      key,
      type
    ) {
      return new PropTypeError(
        (componentName || 'React class') +
          ': ' +
          location +
          ' type `' +
          propFullName +
          '.' +
          key +
          '` is invalid; ' +
          'it must be a function, usually from the `prop-types` package, but received `' +
          type +
          '`.'
      )
    }

    function createShapeTypeChecker(shapeTypes) {
      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        var propValue = props[propName]
        var propType = getPropType(propValue)
        if (propType !== 'object') {
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type `' +
              propType +
              '` ' +
              ('supplied to `' + componentName + '`, expected `object`.')
          )
        }
        for (var key in shapeTypes) {
          var checker = shapeTypes[key]
          if (typeof checker !== 'function') {
            return invalidValidatorError(
              componentName,
              location,
              propFullName,
              key,
              getPreciseType(checker)
            )
          }
          var error = checker(
            propValue,
            key,
            componentName,
            location,
            propFullName + '.' + key,
            ReactPropTypesSecret
          )
          if (error) {
            return error
          }
        }
        return null
      }
      return createChainableTypeChecker(validate)
    }

    function createStrictShapeTypeChecker(shapeTypes) {
      function validate(
        props,
        propName,
        componentName,
        location,
        propFullName
      ) {
        var propValue = props[propName]
        var propType = getPropType(propValue)
        if (propType !== 'object') {
          return new PropTypeError(
            'Invalid ' +
              location +
              ' `' +
              propFullName +
              '` of type `' +
              propType +
              '` ' +
              ('supplied to `' + componentName + '`, expected `object`.')
          )
        }
        // We need to check all keys in case some are required but missing from props.
        var allKeys = assign({}, props[propName], shapeTypes)
        for (var key in allKeys) {
          var checker = shapeTypes[key]
          if (has(shapeTypes, key) && typeof checker !== 'function') {
            return invalidValidatorError(
              componentName,
              location,
              propFullName,
              key,
              getPreciseType(checker)
            )
          }
          if (!checker) {
            return new PropTypeError(
              'Invalid ' +
                location +
                ' `' +
                propFullName +
                '` key `' +
                key +
                '` supplied to `' +
                componentName +
                '`.' +
                '\nBad object: ' +
                JSON.stringify(props[propName], null, '  ') +
                '\nValid keys: ' +
                JSON.stringify(Object.keys(shapeTypes), null, '  ')
            )
          }
          var error = checker(
            propValue,
            key,
            componentName,
            location,
            propFullName + '.' + key,
            ReactPropTypesSecret
          )
          if (error) {
            return error
          }
        }
        return null
      }

      return createChainableTypeChecker(validate)
    }

    function isNode(propValue) {
      switch (typeof propValue) {
        case 'number':
        case 'string':
        case 'undefined':
          return true
        case 'boolean':
          return !propValue
        case 'object':
          if (Array.isArray(propValue)) {
            return propValue.every(isNode)
          }
          if (propValue === null || isValidElement(propValue)) {
            return true
          }

          var iteratorFn = getIteratorFn(propValue)
          if (iteratorFn) {
            var iterator = iteratorFn.call(propValue)
            var step
            if (iteratorFn !== propValue.entries) {
              while (!(step = iterator.next()).done) {
                if (!isNode(step.value)) {
                  return false
                }
              }
            } else {
              // Iterator will provide entry [k,v] tuples rather than values.
              while (!(step = iterator.next()).done) {
                var entry = step.value
                if (entry) {
                  if (!isNode(entry[1])) {
                    return false
                  }
                }
              }
            }
          } else {
            return false
          }

          return true
        default:
          return false
      }
    }

    function isSymbol(propType, propValue) {
      // Native Symbol.
      if (propType === 'symbol') {
        return true
      }

      // falsy value can't be a Symbol
      if (!propValue) {
        return false
      }

      // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
      if (propValue['@@toStringTag'] === 'Symbol') {
        return true
      }

      // Fallback for non-spec compliant Symbols which are polyfilled.
      if (typeof Symbol === 'function' && propValue instanceof Symbol) {
        return true
      }

      return false
    }

    // Equivalent of `typeof` but with special handling for array and regexp.
    function getPropType(propValue) {
      var propType = typeof propValue
      if (Array.isArray(propValue)) {
        return 'array'
      }
      if (propValue instanceof RegExp) {
        // Old webkits (at least until Android 4.0) return 'function' rather than
        // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
        // passes PropTypes.object.
        return 'object'
      }
      if (isSymbol(propType, propValue)) {
        return 'symbol'
      }
      return propType
    }

    // This handles more types than `getPropType`. Only used for error messages.
    // See `createPrimitiveTypeChecker`.
    function getPreciseType(propValue) {
      if (typeof propValue === 'undefined' || propValue === null) {
        return '' + propValue
      }
      var propType = getPropType(propValue)
      if (propType === 'object') {
        if (propValue instanceof Date) {
          return 'date'
        } else if (propValue instanceof RegExp) {
          return 'regexp'
        }
      }
      return propType
    }

    // Returns a string that is postfixed to a warning about an invalid type.
    // For example, "undefined" or "of type array"
    function getPostfixForTypeWarning(value) {
      var type = getPreciseType(value)
      switch (type) {
        case 'array':
        case 'object':
          return 'an ' + type
        case 'boolean':
        case 'date':
        case 'regexp':
          return 'a ' + type
        default:
          return type
      }
    }

    // Returns class name of the object, if any.
    function getClassName(propValue) {
      if (!propValue.constructor || !propValue.constructor.name) {
        return ANONYMOUS
      }
      return propValue.constructor.name
    }

    ReactPropTypes.checkPropTypes = checkPropTypes
    ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache
    ReactPropTypes.PropTypes = ReactPropTypes

    return ReactPropTypes
  }

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    var ReactIs = reactIsExports

    // By explicitly using `prop-types` you are opting into new development behavior.
    // http://fb.me/prop-types-in-prod
    var throwOnDirectAccess = true
    propTypes.exports = factoryWithTypeCheckers(
      ReactIs.isElement,
      throwOnDirectAccess
    )
  }

  var navigate = {
    PREVIOUS: 'PREV',
    NEXT: 'NEXT',
    TODAY: 'TODAY',
    DATE: 'DATE',
  }
  var views = {
    MONTH: 'month',
    WEEK: 'week',
    WORK_WEEK: 'work_week',
    DAY: 'day',
    AGENDA: 'agenda',
  }

  var viewNames$1 = Object.keys(views).map(function (k) {
    return views[k]
  })
  propTypesExports.oneOfType([propTypesExports.string, propTypesExports.func])
  propTypesExports.any
  propTypesExports.func

  /**
   * accepts either an array of builtin view names:
   *
   * ```
   * views={['month', 'day', 'agenda']}
   * ```
   *
   * or an object hash of the view name and the component (or boolean for builtin)
   *
   * ```
   * views={{
   *   month: true,
   *   week: false,
   *   workweek: WorkWeekViewComponent,
   * }}
   * ```
   */

  propTypesExports.oneOfType([
    propTypesExports.arrayOf(propTypesExports.oneOf(viewNames$1)),
    propTypesExports.objectOf(function (prop, key) {
      var isBuiltinView =
        viewNames$1.indexOf(key) !== -1 && typeof prop[key] === 'boolean'
      if (isBuiltinView) {
        return null
      } else {
        for (
          var _len = arguments.length,
            args = new Array(_len > 2 ? _len - 2 : 0),
            _key = 2;
          _key < _len;
          _key++
        ) {
          args[_key - 2] = arguments[_key]
        }
        return propTypesExports.elementType.apply(
          propTypesExports,
          [prop, key].concat(args)
        )
      }
    }),
  ])
  propTypesExports.oneOfType([
    propTypesExports.oneOf(['overlap', 'no-overlap']),
    propTypesExports.func,
  ])

  function notify(handler, args) {
    handler && handler.apply(null, [].concat(args))
  }

  var MILI = 'milliseconds',
    SECONDS = 'seconds',
    MINUTES = 'minutes',
    HOURS = 'hours',
    DAY = 'day',
    WEEK = 'week',
    MONTH = 'month',
    YEAR = 'year',
    DECADE = 'decade',
    CENTURY = 'century'

  var multiplierMilli = {
    milliseconds: 1,
    seconds: 1000,
    minutes: 60 * 1000,
    hours: 60 * 60 * 1000,
    day: 24 * 60 * 60 * 1000,
    week: 7 * 24 * 60 * 60 * 1000,
  }

  var multiplierMonth = {
    month: 1,
    year: 12,
    decade: 10 * 12,
    century: 100 * 12,
  }

  function daysOf(year) {
    return [31, daysInFeb(year), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
  }

  function daysInFeb(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 ? 29 : 28
  }

  function add(d, num, unit) {
    d = new Date(d)

    switch (unit) {
      case MILI:
      case SECONDS:
      case MINUTES:
      case HOURS:
      case DAY:
      case WEEK:
        return addMillis(d, num * multiplierMilli[unit])
      case MONTH:
      case YEAR:
      case DECADE:
      case CENTURY:
        return addMonths(d, num * multiplierMonth[unit])
    }

    throw new TypeError('Invalid units: "' + unit + '"')
  }

  function addMillis(d, num) {
    var nextDate = new Date(+d + num)

    return solveDST(d, nextDate)
  }

  function addMonths(d, num) {
    var year = d.getFullYear(),
      month = d.getMonth(),
      day = d.getDate(),
      totalMonths = year * 12 + month + num,
      nextYear = Math.trunc(totalMonths / 12),
      nextMonth = totalMonths % 12,
      nextDay = Math.min(day, daysOf(nextYear)[nextMonth])

    var nextDate = new Date(d)
    nextDate.setFullYear(nextYear)

    // To avoid a bug when sets the Feb month
    // with a date > 28 or date > 29 (leap year)
    nextDate.setDate(1)

    nextDate.setMonth(nextMonth)
    nextDate.setDate(nextDay)

    return nextDate
  }

  function solveDST(currentDate, nextDate) {
    var currentOffset = currentDate.getTimezoneOffset(),
      nextOffset = nextDate.getTimezoneOffset()

    // if is DST, add the difference in minutes
    // else the difference is zero
    var diffMinutes = nextOffset - currentOffset

    return new Date(+nextDate + diffMinutes * multiplierMilli['minutes'])
  }

  function subtract(d, num, unit) {
    return add(d, -num, unit)
  }

  function startOf(d, unit, firstOfWeek) {
    d = new Date(d)

    switch (unit) {
      case CENTURY:
      case DECADE:
      case YEAR:
        d = month(d, 0)
      case MONTH:
        d = date(d, 1)
      case WEEK:
      case DAY:
        d = hours(d, 0)
      case HOURS:
        d = minutes(d, 0)
      case MINUTES:
        d = seconds(d, 0)
      case SECONDS:
        d = milliseconds(d, 0)
    }

    if (unit === DECADE) d = subtract(d, year(d) % 10, 'year')

    if (unit === CENTURY) d = subtract(d, year(d) % 100, 'year')

    if (unit === WEEK) d = weekday(d, 0, firstOfWeek)

    return d
  }

  function endOf(d, unit, firstOfWeek) {
    d = new Date(d)
    d = startOf(d, unit, firstOfWeek)
    switch (unit) {
      case CENTURY:
      case DECADE:
      case YEAR:
      case MONTH:
      case WEEK:
        d = add(d, 1, unit)
        d = subtract(d, 1, DAY)
        d.setHours(23, 59, 59, 999)
        break
      case DAY:
        d.setHours(23, 59, 59, 999)
        break
      case HOURS:
      case MINUTES:
      case SECONDS:
        d = add(d, 1, unit)
        d = subtract(d, 1, MILI)
    }
    return d
  }

  var eq$6 = createComparer(function (a, b) {
    return a === b
  })
  var neq = createComparer(function (a, b) {
    return a !== b
  })
  var gt = createComparer(function (a, b) {
    return a > b
  })
  var gte = createComparer(function (a, b) {
    return a >= b
  })
  var lt = createComparer(function (a, b) {
    return a < b
  })
  var lte = createComparer(function (a, b) {
    return a <= b
  })

  function min$1() {
    return new Date(Math.min.apply(Math, arguments))
  }

  function max$1() {
    return new Date(Math.max.apply(Math, arguments))
  }

  function inRange$1(day, min, max, unit) {
    unit = unit || 'day'

    return (!min || gte(day, min, unit)) && (!max || lte(day, max, unit))
  }

  var milliseconds = createAccessor('Milliseconds')
  var seconds = createAccessor('Seconds')
  var minutes = createAccessor('Minutes')
  var hours = createAccessor('Hours')
  var day = createAccessor('Day')
  var date = createAccessor('Date')
  var month = createAccessor('Month')
  var year = createAccessor('FullYear')

  function weekday(d, val, firstDay) {
    var w = (day(d) + 7 - (firstDay || 0)) % 7

    return val === undefined ? w : add(d, val - w, DAY)
  }

  function createAccessor(method) {
    var hourLength = (function (method) {
      switch (method) {
        case 'Milliseconds':
          return 3600000
        case 'Seconds':
          return 3600
        case 'Minutes':
          return 60
        case 'Hours':
          return 1
        default:
          return null
      }
    })(method)

    return function (d, val) {
      if (val === undefined) return d['get' + method]()

      var dateOut = new Date(d)
      dateOut['set' + method](val)

      if (
        hourLength &&
        dateOut['get' + method]() != val &&
        (method === 'Hours' ||
          (val >= hourLength &&
            dateOut.getHours() - d.getHours() < Math.floor(val / hourLength)))
      ) {
        //Skip DST hour, if it occurs
        dateOut['set' + method](val + hourLength)
      }

      return dateOut
    }
  }

  function createComparer(operator) {
    return function (a, b, unit) {
      return operator(+startOf(a, unit), +startOf(b, unit))
    }
  }

  /* eslint no-fallthrough: off */
  var MILLI = {
    seconds: 1000,
    minutes: 1000 * 60,
    hours: 1000 * 60 * 60,
    day: 1000 * 60 * 60 * 24,
  }
  function firstVisibleDay(date, localizer) {
    var firstOfMonth = startOf(date, 'month')
    return startOf(firstOfMonth, 'week', localizer.startOfWeek())
  }
  function lastVisibleDay(date, localizer) {
    var endOfMonth = endOf(date, 'month')
    return endOf(endOfMonth, 'week', localizer.startOfWeek())
  }
  function visibleDays(date, localizer) {
    var current = firstVisibleDay(date, localizer),
      last = lastVisibleDay(date, localizer),
      days = []
    while (lte(current, last, 'day')) {
      days.push(current)
      current = add(current, 1, 'day')
    }
    return days
  }
  function ceil(date, unit) {
    var floor = startOf(date, unit)
    return eq$6(floor, date) ? floor : add(floor, 1, unit)
  }
  function range$1(start, end) {
    var unit =
      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'day'
    var current = start,
      days = []
    while (lte(current, end, unit)) {
      days.push(current)
      current = add(current, 1, unit)
    }
    return days
  }
  function merge(date, time) {
    if (time == null && date == null) return null
    if (time == null) time = new Date()
    if (date == null) date = new Date()
    date = startOf(date, 'day')
    date = hours(date, hours(time))
    date = minutes(date, minutes(time))
    date = seconds(date, seconds(time))
    return milliseconds(date, milliseconds(time))
  }
  function isJustDate(date) {
    return (
      hours(date) === 0 &&
      minutes(date) === 0 &&
      seconds(date) === 0 &&
      milliseconds(date) === 0
    )
  }
  function diff(dateA, dateB, unit) {
    if (!unit || unit === 'milliseconds') return Math.abs(+dateA - +dateB)

    // the .round() handles an edge case
    // with DST where the total won't be exact
    // since one day in the range may be shorter/longer by an hour
    return Math.round(
      Math.abs(
        +startOf(dateA, unit) / MILLI[unit] -
          +startOf(dateB, unit) / MILLI[unit]
      )
    )
  }

  var localePropType = propTypesExports.oneOfType([
    propTypesExports.string,
    propTypesExports.func,
  ])
  function _format(localizer, formatter, value, format, culture) {
    var result =
      typeof format === 'function'
        ? format(value, culture, localizer)
        : formatter.call(localizer, value, format, culture)
    invariant_1(
      result == null || typeof result === 'string',
      '`localizer format(..)` must return a string, null, or undefined'
    )
    return result
  }

  /**
   * This date conversion was moved out of TimeSlots.js, to
   * allow for localizer override
   * @param {Date} dt - The date to start from
   * @param {Number} minutesFromMidnight
   * @param {Number} offset
   * @returns {Date}
   */
  function getSlotDate(dt, minutesFromMidnight, offset) {
    return new Date(
      dt.getFullYear(),
      dt.getMonth(),
      dt.getDate(),
      0,
      minutesFromMidnight + offset,
      0,
      0
    )
  }
  function getDstOffset(start, end) {
    return start.getTimezoneOffset() - end.getTimezoneOffset()
  }

  // if the start is on a DST-changing day but *after* the moment of DST
  // transition we need to add those extra minutes to our minutesFromMidnight
  function getTotalMin(start, end) {
    return diff(start, end, 'minutes') + getDstOffset(start, end)
  }
  function getMinutesFromMidnight(start) {
    var daystart = startOf(start, 'day')
    return diff(daystart, start, 'minutes') + getDstOffset(daystart, start)
  }

  // These two are used by DateSlotMetrics
  function continuesPrior(start, first) {
    return lt(start, first, 'day')
  }
  function continuesAfter(start, end, last) {
    var singleDayDuration = eq$6(start, end, 'minutes')
    return singleDayDuration
      ? gte(end, last, 'minutes')
      : gt(end, last, 'minutes')
  }

  // These two are used by eventLevels
  function sortEvents$1(_ref) {
    var _ref$evtA = _ref.evtA,
      aStart = _ref$evtA.start,
      aEnd = _ref$evtA.end,
      aAllDay = _ref$evtA.allDay,
      _ref$evtB = _ref.evtB,
      bStart = _ref$evtB.start,
      bEnd = _ref$evtB.end,
      bAllDay = _ref$evtB.allDay
    var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day')
    var durA = diff(aStart, ceil(aEnd, 'day'), 'day')
    var durB = diff(bStart, ceil(bEnd, 'day'), 'day')
    return (
      startSort ||
      // sort by start Day first
      Math.max(durB, 1) - Math.max(durA, 1) ||
      // events spanning multiple days go first
      !!bAllDay - !!aAllDay ||
      // then allDay single day events
      +aStart - +bStart ||
      // then sort by start time
      +aEnd - +bEnd // then sort by end time
    )
  }

  function inEventRange(_ref2) {
    var _ref2$event = _ref2.event,
      start = _ref2$event.start,
      end = _ref2$event.end,
      _ref2$range = _ref2.range,
      rangeStart = _ref2$range.start,
      rangeEnd = _ref2$range.end
    var eStart = startOf(start, 'day')
    var startsBeforeEnd = lte(eStart, rangeEnd, 'day')
    // when the event is zero duration we need to handle a bit differently
    var sameMin = neq(eStart, end, 'minutes')
    var endsAfterStart = sameMin
      ? gt(end, rangeStart, 'minutes')
      : gte(end, rangeStart, 'minutes')
    return startsBeforeEnd && endsAfterStart
  }

  // other localizers treats 'day' and 'date' equality very differently, so we
  // abstract the change the 'localizer.eq(date1, date2, 'day') into this
  // new method, where they can be treated correctly by the localizer overrides
  function isSameDate(date1, date2) {
    return eq$6(date1, date2, 'day')
  }
  function startAndEndAreDateOnly(start, end) {
    return isJustDate(start) && isJustDate(end)
  }
  var DateLocalizer = /*#__PURE__*/ _createClass(function DateLocalizer(spec) {
    var _this = this
    _classCallCheck(this, DateLocalizer)
    invariant_1(
      typeof spec.format === 'function',
      'date localizer `format(..)` must be a function'
    )
    invariant_1(
      typeof spec.firstOfWeek === 'function',
      'date localizer `firstOfWeek(..)` must be a function'
    )
    this.propType = spec.propType || localePropType
    this.formats = spec.formats
    this.format = function () {
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key]
      }
      return _format.apply(void 0, [_this, spec.format].concat(args))
    }
    // These date arithmetic methods can be overriden by the localizer
    this.startOfWeek = spec.firstOfWeek
    this.merge = spec.merge || merge
    this.inRange = spec.inRange || inRange$1
    this.lt = spec.lt || lt
    this.lte = spec.lte || lte
    this.gt = spec.gt || gt
    this.gte = spec.gte || gte
    this.eq = spec.eq || eq$6
    this.neq = spec.neq || neq
    this.startOf = spec.startOf || startOf
    this.endOf = spec.endOf || endOf
    this.add = spec.add || add
    this.range = spec.range || range$1
    this.diff = spec.diff || diff
    this.ceil = spec.ceil || ceil
    this.min = spec.min || min$1
    this.max = spec.max || max$1
    this.minutes = spec.minutes || minutes
    this.firstVisibleDay = spec.firstVisibleDay || firstVisibleDay
    this.lastVisibleDay = spec.lastVisibleDay || lastVisibleDay
    this.visibleDays = spec.visibleDays || visibleDays
    this.getSlotDate = spec.getSlotDate || getSlotDate
    this.getTimezoneOffset =
      spec.getTimezoneOffset ||
      function (value) {
        return value.getTimezoneOffset()
      }
    this.getDstOffset = spec.getDstOffset || getDstOffset
    this.getTotalMin = spec.getTotalMin || getTotalMin
    this.getMinutesFromMidnight =
      spec.getMinutesFromMidnight || getMinutesFromMidnight
    this.continuesPrior = spec.continuesPrior || continuesPrior
    this.continuesAfter = spec.continuesAfter || continuesAfter
    this.sortEvents = spec.sortEvents || sortEvents$1
    this.inEventRange = spec.inEventRange || inEventRange
    this.isSameDate = spec.isSameDate || isSameDate
    this.startAndEndAreDateOnly =
      spec.startAndEndAreDateOnly || startAndEndAreDateOnly
    this.segmentOffset = spec.browserTZOffset ? spec.browserTZOffset() : 0
  })
  function mergeWithDefaults(localizer, culture, formatOverrides, messages) {
    var formats = _objectSpread2(
      _objectSpread2({}, localizer.formats),
      formatOverrides
    )
    return _objectSpread2(
      _objectSpread2({}, localizer),
      {},
      {
        messages: messages,
        startOfWeek: function startOfWeek() {
          return localizer.startOfWeek(culture)
        },
        format: function format(value, _format2) {
          return localizer.format(value, formats[_format2] || _format2, culture)
        },
      }
    )
  }

  var defaultMessages = {
    date: 'Date',
    time: 'Time',
    event: 'Event',
    allDay: 'All Day',
    week: 'Week',
    work_week: 'Work Week',
    day: 'Day',
    month: 'Month',
    previous: 'Back',
    next: 'Next',
    yesterday: 'Yesterday',
    tomorrow: 'Tomorrow',
    today: 'Today',
    agenda: 'Agenda',
    noEventsInRange: 'There are no events in this range.',
    showMore: function showMore(total) {
      return '+'.concat(total, ' more')
    },
  }
  function messages(msgs) {
    return _objectSpread2(_objectSpread2({}, defaultMessages), msgs)
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr)
  }

  function _iterableToArray(iter) {
    if (
      (typeof Symbol !== 'undefined' && iter[Symbol.iterator] != null) ||
      iter['@@iterator'] != null
    )
      return Array.from(iter)
  }

  function _nonIterableSpread() {
    throw new TypeError(
      'Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    )
  }

  function _toConsumableArray(arr) {
    return (
      _arrayWithoutHoles(arr) ||
      _iterableToArray(arr) ||
      _unsupportedIterableToArray(arr) ||
      _nonIterableSpread()
    )
  }

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */

  function baseSlice$2(array, start, end) {
    var index = -1,
      length = array.length

    if (start < 0) {
      start = -start > length ? 0 : length + start
    }
    end = end > length ? length : end
    if (end < 0) {
      end += length
    }
    length = start > end ? 0 : (end - start) >>> 0
    start >>>= 0

    var result = Array(length)
    while (++index < length) {
      result[index] = array[index + start]
    }
    return result
  }

  var _baseSlice = baseSlice$2

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */

  function eq$5(value, other) {
    return value === other || (value !== value && other !== other)
  }

  var eq_1 = eq$5

  /** Detect free variable `global` from Node.js. */

  var freeGlobal$1 =
    typeof commonjsGlobal == 'object' &&
    commonjsGlobal &&
    commonjsGlobal.Object === Object &&
    commonjsGlobal

  var _freeGlobal = freeGlobal$1

  var freeGlobal = _freeGlobal

  /** Detect free variable `self`. */
  var freeSelf =
    typeof self == 'object' && self && self.Object === Object && self

  /** Used as a reference to the global object. */
  var root$8 = freeGlobal || freeSelf || Function('return this')()

  var _root = root$8

  var root$7 = _root

  /** Built-in value references. */
  var Symbol$7 = root$7.Symbol

  var _Symbol = Symbol$7

  var Symbol$6 = _Symbol

  /** Used for built-in method references. */
  var objectProto$g = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$g.hasOwnProperty

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$g.toString

  /** Built-in value references. */
  var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : undefined

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag$1(value) {
    var isOwn = hasOwnProperty$d.call(value, symToStringTag$1),
      tag = value[symToStringTag$1]

    try {
      value[symToStringTag$1] = undefined
      var unmasked = true
    } catch (e) {}

    var result = nativeObjectToString$1.call(value)
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag$1] = tag
      } else {
        delete value[symToStringTag$1]
      }
    }
    return result
  }

  var _getRawTag = getRawTag$1

  /** Used for built-in method references. */

  var objectProto$f = Object.prototype

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto$f.toString

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString$1(value) {
    return nativeObjectToString.call(value)
  }

  var _objectToString = objectToString$1

  var Symbol$5 = _Symbol,
    getRawTag = _getRawTag,
    objectToString = _objectToString

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]'

  /** Built-in value references. */
  var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : undefined

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag$6(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag
    }
    return symToStringTag && symToStringTag in Object(value)
      ? getRawTag(value)
      : objectToString(value)
  }

  var _baseGetTag = baseGetTag$6

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */

  function isObject$9(value) {
    var type = typeof value
    return value != null && (type == 'object' || type == 'function')
  }

  var isObject_1 = isObject$9

  var baseGetTag$5 = _baseGetTag,
    isObject$8 = isObject_1

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
    funcTag$2 = '[object Function]',
    genTag$1 = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]'

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction$4(value) {
    if (!isObject$8(value)) {
      return false
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag$5(value)
    return (
      tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag
    )
  }

  var isFunction_1 = isFunction$4

  /** Used as references for various `Number` constants. */

  var MAX_SAFE_INTEGER$1 = 9007199254740991

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength$3(value) {
    return (
      typeof value == 'number' &&
      value > -1 &&
      value % 1 == 0 &&
      value <= MAX_SAFE_INTEGER$1
    )
  }

  var isLength_1 = isLength$3

  var isFunction$3 = isFunction_1,
    isLength$2 = isLength_1

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike$5(value) {
    return value != null && isLength$2(value.length) && !isFunction$3(value)
  }

  var isArrayLike_1 = isArrayLike$5

  /** Used as references for various `Number` constants. */

  var MAX_SAFE_INTEGER = 9007199254740991

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex$3(value, length) {
    var type = typeof value
    length = length == null ? MAX_SAFE_INTEGER : length

    return (
      !!length &&
      (type == 'number' || (type != 'symbol' && reIsUint.test(value))) &&
      value > -1 &&
      value % 1 == 0 &&
      value < length
    )
  }

  var _isIndex = isIndex$3

  var eq$4 = eq_1,
    isArrayLike$4 = isArrayLike_1,
    isIndex$2 = _isIndex,
    isObject$7 = isObject_1

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall$4(value, index, object) {
    if (!isObject$7(object)) {
      return false
    }
    var type = typeof index
    if (
      type == 'number'
        ? isArrayLike$4(object) && isIndex$2(index, object.length)
        : type == 'string' && index in object
    ) {
      return eq$4(object[index], value)
    }
    return false
  }

  var _isIterateeCall = isIterateeCall$4

  /** Used to match a single whitespace character. */

  var reWhitespace = /\s/

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */
  function trimmedEndIndex$1(string) {
    var index = string.length

    while (index-- && reWhitespace.test(string.charAt(index))) {}
    return index
  }

  var _trimmedEndIndex = trimmedEndIndex$1

  var trimmedEndIndex = _trimmedEndIndex

  /** Used to match leading whitespace. */
  var reTrimStart = /^\s+/

  /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */
  function baseTrim$1(string) {
    return string
      ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
      : string
  }

  var _baseTrim = baseTrim$1

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */

  function isObjectLike$8(value) {
    return value != null && typeof value == 'object'
  }

  var isObjectLike_1 = isObjectLike$8

  var baseGetTag$4 = _baseGetTag,
    isObjectLike$7 = isObjectLike_1

  /** `Object#toString` result references. */
  var symbolTag$3 = '[object Symbol]'

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol$5(value) {
    return (
      typeof value == 'symbol' ||
      (isObjectLike$7(value) && baseGetTag$4(value) == symbolTag$3)
    )
  }

  var isSymbol_1 = isSymbol$5

  var baseTrim = _baseTrim,
    isObject$6 = isObject_1,
    isSymbol$4 = isSymbol_1

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3.2);
   * // => 3.2
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3.2');
   * // => 3.2
   */
  function toNumber$1(value) {
    if (typeof value == 'number') {
      return value
    }
    if (isSymbol$4(value)) {
      return NAN
    }
    if (isObject$6(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value
      value = isObject$6(other) ? other + '' : other
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value
    }
    value = baseTrim(value)
    var isBinary = reIsBinary.test(value)
    return isBinary || reIsOctal.test(value)
      ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
      : reIsBadHex.test(value)
      ? NAN
      : +value
  }

  var toNumber_1 = toNumber$1

  var toNumber = toNumber_1

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0,
    MAX_INTEGER = 1.7976931348623157e308

  /**
   * Converts `value` to a finite number.
   *
   * @static
   * @memberOf _
   * @since 4.12.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted number.
   * @example
   *
   * _.toFinite(3.2);
   * // => 3.2
   *
   * _.toFinite(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toFinite(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toFinite('3.2');
   * // => 3.2
   */
  function toFinite$2(value) {
    if (!value) {
      return value === 0 ? value : 0
    }
    value = toNumber(value)
    if (value === INFINITY$2 || value === -INFINITY$2) {
      var sign = value < 0 ? -1 : 1
      return sign * MAX_INTEGER
    }
    return value === value ? value : 0
  }

  var toFinite_1 = toFinite$2

  var toFinite$1 = toFinite_1

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This method is loosely based on
   * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3.2);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3.2');
   * // => 3
   */
  function toInteger$2(value) {
    var result = toFinite$1(value),
      remainder = result % 1

    return result === result ? (remainder ? result - remainder : result) : 0
  }

  var toInteger_1 = toInteger$2

  var baseSlice$1 = _baseSlice,
    isIterateeCall$3 = _isIterateeCall,
    toInteger$1 = toInteger_1

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeCeil$1 = Math.ceil,
    nativeMax$3 = Math.max

  /**
   * Creates an array of elements split into groups the length of `size`.
   * If `array` can't be split evenly, the final chunk will be the remaining
   * elements.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Array
   * @param {Array} array The array to process.
   * @param {number} [size=1] The length of each chunk
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Array} Returns the new array of chunks.
   * @example
   *
   * _.chunk(['a', 'b', 'c', 'd'], 2);
   * // => [['a', 'b'], ['c', 'd']]
   *
   * _.chunk(['a', 'b', 'c', 'd'], 3);
   * // => [['a', 'b', 'c'], ['d']]
   */
  function chunk(array, size, guard) {
    if (guard ? isIterateeCall$3(array, size, guard) : size === undefined) {
      size = 1
    } else {
      size = nativeMax$3(toInteger$1(size), 0)
    }
    var length = array == null ? 0 : array.length
    if (!length || size < 1) {
      return []
    }
    var index = 0,
      resIndex = 0,
      result = Array(nativeCeil$1(length / size))

    while (index < length) {
      result[resIndex++] = baseSlice$1(array, index, (index += size))
    }
    return result
  }

  var chunk_1 = chunk

  /**
   * Returns the owner document of a given element.
   *
   * @param node the element
   */
  function ownerDocument$1(node) {
    return (node && node.ownerDocument) || document
  }

  /**
   * Returns the owner window of a given element.
   *
   * @param node the element
   */

  function ownerWindow(node) {
    var doc = ownerDocument$1(node)
    return (doc && doc.defaultView) || window
  }

  /**
   * Returns one or all computed style properties of an element.
   *
   * @param node the element
   * @param psuedoElement the style property
   */

  function getComputedStyle$1(node, psuedoElement) {
    return ownerWindow(node).getComputedStyle(node, psuedoElement)
  }

  var rUpper = /([A-Z])/g
  function hyphenate(string) {
    return string.replace(rUpper, '-$1').toLowerCase()
  }

  /**
   * Copyright 2013-2014, Facebook, Inc.
   * All rights reserved.
   * https://github.com/facebook/react/blob/2aeb8a2a6beb00617a4217f7f8284924fa2ad819/src/vendor/core/hyphenateStyleName.js
   */
  var msPattern = /^ms-/
  function hyphenateStyleName(string) {
    return hyphenate(string).replace(msPattern, '-ms-')
  }

  var supportedTransforms =
    /^((translate|rotate|scale)(X|Y|Z|3d)?|matrix(3d)?|perspective|skew(X|Y)?)$/i
  function isTransform(value) {
    return !!(value && supportedTransforms.test(value))
  }

  function style(node, property) {
    var css = ''
    var transforms = ''

    if (typeof property === 'string') {
      return (
        node.style.getPropertyValue(hyphenateStyleName(property)) ||
        getComputedStyle$1(node).getPropertyValue(hyphenateStyleName(property))
      )
    }

    Object.keys(property).forEach(function (key) {
      var value = property[key]

      if (!value && value !== 0) {
        node.style.removeProperty(hyphenateStyleName(key))
      } else if (isTransform(key)) {
        transforms += key + '(' + value + ') '
      } else {
        css += hyphenateStyleName(key) + ': ' + value + ';'
      }
    })

    if (transforms) {
      css += 'transform: ' + transforms + ';'
    }

    node.style.cssText += ';' + css
  }

  /* eslint-disable no-bitwise, no-cond-assign */

  /**
   * Checks if an element contains another given element.
   *
   * @param context the context element
   * @param node the element to check
   */
  function contains$1(context, node) {
    // HTML DOM and SVG DOM may have different support levels,
    // so we need to check on context instead of a document root element.
    if (context.contains) return context.contains(node)
    if (context.compareDocumentPosition)
      return context === node || !!(context.compareDocumentPosition(node) & 16)
  }

  function isDocument(element) {
    return 'nodeType' in element && element.nodeType === document.DOCUMENT_NODE
  }

  function isWindow(node) {
    if ('window' in node && node.window === node) return node
    if (isDocument(node)) return node.defaultView || false
    return false
  }

  function getscrollAccessor(offset) {
    var prop = offset === 'pageXOffset' ? 'scrollLeft' : 'scrollTop'

    function scrollAccessor(node, val) {
      var win = isWindow(node)

      if (val === undefined) {
        return win ? win[offset] : node[prop]
      }

      if (win) {
        win.scrollTo(win[offset], val)
      } else {
        node[prop] = val
      }
    }

    return scrollAccessor
  }

  /**
   * Gets or sets the scroll left position of a given element.
   *
   * @param node the element
   * @param val the position to set
   */

  var scrollLeft = getscrollAccessor('pageXOffset')

  /**
   * Gets or sets the scroll top position of a given element.
   *
   * @param node the element
   * @param val the position to set
   */

  var scrollTop = getscrollAccessor('pageYOffset')

  /**
   * Returns the offset of a given element, including top and left positions, width and height.
   *
   * @param node the element
   */

  function offset$2(node) {
    var doc = ownerDocument$1(node)
    var box = {
      top: 0,
      left: 0,
      height: 0,
      width: 0,
    }
    var docElem = doc && doc.documentElement // Make sure it's not a disconnected DOM node

    if (!docElem || !contains$1(docElem, node)) return box
    if (node.getBoundingClientRect !== undefined)
      box = node.getBoundingClientRect()
    box = {
      top: box.top + scrollTop(docElem) - (docElem.clientTop || 0),
      left: box.left + scrollLeft(docElem) - (docElem.clientLeft || 0),
      width: box.width,
      height: box.height,
    }
    return box
  }

  var isHTMLElement$1 = function isHTMLElement(e) {
    return !!e && 'offsetParent' in e
  }

  function offsetParent(node) {
    var doc = ownerDocument$1(node)
    var parent = node && node.offsetParent

    while (
      isHTMLElement$1(parent) &&
      parent.nodeName !== 'HTML' &&
      style(parent, 'position') === 'static'
    ) {
      parent = parent.offsetParent
    }

    return parent || doc.documentElement
  }

  var nodeName = function nodeName(node) {
    return node.nodeName && node.nodeName.toLowerCase()
  }
  /**
   * Returns the relative position of a given element.
   *
   * @param node the element
   * @param offsetParent the offset parent
   */

  function position(node, offsetParent$1) {
    var parentOffset = {
      top: 0,
      left: 0,
    }
    var offset // Fixed elements are offset from window (parentOffset = {top:0, left: 0},
    // because it is its only offset parent

    if (style(node, 'position') === 'fixed') {
      offset = node.getBoundingClientRect()
    } else {
      var parent = offsetParent$1 || offsetParent(node)
      offset = offset$2(node)
      if (nodeName(parent) !== 'html') parentOffset = offset$2(parent)
      var borderTop = String(style(parent, 'borderTopWidth') || 0)
      parentOffset.top += parseInt(borderTop, 10) - scrollTop(parent) || 0
      var borderLeft = String(style(parent, 'borderLeftWidth') || 0)
      parentOffset.left += parseInt(borderLeft, 10) - scrollLeft(parent) || 0
    }

    var marginTop = String(style(node, 'marginTop') || 0)
    var marginLeft = String(style(node, 'marginLeft') || 0) // Subtract parent offsets and node margins

    return _extends({}, offset, {
      top: offset.top - parentOffset.top - (parseInt(marginTop, 10) || 0),
      left: offset.left - parentOffset.left - (parseInt(marginLeft, 10) || 0),
    })
  }

  var canUseDOM = !!(
    typeof window !== 'undefined' &&
    window.document &&
    window.document.createElement
  )

  /* https://github.com/component/raf */
  var prev = new Date().getTime()

  function fallback(fn) {
    var curr = new Date().getTime()
    var ms = Math.max(0, 16 - (curr - prev))
    var handle = setTimeout(fn, ms)
    prev = curr
    return handle
  }

  var vendors = ['', 'webkit', 'moz', 'o', 'ms']
  var cancelMethod = 'clearTimeout'
  var rafImpl = fallback // eslint-disable-next-line import/no-mutable-exports

  var getKey$1 = function getKey(vendor, k) {
    return (
      vendor +
      (!vendor ? k : k[0].toUpperCase() + k.substr(1)) +
      'AnimationFrame'
    )
  }

  if (canUseDOM) {
    vendors.some(function (vendor) {
      var rafMethod = getKey$1(vendor, 'request')

      if (rafMethod in window) {
        cancelMethod = getKey$1(vendor, 'cancel') // @ts-ignore

        rafImpl = function rafImpl(cb) {
          return window[rafMethod](cb)
        }
      }

      return !!rafImpl
    })
  }

  var cancel = function cancel(id) {
    // @ts-ignore
    if (typeof window[cancelMethod] === 'function') window[cancelMethod](id)
  }
  var request = rafImpl

  var matchesImpl
  /**
   * Checks if a given element matches a selector.
   *
   * @param node the element
   * @param selector the selector
   */

  function matches(node, selector) {
    if (!matchesImpl) {
      var body = document.body
      var nativeMatch =
        body.matches ||
        body.matchesSelector ||
        body.webkitMatchesSelector ||
        body.mozMatchesSelector ||
        body.msMatchesSelector

      matchesImpl = function matchesImpl(n, s) {
        return nativeMatch.call(n, s)
      }
    }

    return matchesImpl(node, selector)
  }

  var toArray = Function.prototype.bind.call(Function.prototype.call, [].slice)
  /**
   * Runs `querySelectorAll` on a given element.
   *
   * @param element the element
   * @param selector the selector
   */

  function qsa(element, selector) {
    return toArray(element.querySelectorAll(selector))
  }

  /* eslint-disable no-return-assign */
  var optionsSupported = false
  var onceSupported = false

  try {
    var options = {
      get passive() {
        return (optionsSupported = true)
      },

      get once() {
        // eslint-disable-next-line no-multi-assign
        return (onceSupported = optionsSupported = true)
      },
    }

    if (canUseDOM) {
      window.addEventListener('test', options, options)
      window.removeEventListener('test', options, true)
    }
  } catch (e) {
    /* */
  }

  /**
   * An `addEventListener` ponyfill, supports the `once` option
   *
   * @param node the element
   * @param eventName the event name
   * @param handle the handler
   * @param options event options
   */
  function addEventListener$1(node, eventName, handler, options) {
    if (options && typeof options !== 'boolean' && !onceSupported) {
      var once = options.once,
        capture = options.capture
      var wrappedHandler = handler

      if (!onceSupported && once) {
        wrappedHandler =
          handler.__once ||
          function onceHandler(event) {
            this.removeEventListener(eventName, onceHandler, capture)
            handler.call(this, event)
          }

        handler.__once = wrappedHandler
      }

      node.addEventListener(
        eventName,
        wrappedHandler,
        optionsSupported ? options : capture
      )
    }

    node.addEventListener(eventName, handler, options)
  }

  /**
   * Creates a `Ref` whose value is updated in an effect, ensuring the most recent
   * value is the one rendered with. Generally only required for Concurrent mode usage
   * where previous work in `render()` may be discarded before being used.
   *
   * This is safe to access in an event handler.
   *
   * @param value The `Ref` value
   */

  function useCommittedRef(value) {
    var ref = reactExports.useRef(value)
    reactExports.useEffect(
      function () {
        ref.current = value
      },
      [value]
    )
    return ref
  }

  function useEventCallback(fn) {
    var ref = useCommittedRef(fn)
    return reactExports.useCallback(
      function () {
        return ref.current && ref.current.apply(ref, arguments)
      },
      [ref]
    )
  }

  /**
   * A convenience hook around `useState` designed to be paired with
   * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.
   * Callback refs are useful over `useRef()` when you need to respond to the ref being set
   * instead of lazily accessing it in an effect.
   *
   * ```ts
   * const [element, attachRef] = useCallbackRef<HTMLDivElement>()
   *
   * useEffect(() => {
   *   if (!element) return
   *
   *   const calendar = new FullCalendar.Calendar(element)
   *
   *   return () => {
   *     calendar.destroy()
   *   }
   * }, [element])
   *
   * return <div ref={attachRef} />
   * ```
   *
   * @category refs
   */

  function useCallbackRef() {
    return reactExports.useState(null)
  }

  /**
   * Track whether a component is current mounted. Generally less preferable than
   * properlly canceling effects so they don't run after a component is unmounted,
   * but helpful in cases where that isn't feasible, such as a `Promise` resolution.
   *
   * @returns a function that returns the current isMounted state of the component
   *
   * ```ts
   * const [data, setData] = useState(null)
   * const isMounted = useMounted()
   *
   * useEffect(() => {
   *   fetchdata().then((newData) => {
   *      if (isMounted()) {
   *        setData(newData);
   *      }
   *   })
   * })
   * ```
   */

  function useMounted() {
    var mounted = reactExports.useRef(true)
    var isMounted = reactExports.useRef(function () {
      return mounted.current
    })
    reactExports.useEffect(function () {
      mounted.current = true
      return function () {
        mounted.current = false
      }
    }, [])
    return isMounted.current
  }

  function useSafeState(state) {
    var isMounted = useMounted()
    return [
      state[0],
      reactExports.useCallback(
        function (nextState) {
          if (!isMounted()) return
          return state[1](nextState)
        },
        [isMounted, state[1]]
      ),
    ]
  }

  var top = 'top'
  var bottom = 'bottom'
  var right = 'right'
  var left = 'left'
  var auto = 'auto'
  var basePlacements = [top, bottom, right, left]
  var start = 'start'
  var end = 'end'
  var clippingParents = 'clippingParents'
  var viewport = 'viewport'
  var popper = 'popper'
  var reference = 'reference'
  var variationPlacements = /*#__PURE__*/ basePlacements.reduce(function (
    acc,
    placement
  ) {
    return acc.concat([placement + '-' + start, placement + '-' + end])
  },
  [])
  var placements = /*#__PURE__*/ []
    .concat(basePlacements, [auto])
    .reduce(function (acc, placement) {
      return acc.concat([
        placement,
        placement + '-' + start,
        placement + '-' + end,
      ])
    }, []) // modifiers that need to read the DOM

  var beforeRead = 'beforeRead'
  var read = 'read'
  var afterRead = 'afterRead' // pure-logic modifiers

  var beforeMain = 'beforeMain'
  var main = 'main'
  var afterMain = 'afterMain' // modifier with the purpose to write to the DOM (or write into a framework state)

  var beforeWrite = 'beforeWrite'
  var write = 'write'
  var afterWrite = 'afterWrite'
  var modifierPhases = [
    beforeRead,
    read,
    afterRead,
    beforeMain,
    main,
    afterMain,
    beforeWrite,
    write,
    afterWrite,
  ]

  function getBasePlacement(placement) {
    return placement.split('-')[0]
  }

  function getWindow(node) {
    if (node == null) {
      return window
    }

    if (node.toString() !== '[object Window]') {
      var ownerDocument = node.ownerDocument
      return ownerDocument ? ownerDocument.defaultView || window : window
    }

    return node
  }

  function isElement(node) {
    var OwnElement = getWindow(node).Element
    return node instanceof OwnElement || node instanceof Element
  }

  function isHTMLElement(node) {
    var OwnElement = getWindow(node).HTMLElement
    return node instanceof OwnElement || node instanceof HTMLElement
  }

  function isShadowRoot(node) {
    // IE 11 has no ShadowRoot
    if (typeof ShadowRoot === 'undefined') {
      return false
    }

    var OwnElement = getWindow(node).ShadowRoot
    return node instanceof OwnElement || node instanceof ShadowRoot
  }

  var max = Math.max
  var min = Math.min
  var round = Math.round

  function getUAString() {
    var uaData = navigator.userAgentData

    if (uaData != null && uaData.brands) {
      return uaData.brands
        .map(function (item) {
          return item.brand + '/' + item.version
        })
        .join(' ')
    }

    return navigator.userAgent
  }

  function isLayoutViewport() {
    return !/^((?!chrome|android).)*safari/i.test(getUAString())
  }

  function getBoundingClientRect(element, includeScale, isFixedStrategy) {
    if (includeScale === void 0) {
      includeScale = false
    }

    if (isFixedStrategy === void 0) {
      isFixedStrategy = false
    }

    var clientRect = element.getBoundingClientRect()
    var scaleX = 1
    var scaleY = 1

    if (includeScale && isHTMLElement(element)) {
      scaleX =
        element.offsetWidth > 0
          ? round(clientRect.width) / element.offsetWidth || 1
          : 1
      scaleY =
        element.offsetHeight > 0
          ? round(clientRect.height) / element.offsetHeight || 1
          : 1
    }

    var _ref = isElement(element) ? getWindow(element) : window,
      visualViewport = _ref.visualViewport

    var addVisualOffsets = !isLayoutViewport() && isFixedStrategy
    var x =
      (clientRect.left +
        (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) /
      scaleX
    var y =
      (clientRect.top +
        (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) /
      scaleY
    var width = clientRect.width / scaleX
    var height = clientRect.height / scaleY
    return {
      width: width,
      height: height,
      top: y,
      right: x + width,
      bottom: y + height,
      left: x,
      x: x,
      y: y,
    }
  }

  // means it doesn't take into account transforms.

  function getLayoutRect(element) {
    var clientRect = getBoundingClientRect(element) // Use the clientRect sizes if it's not been transformed.
    // Fixes https://github.com/popperjs/popper-core/issues/1223

    var width = element.offsetWidth
    var height = element.offsetHeight

    if (Math.abs(clientRect.width - width) <= 1) {
      width = clientRect.width
    }

    if (Math.abs(clientRect.height - height) <= 1) {
      height = clientRect.height
    }

    return {
      x: element.offsetLeft,
      y: element.offsetTop,
      width: width,
      height: height,
    }
  }

  function contains(parent, child) {
    var rootNode = child.getRootNode && child.getRootNode() // First, attempt with faster native method

    if (parent.contains(child)) {
      return true
    } // then fallback to custom implementation with Shadow DOM support
    else if (rootNode && isShadowRoot(rootNode)) {
      var next = child

      do {
        if (next && parent.isSameNode(next)) {
          return true
        } // $FlowFixMe[prop-missing]: need a better way to handle this...

        next = next.parentNode || next.host
      } while (next)
    } // Give up, the result is false

    return false
  }

  function getNodeName(element) {
    return element ? (element.nodeName || '').toLowerCase() : null
  }

  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element)
  }

  function isTableElement(element) {
    return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0
  }

  function getDocumentElement(element) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return (
      (isElement(element)
        ? element.ownerDocument // $FlowFixMe[prop-missing]
        : element.document) || window.document
    ).documentElement
  }

  function getParentNode(element) {
    if (getNodeName(element) === 'html') {
      return element
    }

    return (
      // this is a quicker (but less type safe) way to save quite some bytes from the bundle
      // $FlowFixMe[incompatible-return]
      // $FlowFixMe[prop-missing]
      element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
      element.parentNode || // DOM Element detected
      (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
      // $FlowFixMe[incompatible-call]: HTMLElement is a Node
      getDocumentElement(element) // fallback
    )
  }

  function getTrueOffsetParent(element) {
    if (
      !isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
      getComputedStyle(element).position === 'fixed'
    ) {
      return null
    }

    return element.offsetParent
  } // `.offsetParent` reports `null` for fixed elements, while absolute elements
  // return the containing block

  function getContainingBlock(element) {
    var isFirefox = /firefox/i.test(getUAString())
    var isIE = /Trident/i.test(getUAString())

    if (isIE && isHTMLElement(element)) {
      // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
      var elementCss = getComputedStyle(element)

      if (elementCss.position === 'fixed') {
        return null
      }
    }

    var currentNode = getParentNode(element)

    if (isShadowRoot(currentNode)) {
      currentNode = currentNode.host
    }

    while (
      isHTMLElement(currentNode) &&
      ['html', 'body'].indexOf(getNodeName(currentNode)) < 0
    ) {
      var css = getComputedStyle(currentNode) // This is non-exhaustive but covers the most common CSS properties that
      // create a containing block.
      // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

      if (
        css.transform !== 'none' ||
        css.perspective !== 'none' ||
        css.contain === 'paint' ||
        ['transform', 'perspective'].indexOf(css.willChange) !== -1 ||
        (isFirefox && css.willChange === 'filter') ||
        (isFirefox && css.filter && css.filter !== 'none')
      ) {
        return currentNode
      } else {
        currentNode = currentNode.parentNode
      }
    }

    return null
  } // Gets the closest ancestor positioned element. Handles some edge cases,
  // such as table ancestors and cross browser bugs.

  function getOffsetParent(element) {
    var window = getWindow(element)
    var offsetParent = getTrueOffsetParent(element)

    while (
      offsetParent &&
      isTableElement(offsetParent) &&
      getComputedStyle(offsetParent).position === 'static'
    ) {
      offsetParent = getTrueOffsetParent(offsetParent)
    }

    if (
      offsetParent &&
      (getNodeName(offsetParent) === 'html' ||
        (getNodeName(offsetParent) === 'body' &&
          getComputedStyle(offsetParent).position === 'static'))
    ) {
      return window
    }

    return offsetParent || getContainingBlock(element) || window
  }

  function getMainAxisFromPlacement(placement) {
    return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y'
  }

  function within(min$1, value, max$1) {
    return max(min$1, min(value, max$1))
  }
  function withinMaxClamp(min, value, max) {
    var v = within(min, value, max)
    return v > max ? max : v
  }

  function getFreshSideObject() {
    return {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
    }
  }

  function mergePaddingObject(paddingObject) {
    return Object.assign({}, getFreshSideObject(), paddingObject)
  }

  function expandToHashMap(value, keys) {
    return keys.reduce(function (hashMap, key) {
      hashMap[key] = value
      return hashMap
    }, {})
  }

  var toPaddingObject = function toPaddingObject(padding, state) {
    padding =
      typeof padding === 'function'
        ? padding(
            Object.assign({}, state.rects, {
              placement: state.placement,
            })
          )
        : padding
    return mergePaddingObject(
      typeof padding !== 'number'
        ? padding
        : expandToHashMap(padding, basePlacements)
    )
  }

  function arrow(_ref) {
    var _state$modifiersData$

    var state = _ref.state,
      name = _ref.name,
      options = _ref.options
    var arrowElement = state.elements.arrow
    var popperOffsets = state.modifiersData.popperOffsets
    var basePlacement = getBasePlacement(state.placement)
    var axis = getMainAxisFromPlacement(basePlacement)
    var isVertical = [left, right].indexOf(basePlacement) >= 0
    var len = isVertical ? 'height' : 'width'

    if (!arrowElement || !popperOffsets) {
      return
    }

    var paddingObject = toPaddingObject(options.padding, state)
    var arrowRect = getLayoutRect(arrowElement)
    var minProp = axis === 'y' ? top : left
    var maxProp = axis === 'y' ? bottom : right
    var endDiff =
      state.rects.reference[len] +
      state.rects.reference[axis] -
      popperOffsets[axis] -
      state.rects.popper[len]
    var startDiff = popperOffsets[axis] - state.rects.reference[axis]
    var arrowOffsetParent = getOffsetParent(arrowElement)
    var clientSize = arrowOffsetParent
      ? axis === 'y'
        ? arrowOffsetParent.clientHeight || 0
        : arrowOffsetParent.clientWidth || 0
      : 0
    var centerToReference = endDiff / 2 - startDiff / 2 // Make sure the arrow doesn't overflow the popper if the center point is
    // outside of the popper bounds

    var min = paddingObject[minProp]
    var max = clientSize - arrowRect[len] - paddingObject[maxProp]
    var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference
    var offset = within(min, center, max) // Prevents breaking syntax highlighting...

    var axisProp = axis
    state.modifiersData[name] =
      ((_state$modifiersData$ = {}),
      (_state$modifiersData$[axisProp] = offset),
      (_state$modifiersData$.centerOffset = offset - center),
      _state$modifiersData$)
  }

  function effect$1(_ref2) {
    var state = _ref2.state,
      options = _ref2.options
    var _options$element = options.element,
      arrowElement =
        _options$element === void 0 ? '[data-popper-arrow]' : _options$element

    if (arrowElement == null) {
      return
    } // CSS selector

    if (typeof arrowElement === 'string') {
      arrowElement = state.elements.popper.querySelector(arrowElement)

      if (!arrowElement) {
        return
      }
    }

    {
      if (!isHTMLElement(arrowElement)) {
        console.error(
          [
            'Popper: "arrow" element must be an HTMLElement (not an SVGElement).',
            'To use an SVG arrow, wrap it in an HTMLElement that will be used as',
            'the arrow.',
          ].join(' ')
        )
      }
    }

    if (!contains(state.elements.popper, arrowElement)) {
      {
        console.error(
          [
            'Popper: "arrow" modifier\'s `element` must be a child of the popper',
            'element.',
          ].join(' ')
        )
      }

      return
    }

    state.elements.arrow = arrowElement
  } // eslint-disable-next-line import/no-unused-modules

  var arrow$1 = {
    name: 'arrow',
    enabled: true,
    phase: 'main',
    fn: arrow,
    effect: effect$1,
    requires: ['popperOffsets'],
    requiresIfExists: ['preventOverflow'],
  }

  function getVariation(placement) {
    return placement.split('-')[1]
  }

  var unsetSides = {
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto',
  } // Round the offsets to the nearest suitable subpixel based on the DPR.
  // Zooming can change the DPR, but it seems to report a value that will
  // cleanly divide the values into the appropriate subpixels.

  function roundOffsetsByDPR(_ref) {
    var x = _ref.x,
      y = _ref.y
    var win = window
    var dpr = win.devicePixelRatio || 1
    return {
      x: round(x * dpr) / dpr || 0,
      y: round(y * dpr) / dpr || 0,
    }
  }

  function mapToStyles(_ref2) {
    var _Object$assign2

    var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed
    var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y

    var _ref3 =
      typeof roundOffsets === 'function'
        ? roundOffsets({
            x: x,
            y: y,
          })
        : {
            x: x,
            y: y,
          }

    x = _ref3.x
    y = _ref3.y
    var hasX = offsets.hasOwnProperty('x')
    var hasY = offsets.hasOwnProperty('y')
    var sideX = left
    var sideY = top
    var win = window

    if (adaptive) {
      var offsetParent = getOffsetParent(popper)
      var heightProp = 'clientHeight'
      var widthProp = 'clientWidth'

      if (offsetParent === getWindow(popper)) {
        offsetParent = getDocumentElement(popper)

        if (
          getComputedStyle(offsetParent).position !== 'static' &&
          position === 'absolute'
        ) {
          heightProp = 'scrollHeight'
          widthProp = 'scrollWidth'
        }
      } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it

      offsetParent = offsetParent

      if (
        placement === top ||
        ((placement === left || placement === right) && variation === end)
      ) {
        sideY = bottom
        var offsetY =
          isFixed && offsetParent === win && win.visualViewport
            ? win.visualViewport.height // $FlowFixMe[prop-missing]
            : offsetParent[heightProp]
        y -= offsetY - popperRect.height
        y *= gpuAcceleration ? 1 : -1
      }

      if (
        placement === left ||
        ((placement === top || placement === bottom) && variation === end)
      ) {
        sideX = right
        var offsetX =
          isFixed && offsetParent === win && win.visualViewport
            ? win.visualViewport.width // $FlowFixMe[prop-missing]
            : offsetParent[widthProp]
        x -= offsetX - popperRect.width
        x *= gpuAcceleration ? 1 : -1
      }
    }

    var commonStyles = Object.assign(
      {
        position: position,
      },
      adaptive && unsetSides
    )

    var _ref4 =
      roundOffsets === true
        ? roundOffsetsByDPR({
            x: x,
            y: y,
          })
        : {
            x: x,
            y: y,
          }

    x = _ref4.x
    y = _ref4.y

    if (gpuAcceleration) {
      var _Object$assign

      return Object.assign(
        {},
        commonStyles,
        ((_Object$assign = {}),
        (_Object$assign[sideY] = hasY ? '0' : ''),
        (_Object$assign[sideX] = hasX ? '0' : ''),
        (_Object$assign.transform =
          (win.devicePixelRatio || 1) <= 1
            ? 'translate(' + x + 'px, ' + y + 'px)'
            : 'translate3d(' + x + 'px, ' + y + 'px, 0)'),
        _Object$assign)
      )
    }

    return Object.assign(
      {},
      commonStyles,
      ((_Object$assign2 = {}),
      (_Object$assign2[sideY] = hasY ? y + 'px' : ''),
      (_Object$assign2[sideX] = hasX ? x + 'px' : ''),
      (_Object$assign2.transform = ''),
      _Object$assign2)
    )
  }

  function computeStyles(_ref5) {
    var state = _ref5.state,
      options = _ref5.options
    var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration =
        _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets =
        _options$roundOffsets === void 0 ? true : _options$roundOffsets

    {
      var transitionProperty =
        getComputedStyle(state.elements.popper).transitionProperty || ''

      if (
        adaptive &&
        ['transform', 'top', 'right', 'bottom', 'left'].some(function (
          property
        ) {
          return transitionProperty.indexOf(property) >= 0
        })
      ) {
        console.warn(
          [
            'Popper: Detected CSS transitions on at least one of the following',
            'CSS properties: "transform", "top", "right", "bottom", "left".',
            '\n\n',
            'Disable the "computeStyles" modifier\'s `adaptive` option to allow',
            'for smooth transitions, or remove these properties from the CSS',
            'transition declaration on the popper element if only transitioning',
            'opacity or background-color for example.',
            '\n\n',
            'We recommend using the popper element as a wrapper around an inner',
            'element that can have any CSS property transitioned for animations.',
          ].join(' ')
        )
      }
    }

    var commonStyles = {
      placement: getBasePlacement(state.placement),
      variation: getVariation(state.placement),
      popper: state.elements.popper,
      popperRect: state.rects.popper,
      gpuAcceleration: gpuAcceleration,
      isFixed: state.options.strategy === 'fixed',
    }

    if (state.modifiersData.popperOffsets != null) {
      state.styles.popper = Object.assign(
        {},
        state.styles.popper,
        mapToStyles(
          Object.assign({}, commonStyles, {
            offsets: state.modifiersData.popperOffsets,
            position: state.options.strategy,
            adaptive: adaptive,
            roundOffsets: roundOffsets,
          })
        )
      )
    }

    if (state.modifiersData.arrow != null) {
      state.styles.arrow = Object.assign(
        {},
        state.styles.arrow,
        mapToStyles(
          Object.assign({}, commonStyles, {
            offsets: state.modifiersData.arrow,
            position: 'absolute',
            adaptive: false,
            roundOffsets: roundOffsets,
          })
        )
      )
    }

    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-placement': state.placement,
    })
  } // eslint-disable-next-line import/no-unused-modules

  var computeStyles$1 = {
    name: 'computeStyles',
    enabled: true,
    phase: 'beforeWrite',
    fn: computeStyles,
    data: {},
  }

  var passive = {
    passive: true,
  }

  function effect(_ref) {
    var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options
    var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize
    var window = getWindow(state.elements.popper)
    var scrollParents = [].concat(
      state.scrollParents.reference,
      state.scrollParents.popper
    )

    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.addEventListener('scroll', instance.update, passive)
      })
    }

    if (resize) {
      window.addEventListener('resize', instance.update, passive)
    }

    return function () {
      if (scroll) {
        scrollParents.forEach(function (scrollParent) {
          scrollParent.removeEventListener('scroll', instance.update, passive)
        })
      }

      if (resize) {
        window.removeEventListener('resize', instance.update, passive)
      }
    }
  } // eslint-disable-next-line import/no-unused-modules

  var eventListeners = {
    name: 'eventListeners',
    enabled: true,
    phase: 'write',
    fn: function fn() {},
    effect: effect,
    data: {},
  }

  var hash$1 = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom',
  }
  function getOppositePlacement(placement) {
    return placement.replace(/left|right|bottom|top/g, function (matched) {
      return hash$1[matched]
    })
  }

  var hash = {
    start: 'end',
    end: 'start',
  }
  function getOppositeVariationPlacement(placement) {
    return placement.replace(/start|end/g, function (matched) {
      return hash[matched]
    })
  }

  function getWindowScroll(node) {
    var win = getWindow(node)
    var scrollLeft = win.pageXOffset
    var scrollTop = win.pageYOffset
    return {
      scrollLeft: scrollLeft,
      scrollTop: scrollTop,
    }
  }

  function getWindowScrollBarX(element) {
    // If <html> has a CSS width greater than the viewport, then this will be
    // incorrect for RTL.
    // Popper 1 is broken in this case and never had a bug report so let's assume
    // it's not an issue. I don't think anyone ever specifies width on <html>
    // anyway.
    // Browsers where the left scrollbar doesn't cause an issue report `0` for
    // this (e.g. Edge 2019, IE11, Safari)
    return (
      getBoundingClientRect(getDocumentElement(element)).left +
      getWindowScroll(element).scrollLeft
    )
  }

  function getViewportRect(element, strategy) {
    var win = getWindow(element)
    var html = getDocumentElement(element)
    var visualViewport = win.visualViewport
    var width = html.clientWidth
    var height = html.clientHeight
    var x = 0
    var y = 0

    if (visualViewport) {
      width = visualViewport.width
      height = visualViewport.height
      var layoutViewport = isLayoutViewport()

      if (layoutViewport || (!layoutViewport && strategy === 'fixed')) {
        x = visualViewport.offsetLeft
        y = visualViewport.offsetTop
      }
    }

    return {
      width: width,
      height: height,
      x: x + getWindowScrollBarX(element),
      y: y,
    }
  }

  // of the `<html>` and `<body>` rect bounds if horizontally scrollable

  function getDocumentRect(element) {
    var _element$ownerDocumen

    var html = getDocumentElement(element)
    var winScroll = getWindowScroll(element)
    var body =
      (_element$ownerDocumen = element.ownerDocument) == null
        ? void 0
        : _element$ownerDocumen.body
    var width = max(
      html.scrollWidth,
      html.clientWidth,
      body ? body.scrollWidth : 0,
      body ? body.clientWidth : 0
    )
    var height = max(
      html.scrollHeight,
      html.clientHeight,
      body ? body.scrollHeight : 0,
      body ? body.clientHeight : 0
    )
    var x = -winScroll.scrollLeft + getWindowScrollBarX(element)
    var y = -winScroll.scrollTop

    if (getComputedStyle(body || html).direction === 'rtl') {
      x += max(html.clientWidth, body ? body.clientWidth : 0) - width
    }

    return {
      width: width,
      height: height,
      x: x,
      y: y,
    }
  }

  function isScrollParent(element) {
    // Firefox wants us to check `-x` and `-y` variations as well
    var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY

    return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX)
  }

  function getScrollParent(node) {
    if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
      // $FlowFixMe[incompatible-return]: assume body is always available
      return node.ownerDocument.body
    }

    if (isHTMLElement(node) && isScrollParent(node)) {
      return node
    }

    return getScrollParent(getParentNode(node))
  }

  /*
  given a DOM element, return the list of all scroll parents, up the list of ancesors
  until we get to the top window object. This list is what we attach scroll listeners
  to, because if any of these parent elements scroll, we'll need to re-calculate the
  reference element's position.
  */

  function listScrollParents(element, list) {
    var _element$ownerDocumen

    if (list === void 0) {
      list = []
    }

    var scrollParent = getScrollParent(element)
    var isBody =
      scrollParent ===
      ((_element$ownerDocumen = element.ownerDocument) == null
        ? void 0
        : _element$ownerDocumen.body)
    var win = getWindow(scrollParent)
    var target = isBody
      ? [win].concat(
          win.visualViewport || [],
          isScrollParent(scrollParent) ? scrollParent : []
        )
      : scrollParent
    var updatedList = list.concat(target)
    return isBody
      ? updatedList // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
      : updatedList.concat(listScrollParents(getParentNode(target)))
  }

  function rectToClientRect(rect) {
    return Object.assign({}, rect, {
      left: rect.x,
      top: rect.y,
      right: rect.x + rect.width,
      bottom: rect.y + rect.height,
    })
  }

  function getInnerBoundingClientRect(element, strategy) {
    var rect = getBoundingClientRect(element, false, strategy === 'fixed')
    rect.top = rect.top + element.clientTop
    rect.left = rect.left + element.clientLeft
    rect.bottom = rect.top + element.clientHeight
    rect.right = rect.left + element.clientWidth
    rect.width = element.clientWidth
    rect.height = element.clientHeight
    rect.x = rect.left
    rect.y = rect.top
    return rect
  }

  function getClientRectFromMixedType(element, clippingParent, strategy) {
    return clippingParent === viewport
      ? rectToClientRect(getViewportRect(element, strategy))
      : isElement(clippingParent)
      ? getInnerBoundingClientRect(clippingParent, strategy)
      : rectToClientRect(getDocumentRect(getDocumentElement(element)))
  } // A "clipping parent" is an overflowable container with the characteristic of
  // clipping (or hiding) overflowing elements with a position different from
  // `initial`

  function getClippingParents(element) {
    var clippingParents = listScrollParents(getParentNode(element))
    var canEscapeClipping =
      ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0
    var clipperElement =
      canEscapeClipping && isHTMLElement(element)
        ? getOffsetParent(element)
        : element

    if (!isElement(clipperElement)) {
      return []
    } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414

    return clippingParents.filter(function (clippingParent) {
      return (
        isElement(clippingParent) &&
        contains(clippingParent, clipperElement) &&
        getNodeName(clippingParent) !== 'body'
      )
    })
  } // Gets the maximum area that the element is visible in due to any number of
  // clipping parents

  function getClippingRect(element, boundary, rootBoundary, strategy) {
    var mainClippingParents =
      boundary === 'clippingParents'
        ? getClippingParents(element)
        : [].concat(boundary)
    var clippingParents = [].concat(mainClippingParents, [rootBoundary])
    var firstClippingParent = clippingParents[0]
    var clippingRect = clippingParents.reduce(function (
      accRect,
      clippingParent
    ) {
      var rect = getClientRectFromMixedType(element, clippingParent, strategy)
      accRect.top = max(rect.top, accRect.top)
      accRect.right = min(rect.right, accRect.right)
      accRect.bottom = min(rect.bottom, accRect.bottom)
      accRect.left = max(rect.left, accRect.left)
      return accRect
    },
    getClientRectFromMixedType(element, firstClippingParent, strategy))
    clippingRect.width = clippingRect.right - clippingRect.left
    clippingRect.height = clippingRect.bottom - clippingRect.top
    clippingRect.x = clippingRect.left
    clippingRect.y = clippingRect.top
    return clippingRect
  }

  function computeOffsets(_ref) {
    var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement
    var basePlacement = placement ? getBasePlacement(placement) : null
    var variation = placement ? getVariation(placement) : null
    var commonX = reference.x + reference.width / 2 - element.width / 2
    var commonY = reference.y + reference.height / 2 - element.height / 2
    var offsets

    switch (basePlacement) {
      case top:
        offsets = {
          x: commonX,
          y: reference.y - element.height,
        }
        break

      case bottom:
        offsets = {
          x: commonX,
          y: reference.y + reference.height,
        }
        break

      case right:
        offsets = {
          x: reference.x + reference.width,
          y: commonY,
        }
        break

      case left:
        offsets = {
          x: reference.x - element.width,
          y: commonY,
        }
        break

      default:
        offsets = {
          x: reference.x,
          y: reference.y,
        }
    }

    var mainAxis = basePlacement
      ? getMainAxisFromPlacement(basePlacement)
      : null

    if (mainAxis != null) {
      var len = mainAxis === 'y' ? 'height' : 'width'

      switch (variation) {
        case start:
          offsets[mainAxis] =
            offsets[mainAxis] - (reference[len] / 2 - element[len] / 2)
          break

        case end:
          offsets[mainAxis] =
            offsets[mainAxis] + (reference[len] / 2 - element[len] / 2)
          break
      }
    }

    return offsets
  }

  function detectOverflow(state, options) {
    if (options === void 0) {
      options = {}
    }

    var _options = options,
      _options$placement = _options.placement,
      placement =
        _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy =
        _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary =
        _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary =
        _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext =
        _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary =
        _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding
    var paddingObject = mergePaddingObject(
      typeof padding !== 'number'
        ? padding
        : expandToHashMap(padding, basePlacements)
    )
    var altContext = elementContext === popper ? reference : popper
    var popperRect = state.rects.popper
    var element = state.elements[altBoundary ? altContext : elementContext]
    var clippingClientRect = getClippingRect(
      isElement(element)
        ? element
        : element.contextElement || getDocumentElement(state.elements.popper),
      boundary,
      rootBoundary,
      strategy
    )
    var referenceClientRect = getBoundingClientRect(state.elements.reference)
    var popperOffsets = computeOffsets({
      reference: referenceClientRect,
      element: popperRect,
      strategy: 'absolute',
      placement: placement,
    })
    var popperClientRect = rectToClientRect(
      Object.assign({}, popperRect, popperOffsets)
    )
    var elementClientRect =
      elementContext === popper ? popperClientRect : referenceClientRect // positive = overflowing the clipping rect
    // 0 or negative = within the clipping rect

    var overflowOffsets = {
      top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
      bottom:
        elementClientRect.bottom -
        clippingClientRect.bottom +
        paddingObject.bottom,
      left:
        clippingClientRect.left - elementClientRect.left + paddingObject.left,
      right:
        elementClientRect.right -
        clippingClientRect.right +
        paddingObject.right,
    }
    var offsetData = state.modifiersData.offset // Offsets can be applied only to the popper element

    if (elementContext === popper && offsetData) {
      var offset = offsetData[placement]
      Object.keys(overflowOffsets).forEach(function (key) {
        var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1
        var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x'
        overflowOffsets[key] += offset[axis] * multiply
      })
    }

    return overflowOffsets
  }

  function computeAutoPlacement(state, options) {
    if (options === void 0) {
      options = {}
    }

    var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements =
        _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP
    var variation = getVariation(placement)
    var placements$1 = variation
      ? flipVariations
        ? variationPlacements
        : variationPlacements.filter(function (placement) {
            return getVariation(placement) === variation
          })
      : basePlacements
    var allowedPlacements = placements$1.filter(function (placement) {
      return allowedAutoPlacements.indexOf(placement) >= 0
    })

    if (allowedPlacements.length === 0) {
      allowedPlacements = placements$1

      {
        console.error(
          [
            'Popper: The `allowedAutoPlacements` option did not allow any',
            'placements. Ensure the `placement` option matches the variation',
            'of the allowed placements.',
            'For example, "auto" cannot be used to allow "bottom-start".',
            'Use "auto-start" instead.',
          ].join(' ')
        )
      }
    } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...

    var overflows = allowedPlacements.reduce(function (acc, placement) {
      acc[placement] = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        padding: padding,
      })[getBasePlacement(placement)]
      return acc
    }, {})
    return Object.keys(overflows).sort(function (a, b) {
      return overflows[a] - overflows[b]
    })
  }

  function getExpandedFallbackPlacements(placement) {
    if (getBasePlacement(placement) === auto) {
      return []
    }

    var oppositePlacement = getOppositePlacement(placement)
    return [
      getOppositeVariationPlacement(placement),
      oppositePlacement,
      getOppositeVariationPlacement(oppositePlacement),
    ]
  }

  function flip(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name

    if (state.modifiersData[name]._skip) {
      return
    }

    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations =
        _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements
    var preferredPlacement = state.options.placement
    var basePlacement = getBasePlacement(preferredPlacement)
    var isBasePlacement = basePlacement === preferredPlacement
    var fallbackPlacements =
      specifiedFallbackPlacements ||
      (isBasePlacement || !flipVariations
        ? [getOppositePlacement(preferredPlacement)]
        : getExpandedFallbackPlacements(preferredPlacement))
    var placements = [preferredPlacement]
      .concat(fallbackPlacements)
      .reduce(function (acc, placement) {
        return acc.concat(
          getBasePlacement(placement) === auto
            ? computeAutoPlacement(state, {
                placement: placement,
                boundary: boundary,
                rootBoundary: rootBoundary,
                padding: padding,
                flipVariations: flipVariations,
                allowedAutoPlacements: allowedAutoPlacements,
              })
            : placement
        )
      }, [])
    var referenceRect = state.rects.reference
    var popperRect = state.rects.popper
    var checksMap = new Map()
    var makeFallbackChecks = true
    var firstFittingPlacement = placements[0]

    for (var i = 0; i < placements.length; i++) {
      var placement = placements[i]

      var _basePlacement = getBasePlacement(placement)

      var isStartVariation = getVariation(placement) === start
      var isVertical = [top, bottom].indexOf(_basePlacement) >= 0
      var len = isVertical ? 'width' : 'height'
      var overflow = detectOverflow(state, {
        placement: placement,
        boundary: boundary,
        rootBoundary: rootBoundary,
        altBoundary: altBoundary,
        padding: padding,
      })
      var mainVariationSide = isVertical
        ? isStartVariation
          ? right
          : left
        : isStartVariation
        ? bottom
        : top

      if (referenceRect[len] > popperRect[len]) {
        mainVariationSide = getOppositePlacement(mainVariationSide)
      }

      var altVariationSide = getOppositePlacement(mainVariationSide)
      var checks = []

      if (checkMainAxis) {
        checks.push(overflow[_basePlacement] <= 0)
      }

      if (checkAltAxis) {
        checks.push(
          overflow[mainVariationSide] <= 0,
          overflow[altVariationSide] <= 0
        )
      }

      if (
        checks.every(function (check) {
          return check
        })
      ) {
        firstFittingPlacement = placement
        makeFallbackChecks = false
        break
      }

      checksMap.set(placement, checks)
    }

    if (makeFallbackChecks) {
      // `2` may be desired in some cases – research later
      var numberOfChecks = flipVariations ? 3 : 1

      var _loop = function _loop(_i) {
        var fittingPlacement = placements.find(function (placement) {
          var checks = checksMap.get(placement)

          if (checks) {
            return checks.slice(0, _i).every(function (check) {
              return check
            })
          }
        })

        if (fittingPlacement) {
          firstFittingPlacement = fittingPlacement
          return 'break'
        }
      }

      for (var _i = numberOfChecks; _i > 0; _i--) {
        var _ret = _loop(_i)

        if (_ret === 'break') break
      }
    }

    if (state.placement !== firstFittingPlacement) {
      state.modifiersData[name]._skip = true
      state.placement = firstFittingPlacement
      state.reset = true
    }
  } // eslint-disable-next-line import/no-unused-modules

  var flip$1 = {
    name: 'flip',
    enabled: true,
    phase: 'main',
    fn: flip,
    requiresIfExists: ['offset'],
    data: {
      _skip: false,
    },
  }

  function getSideOffsets(overflow, rect, preventedOffsets) {
    if (preventedOffsets === void 0) {
      preventedOffsets = {
        x: 0,
        y: 0,
      }
    }

    return {
      top: overflow.top - rect.height - preventedOffsets.y,
      right: overflow.right - rect.width + preventedOffsets.x,
      bottom: overflow.bottom - rect.height + preventedOffsets.y,
      left: overflow.left - rect.width - preventedOffsets.x,
    }
  }

  function isAnySideFullyClipped(overflow) {
    return [top, right, bottom, left].some(function (side) {
      return overflow[side] >= 0
    })
  }

  function hide(_ref) {
    var state = _ref.state,
      name = _ref.name
    var referenceRect = state.rects.reference
    var popperRect = state.rects.popper
    var preventedOffsets = state.modifiersData.preventOverflow
    var referenceOverflow = detectOverflow(state, {
      elementContext: 'reference',
    })
    var popperAltOverflow = detectOverflow(state, {
      altBoundary: true,
    })
    var referenceClippingOffsets = getSideOffsets(
      referenceOverflow,
      referenceRect
    )
    var popperEscapeOffsets = getSideOffsets(
      popperAltOverflow,
      popperRect,
      preventedOffsets
    )
    var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets)
    var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets)
    state.modifiersData[name] = {
      referenceClippingOffsets: referenceClippingOffsets,
      popperEscapeOffsets: popperEscapeOffsets,
      isReferenceHidden: isReferenceHidden,
      hasPopperEscaped: hasPopperEscaped,
    }
    state.attributes.popper = Object.assign({}, state.attributes.popper, {
      'data-popper-reference-hidden': isReferenceHidden,
      'data-popper-escaped': hasPopperEscaped,
    })
  } // eslint-disable-next-line import/no-unused-modules

  var hide$1 = {
    name: 'hide',
    enabled: true,
    phase: 'main',
    requiresIfExists: ['preventOverflow'],
    fn: hide,
  }

  function distanceAndSkiddingToXY(placement, rects, offset) {
    var basePlacement = getBasePlacement(placement)
    var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1

    var _ref =
        typeof offset === 'function'
          ? offset(
              Object.assign({}, rects, {
                placement: placement,
              })
            )
          : offset,
      skidding = _ref[0],
      distance = _ref[1]

    skidding = skidding || 0
    distance = (distance || 0) * invertDistance
    return [left, right].indexOf(basePlacement) >= 0
      ? {
          x: distance,
          y: skidding,
        }
      : {
          x: skidding,
          y: distance,
        }
  }

  function offset(_ref2) {
    var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name
    var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset
    var data = placements.reduce(function (acc, placement) {
      acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset)
      return acc
    }, {})
    var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y

    if (state.modifiersData.popperOffsets != null) {
      state.modifiersData.popperOffsets.x += x
      state.modifiersData.popperOffsets.y += y
    }

    state.modifiersData[name] = data
  } // eslint-disable-next-line import/no-unused-modules

  var offset$1 = {
    name: 'offset',
    enabled: true,
    phase: 'main',
    requires: ['popperOffsets'],
    fn: offset,
  }

  function popperOffsets(_ref) {
    var state = _ref.state,
      name = _ref.name
    // Offsets are the actual position the popper needs to have to be
    // properly positioned near its reference element
    // This is the most basic placement, and will be adjusted by
    // the modifiers in the next step
    state.modifiersData[name] = computeOffsets({
      reference: state.rects.reference,
      element: state.rects.popper,
      strategy: 'absolute',
      placement: state.placement,
    })
  } // eslint-disable-next-line import/no-unused-modules

  var popperOffsets$1 = {
    name: 'popperOffsets',
    enabled: true,
    phase: 'read',
    fn: popperOffsets,
    data: {},
  }

  function getAltAxis(axis) {
    return axis === 'x' ? 'y' : 'x'
  }

  function preventOverflow(_ref) {
    var state = _ref.state,
      options = _ref.options,
      name = _ref.name
    var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset =
        _options$tetherOffset === void 0 ? 0 : _options$tetherOffset
    var overflow = detectOverflow(state, {
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      altBoundary: altBoundary,
    })
    var basePlacement = getBasePlacement(state.placement)
    var variation = getVariation(state.placement)
    var isBasePlacement = !variation
    var mainAxis = getMainAxisFromPlacement(basePlacement)
    var altAxis = getAltAxis(mainAxis)
    var popperOffsets = state.modifiersData.popperOffsets
    var referenceRect = state.rects.reference
    var popperRect = state.rects.popper
    var tetherOffsetValue =
      typeof tetherOffset === 'function'
        ? tetherOffset(
            Object.assign({}, state.rects, {
              placement: state.placement,
            })
          )
        : tetherOffset
    var normalizedTetherOffsetValue =
      typeof tetherOffsetValue === 'number'
        ? {
            mainAxis: tetherOffsetValue,
            altAxis: tetherOffsetValue,
          }
        : Object.assign(
            {
              mainAxis: 0,
              altAxis: 0,
            },
            tetherOffsetValue
          )
    var offsetModifierState = state.modifiersData.offset
      ? state.modifiersData.offset[state.placement]
      : null
    var data = {
      x: 0,
      y: 0,
    }

    if (!popperOffsets) {
      return
    }

    if (checkMainAxis) {
      var _offsetModifierState$

      var mainSide = mainAxis === 'y' ? top : left
      var altSide = mainAxis === 'y' ? bottom : right
      var len = mainAxis === 'y' ? 'height' : 'width'
      var offset = popperOffsets[mainAxis]
      var min$1 = offset + overflow[mainSide]
      var max$1 = offset - overflow[altSide]
      var additive = tether ? -popperRect[len] / 2 : 0
      var minLen = variation === start ? referenceRect[len] : popperRect[len]
      var maxLen = variation === start ? -popperRect[len] : -referenceRect[len] // We need to include the arrow in the calculation so the arrow doesn't go
      // outside the reference bounds

      var arrowElement = state.elements.arrow
      var arrowRect =
        tether && arrowElement
          ? getLayoutRect(arrowElement)
          : {
              width: 0,
              height: 0,
            }
      var arrowPaddingObject = state.modifiersData['arrow#persistent']
        ? state.modifiersData['arrow#persistent'].padding
        : getFreshSideObject()
      var arrowPaddingMin = arrowPaddingObject[mainSide]
      var arrowPaddingMax = arrowPaddingObject[altSide] // If the reference length is smaller than the arrow length, we don't want
      // to include its full size in the calculation. If the reference is small
      // and near the edge of a boundary, the popper can overflow even if the
      // reference is not overflowing as well (e.g. virtual elements with no
      // width or height)

      var arrowLen = within(0, referenceRect[len], arrowRect[len])
      var minOffset = isBasePlacement
        ? referenceRect[len] / 2 -
          additive -
          arrowLen -
          arrowPaddingMin -
          normalizedTetherOffsetValue.mainAxis
        : minLen -
          arrowLen -
          arrowPaddingMin -
          normalizedTetherOffsetValue.mainAxis
      var maxOffset = isBasePlacement
        ? -referenceRect[len] / 2 +
          additive +
          arrowLen +
          arrowPaddingMax +
          normalizedTetherOffsetValue.mainAxis
        : maxLen +
          arrowLen +
          arrowPaddingMax +
          normalizedTetherOffsetValue.mainAxis
      var arrowOffsetParent =
        state.elements.arrow && getOffsetParent(state.elements.arrow)
      var clientOffset = arrowOffsetParent
        ? mainAxis === 'y'
          ? arrowOffsetParent.clientTop || 0
          : arrowOffsetParent.clientLeft || 0
        : 0
      var offsetModifierValue =
        (_offsetModifierState$ =
          offsetModifierState == null
            ? void 0
            : offsetModifierState[mainAxis]) != null
          ? _offsetModifierState$
          : 0
      var tetherMin = offset + minOffset - offsetModifierValue - clientOffset
      var tetherMax = offset + maxOffset - offsetModifierValue
      var preventedOffset = within(
        tether ? min(min$1, tetherMin) : min$1,
        offset,
        tether ? max(max$1, tetherMax) : max$1
      )
      popperOffsets[mainAxis] = preventedOffset
      data[mainAxis] = preventedOffset - offset
    }

    if (checkAltAxis) {
      var _offsetModifierState$2

      var _mainSide = mainAxis === 'x' ? top : left

      var _altSide = mainAxis === 'x' ? bottom : right

      var _offset = popperOffsets[altAxis]

      var _len = altAxis === 'y' ? 'height' : 'width'

      var _min = _offset + overflow[_mainSide]

      var _max = _offset - overflow[_altSide]

      var isOriginSide = [top, left].indexOf(basePlacement) !== -1

      var _offsetModifierValue =
        (_offsetModifierState$2 =
          offsetModifierState == null
            ? void 0
            : offsetModifierState[altAxis]) != null
          ? _offsetModifierState$2
          : 0

      var _tetherMin = isOriginSide
        ? _min
        : _offset -
          referenceRect[_len] -
          popperRect[_len] -
          _offsetModifierValue +
          normalizedTetherOffsetValue.altAxis

      var _tetherMax = isOriginSide
        ? _offset +
          referenceRect[_len] +
          popperRect[_len] -
          _offsetModifierValue -
          normalizedTetherOffsetValue.altAxis
        : _max

      var _preventedOffset =
        tether && isOriginSide
          ? withinMaxClamp(_tetherMin, _offset, _tetherMax)
          : within(
              tether ? _tetherMin : _min,
              _offset,
              tether ? _tetherMax : _max
            )

      popperOffsets[altAxis] = _preventedOffset
      data[altAxis] = _preventedOffset - _offset
    }

    state.modifiersData[name] = data
  } // eslint-disable-next-line import/no-unused-modules

  var preventOverflow$1 = {
    name: 'preventOverflow',
    enabled: true,
    phase: 'main',
    fn: preventOverflow,
    requiresIfExists: ['offset'],
  }

  function getHTMLElementScroll(element) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop,
    }
  }

  function getNodeScroll(node) {
    if (node === getWindow(node) || !isHTMLElement(node)) {
      return getWindowScroll(node)
    } else {
      return getHTMLElementScroll(node)
    }
  }

  function isElementScaled(element) {
    var rect = element.getBoundingClientRect()
    var scaleX = round(rect.width) / element.offsetWidth || 1
    var scaleY = round(rect.height) / element.offsetHeight || 1
    return scaleX !== 1 || scaleY !== 1
  } // Returns the composite rect of an element relative to its offsetParent.
  // Composite means it takes into account transforms as well as layout.

  function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
    if (isFixed === void 0) {
      isFixed = false
    }

    var isOffsetParentAnElement = isHTMLElement(offsetParent)
    var offsetParentIsScaled =
      isHTMLElement(offsetParent) && isElementScaled(offsetParent)
    var documentElement = getDocumentElement(offsetParent)
    var rect = getBoundingClientRect(
      elementOrVirtualElement,
      offsetParentIsScaled,
      isFixed
    )
    var scroll = {
      scrollLeft: 0,
      scrollTop: 0,
    }
    var offsets = {
      x: 0,
      y: 0,
    }

    if (isOffsetParentAnElement || (!isOffsetParentAnElement && !isFixed)) {
      if (
        getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
        isScrollParent(documentElement)
      ) {
        scroll = getNodeScroll(offsetParent)
      }

      if (isHTMLElement(offsetParent)) {
        offsets = getBoundingClientRect(offsetParent, true)
        offsets.x += offsetParent.clientLeft
        offsets.y += offsetParent.clientTop
      } else if (documentElement) {
        offsets.x = getWindowScrollBarX(documentElement)
      }
    }

    return {
      x: rect.left + scroll.scrollLeft - offsets.x,
      y: rect.top + scroll.scrollTop - offsets.y,
      width: rect.width,
      height: rect.height,
    }
  }

  function order(modifiers) {
    var map = new Map()
    var visited = new Set()
    var result = []
    modifiers.forEach(function (modifier) {
      map.set(modifier.name, modifier)
    }) // On visiting object, check for its dependencies and visit them recursively

    function sort(modifier) {
      visited.add(modifier.name)
      var requires = [].concat(
        modifier.requires || [],
        modifier.requiresIfExists || []
      )
      requires.forEach(function (dep) {
        if (!visited.has(dep)) {
          var depModifier = map.get(dep)

          if (depModifier) {
            sort(depModifier)
          }
        }
      })
      result.push(modifier)
    }

    modifiers.forEach(function (modifier) {
      if (!visited.has(modifier.name)) {
        // check for visited object
        sort(modifier)
      }
    })
    return result
  }

  function orderModifiers(modifiers) {
    // order based on dependencies
    var orderedModifiers = order(modifiers) // order based on phase

    return modifierPhases.reduce(function (acc, phase) {
      return acc.concat(
        orderedModifiers.filter(function (modifier) {
          return modifier.phase === phase
        })
      )
    }, [])
  }

  function debounce(fn) {
    var pending
    return function () {
      if (!pending) {
        pending = new Promise(function (resolve) {
          Promise.resolve().then(function () {
            pending = undefined
            resolve(fn())
          })
        })
      }

      return pending
    }
  }

  function format(str) {
    for (
      var _len = arguments.length,
        args = new Array(_len > 1 ? _len - 1 : 0),
        _key = 1;
      _key < _len;
      _key++
    ) {
      args[_key - 1] = arguments[_key]
    }

    return [].concat(args).reduce(function (p, c) {
      return p.replace(/%s/, c)
    }, str)
  }

  var INVALID_MODIFIER_ERROR =
    'Popper: modifier "%s" provided an invalid %s property, expected %s but got %s'
  var MISSING_DEPENDENCY_ERROR =
    'Popper: modifier "%s" requires "%s", but "%s" modifier is not available'
  var VALID_PROPERTIES = [
    'name',
    'enabled',
    'phase',
    'fn',
    'effect',
    'requires',
    'options',
  ]
  function validateModifiers(modifiers) {
    modifiers.forEach(function (modifier) {
      ;[]
        .concat(Object.keys(modifier), VALID_PROPERTIES) // IE11-compatible replacement for `new Set(iterable)`
        .filter(function (value, index, self) {
          return self.indexOf(value) === index
        })
        .forEach(function (key) {
          switch (key) {
            case 'name':
              if (typeof modifier.name !== 'string') {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    String(modifier.name),
                    '"name"',
                    '"string"',
                    '"' + String(modifier.name) + '"'
                  )
                )
              }

              break

            case 'enabled':
              if (typeof modifier.enabled !== 'boolean') {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"enabled"',
                    '"boolean"',
                    '"' + String(modifier.enabled) + '"'
                  )
                )
              }

              break

            case 'phase':
              if (modifierPhases.indexOf(modifier.phase) < 0) {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"phase"',
                    'either ' + modifierPhases.join(', '),
                    '"' + String(modifier.phase) + '"'
                  )
                )
              }

              break

            case 'fn':
              if (typeof modifier.fn !== 'function') {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"fn"',
                    '"function"',
                    '"' + String(modifier.fn) + '"'
                  )
                )
              }

              break

            case 'effect':
              if (
                modifier.effect != null &&
                typeof modifier.effect !== 'function'
              ) {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"effect"',
                    '"function"',
                    '"' + String(modifier.fn) + '"'
                  )
                )
              }

              break

            case 'requires':
              if (
                modifier.requires != null &&
                !Array.isArray(modifier.requires)
              ) {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"requires"',
                    '"array"',
                    '"' + String(modifier.requires) + '"'
                  )
                )
              }

              break

            case 'requiresIfExists':
              if (!Array.isArray(modifier.requiresIfExists)) {
                console.error(
                  format(
                    INVALID_MODIFIER_ERROR,
                    modifier.name,
                    '"requiresIfExists"',
                    '"array"',
                    '"' + String(modifier.requiresIfExists) + '"'
                  )
                )
              }

              break

            case 'options':
            case 'data':
              break

            default:
              console.error(
                'PopperJS: an invalid property has been provided to the "' +
                  modifier.name +
                  '" modifier, valid properties are ' +
                  VALID_PROPERTIES.map(function (s) {
                    return '"' + s + '"'
                  }).join(', ') +
                  '; but "' +
                  key +
                  '" was provided.'
              )
          }

          modifier.requires &&
            modifier.requires.forEach(function (requirement) {
              if (
                modifiers.find(function (mod) {
                  return mod.name === requirement
                }) == null
              ) {
                console.error(
                  format(
                    MISSING_DEPENDENCY_ERROR,
                    String(modifier.name),
                    requirement,
                    requirement
                  )
                )
              }
            })
        })
    })
  }

  function uniqueBy(arr, fn) {
    var identifiers = new Set()
    return arr.filter(function (item) {
      var identifier = fn(item)

      if (!identifiers.has(identifier)) {
        identifiers.add(identifier)
        return true
      }
    })
  }

  function mergeByName(modifiers) {
    var merged = modifiers.reduce(function (merged, current) {
      var existing = merged[current.name]
      merged[current.name] = existing
        ? Object.assign({}, existing, current, {
            options: Object.assign({}, existing.options, current.options),
            data: Object.assign({}, existing.data, current.data),
          })
        : current
      return merged
    }, {}) // IE11 does not support Object.values

    return Object.keys(merged).map(function (key) {
      return merged[key]
    })
  }

  var INVALID_ELEMENT_ERROR =
    'Popper: Invalid reference or popper argument provided. They must be either a DOM element or virtual element.'
  var INFINITE_LOOP_ERROR =
    'Popper: An infinite loop in the modifiers cycle has been detected! The cycle has been interrupted to prevent a browser crash.'
  var DEFAULT_OPTIONS = {
    placement: 'bottom',
    modifiers: [],
    strategy: 'absolute',
  }

  function areValidElements() {
    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key]
    }

    return !args.some(function (element) {
      return !(element && typeof element.getBoundingClientRect === 'function')
    })
  }

  function popperGenerator(generatorOptions) {
    if (generatorOptions === void 0) {
      generatorOptions = {}
    }

    var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers =
        _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions =
        _generatorOptions$def2 === void 0
          ? DEFAULT_OPTIONS
          : _generatorOptions$def2
    return function createPopper(reference, popper, options) {
      if (options === void 0) {
        options = defaultOptions
      }

      var state = {
        placement: 'bottom',
        orderedModifiers: [],
        options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
        modifiersData: {},
        elements: {
          reference: reference,
          popper: popper,
        },
        attributes: {},
        styles: {},
      }
      var effectCleanupFns = []
      var isDestroyed = false
      var instance = {
        state: state,
        setOptions: function setOptions(setOptionsAction) {
          var options =
            typeof setOptionsAction === 'function'
              ? setOptionsAction(state.options)
              : setOptionsAction
          cleanupModifierEffects()
          state.options = Object.assign(
            {},
            defaultOptions,
            state.options,
            options
          )
          state.scrollParents = {
            reference: isElement(reference)
              ? listScrollParents(reference)
              : reference.contextElement
              ? listScrollParents(reference.contextElement)
              : [],
            popper: listScrollParents(popper),
          } // Orders the modifiers based on their dependencies and `phase`
          // properties

          var orderedModifiers = orderModifiers(
            mergeByName([].concat(defaultModifiers, state.options.modifiers))
          ) // Strip out disabled modifiers

          state.orderedModifiers = orderedModifiers.filter(function (m) {
            return m.enabled
          }) // Validate the provided modifiers so that the consumer will get warned
          // if one of the modifiers is invalid for any reason

          {
            var modifiers = uniqueBy(
              [].concat(orderedModifiers, state.options.modifiers),
              function (_ref) {
                var name = _ref.name
                return name
              }
            )
            validateModifiers(modifiers)

            if (getBasePlacement(state.options.placement) === auto) {
              var flipModifier = state.orderedModifiers.find(function (_ref2) {
                var name = _ref2.name
                return name === 'flip'
              })

              if (!flipModifier) {
                console.error(
                  [
                    'Popper: "auto" placements require the "flip" modifier be',
                    'present and enabled to work.',
                  ].join(' ')
                )
              }
            }

            var _getComputedStyle = getComputedStyle(popper),
              marginTop = _getComputedStyle.marginTop,
              marginRight = _getComputedStyle.marginRight,
              marginBottom = _getComputedStyle.marginBottom,
              marginLeft = _getComputedStyle.marginLeft // We no longer take into account `margins` on the popper, and it can
            // cause bugs with positioning, so we'll warn the consumer

            if (
              [marginTop, marginRight, marginBottom, marginLeft].some(function (
                margin
              ) {
                return parseFloat(margin)
              })
            ) {
              console.warn(
                [
                  'Popper: CSS "margin" styles cannot be used to apply padding',
                  'between the popper and its reference element or boundary.',
                  'To replicate margin, use the `offset` modifier, as well as',
                  'the `padding` option in the `preventOverflow` and `flip`',
                  'modifiers.',
                ].join(' ')
              )
            }
          }

          runModifierEffects()
          return instance.update()
        },
        // Sync update – it will always be executed, even if not necessary. This
        // is useful for low frequency updates where sync behavior simplifies the
        // logic.
        // For high frequency updates (e.g. `resize` and `scroll` events), always
        // prefer the async Popper#update method
        forceUpdate: function forceUpdate() {
          if (isDestroyed) {
            return
          }

          var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper // Don't proceed if `reference` or `popper` are not valid elements
          // anymore

          if (!areValidElements(reference, popper)) {
            {
              console.error(INVALID_ELEMENT_ERROR)
            }

            return
          } // Store the reference and popper rects to be read by modifiers

          state.rects = {
            reference: getCompositeRect(
              reference,
              getOffsetParent(popper),
              state.options.strategy === 'fixed'
            ),
            popper: getLayoutRect(popper),
          } // Modifiers have the ability to reset the current update cycle. The
          // most common use case for this is the `flip` modifier changing the
          // placement, which then needs to re-run all the modifiers, because the
          // logic was previously ran for the previous placement and is therefore
          // stale/incorrect

          state.reset = false
          state.placement = state.options.placement // On each update cycle, the `modifiersData` property for each modifier
          // is filled with the initial data specified by the modifier. This means
          // it doesn't persist and is fresh on each update.
          // To ensure persistent data, use `${name}#persistent`

          state.orderedModifiers.forEach(function (modifier) {
            return (state.modifiersData[modifier.name] = Object.assign(
              {},
              modifier.data
            ))
          })
          var __debug_loops__ = 0

          for (var index = 0; index < state.orderedModifiers.length; index++) {
            {
              __debug_loops__ += 1

              if (__debug_loops__ > 100) {
                console.error(INFINITE_LOOP_ERROR)
                break
              }
            }

            if (state.reset === true) {
              state.reset = false
              index = -1
              continue
            }

            var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options =
                _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name

            if (typeof fn === 'function') {
              state =
                fn({
                  state: state,
                  options: _options,
                  name: name,
                  instance: instance,
                }) || state
            }
          }
        },
        // Async and optimistically optimized update – it will not be executed if
        // not necessary (debounced to run at most once-per-tick)
        update: debounce(function () {
          return new Promise(function (resolve) {
            instance.forceUpdate()
            resolve(state)
          })
        }),
        destroy: function destroy() {
          cleanupModifierEffects()
          isDestroyed = true
        },
      }

      if (!areValidElements(reference, popper)) {
        {
          console.error(INVALID_ELEMENT_ERROR)
        }

        return instance
      }

      instance.setOptions(options).then(function (state) {
        if (!isDestroyed && options.onFirstUpdate) {
          options.onFirstUpdate(state)
        }
      }) // Modifiers have the ability to execute arbitrary code before the first
      // update cycle runs. They will be executed in the same order as the update
      // cycle. This is useful when a modifier adds some persistent data that
      // other modifiers need to use, but the modifier is run after the dependent
      // one.

      function runModifierEffects() {
        state.orderedModifiers.forEach(function (_ref3) {
          var name = _ref3.name,
            _ref3$options = _ref3.options,
            options = _ref3$options === void 0 ? {} : _ref3$options,
            effect = _ref3.effect

          if (typeof effect === 'function') {
            var cleanupFn = effect({
              state: state,
              name: name,
              instance: instance,
              options: options,
            })

            var noopFn = function noopFn() {}

            effectCleanupFns.push(cleanupFn || noopFn)
          }
        })
      }

      function cleanupModifierEffects() {
        effectCleanupFns.forEach(function (fn) {
          return fn()
        })
        effectCleanupFns = []
      }

      return instance
    }
  }

  // This is b/c the Popper lib is all esm files, and would break in a common js only environment

  var createPopper = popperGenerator({
    defaultModifiers: [
      hide$1,
      popperOffsets$1,
      computeStyles$1,
      eventListeners,
      offset$1,
      flip$1,
      preventOverflow$1,
      arrow$1,
    ],
  })

  var initialPopperStyles = function initialPopperStyles(position) {
    return {
      position: position,
      top: '0',
      left: '0',
      opacity: '0',
      pointerEvents: 'none',
    }
  }

  var disabledApplyStylesModifier = {
    name: 'applyStyles',
    enabled: false,
  } // In order to satisfy the current usage of options, including undefined

  var ariaDescribedByModifier = {
    name: 'ariaDescribedBy',
    enabled: true,
    phase: 'afterWrite',
    effect: function effect(_ref) {
      var state = _ref.state
      return function () {
        var _state$elements = state.elements,
          reference = _state$elements.reference,
          popper = _state$elements.popper

        if ('removeAttribute' in reference) {
          var ids = (reference.getAttribute('aria-describedby') || '')
            .split(',')
            .filter(function (id) {
              return id.trim() !== popper.id
            })
          if (!ids.length) reference.removeAttribute('aria-describedby')
          else reference.setAttribute('aria-describedby', ids.join(','))
        }
      }
    },
    fn: function fn(_ref2) {
      var _popper$getAttribute

      var state = _ref2.state
      var _state$elements2 = state.elements,
        popper = _state$elements2.popper,
        reference = _state$elements2.reference
      var role =
        (_popper$getAttribute = popper.getAttribute('role')) == null
          ? void 0
          : _popper$getAttribute.toLowerCase()

      if (popper.id && role === 'tooltip' && 'setAttribute' in reference) {
        var ids = reference.getAttribute('aria-describedby')

        if (ids && ids.split(',').indexOf(popper.id) !== -1) {
          return
        }

        reference.setAttribute(
          'aria-describedby',
          ids ? ids + ',' + popper.id : popper.id
        )
      }
    },
  }
  var EMPTY_MODIFIERS = []
  /**
   * Position an element relative some reference element using Popper.js
   *
   * @param referenceElement
   * @param popperElement
   * @param {object}      options
   * @param {object=}     options.modifiers Popper.js modifiers
   * @param {boolean=}    options.enabled toggle the popper functionality on/off
   * @param {string=}     options.placement The popper element placement relative to the reference element
   * @param {string=}     options.strategy the positioning strategy
   * @param {boolean=}    options.eventsEnabled have Popper listen on window resize events to reposition the element
   * @param {function=}   options.onCreate called when the popper is created
   * @param {function=}   options.onUpdate called when the popper is updated
   *
   * @returns {UsePopperState} The popper state
   */

  function usePopper(referenceElement, popperElement, _temp) {
    var _ref3 = _temp === void 0 ? {} : _temp,
      _ref3$enabled = _ref3.enabled,
      enabled = _ref3$enabled === void 0 ? true : _ref3$enabled,
      _ref3$placement = _ref3.placement,
      placement = _ref3$placement === void 0 ? 'bottom' : _ref3$placement,
      _ref3$strategy = _ref3.strategy,
      strategy = _ref3$strategy === void 0 ? 'absolute' : _ref3$strategy,
      _ref3$modifiers = _ref3.modifiers,
      modifiers =
        _ref3$modifiers === void 0 ? EMPTY_MODIFIERS : _ref3$modifiers,
      config = _objectWithoutPropertiesLoose(_ref3, [
        'enabled',
        'placement',
        'strategy',
        'modifiers',
      ])

    var popperInstanceRef = reactExports.useRef()
    var update = reactExports.useCallback(function () {
      var _popperInstanceRef$cu

      ;(_popperInstanceRef$cu = popperInstanceRef.current) == null
        ? void 0
        : _popperInstanceRef$cu.update()
    }, [])
    var forceUpdate = reactExports.useCallback(function () {
      var _popperInstanceRef$cu2

      ;(_popperInstanceRef$cu2 = popperInstanceRef.current) == null
        ? void 0
        : _popperInstanceRef$cu2.forceUpdate()
    }, [])

    var _useSafeState = useSafeState(
        reactExports.useState({
          placement: placement,
          update: update,
          forceUpdate: forceUpdate,
          attributes: {},
          styles: {
            popper: initialPopperStyles(strategy),
            arrow: {},
          },
        })
      ),
      popperState = _useSafeState[0],
      setState = _useSafeState[1]

    var updateModifier = reactExports.useMemo(
      function () {
        return {
          name: 'updateStateModifier',
          enabled: true,
          phase: 'write',
          requires: ['computeStyles'],
          fn: function fn(_ref4) {
            var state = _ref4.state
            var styles = {}
            var attributes = {}
            Object.keys(state.elements).forEach(function (element) {
              styles[element] = state.styles[element]
              attributes[element] = state.attributes[element]
            })
            setState({
              state: state,
              styles: styles,
              attributes: attributes,
              update: update,
              forceUpdate: forceUpdate,
              placement: state.placement,
            })
          },
        }
      },
      [update, forceUpdate, setState]
    )
    reactExports.useEffect(
      function () {
        if (!popperInstanceRef.current || !enabled) return
        popperInstanceRef.current.setOptions({
          placement: placement,
          strategy: strategy,
          modifiers: [].concat(modifiers, [
            updateModifier,
            disabledApplyStylesModifier,
          ]),
        }) // intentionally NOT re-running on new modifiers
        // eslint-disable-next-line react-hooks/exhaustive-deps
      },
      [strategy, placement, updateModifier, enabled]
    )
    reactExports.useEffect(
      function () {
        if (!enabled || referenceElement == null || popperElement == null) {
          return undefined
        }

        popperInstanceRef.current = createPopper(
          referenceElement,
          popperElement,
          _extends({}, config, {
            placement: placement,
            strategy: strategy,
            modifiers: [].concat(modifiers, [
              ariaDescribedByModifier,
              updateModifier,
            ]),
          })
        )
        return function () {
          if (popperInstanceRef.current != null) {
            popperInstanceRef.current.destroy()
            popperInstanceRef.current = undefined
            setState(function (s) {
              return _extends({}, s, {
                attributes: {},
                styles: {
                  popper: initialPopperStyles(strategy),
                },
              })
            })
          }
        } // This is only run once to _create_ the popper
        // eslint-disable-next-line react-hooks/exhaustive-deps
      },
      [enabled, referenceElement, popperElement]
    )
    return popperState
  }

  /**
   * A `removeEventListener` ponyfill
   *
   * @param node the element
   * @param eventName the event name
   * @param handle the handler
   * @param options event options
   */
  function removeEventListener(node, eventName, handler, options) {
    var capture =
      options && typeof options !== 'boolean' ? options.capture : options
    node.removeEventListener(eventName, handler, capture)

    if (handler.__once) {
      node.removeEventListener(eventName, handler.__once, capture)
    }
  }

  function listen(node, eventName, handler, options) {
    addEventListener$1(node, eventName, handler, options)
    return function () {
      removeEventListener(node, eventName, handler, options)
    }
  }

  /**
   * Copyright (c) 2014-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  var warning = function () {}

  {
    var printWarning = function printWarning(format, args) {
      var len = arguments.length
      args = new Array(len > 1 ? len - 1 : 0)
      for (var key = 1; key < len; key++) {
        args[key - 1] = arguments[key]
      }
      var argIndex = 0
      var message =
        'Warning: ' +
        format.replace(/%s/g, function () {
          return args[argIndex++]
        })
      if (typeof console !== 'undefined') {
        console.error(message)
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message)
      } catch (x) {}
    }

    warning = function (condition, format, args) {
      var len = arguments.length
      args = new Array(len > 2 ? len - 2 : 0)
      for (var key = 2; key < len; key++) {
        args[key - 2] = arguments[key]
      }
      if (format === undefined) {
        throw new Error(
          '`warning(condition, format, ...args)` requires a warning ' +
            'message argument'
        )
      }
      if (!condition) {
        printWarning.apply(null, [format].concat(args))
      }
    }
  }

  var warning_1 = warning

  var reactDomExports = {}
  var reactDom = {
    get exports() {
      return reactDomExports
    },
    set exports(v) {
      reactDomExports = v
    },
  }

  var reactDom_development = {}

  var schedulerExports = {}
  var scheduler = {
    get exports() {
      return schedulerExports
    },
    set exports(v) {
      schedulerExports = v
    },
  }

  var scheduler_development = {}

  /** @license React v0.20.2
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  ;(function (exports) {
    {
      ;(function () {
        var enableSchedulerDebugging = false
        var enableProfiling = false

        var requestHostCallback
        var requestHostTimeout
        var cancelHostTimeout
        var requestPaint
        var hasPerformanceNow =
          typeof performance === 'object' &&
          typeof performance.now === 'function'

        if (hasPerformanceNow) {
          var localPerformance = performance

          exports.unstable_now = function () {
            return localPerformance.now()
          }
        } else {
          var localDate = Date
          var initialTime = localDate.now()

          exports.unstable_now = function () {
            return localDate.now() - initialTime
          }
        }

        if (
          // If Scheduler runs in a non-DOM environment, it falls back to a naive
          // implementation using setTimeout.
          typeof window === 'undefined' || // Check if MessageChannel is supported, too.
          typeof MessageChannel !== 'function'
        ) {
          // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
          // fallback to a naive implementation.
          var _callback = null
          var _timeoutID = null

          var _flushCallback = function () {
            if (_callback !== null) {
              try {
                var currentTime = exports.unstable_now()
                var hasRemainingTime = true

                _callback(hasRemainingTime, currentTime)

                _callback = null
              } catch (e) {
                setTimeout(_flushCallback, 0)
                throw e
              }
            }
          }

          requestHostCallback = function (cb) {
            if (_callback !== null) {
              // Protect against re-entrancy.
              setTimeout(requestHostCallback, 0, cb)
            } else {
              _callback = cb
              setTimeout(_flushCallback, 0)
            }
          }

          requestHostTimeout = function (cb, ms) {
            _timeoutID = setTimeout(cb, ms)
          }

          cancelHostTimeout = function () {
            clearTimeout(_timeoutID)
          }

          exports.unstable_shouldYield = function () {
            return false
          }

          requestPaint = exports.unstable_forceFrameRate = function () {}
        } else {
          // Capture local references to native APIs, in case a polyfill overrides them.
          var _setTimeout = window.setTimeout
          var _clearTimeout = window.clearTimeout

          if (typeof console !== 'undefined') {
            // TODO: Scheduler no longer requires these methods to be polyfilled. But
            // maybe we want to continue warning if they don't exist, to preserve the
            // option to rely on it in the future?
            var requestAnimationFrame = window.requestAnimationFrame
            var cancelAnimationFrame = window.cancelAnimationFrame

            if (typeof requestAnimationFrame !== 'function') {
              // Using console['error'] to evade Babel and ESLint
              console['error'](
                "This browser doesn't support requestAnimationFrame. " +
                  'Make sure that you load a ' +
                  'polyfill in older browsers. https://reactjs.org/link/react-polyfills'
              )
            }

            if (typeof cancelAnimationFrame !== 'function') {
              // Using console['error'] to evade Babel and ESLint
              console['error'](
                "This browser doesn't support cancelAnimationFrame. " +
                  'Make sure that you load a ' +
                  'polyfill in older browsers. https://reactjs.org/link/react-polyfills'
              )
            }
          }

          var isMessageLoopRunning = false
          var scheduledHostCallback = null
          var taskTimeoutID = -1 // Scheduler periodically yields in case there is other work on the main
          // thread, like user events. By default, it yields multiple times per frame.
          // It does not attempt to align with frame boundaries, since most tasks don't
          // need to be frame aligned; for those that do, use requestAnimationFrame.

          var yieldInterval = 5
          var deadline = 0 // TODO: Make this configurable

          {
            // `isInputPending` is not available. Since we have no way of knowing if
            // there's pending input, always yield at the end of the frame.
            exports.unstable_shouldYield = function () {
              return exports.unstable_now() >= deadline
            } // Since we yield every frame regardless, `requestPaint` has no effect.

            requestPaint = function () {}
          }

          exports.unstable_forceFrameRate = function (fps) {
            if (fps < 0 || fps > 125) {
              // Using console['error'] to evade Babel and ESLint
              console['error'](
                'forceFrameRate takes a positive int between 0 and 125, ' +
                  'forcing frame rates higher than 125 fps is not supported'
              )
              return
            }

            if (fps > 0) {
              yieldInterval = Math.floor(1000 / fps)
            } else {
              // reset the framerate
              yieldInterval = 5
            }
          }

          var performWorkUntilDeadline = function () {
            if (scheduledHostCallback !== null) {
              var currentTime = exports.unstable_now() // Yield after `yieldInterval` ms, regardless of where we are in the vsync
              // cycle. This means there's always time remaining at the beginning of
              // the message event.

              deadline = currentTime + yieldInterval
              var hasTimeRemaining = true

              try {
                var hasMoreWork = scheduledHostCallback(
                  hasTimeRemaining,
                  currentTime
                )

                if (!hasMoreWork) {
                  isMessageLoopRunning = false
                  scheduledHostCallback = null
                } else {
                  // If there's more work, schedule the next message event at the end
                  // of the preceding one.
                  port.postMessage(null)
                }
              } catch (error) {
                // If a scheduler task throws, exit the current browser task so the
                // error can be observed.
                port.postMessage(null)
                throw error
              }
            } else {
              isMessageLoopRunning = false
            } // Yielding to the browser will give it a chance to paint, so we can
          }

          var channel = new MessageChannel()
          var port = channel.port2
          channel.port1.onmessage = performWorkUntilDeadline

          requestHostCallback = function (callback) {
            scheduledHostCallback = callback

            if (!isMessageLoopRunning) {
              isMessageLoopRunning = true
              port.postMessage(null)
            }
          }

          requestHostTimeout = function (callback, ms) {
            taskTimeoutID = _setTimeout(function () {
              callback(exports.unstable_now())
            }, ms)
          }

          cancelHostTimeout = function () {
            _clearTimeout(taskTimeoutID)

            taskTimeoutID = -1
          }
        }

        function push(heap, node) {
          var index = heap.length
          heap.push(node)
          siftUp(heap, node, index)
        }
        function peek(heap) {
          var first = heap[0]
          return first === undefined ? null : first
        }
        function pop(heap) {
          var first = heap[0]

          if (first !== undefined) {
            var last = heap.pop()

            if (last !== first) {
              heap[0] = last
              siftDown(heap, last, 0)
            }

            return first
          } else {
            return null
          }
        }

        function siftUp(heap, node, i) {
          var index = i

          while (true) {
            var parentIndex = (index - 1) >>> 1
            var parent = heap[parentIndex]

            if (parent !== undefined && compare(parent, node) > 0) {
              // The parent is larger. Swap positions.
              heap[parentIndex] = node
              heap[index] = parent
              index = parentIndex
            } else {
              // The parent is smaller. Exit.
              return
            }
          }
        }

        function siftDown(heap, node, i) {
          var index = i
          var length = heap.length

          while (index < length) {
            var leftIndex = (index + 1) * 2 - 1
            var left = heap[leftIndex]
            var rightIndex = leftIndex + 1
            var right = heap[rightIndex] // If the left or right node is smaller, swap with the smaller of those.

            if (left !== undefined && compare(left, node) < 0) {
              if (right !== undefined && compare(right, left) < 0) {
                heap[index] = right
                heap[rightIndex] = node
                index = rightIndex
              } else {
                heap[index] = left
                heap[leftIndex] = node
                index = leftIndex
              }
            } else if (right !== undefined && compare(right, node) < 0) {
              heap[index] = right
              heap[rightIndex] = node
              index = rightIndex
            } else {
              // Neither child is smaller. Exit.
              return
            }
          }
        }

        function compare(a, b) {
          // Compare sort index first, then task id.
          var diff = a.sortIndex - b.sortIndex
          return diff !== 0 ? diff : a.id - b.id
        }

        // TODO: Use symbols?
        var ImmediatePriority = 1
        var UserBlockingPriority = 2
        var NormalPriority = 3
        var LowPriority = 4
        var IdlePriority = 5

        function markTaskErrored(task, ms) {}

        /* eslint-disable no-var */
        // Math.pow(2, 30) - 1
        // 0b111111111111111111111111111111

        var maxSigned31BitInt = 1073741823 // Times out immediately

        var IMMEDIATE_PRIORITY_TIMEOUT = -1 // Eventually times out

        var USER_BLOCKING_PRIORITY_TIMEOUT = 250
        var NORMAL_PRIORITY_TIMEOUT = 5000
        var LOW_PRIORITY_TIMEOUT = 10000 // Never times out

        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt // Tasks are stored on a min heap

        var taskQueue = []
        var timerQueue = [] // Incrementing id counter. Used to maintain insertion order.

        var taskIdCounter = 1 // Pausing the scheduler is useful for debugging.
        var currentTask = null
        var currentPriorityLevel = NormalPriority // This is set while performing work, to prevent re-entrancy.

        var isPerformingWork = false
        var isHostCallbackScheduled = false
        var isHostTimeoutScheduled = false

        function advanceTimers(currentTime) {
          // Check for tasks that are no longer delayed and add them to the queue.
          var timer = peek(timerQueue)

          while (timer !== null) {
            if (timer.callback === null) {
              // Timer was cancelled.
              pop(timerQueue)
            } else if (timer.startTime <= currentTime) {
              // Timer fired. Transfer to the task queue.
              pop(timerQueue)
              timer.sortIndex = timer.expirationTime
              push(taskQueue, timer)
            } else {
              // Remaining timers are pending.
              return
            }

            timer = peek(timerQueue)
          }
        }

        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false
          advanceTimers(currentTime)

          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true
              requestHostCallback(flushWork)
            } else {
              var firstTimer = peek(timerQueue)

              if (firstTimer !== null) {
                requestHostTimeout(
                  handleTimeout,
                  firstTimer.startTime - currentTime
                )
              }
            }
          }
        }

        function flushWork(hasTimeRemaining, initialTime) {
          isHostCallbackScheduled = false

          if (isHostTimeoutScheduled) {
            // We scheduled a timeout but it's no longer needed. Cancel it.
            isHostTimeoutScheduled = false
            cancelHostTimeout()
          }

          isPerformingWork = true
          var previousPriorityLevel = currentPriorityLevel

          try {
            var currentTime
            if (enableProfiling);
            else {
              // No catch in prod code path.
              return workLoop(hasTimeRemaining, initialTime)
            }
          } finally {
            currentTask = null
            currentPriorityLevel = previousPriorityLevel
            isPerformingWork = false
          }
        }

        function workLoop(hasTimeRemaining, initialTime) {
          var currentTime = initialTime
          advanceTimers(currentTime)
          currentTask = peek(taskQueue)

          while (currentTask !== null && !enableSchedulerDebugging) {
            if (
              currentTask.expirationTime > currentTime &&
              (!hasTimeRemaining || exports.unstable_shouldYield())
            ) {
              // This currentTask hasn't expired, and we've reached the deadline.
              break
            }

            var callback = currentTask.callback

            if (typeof callback === 'function') {
              currentTask.callback = null
              currentPriorityLevel = currentTask.priorityLevel
              var didUserCallbackTimeout =
                currentTask.expirationTime <= currentTime

              var continuationCallback = callback(didUserCallbackTimeout)
              currentTime = exports.unstable_now()

              if (typeof continuationCallback === 'function') {
                currentTask.callback = continuationCallback
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue)
                }
              }

              advanceTimers(currentTime)
            } else {
              pop(taskQueue)
            }

            currentTask = peek(taskQueue)
          } // Return whether there's additional work

          if (currentTask !== null) {
            return true
          } else {
            var firstTimer = peek(timerQueue)

            if (firstTimer !== null) {
              requestHostTimeout(
                handleTimeout,
                firstTimer.startTime - currentTime
              )
            }

            return false
          }
        }

        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break

            default:
              priorityLevel = NormalPriority
          }

          var previousPriorityLevel = currentPriorityLevel
          currentPriorityLevel = priorityLevel

          try {
            return eventHandler()
          } finally {
            currentPriorityLevel = previousPriorityLevel
          }
        }

        function unstable_next(eventHandler) {
          var priorityLevel

          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              // Shift down to normal priority
              priorityLevel = NormalPriority
              break

            default:
              // Anything lower than normal priority should remain at the current level.
              priorityLevel = currentPriorityLevel
              break
          }

          var previousPriorityLevel = currentPriorityLevel
          currentPriorityLevel = priorityLevel

          try {
            return eventHandler()
          } finally {
            currentPriorityLevel = previousPriorityLevel
          }
        }

        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel
          return function () {
            // This is a fork of runWithPriority, inlined for performance.
            var previousPriorityLevel = currentPriorityLevel
            currentPriorityLevel = parentPriorityLevel

            try {
              return callback.apply(this, arguments)
            } finally {
              currentPriorityLevel = previousPriorityLevel
            }
          }
        }

        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now()
          var startTime

          if (typeof options === 'object' && options !== null) {
            var delay = options.delay

            if (typeof delay === 'number' && delay > 0) {
              startTime = currentTime + delay
            } else {
              startTime = currentTime
            }
          } else {
            startTime = currentTime
          }

          var timeout

          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT
              break

            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT
              break

            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT
              break

            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT
              break

            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT
              break
          }

          var expirationTime = startTime + timeout
          var newTask = {
            id: taskIdCounter++,
            callback: callback,
            priorityLevel: priorityLevel,
            startTime: startTime,
            expirationTime: expirationTime,
            sortIndex: -1,
          }

          if (startTime > currentTime) {
            // This is a delayed task.
            newTask.sortIndex = startTime
            push(timerQueue, newTask)

            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              // All tasks are delayed, and this is the task with the earliest delay.
              if (isHostTimeoutScheduled) {
                // Cancel an existing timeout.
                cancelHostTimeout()
              } else {
                isHostTimeoutScheduled = true
              } // Schedule a timeout.

              requestHostTimeout(handleTimeout, startTime - currentTime)
            }
          } else {
            newTask.sortIndex = expirationTime
            push(taskQueue, newTask)
            // wait until the next time we yield.

            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true
              requestHostCallback(flushWork)
            }
          }

          return newTask
        }

        function unstable_pauseExecution() {}

        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true
            requestHostCallback(flushWork)
          }
        }

        function unstable_getFirstCallbackNode() {
          return peek(taskQueue)
        }

        function unstable_cancelCallback(task) {
          // remove from the queue because you can't remove arbitrary nodes from an
          // array based heap, only the first one.)

          task.callback = null
        }

        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel
        }

        var unstable_requestPaint = requestPaint
        var unstable_Profiling = null

        exports.unstable_IdlePriority = IdlePriority
        exports.unstable_ImmediatePriority = ImmediatePriority
        exports.unstable_LowPriority = LowPriority
        exports.unstable_NormalPriority = NormalPriority
        exports.unstable_Profiling = unstable_Profiling
        exports.unstable_UserBlockingPriority = UserBlockingPriority
        exports.unstable_cancelCallback = unstable_cancelCallback
        exports.unstable_continueExecution = unstable_continueExecution
        exports.unstable_getCurrentPriorityLevel =
          unstable_getCurrentPriorityLevel
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode
        exports.unstable_next = unstable_next
        exports.unstable_pauseExecution = unstable_pauseExecution
        exports.unstable_requestPaint = unstable_requestPaint
        exports.unstable_runWithPriority = unstable_runWithPriority
        exports.unstable_scheduleCallback = unstable_scheduleCallback
        exports.unstable_wrapCallback = unstable_wrapCallback
      })()
    }
  })(scheduler_development)

  ;(function (module) {
    {
      module.exports = scheduler_development
    }
  })(scheduler)

  var tracingExports = {}
  var tracing = {
    get exports() {
      return tracingExports
    },
    set exports(v) {
      tracingExports = v
    },
  }

  var schedulerTracing_development = {}

  /** @license React v0.20.2
   * scheduler-tracing.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  ;(function (exports) {
    {
      ;(function () {
        var DEFAULT_THREAD_ID = 0 // Counters used to generate unique IDs.

        var interactionIDCounter = 0
        var threadIDCounter = 0 // Set of currently traced interactions.
        // Interactions "stack"–
        // Meaning that newly traced interactions are appended to the previously active set.
        // When an interaction goes out of scope, the previous set (if any) is restored.

        exports.__interactionsRef = null // Listener(s) to notify when interactions begin and end.

        exports.__subscriberRef = null

        {
          exports.__interactionsRef = {
            current: new Set(),
          }
          exports.__subscriberRef = {
            current: null,
          }
        }
        function unstable_clear(callback) {
          var prevInteractions = exports.__interactionsRef.current
          exports.__interactionsRef.current = new Set()

          try {
            return callback()
          } finally {
            exports.__interactionsRef.current = prevInteractions
          }
        }
        function unstable_getCurrent() {
          {
            return exports.__interactionsRef.current
          }
        }
        function unstable_getThreadID() {
          return ++threadIDCounter
        }
        function unstable_trace(name, timestamp, callback) {
          var threadID =
            arguments.length > 3 && arguments[3] !== undefined
              ? arguments[3]
              : DEFAULT_THREAD_ID

          var interaction = {
            __count: 1,
            id: interactionIDCounter++,
            name: name,
            timestamp: timestamp,
          }
          var prevInteractions = exports.__interactionsRef.current // Traced interactions should stack/accumulate.
          // To do that, clone the current interactions.
          // The previous set will be restored upon completion.

          var interactions = new Set(prevInteractions)
          interactions.add(interaction)
          exports.__interactionsRef.current = interactions
          var subscriber = exports.__subscriberRef.current
          var returnValue

          try {
            if (subscriber !== null) {
              subscriber.onInteractionTraced(interaction)
            }
          } finally {
            try {
              if (subscriber !== null) {
                subscriber.onWorkStarted(interactions, threadID)
              }
            } finally {
              try {
                returnValue = callback()
              } finally {
                exports.__interactionsRef.current = prevInteractions

                try {
                  if (subscriber !== null) {
                    subscriber.onWorkStopped(interactions, threadID)
                  }
                } finally {
                  interaction.__count-- // If no async work was scheduled for this interaction,
                  // Notify subscribers that it's completed.

                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction)
                  }
                }
              }
            }
          }

          return returnValue
        }
        function unstable_wrap(callback) {
          var threadID =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : DEFAULT_THREAD_ID

          var wrappedInteractions = exports.__interactionsRef.current
          var subscriber = exports.__subscriberRef.current

          if (subscriber !== null) {
            subscriber.onWorkScheduled(wrappedInteractions, threadID)
          } // Update the pending async work count for the current interactions.
          // Update after calling subscribers in case of error.

          wrappedInteractions.forEach(function (interaction) {
            interaction.__count++
          })
          var hasRun = false

          function wrapped() {
            var prevInteractions = exports.__interactionsRef.current
            exports.__interactionsRef.current = wrappedInteractions
            subscriber = exports.__subscriberRef.current

            try {
              var returnValue

              try {
                if (subscriber !== null) {
                  subscriber.onWorkStarted(wrappedInteractions, threadID)
                }
              } finally {
                try {
                  returnValue = callback.apply(undefined, arguments)
                } finally {
                  exports.__interactionsRef.current = prevInteractions

                  if (subscriber !== null) {
                    subscriber.onWorkStopped(wrappedInteractions, threadID)
                  }
                }
              }

              return returnValue
            } finally {
              if (!hasRun) {
                // We only expect a wrapped function to be executed once,
                // But in the event that it's executed more than once–
                // Only decrement the outstanding interaction counts once.
                hasRun = true // Update pending async counts for all wrapped interactions.
                // If this was the last scheduled async work for any of them,
                // Mark them as completed.

                wrappedInteractions.forEach(function (interaction) {
                  interaction.__count--

                  if (subscriber !== null && interaction.__count === 0) {
                    subscriber.onInteractionScheduledWorkCompleted(interaction)
                  }
                })
              }
            }
          }

          wrapped.cancel = function cancel() {
            subscriber = exports.__subscriberRef.current

            try {
              if (subscriber !== null) {
                subscriber.onWorkCanceled(wrappedInteractions, threadID)
              }
            } finally {
              // Update pending async counts for all wrapped interactions.
              // If this was the last scheduled async work for any of them,
              // Mark them as completed.
              wrappedInteractions.forEach(function (interaction) {
                interaction.__count--

                if (subscriber && interaction.__count === 0) {
                  subscriber.onInteractionScheduledWorkCompleted(interaction)
                }
              })
            }
          }

          return wrapped
        }

        var subscribers = null

        {
          subscribers = new Set()
        }

        function unstable_subscribe(subscriber) {
          {
            subscribers.add(subscriber)

            if (subscribers.size === 1) {
              exports.__subscriberRef.current = {
                onInteractionScheduledWorkCompleted:
                  onInteractionScheduledWorkCompleted,
                onInteractionTraced: onInteractionTraced,
                onWorkCanceled: onWorkCanceled,
                onWorkScheduled: onWorkScheduled,
                onWorkStarted: onWorkStarted,
                onWorkStopped: onWorkStopped,
              }
            }
          }
        }
        function unstable_unsubscribe(subscriber) {
          {
            subscribers.delete(subscriber)

            if (subscribers.size === 0) {
              exports.__subscriberRef.current = null
            }
          }
        }

        function onInteractionTraced(interaction) {
          var didCatchError = false
          var caughtError = null
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onInteractionTraced(interaction)
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true
                caughtError = error
              }
            }
          })

          if (didCatchError) {
            throw caughtError
          }
        }

        function onInteractionScheduledWorkCompleted(interaction) {
          var didCatchError = false
          var caughtError = null
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction)
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true
                caughtError = error
              }
            }
          })

          if (didCatchError) {
            throw caughtError
          }
        }

        function onWorkScheduled(interactions, threadID) {
          var didCatchError = false
          var caughtError = null
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkScheduled(interactions, threadID)
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true
                caughtError = error
              }
            }
          })

          if (didCatchError) {
            throw caughtError
          }
        }

        function onWorkStarted(interactions, threadID) {
          var didCatchError = false
          var caughtError = null
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkStarted(interactions, threadID)
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true
                caughtError = error
              }
            }
          })

          if (didCatchError) {
            throw caughtError
          }
        }

        function onWorkStopped(interactions, threadID) {
          var didCatchError = false
          var caughtError = null
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkStopped(interactions, threadID)
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true
                caughtError = error
              }
            }
          })

          if (didCatchError) {
            throw caughtError
          }
        }

        function onWorkCanceled(interactions, threadID) {
          var didCatchError = false
          var caughtError = null
          subscribers.forEach(function (subscriber) {
            try {
              subscriber.onWorkCanceled(interactions, threadID)
            } catch (error) {
              if (!didCatchError) {
                didCatchError = true
                caughtError = error
              }
            }
          })

          if (didCatchError) {
            throw caughtError
          }
        }

        exports.unstable_clear = unstable_clear
        exports.unstable_getCurrent = unstable_getCurrent
        exports.unstable_getThreadID = unstable_getThreadID
        exports.unstable_subscribe = unstable_subscribe
        exports.unstable_trace = unstable_trace
        exports.unstable_unsubscribe = unstable_unsubscribe
        exports.unstable_wrap = unstable_wrap
      })()
    }
  })(schedulerTracing_development)

  ;(function (module) {
    {
      module.exports = schedulerTracing_development
    }
  })(tracing)

  /** @license React v17.0.2
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   */

  {
    ;(function () {
      var React = reactExports
      var _assign = objectAssign
      var Scheduler = schedulerExports
      var tracing = tracingExports

      var ReactSharedInternals =
        React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED

      // by calls to these methods by a Babel plugin.
      //
      // In PROD (or in packages without access to React internals),
      // they are left as they are instead.

      function warn(format) {
        {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key]
          }

          printWarning('warn', format, args)
        }
      }
      function error(format) {
        {
          for (
            var _len2 = arguments.length,
              args = new Array(_len2 > 1 ? _len2 - 1 : 0),
              _key2 = 1;
            _key2 < _len2;
            _key2++
          ) {
            args[_key2 - 1] = arguments[_key2]
          }

          printWarning('error', format, args)
        }
      }

      function printWarning(level, format, args) {
        // When changing this logic, you might want to also
        // update consoleWithStackDev.www.js as well.
        {
          var ReactDebugCurrentFrame =
            ReactSharedInternals.ReactDebugCurrentFrame
          var stack = ReactDebugCurrentFrame.getStackAddendum()

          if (stack !== '') {
            format += '%s'
            args = args.concat([stack])
          }

          var argsWithFormat = args.map(function (item) {
            return '' + item
          }) // Careful: RN currently depends on this prefix

          argsWithFormat.unshift('Warning: ' + format) // We intentionally don't use spread (or .apply) directly because it
          // breaks IE9: https://github.com/facebook/react/issues/13610
          // eslint-disable-next-line react-internal/no-production-logging

          Function.prototype.apply.call(console[level], console, argsWithFormat)
        }
      }

      if (!React) {
        {
          throw Error(
            'ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM.'
          )
        }
      }

      var FunctionComponent = 0
      var ClassComponent = 1
      var IndeterminateComponent = 2 // Before we know whether it is function or class

      var HostRoot = 3 // Root of a host tree. Could be nested inside another node.

      var HostPortal = 4 // A subtree. Could be an entry point to a different renderer.

      var HostComponent = 5
      var HostText = 6
      var Fragment = 7
      var Mode = 8
      var ContextConsumer = 9
      var ContextProvider = 10
      var ForwardRef = 11
      var Profiler = 12
      var SuspenseComponent = 13
      var MemoComponent = 14
      var SimpleMemoComponent = 15
      var LazyComponent = 16
      var IncompleteClassComponent = 17
      var DehydratedFragment = 18
      var SuspenseListComponent = 19
      var FundamentalComponent = 20
      var ScopeComponent = 21
      var Block = 22
      var OffscreenComponent = 23
      var LegacyHiddenComponent = 24

      // Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

      var enableProfilerTimer = true // Record durations for commit and passive effects phases.

      var enableFundamentalAPI = false // Experimental Scope support.
      var enableNewReconciler = false // Errors that are thrown while unmounting (or after in the case of passive effects)
      var warnAboutStringRefs = false

      var allNativeEvents = new Set()
      /**
       * Mapping from registration name to event name
       */

      var registrationNameDependencies = {}
      /**
       * Mapping from lowercase registration names to the properly cased version,
       * used to warn in the case of missing event handlers. Available
       * only in true.
       * @type {Object}
       */

      var possibleRegistrationNames = {} // Trust the developer to only use possibleRegistrationNames in true

      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies)
        registerDirectEvent(registrationName + 'Capture', dependencies)
      }
      function registerDirectEvent(registrationName, dependencies) {
        {
          if (registrationNameDependencies[registrationName]) {
            error(
              'EventRegistry: More than one plugin attempted to publish the same ' +
                'registration name, `%s`.',
              registrationName
            )
          }
        }

        registrationNameDependencies[registrationName] = dependencies

        {
          var lowerCasedName = registrationName.toLowerCase()
          possibleRegistrationNames[lowerCasedName] = registrationName

          if (registrationName === 'onDoubleClick') {
            possibleRegistrationNames.ondblclick = registrationName
          }
        }

        for (var i = 0; i < dependencies.length; i++) {
          allNativeEvents.add(dependencies[i])
        }
      }

      var canUseDOM = !!(
        typeof window !== 'undefined' &&
        typeof window.document !== 'undefined' &&
        typeof window.document.createElement !== 'undefined'
      )

      // A reserved attribute.
      // It is handled by React separately and shouldn't be written to the DOM.
      var RESERVED = 0 // A simple string attribute.
      // Attributes that aren't in the filter are presumed to have this type.

      var STRING = 1 // A string attribute that accepts booleans in React. In HTML, these are called
      // "enumerated" attributes with "true" and "false" as possible values.
      // When true, it should be set to a "true" string.
      // When false, it should be set to a "false" string.

      var BOOLEANISH_STRING = 2 // A real boolean attribute.
      // When true, it should be present (set either to an empty string or its name).
      // When false, it should be omitted.

      var BOOLEAN = 3 // An attribute that can be used as a flag as well as with a value.
      // When true, it should be present (set either to an empty string or its name).
      // When false, it should be omitted.
      // For any other value, should be present with that value.

      var OVERLOADED_BOOLEAN = 4 // An attribute that must be numeric or parse as a numeric.
      // When falsy, it should be removed.

      var NUMERIC = 5 // An attribute that must be positive numeric or parse as a positive numeric.
      // When falsy, it should be removed.

      var POSITIVE_NUMERIC = 6

      /* eslint-disable max-len */
      var ATTRIBUTE_NAME_START_CHAR =
        ':A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD'
      /* eslint-enable max-len */

      var ATTRIBUTE_NAME_CHAR =
        ATTRIBUTE_NAME_START_CHAR +
        '\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040'
      var ROOT_ATTRIBUTE_NAME = 'data-reactroot'
      var VALID_ATTRIBUTE_NAME_REGEX = new RegExp(
        '^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$'
      )
      var hasOwnProperty = Object.prototype.hasOwnProperty
      var illegalAttributeNameCache = {}
      var validatedAttributeNameCache = {}
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
          return true
        }

        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
          return false
        }

        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
          validatedAttributeNameCache[attributeName] = true
          return true
        }

        illegalAttributeNameCache[attributeName] = true

        {
          error('Invalid attribute name: `%s`', attributeName)
        }

        return false
      }
      function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
        if (propertyInfo !== null) {
          return propertyInfo.type === RESERVED
        }

        if (isCustomComponentTag) {
          return false
        }

        if (
          name.length > 2 &&
          (name[0] === 'o' || name[0] === 'O') &&
          (name[1] === 'n' || name[1] === 'N')
        ) {
          return true
        }

        return false
      }
      function shouldRemoveAttributeWithWarning(
        name,
        value,
        propertyInfo,
        isCustomComponentTag
      ) {
        if (propertyInfo !== null && propertyInfo.type === RESERVED) {
          return false
        }

        switch (typeof value) {
          case 'function': // $FlowIssue symbol is perfectly valid here

          case 'symbol':
            // eslint-disable-line
            return true

          case 'boolean': {
            if (isCustomComponentTag) {
              return false
            }

            if (propertyInfo !== null) {
              return !propertyInfo.acceptsBooleans
            } else {
              var prefix = name.toLowerCase().slice(0, 5)
              return prefix !== 'data-' && prefix !== 'aria-'
            }
          }

          default:
            return false
        }
      }
      function shouldRemoveAttribute(
        name,
        value,
        propertyInfo,
        isCustomComponentTag
      ) {
        if (value === null || typeof value === 'undefined') {
          return true
        }

        if (
          shouldRemoveAttributeWithWarning(
            name,
            value,
            propertyInfo,
            isCustomComponentTag
          )
        ) {
          return true
        }

        if (isCustomComponentTag) {
          return false
        }

        if (propertyInfo !== null) {
          switch (propertyInfo.type) {
            case BOOLEAN:
              return !value

            case OVERLOADED_BOOLEAN:
              return value === false

            case NUMERIC:
              return isNaN(value)

            case POSITIVE_NUMERIC:
              return isNaN(value) || value < 1
          }
        }

        return false
      }
      function getPropertyInfo(name) {
        return properties.hasOwnProperty(name) ? properties[name] : null
      }

      function PropertyInfoRecord(
        name,
        type,
        mustUseProperty,
        attributeName,
        attributeNamespace,
        sanitizeURL,
        removeEmptyString
      ) {
        this.acceptsBooleans =
          type === BOOLEANISH_STRING ||
          type === BOOLEAN ||
          type === OVERLOADED_BOOLEAN
        this.attributeName = attributeName
        this.attributeNamespace = attributeNamespace
        this.mustUseProperty = mustUseProperty
        this.propertyName = name
        this.type = type
        this.sanitizeURL = sanitizeURL
        this.removeEmptyString = removeEmptyString
      } // When adding attributes to this list, be sure to also add them to
      // the `possibleStandardNames` module to ensure casing and incorrect
      // name warnings.

      var properties = {} // These props are reserved by React. They shouldn't be written to the DOM.

      var reservedProps = [
        'children',
        'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
        // elements (not just inputs). Now that ReactDOMInput assigns to the
        // defaultValue property -- do we need this?
        'defaultValue',
        'defaultChecked',
        'innerHTML',
        'suppressContentEditableWarning',
        'suppressHydrationWarning',
        'style',
      ]
      reservedProps.forEach(function (name) {
        properties[name] = new PropertyInfoRecord(
          name,
          RESERVED,
          false, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      }) // A few React string attributes have a different name.
      // This is a mapping from React prop names to the attribute names.

      ;[
        ['acceptCharset', 'accept-charset'],
        ['className', 'class'],
        ['htmlFor', 'for'],
        ['httpEquiv', 'http-equiv'],
      ].forEach(function (_ref) {
        var name = _ref[0],
          attributeName = _ref[1]
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false, // mustUseProperty
          attributeName, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      }) // These are "enumerated" HTML attributes that accept "true" and "false".
      // In React, we let users pass `true` and `false` even though technically
      // these aren't boolean attributes (they are coerced to strings).

      ;['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(
        function (name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false, // mustUseProperty
            name.toLowerCase(), // attributeName
            null, // attributeNamespace
            false, // sanitizeURL
            false
          )
        }
      ) // These are "enumerated" SVG attributes that accept "true" and "false".
      // In React, we let users pass `true` and `false` even though technically
      // these aren't boolean attributes (they are coerced to strings).
      // Since these are SVG attributes, their attribute names are case-sensitive.

      ;[
        'autoReverse',
        'externalResourcesRequired',
        'focusable',
        'preserveAlpha',
      ].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEANISH_STRING,
          false, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      }) // These are HTML boolean attributes.

      ;[
        'allowFullScreen',
        'async', // Note: there is a special case that prevents it from being written to the DOM
        // on the client side because the browsers are inconsistent. Instead we call focus().
        'autoFocus',
        'autoPlay',
        'controls',
        'default',
        'defer',
        'disabled',
        'disablePictureInPicture',
        'disableRemotePlayback',
        'formNoValidate',
        'hidden',
        'loop',
        'noModule',
        'noValidate',
        'open',
        'playsInline',
        'readOnly',
        'required',
        'reversed',
        'scoped',
        'seamless', // Microdata
        'itemScope',
      ].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          false, // mustUseProperty
          name.toLowerCase(), // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      }) // These are the few React props that we set as DOM properties
      // rather than attributes. These are all booleans.

      ;[
        'checked', // Note: `option.selected` is not updated if `select.multiple` is
        // disabled with `removeAttribute`. We have special logic for handling this.
        'multiple',
        'muted',
        'selected', // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(
          name,
          BOOLEAN,
          true, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      }) // These are HTML attributes that are "overloaded booleans": they behave like
      // booleans, but can also accept a string value.

      ;[
        'capture',
        'download', // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(
          name,
          OVERLOADED_BOOLEAN,
          false, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      }) // These are HTML attributes that must be positive numbers.

      ;[
        'cols',
        'rows',
        'size',
        'span', // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(
          name,
          POSITIVE_NUMERIC,
          false, // mustUseProperty
          name, // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      }) // These are HTML attributes that must be numbers.

      ;['rowSpan', 'start'].forEach(function (name) {
        properties[name] = new PropertyInfoRecord(
          name,
          NUMERIC,
          false, // mustUseProperty
          name.toLowerCase(), // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      })
      var CAMELIZE = /[\-\:]([a-z])/g

      var capitalize = function (token) {
        return token[1].toUpperCase()
      } // This is a list of all SVG attributes that need special casing, namespacing,
      // or boolean value assignment. Regular attributes that just accept strings
      // and have the same names are omitted, just like in the HTML attribute filter.
      // Some of these attributes can be hard to find. This list was created by
      // scraping the MDN documentation.

      ;[
        'accent-height',
        'alignment-baseline',
        'arabic-form',
        'baseline-shift',
        'cap-height',
        'clip-path',
        'clip-rule',
        'color-interpolation',
        'color-interpolation-filters',
        'color-profile',
        'color-rendering',
        'dominant-baseline',
        'enable-background',
        'fill-opacity',
        'fill-rule',
        'flood-color',
        'flood-opacity',
        'font-family',
        'font-size',
        'font-size-adjust',
        'font-stretch',
        'font-style',
        'font-variant',
        'font-weight',
        'glyph-name',
        'glyph-orientation-horizontal',
        'glyph-orientation-vertical',
        'horiz-adv-x',
        'horiz-origin-x',
        'image-rendering',
        'letter-spacing',
        'lighting-color',
        'marker-end',
        'marker-mid',
        'marker-start',
        'overline-position',
        'overline-thickness',
        'paint-order',
        'panose-1',
        'pointer-events',
        'rendering-intent',
        'shape-rendering',
        'stop-color',
        'stop-opacity',
        'strikethrough-position',
        'strikethrough-thickness',
        'stroke-dasharray',
        'stroke-dashoffset',
        'stroke-linecap',
        'stroke-linejoin',
        'stroke-miterlimit',
        'stroke-opacity',
        'stroke-width',
        'text-anchor',
        'text-decoration',
        'text-rendering',
        'underline-position',
        'underline-thickness',
        'unicode-bidi',
        'unicode-range',
        'units-per-em',
        'v-alphabetic',
        'v-hanging',
        'v-ideographic',
        'v-mathematical',
        'vector-effect',
        'vert-adv-y',
        'vert-origin-x',
        'vert-origin-y',
        'word-spacing',
        'writing-mode',
        'xmlns:xlink',
        'x-height', // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function (attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize)
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false, // mustUseProperty
          attributeName,
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      }) // String SVG attributes with the xlink namespace.

      ;[
        'xlink:actuate',
        'xlink:arcrole',
        'xlink:role',
        'xlink:show',
        'xlink:title',
        'xlink:type', // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function (attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize)
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false, // mustUseProperty
          attributeName,
          'http://www.w3.org/1999/xlink',
          false, // sanitizeURL
          false
        )
      }) // String SVG attributes with the xml namespace.

      ;[
        'xml:base',
        'xml:lang',
        'xml:space', // NOTE: if you add a camelCased prop to this list,
        // you'll need to set attributeName to name.toLowerCase()
        // instead in the assignment below.
      ].forEach(function (attributeName) {
        var name = attributeName.replace(CAMELIZE, capitalize)
        properties[name] = new PropertyInfoRecord(
          name,
          STRING,
          false, // mustUseProperty
          attributeName,
          'http://www.w3.org/XML/1998/namespace',
          false, // sanitizeURL
          false
        )
      }) // These attribute exists both in HTML and SVG.
      // The attribute name is case-sensitive in SVG so we can't just use
      // the React name like we do for attributes that exist only in HTML.

      ;['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false, // mustUseProperty
          attributeName.toLowerCase(), // attributeName
          null, // attributeNamespace
          false, // sanitizeURL
          false
        )
      }) // These attributes accept URLs. These must not allow javascript: URLS.
      // These will also need to accept Trusted Types object in the future.

      var xlinkHref = 'xlinkHref'
      properties[xlinkHref] = new PropertyInfoRecord(
        'xlinkHref',
        STRING,
        false, // mustUseProperty
        'xlink:href',
        'http://www.w3.org/1999/xlink',
        true, // sanitizeURL
        false
      )
      ;['src', 'href', 'action', 'formAction'].forEach(function (
        attributeName
      ) {
        properties[attributeName] = new PropertyInfoRecord(
          attributeName,
          STRING,
          false, // mustUseProperty
          attributeName.toLowerCase(), // attributeName
          null, // attributeNamespace
          true, // sanitizeURL
          true
        )
      })

      // and any newline or tab are filtered out as if they're not part of the URL.
      // https://url.spec.whatwg.org/#url-parsing
      // Tab or newline are defined as \r\n\t:
      // https://infra.spec.whatwg.org/#ascii-tab-or-newline
      // A C0 control is a code point in the range \u0000 NULL to \u001F
      // INFORMATION SEPARATOR ONE, inclusive:
      // https://infra.spec.whatwg.org/#c0-control-or-space

      /* eslint-disable max-len */

      var isJavaScriptProtocol =
        /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i
      var didWarn = false

      function sanitizeURL(url) {
        {
          if (!didWarn && isJavaScriptProtocol.test(url)) {
            didWarn = true

            error(
              'A future version of React will block javascript: URLs as a security precaution. ' +
                'Use event handlers instead if you can. If you need to generate unsafe HTML try ' +
                'using dangerouslySetInnerHTML instead. React was passed %s.',
              JSON.stringify(url)
            )
          }
        }
      }

      /**
       * Get the value for a property on a node. Only used in DEV for SSR validation.
       * The "expected" argument is used as a hint of what the expected value is.
       * Some properties have multiple equivalent values.
       */
      function getValueForProperty(node, name, expected, propertyInfo) {
        {
          if (propertyInfo.mustUseProperty) {
            var propertyName = propertyInfo.propertyName
            return node[propertyName]
          } else {
            if (propertyInfo.sanitizeURL) {
              // If we haven't fully disabled javascript: URLs, and if
              // the hydration is successful of a javascript: URL, we
              // still want to warn on the client.
              sanitizeURL('' + expected)
            }

            var attributeName = propertyInfo.attributeName
            var stringValue = null

            if (propertyInfo.type === OVERLOADED_BOOLEAN) {
              if (node.hasAttribute(attributeName)) {
                var value = node.getAttribute(attributeName)

                if (value === '') {
                  return true
                }

                if (
                  shouldRemoveAttribute(name, expected, propertyInfo, false)
                ) {
                  return value
                }

                if (value === '' + expected) {
                  return expected
                }

                return value
              }
            } else if (node.hasAttribute(attributeName)) {
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                // We had an attribute but shouldn't have had one, so read it
                // for the error message.
                return node.getAttribute(attributeName)
              }

              if (propertyInfo.type === BOOLEAN) {
                // If this was a boolean, it doesn't matter what the value is
                // the fact that we have it is the same as the expected.
                return expected
              } // Even if this property uses a namespace we use getAttribute
              // because we assume its namespaced name is the same as our config.
              // To use getAttributeNS we need the local name which we don't have
              // in our config atm.

              stringValue = node.getAttribute(attributeName)
            }

            if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
              return stringValue === null ? expected : stringValue
            } else if (stringValue === '' + expected) {
              return expected
            } else {
              return stringValue
            }
          }
        }
      }
      /**
       * Get the value for a attribute on a node. Only used in DEV for SSR validation.
       * The third argument is used as a hint of what the expected value is. Some
       * attributes have multiple equivalent values.
       */

      function getValueForAttribute(node, name, expected) {
        {
          if (!isAttributeNameSafe(name)) {
            return
          } // If the object is an opaque reference ID, it's expected that
          // the next prop is different than the server value, so just return
          // expected

          if (isOpaqueHydratingObject(expected)) {
            return expected
          }

          if (!node.hasAttribute(name)) {
            return expected === undefined ? undefined : null
          }

          var value = node.getAttribute(name)

          if (value === '' + expected) {
            return expected
          }

          return value
        }
      }
      /**
       * Sets the value for a property on a node.
       *
       * @param {DOMElement} node
       * @param {string} name
       * @param {*} value
       */

      function setValueForProperty(node, name, value, isCustomComponentTag) {
        var propertyInfo = getPropertyInfo(name)

        if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
          return
        }

        if (
          shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)
        ) {
          value = null
        } // If the prop isn't in the special list, treat it as a simple attribute.

        if (isCustomComponentTag || propertyInfo === null) {
          if (isAttributeNameSafe(name)) {
            var _attributeName = name

            if (value === null) {
              node.removeAttribute(_attributeName)
            } else {
              node.setAttribute(_attributeName, '' + value)
            }
          }

          return
        }

        var mustUseProperty = propertyInfo.mustUseProperty

        if (mustUseProperty) {
          var propertyName = propertyInfo.propertyName

          if (value === null) {
            var type = propertyInfo.type
            node[propertyName] = type === BOOLEAN ? false : ''
          } else {
            // Contrary to `setAttribute`, object properties are properly
            // `toString`ed by IE8/9.
            node[propertyName] = value
          }

          return
        } // The rest are treated as attributes with special cases.

        var attributeName = propertyInfo.attributeName,
          attributeNamespace = propertyInfo.attributeNamespace

        if (value === null) {
          node.removeAttribute(attributeName)
        } else {
          var _type = propertyInfo.type
          var attributeValue

          if (
            _type === BOOLEAN ||
            (_type === OVERLOADED_BOOLEAN && value === true)
          ) {
            // If attribute type is boolean, we know for sure it won't be an execution sink
            // and we won't require Trusted Type here.
            attributeValue = ''
          } else {
            // `setAttribute` with objects becomes only `[object]` in IE8/9,
            // ('' + value) makes it output the correct toString()-value.
            {
              attributeValue = '' + value
            }

            if (propertyInfo.sanitizeURL) {
              sanitizeURL(attributeValue.toString())
            }
          }

          if (attributeNamespace) {
            node.setAttributeNS(
              attributeNamespace,
              attributeName,
              attributeValue
            )
          } else {
            node.setAttribute(attributeName, attributeValue)
          }
        }
      }

      // ATTENTION
      // When adding new symbols to this file,
      // Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
      // The Symbol used to tag the ReactElement-like types. If there is no native Symbol
      // nor polyfill, then a plain number is used for performance.
      var REACT_ELEMENT_TYPE = 0xeac7
      var REACT_PORTAL_TYPE = 0xeaca
      var REACT_FRAGMENT_TYPE = 0xeacb
      var REACT_STRICT_MODE_TYPE = 0xeacc
      var REACT_PROFILER_TYPE = 0xead2
      var REACT_PROVIDER_TYPE = 0xeacd
      var REACT_CONTEXT_TYPE = 0xeace
      var REACT_FORWARD_REF_TYPE = 0xead0
      var REACT_SUSPENSE_TYPE = 0xead1
      var REACT_SUSPENSE_LIST_TYPE = 0xead8
      var REACT_MEMO_TYPE = 0xead3
      var REACT_LAZY_TYPE = 0xead4
      var REACT_BLOCK_TYPE = 0xead9
      var REACT_SCOPE_TYPE = 0xead7
      var REACT_OPAQUE_ID_TYPE = 0xeae0
      var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1
      var REACT_OFFSCREEN_TYPE = 0xeae2
      var REACT_LEGACY_HIDDEN_TYPE = 0xeae3

      if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor = Symbol.for
        REACT_ELEMENT_TYPE = symbolFor('react.element')
        REACT_PORTAL_TYPE = symbolFor('react.portal')
        REACT_FRAGMENT_TYPE = symbolFor('react.fragment')
        REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode')
        REACT_PROFILER_TYPE = symbolFor('react.profiler')
        REACT_PROVIDER_TYPE = symbolFor('react.provider')
        REACT_CONTEXT_TYPE = symbolFor('react.context')
        REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref')
        REACT_SUSPENSE_TYPE = symbolFor('react.suspense')
        REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list')
        REACT_MEMO_TYPE = symbolFor('react.memo')
        REACT_LAZY_TYPE = symbolFor('react.lazy')
        REACT_BLOCK_TYPE = symbolFor('react.block')
        symbolFor('react.server.block')
        symbolFor('react.fundamental')
        REACT_SCOPE_TYPE = symbolFor('react.scope')
        REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id')
        REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode')
        REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen')
        REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden')
      }

      var MAYBE_ITERATOR_SYMBOL =
        typeof Symbol === 'function' && Symbol.iterator
      var FAUX_ITERATOR_SYMBOL = '@@iterator'
      function getIteratorFn(maybeIterable) {
        if (maybeIterable === null || typeof maybeIterable !== 'object') {
          return null
        }

        var maybeIterator =
          (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
          maybeIterable[FAUX_ITERATOR_SYMBOL]

        if (typeof maybeIterator === 'function') {
          return maybeIterator
        }

        return null
      }

      // Helpers to patch console.logs to avoid logging during side-effect free
      // replaying on render function. This currently only patches the object
      // lazily which won't cover if the log function was extracted eagerly.
      // We could also eagerly patch the method.
      var disabledDepth = 0
      var prevLog
      var prevInfo
      var prevWarn
      var prevError
      var prevGroup
      var prevGroupCollapsed
      var prevGroupEnd

      function disabledLog() {}

      disabledLog.__reactDisabledLog = true
      function disableLogs() {
        {
          if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */
            prevLog = console.log
            prevInfo = console.info
            prevWarn = console.warn
            prevError = console.error
            prevGroup = console.group
            prevGroupCollapsed = console.groupCollapsed
            prevGroupEnd = console.groupEnd // https://github.com/facebook/react/issues/19099

            var props = {
              configurable: true,
              enumerable: true,
              value: disabledLog,
              writable: true,
            } // $FlowFixMe Flow thinks console is immutable.

            Object.defineProperties(console, {
              info: props,
              log: props,
              warn: props,
              error: props,
              group: props,
              groupCollapsed: props,
              groupEnd: props,
            })
            /* eslint-enable react-internal/no-production-logging */
          }

          disabledDepth++
        }
      }
      function reenableLogs() {
        {
          disabledDepth--

          if (disabledDepth === 0) {
            /* eslint-disable react-internal/no-production-logging */
            var props = {
              configurable: true,
              enumerable: true,
              writable: true,
            } // $FlowFixMe Flow thinks console is immutable.

            Object.defineProperties(console, {
              log: _assign({}, props, {
                value: prevLog,
              }),
              info: _assign({}, props, {
                value: prevInfo,
              }),
              warn: _assign({}, props, {
                value: prevWarn,
              }),
              error: _assign({}, props, {
                value: prevError,
              }),
              group: _assign({}, props, {
                value: prevGroup,
              }),
              groupCollapsed: _assign({}, props, {
                value: prevGroupCollapsed,
              }),
              groupEnd: _assign({}, props, {
                value: prevGroupEnd,
              }),
            })
            /* eslint-enable react-internal/no-production-logging */
          }

          if (disabledDepth < 0) {
            error(
              'disabledDepth fell below zero. ' +
                'This is a bug in React. Please file an issue.'
            )
          }
        }
      }

      var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher
      var prefix
      function describeBuiltInComponentFrame(name, source, ownerFn) {
        {
          if (prefix === undefined) {
            // Extract the VM specific prefix used by each line.
            try {
              throw Error()
            } catch (x) {
              var match = x.stack.trim().match(/\n( *(at )?)/)
              prefix = (match && match[1]) || ''
            }
          } // We use the prefix to ensure our stacks line up with native stack frames.

          return '\n' + prefix + name
        }
      }
      var reentry = false
      var componentFrameCache

      {
        var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map
        componentFrameCache = new PossiblyWeakMap()
      }

      function describeNativeComponentFrame(fn, construct) {
        // If something asked for a stack inside a fake render, it should get ignored.
        if (!fn || reentry) {
          return ''
        }

        {
          var frame = componentFrameCache.get(fn)

          if (frame !== undefined) {
            return frame
          }
        }

        var control
        reentry = true
        var previousPrepareStackTrace = Error.prepareStackTrace // $FlowFixMe It does accept undefined.

        Error.prepareStackTrace = undefined
        var previousDispatcher

        {
          previousDispatcher = ReactCurrentDispatcher.current // Set the dispatcher in DEV because this might be call in the render function
          // for warnings.

          ReactCurrentDispatcher.current = null
          disableLogs()
        }

        try {
          // This should throw.
          if (construct) {
            // Something should be setting the props in the constructor.
            var Fake = function () {
              throw Error()
            } // $FlowFixMe

            Object.defineProperty(Fake.prototype, 'props', {
              set: function () {
                // We use a throwing setter instead of frozen or non-writable props
                // because that won't throw in a non-strict mode function.
                throw Error()
              },
            })

            if (typeof Reflect === 'object' && Reflect.construct) {
              // We construct a different control for this case to include any extra
              // frames added by the construct call.
              try {
                Reflect.construct(Fake, [])
              } catch (x) {
                control = x
              }

              Reflect.construct(fn, [], Fake)
            } else {
              try {
                Fake.call()
              } catch (x) {
                control = x
              }

              fn.call(Fake.prototype)
            }
          } else {
            try {
              throw Error()
            } catch (x) {
              control = x
            }

            fn()
          }
        } catch (sample) {
          // This is inlined manually because closure doesn't do it for us.
          if (sample && control && typeof sample.stack === 'string') {
            // This extracts the first frame from the sample that isn't also in the control.
            // Skipping one frame that we assume is the frame that calls the two.
            var sampleLines = sample.stack.split('\n')
            var controlLines = control.stack.split('\n')
            var s = sampleLines.length - 1
            var c = controlLines.length - 1

            while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
              // We expect at least one stack frame to be shared.
              // Typically this will be the root most one. However, stack frames may be
              // cut off due to maximum stack limits. In this case, one maybe cut off
              // earlier than the other. We assume that the sample is longer or the same
              // and there for cut off earlier. So we should find the root most frame in
              // the sample somewhere in the control.
              c--
            }

            for (; s >= 1 && c >= 0; s--, c--) {
              // Next we find the first one that isn't the same which should be the
              // frame that called our sample function and the control.
              if (sampleLines[s] !== controlLines[c]) {
                // In V8, the first line is describing the message but other VMs don't.
                // If we're about to return the first line, and the control is also on the same
                // line, that's a pretty good indicator that our sample threw at same line as
                // the control. I.e. before we entered the sample frame. So we ignore this result.
                // This can happen if you passed a class to function component, or non-function.
                if (s !== 1 || c !== 1) {
                  do {
                    s--
                    c-- // We may still have similar intermediate frames from the construct call.
                    // The next one that isn't the same should be our match though.

                    if (c < 0 || sampleLines[s] !== controlLines[c]) {
                      // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                      var _frame =
                        '\n' + sampleLines[s].replace(' at new ', ' at ')

                      {
                        if (typeof fn === 'function') {
                          componentFrameCache.set(fn, _frame)
                        }
                      } // Return the line we found.

                      return _frame
                    }
                  } while (s >= 1 && c >= 0)
                }

                break
              }
            }
          }
        } finally {
          reentry = false

          {
            ReactCurrentDispatcher.current = previousDispatcher
            reenableLogs()
          }

          Error.prepareStackTrace = previousPrepareStackTrace
        } // Fallback to just using the name if we couldn't make it throw.

        var name = fn ? fn.displayName || fn.name : ''
        var syntheticFrame = name ? describeBuiltInComponentFrame(name) : ''

        {
          if (typeof fn === 'function') {
            componentFrameCache.set(fn, syntheticFrame)
          }
        }

        return syntheticFrame
      }

      function describeClassComponentFrame(ctor, source, ownerFn) {
        {
          return describeNativeComponentFrame(ctor, true)
        }
      }
      function describeFunctionComponentFrame(fn, source, ownerFn) {
        {
          return describeNativeComponentFrame(fn, false)
        }
      }

      function shouldConstruct(Component) {
        var prototype = Component.prototype
        return !!(prototype && prototype.isReactComponent)
      }

      function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
        if (type == null) {
          return ''
        }

        if (typeof type === 'function') {
          {
            return describeNativeComponentFrame(type, shouldConstruct(type))
          }
        }

        if (typeof type === 'string') {
          return describeBuiltInComponentFrame(type)
        }

        switch (type) {
          case REACT_SUSPENSE_TYPE:
            return describeBuiltInComponentFrame('Suspense')

          case REACT_SUSPENSE_LIST_TYPE:
            return describeBuiltInComponentFrame('SuspenseList')
        }

        if (typeof type === 'object') {
          switch (type.$$typeof) {
            case REACT_FORWARD_REF_TYPE:
              return describeFunctionComponentFrame(type.render)

            case REACT_MEMO_TYPE:
              // Memo may contain any component type so we recursively resolve it.
              return describeUnknownElementTypeFrameInDEV(
                type.type,
                source,
                ownerFn
              )

            case REACT_BLOCK_TYPE:
              return describeFunctionComponentFrame(type._render)

            case REACT_LAZY_TYPE: {
              var lazyComponent = type
              var payload = lazyComponent._payload
              var init = lazyComponent._init

              try {
                // Lazy may contain any component type so we recursively resolve it.
                return describeUnknownElementTypeFrameInDEV(
                  init(payload),
                  source,
                  ownerFn
                )
              } catch (x) {}
            }
          }
        }

        return ''
      }

      function describeFiber(fiber) {
        fiber._debugOwner ? fiber._debugOwner.type : null
        fiber._debugSource

        switch (fiber.tag) {
          case HostComponent:
            return describeBuiltInComponentFrame(fiber.type)

          case LazyComponent:
            return describeBuiltInComponentFrame('Lazy')

          case SuspenseComponent:
            return describeBuiltInComponentFrame('Suspense')

          case SuspenseListComponent:
            return describeBuiltInComponentFrame('SuspenseList')

          case FunctionComponent:
          case IndeterminateComponent:
          case SimpleMemoComponent:
            return describeFunctionComponentFrame(fiber.type)

          case ForwardRef:
            return describeFunctionComponentFrame(fiber.type.render)

          case Block:
            return describeFunctionComponentFrame(fiber.type._render)

          case ClassComponent:
            return describeClassComponentFrame(fiber.type)

          default:
            return ''
        }
      }

      function getStackByFiberInDevAndProd(workInProgress) {
        try {
          var info = ''
          var node = workInProgress

          do {
            info += describeFiber(node)
            node = node.return
          } while (node)

          return info
        } catch (x) {
          return '\nError generating stack: ' + x.message + '\n' + x.stack
        }
      }

      function getWrappedName(outerType, innerType, wrapperName) {
        var functionName = innerType.displayName || innerType.name || ''
        return (
          outerType.displayName ||
          (functionName !== ''
            ? wrapperName + '(' + functionName + ')'
            : wrapperName)
        )
      }

      function getContextName(type) {
        return type.displayName || 'Context'
      }

      function getComponentName(type) {
        if (type == null) {
          // Host root, text node or just invalid type.
          return null
        }

        {
          if (typeof type.tag === 'number') {
            error(
              'Received an unexpected object in getComponentName(). ' +
                'This is likely a bug in React. Please file an issue.'
            )
          }
        }

        if (typeof type === 'function') {
          return type.displayName || type.name || null
        }

        if (typeof type === 'string') {
          return type
        }

        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return 'Fragment'

          case REACT_PORTAL_TYPE:
            return 'Portal'

          case REACT_PROFILER_TYPE:
            return 'Profiler'

          case REACT_STRICT_MODE_TYPE:
            return 'StrictMode'

          case REACT_SUSPENSE_TYPE:
            return 'Suspense'

          case REACT_SUSPENSE_LIST_TYPE:
            return 'SuspenseList'
        }

        if (typeof type === 'object') {
          switch (type.$$typeof) {
            case REACT_CONTEXT_TYPE:
              var context = type
              return getContextName(context) + '.Consumer'

            case REACT_PROVIDER_TYPE:
              var provider = type
              return getContextName(provider._context) + '.Provider'

            case REACT_FORWARD_REF_TYPE:
              return getWrappedName(type, type.render, 'ForwardRef')

            case REACT_MEMO_TYPE:
              return getComponentName(type.type)

            case REACT_BLOCK_TYPE:
              return getComponentName(type._render)

            case REACT_LAZY_TYPE: {
              var lazyComponent = type
              var payload = lazyComponent._payload
              var init = lazyComponent._init

              try {
                return getComponentName(init(payload))
              } catch (x) {
                return null
              }
            }
          }
        }

        return null
      }

      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame
      var current = null
      var isRendering = false
      function getCurrentFiberOwnerNameInDevOrNull() {
        {
          if (current === null) {
            return null
          }

          var owner = current._debugOwner

          if (owner !== null && typeof owner !== 'undefined') {
            return getComponentName(owner.type)
          }
        }

        return null
      }

      function getCurrentFiberStackInDev() {
        {
          if (current === null) {
            return ''
          } // Safe because if current fiber exists, we are reconciling,
          // and it is guaranteed to be the work-in-progress version.

          return getStackByFiberInDevAndProd(current)
        }
      }

      function resetCurrentFiber() {
        {
          ReactDebugCurrentFrame.getCurrentStack = null
          current = null
          isRendering = false
        }
      }
      function setCurrentFiber(fiber) {
        {
          ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev
          current = fiber
          isRendering = false
        }
      }
      function setIsRendering(rendering) {
        {
          isRendering = rendering
        }
      }
      function getIsRendering() {
        {
          return isRendering
        }
      }

      // Flow does not allow string concatenation of most non-string types. To work
      // around this limitation, we use an opaque type that can only be obtained by
      // passing the value through getToStringValue first.
      function toString(value) {
        return '' + value
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case 'boolean':
          case 'number':
          case 'object':
          case 'string':
          case 'undefined':
            return value

          default:
            // function, symbol are assigned as empty strings
            return ''
        }
      }

      var hasReadOnlyValue = {
        button: true,
        checkbox: true,
        image: true,
        hidden: true,
        radio: true,
        reset: true,
        submit: true,
      }
      function checkControlledValueProps(tagName, props) {
        {
          if (
            !(
              hasReadOnlyValue[props.type] ||
              props.onChange ||
              props.onInput ||
              props.readOnly ||
              props.disabled ||
              props.value == null
            )
          ) {
            error(
              'You provided a `value` prop to a form field without an ' +
                '`onChange` handler. This will render a read-only field. If ' +
                'the field should be mutable use `defaultValue`. Otherwise, ' +
                'set either `onChange` or `readOnly`.'
            )
          }

          if (
            !(
              props.onChange ||
              props.readOnly ||
              props.disabled ||
              props.checked == null
            )
          ) {
            error(
              'You provided a `checked` prop to a form field without an ' +
                '`onChange` handler. This will render a read-only field. If ' +
                'the field should be mutable use `defaultChecked`. Otherwise, ' +
                'set either `onChange` or `readOnly`.'
            )
          }
        }
      }

      function isCheckable(elem) {
        var type = elem.type
        var nodeName = elem.nodeName
        return (
          nodeName &&
          nodeName.toLowerCase() === 'input' &&
          (type === 'checkbox' || type === 'radio')
        )
      }

      function getTracker(node) {
        return node._valueTracker
      }

      function detachTracker(node) {
        node._valueTracker = null
      }

      function getValueFromNode(node) {
        var value = ''

        if (!node) {
          return value
        }

        if (isCheckable(node)) {
          value = node.checked ? 'true' : 'false'
        } else {
          value = node.value
        }

        return value
      }

      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? 'checked' : 'value'
        var descriptor = Object.getOwnPropertyDescriptor(
          node.constructor.prototype,
          valueField
        )
        var currentValue = '' + node[valueField] // if someone has already defined a value or Safari, then bail
        // and don't track value will cause over reporting of changes,
        // but it's better then a hard failure
        // (needed for certain tests that spyOn input values and Safari)

        if (
          node.hasOwnProperty(valueField) ||
          typeof descriptor === 'undefined' ||
          typeof descriptor.get !== 'function' ||
          typeof descriptor.set !== 'function'
        ) {
          return
        }

        var get = descriptor.get,
          set = descriptor.set
        Object.defineProperty(node, valueField, {
          configurable: true,
          get: function () {
            return get.call(this)
          },
          set: function (value) {
            currentValue = '' + value
            set.call(this, value)
          },
        }) // We could've passed this the first time
        // but it triggers a bug in IE11 and Edge 14/15.
        // Calling defineProperty() again should be equivalent.
        // https://github.com/facebook/react/issues/11768

        Object.defineProperty(node, valueField, {
          enumerable: descriptor.enumerable,
        })
        var tracker = {
          getValue: function () {
            return currentValue
          },
          setValue: function (value) {
            currentValue = '' + value
          },
          stopTracking: function () {
            detachTracker(node)
            delete node[valueField]
          },
        }
        return tracker
      }

      function track(node) {
        if (getTracker(node)) {
          return
        } // TODO: Once it's just Fiber we can move this to node._wrapperState

        node._valueTracker = trackValueOnNode(node)
      }
      function updateValueIfChanged(node) {
        if (!node) {
          return false
        }

        var tracker = getTracker(node) // if there is no tracker at this point it's unlikely
        // that trying again will succeed

        if (!tracker) {
          return true
        }

        var lastValue = tracker.getValue()
        var nextValue = getValueFromNode(node)

        if (nextValue !== lastValue) {
          tracker.setValue(nextValue)
          return true
        }

        return false
      }

      function getActiveElement(doc) {
        doc = doc || (typeof document !== 'undefined' ? document : undefined)

        if (typeof doc === 'undefined') {
          return null
        }

        try {
          return doc.activeElement || doc.body
        } catch (e) {
          return doc.body
        }
      }

      var didWarnValueDefaultValue = false
      var didWarnCheckedDefaultChecked = false
      var didWarnControlledToUncontrolled = false
      var didWarnUncontrolledToControlled = false

      function isControlled(props) {
        var usesChecked = props.type === 'checkbox' || props.type === 'radio'
        return usesChecked ? props.checked != null : props.value != null
      }
      /**
       * Implements an <input> host component that allows setting these optional
       * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
       *
       * If `checked` or `value` are not supplied (or null/undefined), user actions
       * that affect the checked state or value will trigger updates to the element.
       *
       * If they are supplied (and not null/undefined), the rendered element will not
       * trigger updates to the element. Instead, the props must change in order for
       * the rendered element to be updated.
       *
       * The rendered element will be initialized as unchecked (or `defaultChecked`)
       * with an empty value (or `defaultValue`).
       *
       * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
       */

      function getHostProps(element, props) {
        var node = element
        var checked = props.checked

        var hostProps = _assign({}, props, {
          defaultChecked: undefined,
          defaultValue: undefined,
          value: undefined,
          checked:
            checked != null ? checked : node._wrapperState.initialChecked,
        })

        return hostProps
      }
      function initWrapperState(element, props) {
        {
          checkControlledValueProps('input', props)

          if (
            props.checked !== undefined &&
            props.defaultChecked !== undefined &&
            !didWarnCheckedDefaultChecked
          ) {
            error(
              '%s contains an input of type %s with both checked and defaultChecked props. ' +
                'Input elements must be either controlled or uncontrolled ' +
                '(specify either the checked prop, or the defaultChecked prop, but not ' +
                'both). Decide between using a controlled or uncontrolled input ' +
                'element and remove one of these props. More info: ' +
                'https://reactjs.org/link/controlled-components',
              getCurrentFiberOwnerNameInDevOrNull() || 'A component',
              props.type
            )

            didWarnCheckedDefaultChecked = true
          }

          if (
            props.value !== undefined &&
            props.defaultValue !== undefined &&
            !didWarnValueDefaultValue
          ) {
            error(
              '%s contains an input of type %s with both value and defaultValue props. ' +
                'Input elements must be either controlled or uncontrolled ' +
                '(specify either the value prop, or the defaultValue prop, but not ' +
                'both). Decide between using a controlled or uncontrolled input ' +
                'element and remove one of these props. More info: ' +
                'https://reactjs.org/link/controlled-components',
              getCurrentFiberOwnerNameInDevOrNull() || 'A component',
              props.type
            )

            didWarnValueDefaultValue = true
          }
        }

        var node = element
        var defaultValue = props.defaultValue == null ? '' : props.defaultValue
        node._wrapperState = {
          initialChecked:
            props.checked != null ? props.checked : props.defaultChecked,
          initialValue: getToStringValue(
            props.value != null ? props.value : defaultValue
          ),
          controlled: isControlled(props),
        }
      }
      function updateChecked(element, props) {
        var node = element
        var checked = props.checked

        if (checked != null) {
          setValueForProperty(node, 'checked', checked, false)
        }
      }
      function updateWrapper(element, props) {
        var node = element

        {
          var controlled = isControlled(props)

          if (
            !node._wrapperState.controlled &&
            controlled &&
            !didWarnUncontrolledToControlled
          ) {
            error(
              'A component is changing an uncontrolled input to be controlled. ' +
                'This is likely caused by the value changing from undefined to ' +
                'a defined value, which should not happen. ' +
                'Decide between using a controlled or uncontrolled input ' +
                'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components'
            )

            didWarnUncontrolledToControlled = true
          }

          if (
            node._wrapperState.controlled &&
            !controlled &&
            !didWarnControlledToUncontrolled
          ) {
            error(
              'A component is changing a controlled input to be uncontrolled. ' +
                'This is likely caused by the value changing from a defined to ' +
                'undefined, which should not happen. ' +
                'Decide between using a controlled or uncontrolled input ' +
                'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components'
            )

            didWarnControlledToUncontrolled = true
          }
        }

        updateChecked(element, props)
        var value = getToStringValue(props.value)
        var type = props.type

        if (value != null) {
          if (type === 'number') {
            if (
              (value === 0 && node.value === '') || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node.value != value
            ) {
              node.value = toString(value)
            }
          } else if (node.value !== toString(value)) {
            node.value = toString(value)
          }
        } else if (type === 'submit' || type === 'reset') {
          // Submit/reset inputs need the attribute removed completely to avoid
          // blank-text buttons.
          node.removeAttribute('value')
          return
        }

        {
          // When syncing the value attribute, the value comes from a cascade of
          // properties:
          //  1. The value React property
          //  2. The defaultValue React property
          //  3. Otherwise there should be no change
          if (props.hasOwnProperty('value')) {
            setDefaultValue(node, props.type, value)
          } else if (props.hasOwnProperty('defaultValue')) {
            setDefaultValue(
              node,
              props.type,
              getToStringValue(props.defaultValue)
            )
          }
        }

        {
          // When syncing the checked attribute, it only changes when it needs
          // to be removed, such as transitioning from a checkbox into a text input
          if (props.checked == null && props.defaultChecked != null) {
            node.defaultChecked = !!props.defaultChecked
          }
        }
      }
      function postMountWrapper(element, props, isHydrating) {
        var node = element // Do not assign value if it is already set. This prevents user text input
        // from being lost during SSR hydration.

        if (
          props.hasOwnProperty('value') ||
          props.hasOwnProperty('defaultValue')
        ) {
          var type = props.type
          var isButton = type === 'submit' || type === 'reset' // Avoid setting value attribute on submit/reset inputs as it overrides the
          // default value provided by the browser. See: #12872

          if (isButton && (props.value === undefined || props.value === null)) {
            return
          }

          var initialValue = toString(node._wrapperState.initialValue) // Do not assign value if it is already set. This prevents user text input
          // from being lost during SSR hydration.

          if (!isHydrating) {
            {
              // When syncing the value attribute, the value property should use
              // the wrapperState._initialValue property. This uses:
              //
              //   1. The value React property when present
              //   2. The defaultValue React property when present
              //   3. An empty string
              if (initialValue !== node.value) {
                node.value = initialValue
              }
            }
          }

          {
            // Otherwise, the value attribute is synchronized to the property,
            // so we assign defaultValue to the same thing as the value property
            // assignment step above.
            node.defaultValue = initialValue
          }
        } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
        // this is needed to work around a chrome bug where setting defaultChecked
        // will sometimes influence the value of checked (even after detachment).
        // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
        // We need to temporarily unset name to avoid disrupting radio button groups.

        var name = node.name

        if (name !== '') {
          node.name = ''
        }

        {
          // When syncing the checked attribute, both the checked property and
          // attribute are assigned at the same time using defaultChecked. This uses:
          //
          //   1. The checked React property when present
          //   2. The defaultChecked React property when present
          //   3. Otherwise, false
          node.defaultChecked = !node.defaultChecked
          node.defaultChecked = !!node._wrapperState.initialChecked
        }

        if (name !== '') {
          node.name = name
        }
      }
      function restoreControlledState(element, props) {
        var node = element
        updateWrapper(node, props)
        updateNamedCousins(node, props)
      }

      function updateNamedCousins(rootNode, props) {
        var name = props.name

        if (props.type === 'radio' && name != null) {
          var queryRoot = rootNode

          while (queryRoot.parentNode) {
            queryRoot = queryRoot.parentNode
          } // If `rootNode.form` was non-null, then we could try `form.elements`,
          // but that sometimes behaves strangely in IE8. We could also try using
          // `form.getElementsByName`, but that will only return direct children
          // and won't include inputs that use the HTML5 `form=` attribute. Since
          // the input might not even be in a form. It might not even be in the
          // document. Let's just use the local `querySelectorAll` to ensure we don't
          // miss anything.

          var group = queryRoot.querySelectorAll(
            'input[name=' + JSON.stringify('' + name) + '][type="radio"]'
          )

          for (var i = 0; i < group.length; i++) {
            var otherNode = group[i]

            if (otherNode === rootNode || otherNode.form !== rootNode.form) {
              continue
            } // This will throw if radio buttons rendered by different copies of React
            // and the same name are rendered into the same form (same as #1939).
            // That's probably okay; we don't support it just as we don't support
            // mixing React radio buttons with non-React ones.

            var otherProps = getFiberCurrentPropsFromNode(otherNode)

            if (!otherProps) {
              {
                throw Error(
                  'ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.'
                )
              }
            } // We need update the tracked value on the named cousin since the value
            // was changed but the input saw no event or value set

            updateValueIfChanged(otherNode) // If this is a controlled radio button group, forcing the input that
            // was previously checked to update will cause it to be come re-checked
            // as appropriate.

            updateWrapper(otherNode, otherProps)
          }
        }
      } // In Chrome, assigning defaultValue to certain input types triggers input validation.
      // For number inputs, the display value loses trailing decimal points. For email inputs,
      // Chrome raises "The specified value <x> is not a valid email address".
      //
      // Here we check to see if the defaultValue has actually changed, avoiding these problems
      // when the user is inputting text
      //
      // https://github.com/facebook/react/issues/7253

      function setDefaultValue(node, type, value) {
        if (
          // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
          type !== 'number' ||
          getActiveElement(node.ownerDocument) !== node
        ) {
          if (value == null) {
            node.defaultValue = toString(node._wrapperState.initialValue)
          } else if (node.defaultValue !== toString(value)) {
            node.defaultValue = toString(value)
          }
        }
      }

      var didWarnSelectedSetOnOption = false
      var didWarnInvalidChild = false

      function flattenChildren(children) {
        var content = '' // Flatten children. We'll warn if they are invalid
        // during validateProps() which runs for hydration too.
        // Note that this would throw on non-element objects.
        // Elements are stringified (which is normally irrelevant
        // but matters for <fbt>).

        React.Children.forEach(children, function (child) {
          if (child == null) {
            return
          }

          content += child // Note: we don't warn about invalid children here.
          // Instead, this is done separately below so that
          // it happens during the hydration code path too.
        })
        return content
      }
      /**
       * Implements an <option> host component that warns when `selected` is set.
       */

      function validateProps(element, props) {
        {
          // This mirrors the code path above, but runs for hydration too.
          // Warn about invalid children here so that client and hydration are consistent.
          // TODO: this seems like it could cause a DEV-only throw for hydration
          // if children contains a non-element object. We should try to avoid that.
          if (typeof props.children === 'object' && props.children !== null) {
            React.Children.forEach(props.children, function (child) {
              if (child == null) {
                return
              }

              if (typeof child === 'string' || typeof child === 'number') {
                return
              }

              if (typeof child.type !== 'string') {
                return
              }

              if (!didWarnInvalidChild) {
                didWarnInvalidChild = true

                error(
                  'Only strings and numbers are supported as <option> children.'
                )
              }
            })
          } // TODO: Remove support for `selected` in <option>.

          if (props.selected != null && !didWarnSelectedSetOnOption) {
            error(
              'Use the `defaultValue` or `value` props on <select> instead of ' +
                'setting `selected` on <option>.'
            )

            didWarnSelectedSetOnOption = true
          }
        }
      }
      function postMountWrapper$1(element, props) {
        // value="" should make a value attribute (#6219)
        if (props.value != null) {
          element.setAttribute('value', toString(getToStringValue(props.value)))
        }
      }
      function getHostProps$1(element, props) {
        var hostProps = _assign(
          {
            children: undefined,
          },
          props
        )

        var content = flattenChildren(props.children)

        if (content) {
          hostProps.children = content
        }

        return hostProps
      }

      var didWarnValueDefaultValue$1

      {
        didWarnValueDefaultValue$1 = false
      }

      function getDeclarationErrorAddendum() {
        var ownerName = getCurrentFiberOwnerNameInDevOrNull()

        if (ownerName) {
          return '\n\nCheck the render method of `' + ownerName + '`.'
        }

        return ''
      }

      var valuePropNames = ['value', 'defaultValue']
      /**
       * Validation function for `value` and `defaultValue`.
       */

      function checkSelectPropTypes(props) {
        {
          checkControlledValueProps('select', props)

          for (var i = 0; i < valuePropNames.length; i++) {
            var propName = valuePropNames[i]

            if (props[propName] == null) {
              continue
            }

            var isArray = Array.isArray(props[propName])

            if (props.multiple && !isArray) {
              error(
                'The `%s` prop supplied to <select> must be an array if ' +
                  '`multiple` is true.%s',
                propName,
                getDeclarationErrorAddendum()
              )
            } else if (!props.multiple && isArray) {
              error(
                'The `%s` prop supplied to <select> must be a scalar ' +
                  'value if `multiple` is false.%s',
                propName,
                getDeclarationErrorAddendum()
              )
            }
          }
        }
      }

      function updateOptions(node, multiple, propValue, setDefaultSelected) {
        var options = node.options

        if (multiple) {
          var selectedValues = propValue
          var selectedValue = {}

          for (var i = 0; i < selectedValues.length; i++) {
            // Prefix to avoid chaos with special keys.
            selectedValue['$' + selectedValues[i]] = true
          }

          for (var _i = 0; _i < options.length; _i++) {
            var selected = selectedValue.hasOwnProperty('$' + options[_i].value)

            if (options[_i].selected !== selected) {
              options[_i].selected = selected
            }

            if (selected && setDefaultSelected) {
              options[_i].defaultSelected = true
            }
          }
        } else {
          // Do not set `select.value` as exact behavior isn't consistent across all
          // browsers for all cases.
          var _selectedValue = toString(getToStringValue(propValue))

          var defaultSelected = null

          for (var _i2 = 0; _i2 < options.length; _i2++) {
            if (options[_i2].value === _selectedValue) {
              options[_i2].selected = true

              if (setDefaultSelected) {
                options[_i2].defaultSelected = true
              }

              return
            }

            if (defaultSelected === null && !options[_i2].disabled) {
              defaultSelected = options[_i2]
            }
          }

          if (defaultSelected !== null) {
            defaultSelected.selected = true
          }
        }
      }
      /**
       * Implements a <select> host component that allows optionally setting the
       * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
       * stringable. If `multiple` is true, the prop must be an array of stringables.
       *
       * If `value` is not supplied (or null/undefined), user actions that change the
       * selected option will trigger updates to the rendered options.
       *
       * If it is supplied (and not null/undefined), the rendered options will not
       * update in response to user actions. Instead, the `value` prop must change in
       * order for the rendered options to update.
       *
       * If `defaultValue` is provided, any options with the supplied values will be
       * selected.
       */

      function getHostProps$2(element, props) {
        return _assign({}, props, {
          value: undefined,
        })
      }
      function initWrapperState$1(element, props) {
        var node = element

        {
          checkSelectPropTypes(props)
        }

        node._wrapperState = {
          wasMultiple: !!props.multiple,
        }

        {
          if (
            props.value !== undefined &&
            props.defaultValue !== undefined &&
            !didWarnValueDefaultValue$1
          ) {
            error(
              'Select elements must be either controlled or uncontrolled ' +
                '(specify either the value prop, or the defaultValue prop, but not ' +
                'both). Decide between using a controlled or uncontrolled select ' +
                'element and remove one of these props. More info: ' +
                'https://reactjs.org/link/controlled-components'
            )

            didWarnValueDefaultValue$1 = true
          }
        }
      }
      function postMountWrapper$2(element, props) {
        var node = element
        node.multiple = !!props.multiple
        var value = props.value

        if (value != null) {
          updateOptions(node, !!props.multiple, value, false)
        } else if (props.defaultValue != null) {
          updateOptions(node, !!props.multiple, props.defaultValue, true)
        }
      }
      function postUpdateWrapper(element, props) {
        var node = element
        var wasMultiple = node._wrapperState.wasMultiple
        node._wrapperState.wasMultiple = !!props.multiple
        var value = props.value

        if (value != null) {
          updateOptions(node, !!props.multiple, value, false)
        } else if (wasMultiple !== !!props.multiple) {
          // For simplicity, reapply `defaultValue` if `multiple` is toggled.
          if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true)
          } else {
            // Revert the select back to its default unselected state.
            updateOptions(
              node,
              !!props.multiple,
              props.multiple ? [] : '',
              false
            )
          }
        }
      }
      function restoreControlledState$1(element, props) {
        var node = element
        var value = props.value

        if (value != null) {
          updateOptions(node, !!props.multiple, value, false)
        }
      }

      var didWarnValDefaultVal = false

      /**
       * Implements a <textarea> host component that allows setting `value`, and
       * `defaultValue`. This differs from the traditional DOM API because value is
       * usually set as PCDATA children.
       *
       * If `value` is not supplied (or null/undefined), user actions that affect the
       * value will trigger updates to the element.
       *
       * If `value` is supplied (and not null/undefined), the rendered element will
       * not trigger updates to the element. Instead, the `value` prop must change in
       * order for the rendered element to be updated.
       *
       * The rendered element will be initialized with an empty value, the prop
       * `defaultValue` if specified, or the children content (deprecated).
       */
      function getHostProps$3(element, props) {
        var node = element

        if (!(props.dangerouslySetInnerHTML == null)) {
          {
            throw Error(
              '`dangerouslySetInnerHTML` does not make sense on <textarea>.'
            )
          }
        } // Always set children to the same thing. In IE9, the selection range will
        // get reset if `textContent` is mutated.  We could add a check in setTextContent
        // to only set the value if/when the value differs from the node value (which would
        // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
        // solution. The value can be a boolean or object so that's why it's forced
        // to be a string.

        var hostProps = _assign({}, props, {
          value: undefined,
          defaultValue: undefined,
          children: toString(node._wrapperState.initialValue),
        })

        return hostProps
      }
      function initWrapperState$2(element, props) {
        var node = element

        {
          checkControlledValueProps('textarea', props)

          if (
            props.value !== undefined &&
            props.defaultValue !== undefined &&
            !didWarnValDefaultVal
          ) {
            error(
              '%s contains a textarea with both value and defaultValue props. ' +
                'Textarea elements must be either controlled or uncontrolled ' +
                '(specify either the value prop, or the defaultValue prop, but not ' +
                'both). Decide between using a controlled or uncontrolled textarea ' +
                'and remove one of these props. More info: ' +
                'https://reactjs.org/link/controlled-components',
              getCurrentFiberOwnerNameInDevOrNull() || 'A component'
            )

            didWarnValDefaultVal = true
          }
        }

        var initialValue = props.value // Only bother fetching default value if we're going to use it

        if (initialValue == null) {
          var children = props.children,
            defaultValue = props.defaultValue

          if (children != null) {
            {
              error(
                'Use the `defaultValue` or `value` props instead of setting ' +
                  'children on <textarea>.'
              )
            }

            {
              if (!(defaultValue == null)) {
                {
                  throw Error(
                    'If you supply `defaultValue` on a <textarea>, do not pass children.'
                  )
                }
              }

              if (Array.isArray(children)) {
                if (!(children.length <= 1)) {
                  {
                    throw Error('<textarea> can only have at most one child.')
                  }
                }

                children = children[0]
              }

              defaultValue = children
            }
          }

          if (defaultValue == null) {
            defaultValue = ''
          }

          initialValue = defaultValue
        }

        node._wrapperState = {
          initialValue: getToStringValue(initialValue),
        }
      }
      function updateWrapper$1(element, props) {
        var node = element
        var value = getToStringValue(props.value)
        var defaultValue = getToStringValue(props.defaultValue)

        if (value != null) {
          // Cast `value` to a string to ensure the value is set correctly. While
          // browsers typically do this as necessary, jsdom doesn't.
          var newValue = toString(value) // To avoid side effects (such as losing text selection), only set value if changed

          if (newValue !== node.value) {
            node.value = newValue
          }

          if (props.defaultValue == null && node.defaultValue !== newValue) {
            node.defaultValue = newValue
          }
        }

        if (defaultValue != null) {
          node.defaultValue = toString(defaultValue)
        }
      }
      function postMountWrapper$3(element, props) {
        var node = element // This is in postMount because we need access to the DOM node, which is not
        // available until after the component has mounted.

        var textContent = node.textContent // Only set node.value if textContent is equal to the expected
        // initial value. In IE10/IE11 there is a bug where the placeholder attribute
        // will populate textContent as well.
        // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

        if (textContent === node._wrapperState.initialValue) {
          if (textContent !== '' && textContent !== null) {
            node.value = textContent
          }
        }
      }
      function restoreControlledState$2(element, props) {
        // DOM component is still mounted; update
        updateWrapper$1(element, props)
      }

      var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml'
      var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML'
      var SVG_NAMESPACE = 'http://www.w3.org/2000/svg'
      var Namespaces = {
        html: HTML_NAMESPACE,
        mathml: MATH_NAMESPACE,
        svg: SVG_NAMESPACE,
      } // Assumes there is no parent namespace.

      function getIntrinsicNamespace(type) {
        switch (type) {
          case 'svg':
            return SVG_NAMESPACE

          case 'math':
            return MATH_NAMESPACE

          default:
            return HTML_NAMESPACE
        }
      }
      function getChildNamespace(parentNamespace, type) {
        if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
          // No (or default) parent namespace: potential entry point.
          return getIntrinsicNamespace(type)
        }

        if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
          // We're leaving SVG.
          return HTML_NAMESPACE
        } // By default, pass namespace below.

        return parentNamespace
      }

      /* globals MSApp */

      /**
       * Create a function which has 'unsafe' privileges (required by windows8 apps)
       */
      var createMicrosoftUnsafeLocalFunction = function (func) {
        if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
          return function (arg0, arg1, arg2, arg3) {
            MSApp.execUnsafeLocalFunction(function () {
              return func(arg0, arg1, arg2, arg3)
            })
          }
        } else {
          return func
        }
      }

      var reusableSVGContainer
      /**
       * Set the innerHTML property of a node
       *
       * @param {DOMElement} node
       * @param {string} html
       * @internal
       */

      var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (
        node,
        html
      ) {
        if (node.namespaceURI === Namespaces.svg) {
          if (!('innerHTML' in node)) {
            // IE does not have innerHTML for SVG nodes, so instead we inject the
            // new markup in a temp node and then move the child nodes across into
            // the target node
            reusableSVGContainer =
              reusableSVGContainer || document.createElement('div')
            reusableSVGContainer.innerHTML =
              '<svg>' + html.valueOf().toString() + '</svg>'
            var svgNode = reusableSVGContainer.firstChild

            while (node.firstChild) {
              node.removeChild(node.firstChild)
            }

            while (svgNode.firstChild) {
              node.appendChild(svgNode.firstChild)
            }

            return
          }
        }

        node.innerHTML = html
      })

      /**
       * HTML nodeType values that represent the type of the node
       */
      var ELEMENT_NODE = 1
      var TEXT_NODE = 3
      var COMMENT_NODE = 8
      var DOCUMENT_NODE = 9
      var DOCUMENT_FRAGMENT_NODE = 11

      /**
       * Set the textContent property of a node. For text updates, it's faster
       * to set the `nodeValue` of the Text node directly instead of using
       * `.textContent` which will remove the existing node and create a new one.
       *
       * @param {DOMElement} node
       * @param {string} text
       * @internal
       */

      var setTextContent = function (node, text) {
        if (text) {
          var firstChild = node.firstChild

          if (
            firstChild &&
            firstChild === node.lastChild &&
            firstChild.nodeType === TEXT_NODE
          ) {
            firstChild.nodeValue = text
            return
          }
        }

        node.textContent = text
      }

      // List derived from Gecko source code:
      // https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
      var shorthandToLonghand = {
        animation: [
          'animationDelay',
          'animationDirection',
          'animationDuration',
          'animationFillMode',
          'animationIterationCount',
          'animationName',
          'animationPlayState',
          'animationTimingFunction',
        ],
        background: [
          'backgroundAttachment',
          'backgroundClip',
          'backgroundColor',
          'backgroundImage',
          'backgroundOrigin',
          'backgroundPositionX',
          'backgroundPositionY',
          'backgroundRepeat',
          'backgroundSize',
        ],
        backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
        border: [
          'borderBottomColor',
          'borderBottomStyle',
          'borderBottomWidth',
          'borderImageOutset',
          'borderImageRepeat',
          'borderImageSlice',
          'borderImageSource',
          'borderImageWidth',
          'borderLeftColor',
          'borderLeftStyle',
          'borderLeftWidth',
          'borderRightColor',
          'borderRightStyle',
          'borderRightWidth',
          'borderTopColor',
          'borderTopStyle',
          'borderTopWidth',
        ],
        borderBlockEnd: [
          'borderBlockEndColor',
          'borderBlockEndStyle',
          'borderBlockEndWidth',
        ],
        borderBlockStart: [
          'borderBlockStartColor',
          'borderBlockStartStyle',
          'borderBlockStartWidth',
        ],
        borderBottom: [
          'borderBottomColor',
          'borderBottomStyle',
          'borderBottomWidth',
        ],
        borderColor: [
          'borderBottomColor',
          'borderLeftColor',
          'borderRightColor',
          'borderTopColor',
        ],
        borderImage: [
          'borderImageOutset',
          'borderImageRepeat',
          'borderImageSlice',
          'borderImageSource',
          'borderImageWidth',
        ],
        borderInlineEnd: [
          'borderInlineEndColor',
          'borderInlineEndStyle',
          'borderInlineEndWidth',
        ],
        borderInlineStart: [
          'borderInlineStartColor',
          'borderInlineStartStyle',
          'borderInlineStartWidth',
        ],
        borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
        borderRadius: [
          'borderBottomLeftRadius',
          'borderBottomRightRadius',
          'borderTopLeftRadius',
          'borderTopRightRadius',
        ],
        borderRight: [
          'borderRightColor',
          'borderRightStyle',
          'borderRightWidth',
        ],
        borderStyle: [
          'borderBottomStyle',
          'borderLeftStyle',
          'borderRightStyle',
          'borderTopStyle',
        ],
        borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
        borderWidth: [
          'borderBottomWidth',
          'borderLeftWidth',
          'borderRightWidth',
          'borderTopWidth',
        ],
        columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
        columns: ['columnCount', 'columnWidth'],
        flex: ['flexBasis', 'flexGrow', 'flexShrink'],
        flexFlow: ['flexDirection', 'flexWrap'],
        font: [
          'fontFamily',
          'fontFeatureSettings',
          'fontKerning',
          'fontLanguageOverride',
          'fontSize',
          'fontSizeAdjust',
          'fontStretch',
          'fontStyle',
          'fontVariant',
          'fontVariantAlternates',
          'fontVariantCaps',
          'fontVariantEastAsian',
          'fontVariantLigatures',
          'fontVariantNumeric',
          'fontVariantPosition',
          'fontWeight',
          'lineHeight',
        ],
        fontVariant: [
          'fontVariantAlternates',
          'fontVariantCaps',
          'fontVariantEastAsian',
          'fontVariantLigatures',
          'fontVariantNumeric',
          'fontVariantPosition',
        ],
        gap: ['columnGap', 'rowGap'],
        grid: [
          'gridAutoColumns',
          'gridAutoFlow',
          'gridAutoRows',
          'gridTemplateAreas',
          'gridTemplateColumns',
          'gridTemplateRows',
        ],
        gridArea: [
          'gridColumnEnd',
          'gridColumnStart',
          'gridRowEnd',
          'gridRowStart',
        ],
        gridColumn: ['gridColumnEnd', 'gridColumnStart'],
        gridColumnGap: ['columnGap'],
        gridGap: ['columnGap', 'rowGap'],
        gridRow: ['gridRowEnd', 'gridRowStart'],
        gridRowGap: ['rowGap'],
        gridTemplate: [
          'gridTemplateAreas',
          'gridTemplateColumns',
          'gridTemplateRows',
        ],
        listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
        margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
        marker: ['markerEnd', 'markerMid', 'markerStart'],
        mask: [
          'maskClip',
          'maskComposite',
          'maskImage',
          'maskMode',
          'maskOrigin',
          'maskPositionX',
          'maskPositionY',
          'maskRepeat',
          'maskSize',
        ],
        maskPosition: ['maskPositionX', 'maskPositionY'],
        outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
        overflow: ['overflowX', 'overflowY'],
        padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
        placeContent: ['alignContent', 'justifyContent'],
        placeItems: ['alignItems', 'justifyItems'],
        placeSelf: ['alignSelf', 'justifySelf'],
        textDecoration: [
          'textDecorationColor',
          'textDecorationLine',
          'textDecorationStyle',
        ],
        textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
        transition: [
          'transitionDelay',
          'transitionDuration',
          'transitionProperty',
          'transitionTimingFunction',
        ],
        wordWrap: ['overflowWrap'],
      }

      /**
       * CSS properties which accept numbers but are not in units of "px".
       */
      var isUnitlessNumber = {
        animationIterationCount: true,
        borderImageOutset: true,
        borderImageSlice: true,
        borderImageWidth: true,
        boxFlex: true,
        boxFlexGroup: true,
        boxOrdinalGroup: true,
        columnCount: true,
        columns: true,
        flex: true,
        flexGrow: true,
        flexPositive: true,
        flexShrink: true,
        flexNegative: true,
        flexOrder: true,
        gridArea: true,
        gridRow: true,
        gridRowEnd: true,
        gridRowSpan: true,
        gridRowStart: true,
        gridColumn: true,
        gridColumnEnd: true,
        gridColumnSpan: true,
        gridColumnStart: true,
        fontWeight: true,
        lineClamp: true,
        lineHeight: true,
        opacity: true,
        order: true,
        orphans: true,
        tabSize: true,
        widows: true,
        zIndex: true,
        zoom: true,
        // SVG-related properties
        fillOpacity: true,
        floodOpacity: true,
        stopOpacity: true,
        strokeDasharray: true,
        strokeDashoffset: true,
        strokeMiterlimit: true,
        strokeOpacity: true,
        strokeWidth: true,
      }
      /**
       * @param {string} prefix vendor-specific prefix, eg: Webkit
       * @param {string} key style name, eg: transitionDuration
       * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
       * WebkitTransitionDuration
       */

      function prefixKey(prefix, key) {
        return prefix + key.charAt(0).toUpperCase() + key.substring(1)
      }
      /**
       * Support style names that may come passed in prefixed by adding permutations
       * of vendor prefixes.
       */

      var prefixes = ['Webkit', 'ms', 'Moz', 'O'] // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
      // infinite loop, because it iterates over the newly added props too.

      Object.keys(isUnitlessNumber).forEach(function (prop) {
        prefixes.forEach(function (prefix) {
          isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop]
        })
      })

      /**
       * Convert a value into the proper css writable value. The style name `name`
       * should be logical (no hyphens), as specified
       * in `CSSProperty.isUnitlessNumber`.
       *
       * @param {string} name CSS property name such as `topMargin`.
       * @param {*} value CSS property value such as `10px`.
       * @return {string} Normalized style value with dimensions applied.
       */

      function dangerousStyleValue(name, value, isCustomProperty) {
        // Note that we've removed escapeTextForBrowser() calls here since the
        // whole string will be escaped when the attribute is injected into
        // the markup. If you provide unsafe user data here they can inject
        // arbitrary CSS which may be problematic (I couldn't repro this):
        // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
        // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
        // This is not an XSS hole but instead a potential CSS injection issue
        // which has lead to a greater discussion about how we're going to
        // trust URLs moving forward. See #2115901
        var isEmpty =
          value == null || typeof value === 'boolean' || value === ''

        if (isEmpty) {
          return ''
        }

        if (
          !isCustomProperty &&
          typeof value === 'number' &&
          value !== 0 &&
          !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])
        ) {
          return value + 'px' // Presumes implicit 'px' suffix for unitless numbers
        }

        return ('' + value).trim()
      }

      var uppercasePattern = /([A-Z])/g
      var msPattern = /^ms-/
      /**
       * Hyphenates a camelcased CSS property name, for example:
       *
       *   > hyphenateStyleName('backgroundColor')
       *   < "background-color"
       *   > hyphenateStyleName('MozTransition')
       *   < "-moz-transition"
       *   > hyphenateStyleName('msTransition')
       *   < "-ms-transition"
       *
       * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
       * is converted to `-ms-`.
       */

      function hyphenateStyleName(name) {
        return name
          .replace(uppercasePattern, '-$1')
          .toLowerCase()
          .replace(msPattern, '-ms-')
      }

      var warnValidStyle = function () {}

      {
        // 'msTransform' is correct, but the other prefixes should be capitalized
        var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/
        var msPattern$1 = /^-ms-/
        var hyphenPattern = /-(.)/g // style values shouldn't contain a semicolon

        var badStyleValueWithSemicolonPattern = /;\s*$/
        var warnedStyleNames = {}
        var warnedStyleValues = {}
        var warnedForNaNValue = false
        var warnedForInfinityValue = false

        var camelize = function (string) {
          return string.replace(hyphenPattern, function (_, character) {
            return character.toUpperCase()
          })
        }

        var warnHyphenatedStyleName = function (name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return
          }

          warnedStyleNames[name] = true

          error(
            'Unsupported style property %s. Did you mean %s?',
            name, // As Andi Smith suggests
            // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
            // is converted to lowercase `ms`.
            camelize(name.replace(msPattern$1, 'ms-'))
          )
        }

        var warnBadVendoredStyleName = function (name) {
          if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
            return
          }

          warnedStyleNames[name] = true

          error(
            'Unsupported vendor-prefixed style property %s. Did you mean %s?',
            name,
            name.charAt(0).toUpperCase() + name.slice(1)
          )
        }

        var warnStyleValueWithSemicolon = function (name, value) {
          if (
            warnedStyleValues.hasOwnProperty(value) &&
            warnedStyleValues[value]
          ) {
            return
          }

          warnedStyleValues[value] = true

          error(
            "Style property values shouldn't contain a semicolon. " +
              'Try "%s: %s" instead.',
            name,
            value.replace(badStyleValueWithSemicolonPattern, '')
          )
        }

        var warnStyleValueIsNaN = function (name, value) {
          if (warnedForNaNValue) {
            return
          }

          warnedForNaNValue = true

          error(
            '`NaN` is an invalid value for the `%s` css style property.',
            name
          )
        }

        var warnStyleValueIsInfinity = function (name, value) {
          if (warnedForInfinityValue) {
            return
          }

          warnedForInfinityValue = true

          error(
            '`Infinity` is an invalid value for the `%s` css style property.',
            name
          )
        }

        warnValidStyle = function (name, value) {
          if (name.indexOf('-') > -1) {
            warnHyphenatedStyleName(name)
          } else if (badVendoredStyleNamePattern.test(name)) {
            warnBadVendoredStyleName(name)
          } else if (badStyleValueWithSemicolonPattern.test(value)) {
            warnStyleValueWithSemicolon(name, value)
          }

          if (typeof value === 'number') {
            if (isNaN(value)) {
              warnStyleValueIsNaN(name, value)
            } else if (!isFinite(value)) {
              warnStyleValueIsInfinity(name, value)
            }
          }
        }
      }

      var warnValidStyle$1 = warnValidStyle

      /**
       * Operations for dealing with CSS properties.
       */

      /**
       * This creates a string that is expected to be equivalent to the style
       * attribute generated by server-side rendering. It by-passes warnings and
       * security checks so it's not safe to use this value for anything other than
       * comparison. It is only used in DEV for SSR validation.
       */

      function createDangerousStringForStyles(styles) {
        {
          var serialized = ''
          var delimiter = ''

          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue
            }

            var styleValue = styles[styleName]

            if (styleValue != null) {
              var isCustomProperty = styleName.indexOf('--') === 0
              serialized +=
                delimiter +
                (isCustomProperty ? styleName : hyphenateStyleName(styleName)) +
                ':'
              serialized += dangerousStyleValue(
                styleName,
                styleValue,
                isCustomProperty
              )
              delimiter = ';'
            }
          }

          return serialized || null
        }
      }
      /**
       * Sets the value for multiple styles on a node.  If a value is specified as
       * '' (empty string), the corresponding style property will be unset.
       *
       * @param {DOMElement} node
       * @param {object} styles
       */

      function setValueForStyles(node, styles) {
        var style = node.style

        for (var styleName in styles) {
          if (!styles.hasOwnProperty(styleName)) {
            continue
          }

          var isCustomProperty = styleName.indexOf('--') === 0

          {
            if (!isCustomProperty) {
              warnValidStyle$1(styleName, styles[styleName])
            }
          }

          var styleValue = dangerousStyleValue(
            styleName,
            styles[styleName],
            isCustomProperty
          )

          if (styleName === 'float') {
            styleName = 'cssFloat'
          }

          if (isCustomProperty) {
            style.setProperty(styleName, styleValue)
          } else {
            style[styleName] = styleValue
          }
        }
      }

      function isValueEmpty(value) {
        return value == null || typeof value === 'boolean' || value === ''
      }
      /**
       * Given {color: 'red', overflow: 'hidden'} returns {
       *   color: 'color',
       *   overflowX: 'overflow',
       *   overflowY: 'overflow',
       * }. This can be read as "the overflowY property was set by the overflow
       * shorthand". That is, the values are the property that each was derived from.
       */

      function expandShorthandMap(styles) {
        var expanded = {}

        for (var key in styles) {
          var longhands = shorthandToLonghand[key] || [key]

          for (var i = 0; i < longhands.length; i++) {
            expanded[longhands[i]] = key
          }
        }

        return expanded
      }
      /**
       * When mixing shorthand and longhand property names, we warn during updates if
       * we expect an incorrect result to occur. In particular, we warn for:
       *
       * Updating a shorthand property (longhand gets overwritten):
       *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
       *   becomes .style.font = 'baz'
       * Removing a shorthand property (longhand gets lost too):
       *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
       *   becomes .style.font = ''
       * Removing a longhand property (should revert to shorthand; doesn't):
       *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
       *   becomes .style.fontVariant = ''
       */

      function validateShorthandPropertyCollisionInDev(
        styleUpdates,
        nextStyles
      ) {
        {
          if (!nextStyles) {
            return
          }

          var expandedUpdates = expandShorthandMap(styleUpdates)
          var expandedStyles = expandShorthandMap(nextStyles)
          var warnedAbout = {}

          for (var key in expandedUpdates) {
            var originalKey = expandedUpdates[key]
            var correctOriginalKey = expandedStyles[key]

            if (correctOriginalKey && originalKey !== correctOriginalKey) {
              var warningKey = originalKey + ',' + correctOriginalKey

              if (warnedAbout[warningKey]) {
                continue
              }

              warnedAbout[warningKey] = true

              error(
                '%s a style property during rerender (%s) when a ' +
                  'conflicting property is set (%s) can lead to styling bugs. To ' +
                  "avoid this, don't mix shorthand and non-shorthand properties " +
                  'for the same value; instead, replace the shorthand with ' +
                  'separate values.',
                isValueEmpty(styleUpdates[originalKey])
                  ? 'Removing'
                  : 'Updating',
                originalKey,
                correctOriginalKey
              )
            }
          }
        }
      }

      // For HTML, certain tags should omit their close tag. We keep a list for
      // those special-case tags.
      var omittedCloseTags = {
        area: true,
        base: true,
        br: true,
        col: true,
        embed: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true, // NOTE: menuitem's close tag should be omitted, but that causes problems.
      }

      // `omittedCloseTags` except that `menuitem` should still have its closing tag.

      var voidElementTags = _assign(
        {
          menuitem: true,
        },
        omittedCloseTags
      )

      var HTML = '__html'

      function assertValidProps(tag, props) {
        if (!props) {
          return
        } // Note the use of `==` which checks for null or undefined.

        if (voidElementTags[tag]) {
          if (
            !(props.children == null && props.dangerouslySetInnerHTML == null)
          ) {
            {
              throw Error(
                tag +
                  ' is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.'
              )
            }
          }
        }

        if (props.dangerouslySetInnerHTML != null) {
          if (!(props.children == null)) {
            {
              throw Error(
                'Can only set one of `children` or `props.dangerouslySetInnerHTML`.'
              )
            }
          }

          if (
            !(
              typeof props.dangerouslySetInnerHTML === 'object' &&
              HTML in props.dangerouslySetInnerHTML
            )
          ) {
            {
              throw Error(
                '`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.'
              )
            }
          }
        }

        {
          if (
            !props.suppressContentEditableWarning &&
            props.contentEditable &&
            props.children != null
          ) {
            error(
              'A component is `contentEditable` and contains `children` managed by ' +
                'React. It is now your responsibility to guarantee that none of ' +
                'those nodes are unexpectedly modified or duplicated. This is ' +
                'probably not intentional.'
            )
          }
        }

        if (!(props.style == null || typeof props.style === 'object')) {
          {
            throw Error(
              "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX."
            )
          }
        }
      }

      function isCustomComponent(tagName, props) {
        if (tagName.indexOf('-') === -1) {
          return typeof props.is === 'string'
        }

        switch (tagName) {
          // These are reserved SVG and MathML elements.
          // We don't mind this list too much because we expect it to never grow.
          // The alternative is to track the namespace in a few places which is convoluted.
          // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
          case 'annotation-xml':
          case 'color-profile':
          case 'font-face':
          case 'font-face-src':
          case 'font-face-uri':
          case 'font-face-format':
          case 'font-face-name':
          case 'missing-glyph':
            return false

          default:
            return true
        }
      }

      // When adding attributes to the HTML or SVG allowed attribute list, be sure to
      // also add them to this module to ensure casing and incorrect name
      // warnings.
      var possibleStandardNames = {
        // HTML
        accept: 'accept',
        acceptcharset: 'acceptCharset',
        'accept-charset': 'acceptCharset',
        accesskey: 'accessKey',
        action: 'action',
        allowfullscreen: 'allowFullScreen',
        alt: 'alt',
        as: 'as',
        async: 'async',
        autocapitalize: 'autoCapitalize',
        autocomplete: 'autoComplete',
        autocorrect: 'autoCorrect',
        autofocus: 'autoFocus',
        autoplay: 'autoPlay',
        autosave: 'autoSave',
        capture: 'capture',
        cellpadding: 'cellPadding',
        cellspacing: 'cellSpacing',
        challenge: 'challenge',
        charset: 'charSet',
        checked: 'checked',
        children: 'children',
        cite: 'cite',
        class: 'className',
        classid: 'classID',
        classname: 'className',
        cols: 'cols',
        colspan: 'colSpan',
        content: 'content',
        contenteditable: 'contentEditable',
        contextmenu: 'contextMenu',
        controls: 'controls',
        controlslist: 'controlsList',
        coords: 'coords',
        crossorigin: 'crossOrigin',
        dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
        data: 'data',
        datetime: 'dateTime',
        default: 'default',
        defaultchecked: 'defaultChecked',
        defaultvalue: 'defaultValue',
        defer: 'defer',
        dir: 'dir',
        disabled: 'disabled',
        disablepictureinpicture: 'disablePictureInPicture',
        disableremoteplayback: 'disableRemotePlayback',
        download: 'download',
        draggable: 'draggable',
        enctype: 'encType',
        enterkeyhint: 'enterKeyHint',
        for: 'htmlFor',
        form: 'form',
        formmethod: 'formMethod',
        formaction: 'formAction',
        formenctype: 'formEncType',
        formnovalidate: 'formNoValidate',
        formtarget: 'formTarget',
        frameborder: 'frameBorder',
        headers: 'headers',
        height: 'height',
        hidden: 'hidden',
        high: 'high',
        href: 'href',
        hreflang: 'hrefLang',
        htmlfor: 'htmlFor',
        httpequiv: 'httpEquiv',
        'http-equiv': 'httpEquiv',
        icon: 'icon',
        id: 'id',
        innerhtml: 'innerHTML',
        inputmode: 'inputMode',
        integrity: 'integrity',
        is: 'is',
        itemid: 'itemID',
        itemprop: 'itemProp',
        itemref: 'itemRef',
        itemscope: 'itemScope',
        itemtype: 'itemType',
        keyparams: 'keyParams',
        keytype: 'keyType',
        kind: 'kind',
        label: 'label',
        lang: 'lang',
        list: 'list',
        loop: 'loop',
        low: 'low',
        manifest: 'manifest',
        marginwidth: 'marginWidth',
        marginheight: 'marginHeight',
        max: 'max',
        maxlength: 'maxLength',
        media: 'media',
        mediagroup: 'mediaGroup',
        method: 'method',
        min: 'min',
        minlength: 'minLength',
        multiple: 'multiple',
        muted: 'muted',
        name: 'name',
        nomodule: 'noModule',
        nonce: 'nonce',
        novalidate: 'noValidate',
        open: 'open',
        optimum: 'optimum',
        pattern: 'pattern',
        placeholder: 'placeholder',
        playsinline: 'playsInline',
        poster: 'poster',
        preload: 'preload',
        profile: 'profile',
        radiogroup: 'radioGroup',
        readonly: 'readOnly',
        referrerpolicy: 'referrerPolicy',
        rel: 'rel',
        required: 'required',
        reversed: 'reversed',
        role: 'role',
        rows: 'rows',
        rowspan: 'rowSpan',
        sandbox: 'sandbox',
        scope: 'scope',
        scoped: 'scoped',
        scrolling: 'scrolling',
        seamless: 'seamless',
        selected: 'selected',
        shape: 'shape',
        size: 'size',
        sizes: 'sizes',
        span: 'span',
        spellcheck: 'spellCheck',
        src: 'src',
        srcdoc: 'srcDoc',
        srclang: 'srcLang',
        srcset: 'srcSet',
        start: 'start',
        step: 'step',
        style: 'style',
        summary: 'summary',
        tabindex: 'tabIndex',
        target: 'target',
        title: 'title',
        type: 'type',
        usemap: 'useMap',
        value: 'value',
        width: 'width',
        wmode: 'wmode',
        wrap: 'wrap',
        // SVG
        about: 'about',
        accentheight: 'accentHeight',
        'accent-height': 'accentHeight',
        accumulate: 'accumulate',
        additive: 'additive',
        alignmentbaseline: 'alignmentBaseline',
        'alignment-baseline': 'alignmentBaseline',
        allowreorder: 'allowReorder',
        alphabetic: 'alphabetic',
        amplitude: 'amplitude',
        arabicform: 'arabicForm',
        'arabic-form': 'arabicForm',
        ascent: 'ascent',
        attributename: 'attributeName',
        attributetype: 'attributeType',
        autoreverse: 'autoReverse',
        azimuth: 'azimuth',
        basefrequency: 'baseFrequency',
        baselineshift: 'baselineShift',
        'baseline-shift': 'baselineShift',
        baseprofile: 'baseProfile',
        bbox: 'bbox',
        begin: 'begin',
        bias: 'bias',
        by: 'by',
        calcmode: 'calcMode',
        capheight: 'capHeight',
        'cap-height': 'capHeight',
        clip: 'clip',
        clippath: 'clipPath',
        'clip-path': 'clipPath',
        clippathunits: 'clipPathUnits',
        cliprule: 'clipRule',
        'clip-rule': 'clipRule',
        color: 'color',
        colorinterpolation: 'colorInterpolation',
        'color-interpolation': 'colorInterpolation',
        colorinterpolationfilters: 'colorInterpolationFilters',
        'color-interpolation-filters': 'colorInterpolationFilters',
        colorprofile: 'colorProfile',
        'color-profile': 'colorProfile',
        colorrendering: 'colorRendering',
        'color-rendering': 'colorRendering',
        contentscripttype: 'contentScriptType',
        contentstyletype: 'contentStyleType',
        cursor: 'cursor',
        cx: 'cx',
        cy: 'cy',
        d: 'd',
        datatype: 'datatype',
        decelerate: 'decelerate',
        descent: 'descent',
        diffuseconstant: 'diffuseConstant',
        direction: 'direction',
        display: 'display',
        divisor: 'divisor',
        dominantbaseline: 'dominantBaseline',
        'dominant-baseline': 'dominantBaseline',
        dur: 'dur',
        dx: 'dx',
        dy: 'dy',
        edgemode: 'edgeMode',
        elevation: 'elevation',
        enablebackground: 'enableBackground',
        'enable-background': 'enableBackground',
        end: 'end',
        exponent: 'exponent',
        externalresourcesrequired: 'externalResourcesRequired',
        fill: 'fill',
        fillopacity: 'fillOpacity',
        'fill-opacity': 'fillOpacity',
        fillrule: 'fillRule',
        'fill-rule': 'fillRule',
        filter: 'filter',
        filterres: 'filterRes',
        filterunits: 'filterUnits',
        floodopacity: 'floodOpacity',
        'flood-opacity': 'floodOpacity',
        floodcolor: 'floodColor',
        'flood-color': 'floodColor',
        focusable: 'focusable',
        fontfamily: 'fontFamily',
        'font-family': 'fontFamily',
        fontsize: 'fontSize',
        'font-size': 'fontSize',
        fontsizeadjust: 'fontSizeAdjust',
        'font-size-adjust': 'fontSizeAdjust',
        fontstretch: 'fontStretch',
        'font-stretch': 'fontStretch',
        fontstyle: 'fontStyle',
        'font-style': 'fontStyle',
        fontvariant: 'fontVariant',
        'font-variant': 'fontVariant',
        fontweight: 'fontWeight',
        'font-weight': 'fontWeight',
        format: 'format',
        from: 'from',
        fx: 'fx',
        fy: 'fy',
        g1: 'g1',
        g2: 'g2',
        glyphname: 'glyphName',
        'glyph-name': 'glyphName',
        glyphorientationhorizontal: 'glyphOrientationHorizontal',
        'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
        glyphorientationvertical: 'glyphOrientationVertical',
        'glyph-orientation-vertical': 'glyphOrientationVertical',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        hanging: 'hanging',
        horizadvx: 'horizAdvX',
        'horiz-adv-x': 'horizAdvX',
        horizoriginx: 'horizOriginX',
        'horiz-origin-x': 'horizOriginX',
        ideographic: 'ideographic',
        imagerendering: 'imageRendering',
        'image-rendering': 'imageRendering',
        in2: 'in2',
        in: 'in',
        inlist: 'inlist',
        intercept: 'intercept',
        k1: 'k1',
        k2: 'k2',
        k3: 'k3',
        k4: 'k4',
        k: 'k',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        kerning: 'kerning',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        letterspacing: 'letterSpacing',
        'letter-spacing': 'letterSpacing',
        lightingcolor: 'lightingColor',
        'lighting-color': 'lightingColor',
        limitingconeangle: 'limitingConeAngle',
        local: 'local',
        markerend: 'markerEnd',
        'marker-end': 'markerEnd',
        markerheight: 'markerHeight',
        markermid: 'markerMid',
        'marker-mid': 'markerMid',
        markerstart: 'markerStart',
        'marker-start': 'markerStart',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        mask: 'mask',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        mathematical: 'mathematical',
        mode: 'mode',
        numoctaves: 'numOctaves',
        offset: 'offset',
        opacity: 'opacity',
        operator: 'operator',
        order: 'order',
        orient: 'orient',
        orientation: 'orientation',
        origin: 'origin',
        overflow: 'overflow',
        overlineposition: 'overlinePosition',
        'overline-position': 'overlinePosition',
        overlinethickness: 'overlineThickness',
        'overline-thickness': 'overlineThickness',
        paintorder: 'paintOrder',
        'paint-order': 'paintOrder',
        panose1: 'panose1',
        'panose-1': 'panose1',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointerevents: 'pointerEvents',
        'pointer-events': 'pointerEvents',
        points: 'points',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        prefix: 'prefix',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        property: 'property',
        r: 'r',
        radius: 'radius',
        refx: 'refX',
        refy: 'refY',
        renderingintent: 'renderingIntent',
        'rendering-intent': 'renderingIntent',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        resource: 'resource',
        restart: 'restart',
        result: 'result',
        results: 'results',
        rotate: 'rotate',
        rx: 'rx',
        ry: 'ry',
        scale: 'scale',
        security: 'security',
        seed: 'seed',
        shaperendering: 'shapeRendering',
        'shape-rendering': 'shapeRendering',
        slope: 'slope',
        spacing: 'spacing',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        speed: 'speed',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stemh: 'stemh',
        stemv: 'stemv',
        stitchtiles: 'stitchTiles',
        stopcolor: 'stopColor',
        'stop-color': 'stopColor',
        stopopacity: 'stopOpacity',
        'stop-opacity': 'stopOpacity',
        strikethroughposition: 'strikethroughPosition',
        'strikethrough-position': 'strikethroughPosition',
        strikethroughthickness: 'strikethroughThickness',
        'strikethrough-thickness': 'strikethroughThickness',
        string: 'string',
        stroke: 'stroke',
        strokedasharray: 'strokeDasharray',
        'stroke-dasharray': 'strokeDasharray',
        strokedashoffset: 'strokeDashoffset',
        'stroke-dashoffset': 'strokeDashoffset',
        strokelinecap: 'strokeLinecap',
        'stroke-linecap': 'strokeLinecap',
        strokelinejoin: 'strokeLinejoin',
        'stroke-linejoin': 'strokeLinejoin',
        strokemiterlimit: 'strokeMiterlimit',
        'stroke-miterlimit': 'strokeMiterlimit',
        strokewidth: 'strokeWidth',
        'stroke-width': 'strokeWidth',
        strokeopacity: 'strokeOpacity',
        'stroke-opacity': 'strokeOpacity',
        suppresscontenteditablewarning: 'suppressContentEditableWarning',
        suppresshydrationwarning: 'suppressHydrationWarning',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textanchor: 'textAnchor',
        'text-anchor': 'textAnchor',
        textdecoration: 'textDecoration',
        'text-decoration': 'textDecoration',
        textlength: 'textLength',
        textrendering: 'textRendering',
        'text-rendering': 'textRendering',
        to: 'to',
        transform: 'transform',
        typeof: 'typeof',
        u1: 'u1',
        u2: 'u2',
        underlineposition: 'underlinePosition',
        'underline-position': 'underlinePosition',
        underlinethickness: 'underlineThickness',
        'underline-thickness': 'underlineThickness',
        unicode: 'unicode',
        unicodebidi: 'unicodeBidi',
        'unicode-bidi': 'unicodeBidi',
        unicoderange: 'unicodeRange',
        'unicode-range': 'unicodeRange',
        unitsperem: 'unitsPerEm',
        'units-per-em': 'unitsPerEm',
        unselectable: 'unselectable',
        valphabetic: 'vAlphabetic',
        'v-alphabetic': 'vAlphabetic',
        values: 'values',
        vectoreffect: 'vectorEffect',
        'vector-effect': 'vectorEffect',
        version: 'version',
        vertadvy: 'vertAdvY',
        'vert-adv-y': 'vertAdvY',
        vertoriginx: 'vertOriginX',
        'vert-origin-x': 'vertOriginX',
        vertoriginy: 'vertOriginY',
        'vert-origin-y': 'vertOriginY',
        vhanging: 'vHanging',
        'v-hanging': 'vHanging',
        videographic: 'vIdeographic',
        'v-ideographic': 'vIdeographic',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        visibility: 'visibility',
        vmathematical: 'vMathematical',
        'v-mathematical': 'vMathematical',
        vocab: 'vocab',
        widths: 'widths',
        wordspacing: 'wordSpacing',
        'word-spacing': 'wordSpacing',
        writingmode: 'writingMode',
        'writing-mode': 'writingMode',
        x1: 'x1',
        x2: 'x2',
        x: 'x',
        xchannelselector: 'xChannelSelector',
        xheight: 'xHeight',
        'x-height': 'xHeight',
        xlinkactuate: 'xlinkActuate',
        'xlink:actuate': 'xlinkActuate',
        xlinkarcrole: 'xlinkArcrole',
        'xlink:arcrole': 'xlinkArcrole',
        xlinkhref: 'xlinkHref',
        'xlink:href': 'xlinkHref',
        xlinkrole: 'xlinkRole',
        'xlink:role': 'xlinkRole',
        xlinkshow: 'xlinkShow',
        'xlink:show': 'xlinkShow',
        xlinktitle: 'xlinkTitle',
        'xlink:title': 'xlinkTitle',
        xlinktype: 'xlinkType',
        'xlink:type': 'xlinkType',
        xmlbase: 'xmlBase',
        'xml:base': 'xmlBase',
        xmllang: 'xmlLang',
        'xml:lang': 'xmlLang',
        xmlns: 'xmlns',
        'xml:space': 'xmlSpace',
        xmlnsxlink: 'xmlnsXlink',
        'xmlns:xlink': 'xmlnsXlink',
        xmlspace: 'xmlSpace',
        y1: 'y1',
        y2: 'y2',
        y: 'y',
        ychannelselector: 'yChannelSelector',
        z: 'z',
        zoomandpan: 'zoomAndPan',
      }

      var ariaProperties = {
        'aria-current': 0,
        // state
        'aria-details': 0,
        'aria-disabled': 0,
        // state
        'aria-hidden': 0,
        // state
        'aria-invalid': 0,
        // state
        'aria-keyshortcuts': 0,
        'aria-label': 0,
        'aria-roledescription': 0,
        // Widget Attributes
        'aria-autocomplete': 0,
        'aria-checked': 0,
        'aria-expanded': 0,
        'aria-haspopup': 0,
        'aria-level': 0,
        'aria-modal': 0,
        'aria-multiline': 0,
        'aria-multiselectable': 0,
        'aria-orientation': 0,
        'aria-placeholder': 0,
        'aria-pressed': 0,
        'aria-readonly': 0,
        'aria-required': 0,
        'aria-selected': 0,
        'aria-sort': 0,
        'aria-valuemax': 0,
        'aria-valuemin': 0,
        'aria-valuenow': 0,
        'aria-valuetext': 0,
        // Live Region Attributes
        'aria-atomic': 0,
        'aria-busy': 0,
        'aria-live': 0,
        'aria-relevant': 0,
        // Drag-and-Drop Attributes
        'aria-dropeffect': 0,
        'aria-grabbed': 0,
        // Relationship Attributes
        'aria-activedescendant': 0,
        'aria-colcount': 0,
        'aria-colindex': 0,
        'aria-colspan': 0,
        'aria-controls': 0,
        'aria-describedby': 0,
        'aria-errormessage': 0,
        'aria-flowto': 0,
        'aria-labelledby': 0,
        'aria-owns': 0,
        'aria-posinset': 0,
        'aria-rowcount': 0,
        'aria-rowindex': 0,
        'aria-rowspan': 0,
        'aria-setsize': 0,
      }

      var warnedProperties = {}
      var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')
      var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$')
      var hasOwnProperty$1 = Object.prototype.hasOwnProperty

      function validateProperty(tagName, name) {
        {
          if (
            hasOwnProperty$1.call(warnedProperties, name) &&
            warnedProperties[name]
          ) {
            return true
          }

          if (rARIACamel.test(name)) {
            var ariaName = 'aria-' + name.slice(4).toLowerCase()
            var correctName = ariaProperties.hasOwnProperty(ariaName)
              ? ariaName
              : null // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.

            if (correctName == null) {
              error(
                'Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.',
                name
              )

              warnedProperties[name] = true
              return true
            } // aria-* attributes should be lowercase; suggest the lowercase version.

            if (name !== correctName) {
              error(
                'Invalid ARIA attribute `%s`. Did you mean `%s`?',
                name,
                correctName
              )

              warnedProperties[name] = true
              return true
            }
          }

          if (rARIA.test(name)) {
            var lowerCasedName = name.toLowerCase()
            var standardName = ariaProperties.hasOwnProperty(lowerCasedName)
              ? lowerCasedName
              : null // If this is an aria-* attribute, but is not listed in the known DOM
            // DOM properties, then it is an invalid aria-* attribute.

            if (standardName == null) {
              warnedProperties[name] = true
              return false
            } // aria-* attributes should be lowercase; suggest the lowercase version.

            if (name !== standardName) {
              error(
                'Unknown ARIA attribute `%s`. Did you mean `%s`?',
                name,
                standardName
              )

              warnedProperties[name] = true
              return true
            }
          }
        }

        return true
      }

      function warnInvalidARIAProps(type, props) {
        {
          var invalidProps = []

          for (var key in props) {
            var isValid = validateProperty(type, key)

            if (!isValid) {
              invalidProps.push(key)
            }
          }

          var unknownPropString = invalidProps
            .map(function (prop) {
              return '`' + prop + '`'
            })
            .join(', ')

          if (invalidProps.length === 1) {
            error(
              'Invalid aria prop %s on <%s> tag. ' +
                'For details, see https://reactjs.org/link/invalid-aria-props',
              unknownPropString,
              type
            )
          } else if (invalidProps.length > 1) {
            error(
              'Invalid aria props %s on <%s> tag. ' +
                'For details, see https://reactjs.org/link/invalid-aria-props',
              unknownPropString,
              type
            )
          }
        }
      }

      function validateProperties(type, props) {
        if (isCustomComponent(type, props)) {
          return
        }

        warnInvalidARIAProps(type, props)
      }

      var didWarnValueNull = false
      function validateProperties$1(type, props) {
        {
          if (type !== 'input' && type !== 'textarea' && type !== 'select') {
            return
          }

          if (props != null && props.value === null && !didWarnValueNull) {
            didWarnValueNull = true

            if (type === 'select' && props.multiple) {
              error(
                '`value` prop on `%s` should not be null. ' +
                  'Consider using an empty array when `multiple` is set to `true` ' +
                  'to clear the component or `undefined` for uncontrolled components.',
                type
              )
            } else {
              error(
                '`value` prop on `%s` should not be null. ' +
                  'Consider using an empty string to clear the component or `undefined` ' +
                  'for uncontrolled components.',
                type
              )
            }
          }
        }
      }

      var validateProperty$1 = function () {}

      {
        var warnedProperties$1 = {}
        var _hasOwnProperty = Object.prototype.hasOwnProperty
        var EVENT_NAME_REGEX = /^on./
        var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/
        var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$')
        var rARIACamel$1 = new RegExp(
          '^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$'
        )

        validateProperty$1 = function (tagName, name, value, eventRegistry) {
          if (
            _hasOwnProperty.call(warnedProperties$1, name) &&
            warnedProperties$1[name]
          ) {
            return true
          }

          var lowerCasedName = name.toLowerCase()

          if (
            lowerCasedName === 'onfocusin' ||
            lowerCasedName === 'onfocusout'
          ) {
            error(
              'React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' +
                'All React events are normalized to bubble, so onFocusIn and onFocusOut ' +
                'are not needed/supported by React.'
            )

            warnedProperties$1[name] = true
            return true
          } // We can't rely on the event system being injected on the server.

          if (eventRegistry != null) {
            var registrationNameDependencies =
                eventRegistry.registrationNameDependencies,
              possibleRegistrationNames =
                eventRegistry.possibleRegistrationNames

            if (registrationNameDependencies.hasOwnProperty(name)) {
              return true
            }

            var registrationName = possibleRegistrationNames.hasOwnProperty(
              lowerCasedName
            )
              ? possibleRegistrationNames[lowerCasedName]
              : null

            if (registrationName != null) {
              error(
                'Invalid event handler property `%s`. Did you mean `%s`?',
                name,
                registrationName
              )

              warnedProperties$1[name] = true
              return true
            }

            if (EVENT_NAME_REGEX.test(name)) {
              error(
                'Unknown event handler property `%s`. It will be ignored.',
                name
              )

              warnedProperties$1[name] = true
              return true
            }
          } else if (EVENT_NAME_REGEX.test(name)) {
            // If no event plugins have been injected, we are in a server environment.
            // So we can't tell if the event name is correct for sure, but we can filter
            // out known bad ones like `onclick`. We can't suggest a specific replacement though.
            if (INVALID_EVENT_NAME_REGEX.test(name)) {
              error(
                'Invalid event handler property `%s`. ' +
                  'React events use the camelCase naming convention, for example `onClick`.',
                name
              )
            }

            warnedProperties$1[name] = true
            return true
          } // Let the ARIA attribute hook validate ARIA attributes

          if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
            return true
          }

          if (lowerCasedName === 'innerhtml') {
            error(
              'Directly setting property `innerHTML` is not permitted. ' +
                'For more information, lookup documentation on `dangerouslySetInnerHTML`.'
            )

            warnedProperties$1[name] = true
            return true
          }

          if (lowerCasedName === 'aria') {
            error(
              'The `aria` attribute is reserved for future use in React. ' +
                'Pass individual `aria-` attributes instead.'
            )

            warnedProperties$1[name] = true
            return true
          }

          if (
            lowerCasedName === 'is' &&
            value !== null &&
            value !== undefined &&
            typeof value !== 'string'
          ) {
            error(
              'Received a `%s` for a string attribute `is`. If this is expected, cast ' +
                'the value to a string.',
              typeof value
            )

            warnedProperties$1[name] = true
            return true
          }

          if (typeof value === 'number' && isNaN(value)) {
            error(
              'Received NaN for the `%s` attribute. If this is expected, cast ' +
                'the value to a string.',
              name
            )

            warnedProperties$1[name] = true
            return true
          }

          var propertyInfo = getPropertyInfo(name)
          var isReserved =
            propertyInfo !== null && propertyInfo.type === RESERVED // Known attributes should match the casing specified in the property config.

          if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            var standardName = possibleStandardNames[lowerCasedName]

            if (standardName !== name) {
              error(
                'Invalid DOM property `%s`. Did you mean `%s`?',
                name,
                standardName
              )

              warnedProperties$1[name] = true
              return true
            }
          } else if (!isReserved && name !== lowerCasedName) {
            // Unknown attributes should have lowercase casing since that's how they
            // will be cased anyway with server rendering.
            error(
              'React does not recognize the `%s` prop on a DOM element. If you ' +
                'intentionally want it to appear in the DOM as a custom ' +
                'attribute, spell it as lowercase `%s` instead. ' +
                'If you accidentally passed it from a parent component, remove ' +
                'it from the DOM element.',
              name,
              lowerCasedName
            )

            warnedProperties$1[name] = true
            return true
          }

          if (
            typeof value === 'boolean' &&
            shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)
          ) {
            if (value) {
              error(
                'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                  'If you want to write it to the DOM, pass a string instead: ' +
                  '%s="%s" or %s={value.toString()}.',
                value,
                name,
                name,
                value,
                name
              )
            } else {
              error(
                'Received `%s` for a non-boolean attribute `%s`.\n\n' +
                  'If you want to write it to the DOM, pass a string instead: ' +
                  '%s="%s" or %s={value.toString()}.\n\n' +
                  'If you used to conditionally omit it with %s={condition && value}, ' +
                  'pass %s={condition ? value : undefined} instead.',
                value,
                name,
                name,
                value,
                name,
                name,
                name
              )
            }

            warnedProperties$1[name] = true
            return true
          } // Now that we've validated casing, do not validate
          // data types for reserved props

          if (isReserved) {
            return true
          } // Warn when a known attribute is a bad type

          if (
            shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)
          ) {
            warnedProperties$1[name] = true
            return false
          } // Warn when passing the strings 'false' or 'true' into a boolean prop

          if (
            (value === 'false' || value === 'true') &&
            propertyInfo !== null &&
            propertyInfo.type === BOOLEAN
          ) {
            error(
              'Received the string `%s` for the boolean attribute `%s`. ' +
                '%s ' +
                'Did you mean %s={%s}?',
              value,
              name,
              value === 'false'
                ? 'The browser will interpret it as a truthy value.'
                : 'Although this works, it will not work as expected if you pass the string "false".',
              name,
              value
            )

            warnedProperties$1[name] = true
            return true
          }

          return true
        }
      }

      var warnUnknownProperties = function (type, props, eventRegistry) {
        {
          var unknownProps = []

          for (var key in props) {
            var isValid = validateProperty$1(
              type,
              key,
              props[key],
              eventRegistry
            )

            if (!isValid) {
              unknownProps.push(key)
            }
          }

          var unknownPropString = unknownProps
            .map(function (prop) {
              return '`' + prop + '`'
            })
            .join(', ')

          if (unknownProps.length === 1) {
            error(
              'Invalid value for prop %s on <%s> tag. Either remove it from the element, ' +
                'or pass a string or number value to keep it in the DOM. ' +
                'For details, see https://reactjs.org/link/attribute-behavior ',
              unknownPropString,
              type
            )
          } else if (unknownProps.length > 1) {
            error(
              'Invalid values for props %s on <%s> tag. Either remove them from the element, ' +
                'or pass a string or number value to keep them in the DOM. ' +
                'For details, see https://reactjs.org/link/attribute-behavior ',
              unknownPropString,
              type
            )
          }
        }
      }

      function validateProperties$2(type, props, eventRegistry) {
        if (isCustomComponent(type, props)) {
          return
        }

        warnUnknownProperties(type, props, eventRegistry)
      }

      var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1
      var IS_NON_DELEGATED = 1 << 1
      var IS_CAPTURE_PHASE = 1 << 2
      var IS_REPLAYED = 1 << 4
      // set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
      // we call willDeferLaterForLegacyFBSupport, thus not bailing out
      // will result in endless cycles like an infinite loop.
      // We also don't want to defer during event replaying.

      var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS =
        IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE

      /**
       * Gets the target node from a native browser event by accounting for
       * inconsistencies in browser DOM APIs.
       *
       * @param {object} nativeEvent Native browser event.
       * @return {DOMEventTarget} Target node.
       */

      function getEventTarget(nativeEvent) {
        // Fallback to nativeEvent.srcElement for IE9
        // https://github.com/facebook/react/issues/12506
        var target = nativeEvent.target || nativeEvent.srcElement || window // Normalize SVG <use> element events #4963

        if (target.correspondingUseElement) {
          target = target.correspondingUseElement
        } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
        // @see http://www.quirksmode.org/js/events_properties.html

        return target.nodeType === TEXT_NODE ? target.parentNode : target
      }

      var restoreImpl = null
      var restoreTarget = null
      var restoreQueue = null

      function restoreStateOfTarget(target) {
        // We perform this translation at the end of the event loop so that we
        // always receive the correct fiber here
        var internalInstance = getInstanceFromNode(target)

        if (!internalInstance) {
          // Unmounted
          return
        }

        if (!(typeof restoreImpl === 'function')) {
          {
            throw Error(
              'setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }

        var stateNode = internalInstance.stateNode // Guard against Fiber being unmounted.

        if (stateNode) {
          var _props = getFiberCurrentPropsFromNode(stateNode)

          restoreImpl(internalInstance.stateNode, internalInstance.type, _props)
        }
      }

      function setRestoreImplementation(impl) {
        restoreImpl = impl
      }
      function enqueueStateRestore(target) {
        if (restoreTarget) {
          if (restoreQueue) {
            restoreQueue.push(target)
          } else {
            restoreQueue = [target]
          }
        } else {
          restoreTarget = target
        }
      }
      function needsStateRestore() {
        return restoreTarget !== null || restoreQueue !== null
      }
      function restoreStateIfNeeded() {
        if (!restoreTarget) {
          return
        }

        var target = restoreTarget
        var queuedTargets = restoreQueue
        restoreTarget = null
        restoreQueue = null
        restoreStateOfTarget(target)

        if (queuedTargets) {
          for (var i = 0; i < queuedTargets.length; i++) {
            restoreStateOfTarget(queuedTargets[i])
          }
        }
      }

      // the renderer. Such as when we're dispatching events or if third party
      // libraries need to call batchedUpdates. Eventually, this API will go away when
      // everything is batched by default. We'll then have a similar API to opt-out of
      // scheduled work and instead do synchronous work.
      // Defaults

      var batchedUpdatesImpl = function (fn, bookkeeping) {
        return fn(bookkeeping)
      }

      var discreteUpdatesImpl = function (fn, a, b, c, d) {
        return fn(a, b, c, d)
      }

      var flushDiscreteUpdatesImpl = function () {}

      var batchedEventUpdatesImpl = batchedUpdatesImpl
      var isInsideEventHandler = false
      var isBatchingEventUpdates = false

      function finishEventHandler() {
        // Here we wait until all updates have propagated, which is important
        // when using controlled components within layers:
        // https://github.com/facebook/react/issues/1698
        // Then we restore state of any controlled component.
        var controlledComponentsHavePendingUpdates = needsStateRestore()

        if (controlledComponentsHavePendingUpdates) {
          // If a controlled event was fired, we may need to restore the state of
          // the DOM node back to the controlled value. This is necessary when React
          // bails out of the update without touching the DOM.
          flushDiscreteUpdatesImpl()
          restoreStateIfNeeded()
        }
      }

      function batchedUpdates(fn, bookkeeping) {
        if (isInsideEventHandler) {
          // If we are currently inside another batch, we need to wait until it
          // fully completes before restoring state.
          return fn(bookkeeping)
        }

        isInsideEventHandler = true

        try {
          return batchedUpdatesImpl(fn, bookkeeping)
        } finally {
          isInsideEventHandler = false
          finishEventHandler()
        }
      }
      function batchedEventUpdates(fn, a, b) {
        if (isBatchingEventUpdates) {
          // If we are currently inside another batch, we need to wait until it
          // fully completes before restoring state.
          return fn(a, b)
        }

        isBatchingEventUpdates = true

        try {
          return batchedEventUpdatesImpl(fn, a, b)
        } finally {
          isBatchingEventUpdates = false
          finishEventHandler()
        }
      }
      function discreteUpdates(fn, a, b, c, d) {
        var prevIsInsideEventHandler = isInsideEventHandler
        isInsideEventHandler = true

        try {
          return discreteUpdatesImpl(fn, a, b, c, d)
        } finally {
          isInsideEventHandler = prevIsInsideEventHandler

          if (!isInsideEventHandler) {
            finishEventHandler()
          }
        }
      }
      function flushDiscreteUpdatesIfNeeded(timeStamp) {
        {
          if (!isInsideEventHandler) {
            flushDiscreteUpdatesImpl()
          }
        }
      }
      function setBatchingImplementation(
        _batchedUpdatesImpl,
        _discreteUpdatesImpl,
        _flushDiscreteUpdatesImpl,
        _batchedEventUpdatesImpl
      ) {
        batchedUpdatesImpl = _batchedUpdatesImpl
        discreteUpdatesImpl = _discreteUpdatesImpl
        flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl
        batchedEventUpdatesImpl = _batchedEventUpdatesImpl
      }

      function isInteractive(tag) {
        return (
          tag === 'button' ||
          tag === 'input' ||
          tag === 'select' ||
          tag === 'textarea'
        )
      }

      function shouldPreventMouseEvent(name, type, props) {
        switch (name) {
          case 'onClick':
          case 'onClickCapture':
          case 'onDoubleClick':
          case 'onDoubleClickCapture':
          case 'onMouseDown':
          case 'onMouseDownCapture':
          case 'onMouseMove':
          case 'onMouseMoveCapture':
          case 'onMouseUp':
          case 'onMouseUpCapture':
          case 'onMouseEnter':
            return !!(props.disabled && isInteractive(type))

          default:
            return false
        }
      }
      /**
       * @param {object} inst The instance, which is the source of events.
       * @param {string} registrationName Name of listener (e.g. `onClick`).
       * @return {?function} The stored callback.
       */

      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode

        if (stateNode === null) {
          // Work in progress (ex: onload events in incremental mode).
          return null
        }

        var props = getFiberCurrentPropsFromNode(stateNode)

        if (props === null) {
          // Work in progress.
          return null
        }

        var listener = props[registrationName]

        if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
          return null
        }

        if (!(!listener || typeof listener === 'function')) {
          {
            throw Error(
              'Expected `' +
                registrationName +
                '` listener to be a function, instead got a value of `' +
                typeof listener +
                '` type.'
            )
          }
        }

        return listener
      }

      var passiveBrowserEventsSupported = false // Check if browser support events with passive listeners
      // https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

      if (canUseDOM) {
        try {
          var options = {} // $FlowFixMe: Ignore Flow complaining about needing a value

          Object.defineProperty(options, 'passive', {
            get: function () {
              passiveBrowserEventsSupported = true
            },
          })
          window.addEventListener('test', options, options)
          window.removeEventListener('test', options, options)
        } catch (e) {
          passiveBrowserEventsSupported = false
        }
      }

      function invokeGuardedCallbackProd(
        name,
        func,
        context,
        a,
        b,
        c,
        d,
        e,
        f
      ) {
        var funcArgs = Array.prototype.slice.call(arguments, 3)

        try {
          func.apply(context, funcArgs)
        } catch (error) {
          this.onError(error)
        }
      }

      var invokeGuardedCallbackImpl = invokeGuardedCallbackProd

      {
        // In DEV mode, we swap out invokeGuardedCallback for a special version
        // that plays more nicely with the browser's DevTools. The idea is to preserve
        // "Pause on exceptions" behavior. Because React wraps all user-provided
        // functions in invokeGuardedCallback, and the production version of
        // invokeGuardedCallback uses a try-catch, all user exceptions are treated
        // like caught exceptions, and the DevTools won't pause unless the developer
        // takes the extra step of enabling pause on caught exceptions. This is
        // unintuitive, though, because even though React has caught the error, from
        // the developer's perspective, the error is uncaught.
        //
        // To preserve the expected "Pause on exceptions" behavior, we don't use a
        // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
        // DOM node, and call the user-provided callback from inside an event handler
        // for that fake event. If the callback throws, the error is "captured" using
        // a global event handler. But because the error happens in a different
        // event loop context, it does not interrupt the normal program flow.
        // Effectively, this gives us try-catch behavior without actually using
        // try-catch. Neat!
        // Check that the browser supports the APIs we need to implement our special
        // DEV version of invokeGuardedCallback
        if (
          typeof window !== 'undefined' &&
          typeof window.dispatchEvent === 'function' &&
          typeof document !== 'undefined' &&
          typeof document.createEvent === 'function'
        ) {
          var fakeNode = document.createElement('react')

          invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(
            name,
            func,
            context,
            a,
            b,
            c,
            d,
            e,
            f
          ) {
            // If document doesn't exist we know for sure we will crash in this method
            // when we call document.createEvent(). However this can cause confusing
            // errors: https://github.com/facebookincubator/create-react-app/issues/3482
            // So we preemptively throw with a better message instead.
            if (!(typeof document !== 'undefined')) {
              {
                throw Error(
                  'The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.'
                )
              }
            }

            var evt = document.createEvent('Event')
            var didCall = false // Keeps track of whether the user-provided callback threw an error. We
            // set this to true at the beginning, then set it to false right after
            // calling the function. If the function errors, `didError` will never be
            // set to false. This strategy works even if the browser is flaky and
            // fails to call our global error handler, because it doesn't rely on
            // the error event at all.

            var didError = true // Keeps track of the value of window.event so that we can reset it
            // during the callback to let user code access window.event in the
            // browsers that support it.

            var windowEvent = window.event // Keeps track of the descriptor of window.event to restore it after event
            // dispatching: https://github.com/facebook/react/issues/13688

            var windowEventDescriptor = Object.getOwnPropertyDescriptor(
              window,
              'event'
            )

            function restoreAfterDispatch() {
              // We immediately remove the callback from event listeners so that
              // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
              // nested call would trigger the fake event handlers of any call higher
              // in the stack.
              fakeNode.removeEventListener(evtType, callCallback, false) // We check for window.hasOwnProperty('event') to prevent the
              // window.event assignment in both IE <= 10 as they throw an error
              // "Member not found" in strict mode, and in Firefox which does not
              // support window.event.

              if (
                typeof window.event !== 'undefined' &&
                window.hasOwnProperty('event')
              ) {
                window.event = windowEvent
              }
            } // Create an event handler for our fake event. We will synchronously
            // dispatch our fake event using `dispatchEvent`. Inside the handler, we
            // call the user-provided callback.

            var funcArgs = Array.prototype.slice.call(arguments, 3)

            function callCallback() {
              didCall = true
              restoreAfterDispatch()
              func.apply(context, funcArgs)
              didError = false
            } // Create a global error event handler. We use this to capture the value
            // that was thrown. It's possible that this error handler will fire more
            // than once; for example, if non-React code also calls `dispatchEvent`
            // and a handler for that event throws. We should be resilient to most of
            // those cases. Even if our error event handler fires more than once, the
            // last error event is always used. If the callback actually does error,
            // we know that the last error event is the correct one, because it's not
            // possible for anything else to have happened in between our callback
            // erroring and the code that follows the `dispatchEvent` call below. If
            // the callback doesn't error, but the error event was fired, we know to
            // ignore it because `didError` will be false, as described above.

            var error // Use this to track whether the error event is ever called.

            var didSetError = false
            var isCrossOriginError = false

            function handleWindowError(event) {
              error = event.error
              didSetError = true

              if (error === null && event.colno === 0 && event.lineno === 0) {
                isCrossOriginError = true
              }

              if (event.defaultPrevented) {
                // Some other error handler has prevented default.
                // Browsers silence the error report if this happens.
                // We'll remember this to later decide whether to log it or not.
                if (error != null && typeof error === 'object') {
                  try {
                    error._suppressLogging = true
                  } catch (inner) {
                    // Ignore.
                  }
                }
              }
            } // Create a fake event type.

            var evtType = 'react-' + (name ? name : 'invokeguardedcallback') // Attach our event handlers

            window.addEventListener('error', handleWindowError)
            fakeNode.addEventListener(evtType, callCallback, false) // Synchronously dispatch our fake event. If the user-provided function
            // errors, it will trigger our global error handler.

            evt.initEvent(evtType, false, false)
            fakeNode.dispatchEvent(evt)

            if (windowEventDescriptor) {
              Object.defineProperty(window, 'event', windowEventDescriptor)
            }

            if (didCall && didError) {
              if (!didSetError) {
                // The callback errored, but the error event never fired.
                error = new Error(
                  'An error was thrown inside one of your components, but React ' +
                    "doesn't know what it was. This is likely due to browser " +
                    'flakiness. React does its best to preserve the "Pause on ' +
                    'exceptions" behavior of the DevTools, which requires some ' +
                    "DEV-mode only tricks. It's possible that these don't work in " +
                    'your browser. Try triggering the error in production mode, ' +
                    'or switching to a modern browser. If you suspect that this is ' +
                    'actually an issue with React, please file an issue.'
                )
              } else if (isCrossOriginError) {
                error = new Error(
                  "A cross-origin error was thrown. React doesn't have access to " +
                    'the actual error object in development. ' +
                    'See https://reactjs.org/link/crossorigin-error for more information.'
                )
              }

              this.onError(error)
            } // Remove our event listeners

            window.removeEventListener('error', handleWindowError)

            if (!didCall) {
              // Something went really wrong, and our event was not dispatched.
              // https://github.com/facebook/react/issues/16734
              // https://github.com/facebook/react/issues/16585
              // Fall back to the production implementation.
              restoreAfterDispatch()
              return invokeGuardedCallbackProd.apply(this, arguments)
            }
          }
        }
      }

      var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl

      var hasError = false
      var caughtError = null // Used by event system to capture/rethrow the first error.

      var hasRethrowError = false
      var rethrowError = null
      var reporter = {
        onError: function (error) {
          hasError = true
          caughtError = error
        },
      }
      /**
       * Call a function while guarding against errors that happens within it.
       * Returns an error if it throws, otherwise null.
       *
       * In production, this is implemented using a try-catch. The reason we don't
       * use a try-catch directly is so that we can swap out a different
       * implementation in DEV mode.
       *
       * @param {String} name of the guard to use for logging or debugging
       * @param {Function} func The function to invoke
       * @param {*} context The context to use when calling the function
       * @param {...*} args Arguments for function
       */

      function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
        hasError = false
        caughtError = null
        invokeGuardedCallbackImpl$1.apply(reporter, arguments)
      }
      /**
       * Same as invokeGuardedCallback, but instead of returning an error, it stores
       * it in a global so it can be rethrown by `rethrowCaughtError` later.
       * TODO: See if caughtError and rethrowError can be unified.
       *
       * @param {String} name of the guard to use for logging or debugging
       * @param {Function} func The function to invoke
       * @param {*} context The context to use when calling the function
       * @param {...*} args Arguments for function
       */

      function invokeGuardedCallbackAndCatchFirstError(
        name,
        func,
        context,
        a,
        b,
        c,
        d,
        e,
        f
      ) {
        invokeGuardedCallback.apply(this, arguments)

        if (hasError) {
          var error = clearCaughtError()

          if (!hasRethrowError) {
            hasRethrowError = true
            rethrowError = error
          }
        }
      }
      /**
       * During execution of guarded functions we will capture the first error which
       * we will rethrow to be handled by the top level error handler.
       */

      function rethrowCaughtError() {
        if (hasRethrowError) {
          var error = rethrowError
          hasRethrowError = false
          rethrowError = null
          throw error
        }
      }
      function hasCaughtError() {
        return hasError
      }
      function clearCaughtError() {
        if (hasError) {
          var error = caughtError
          hasError = false
          caughtError = null
          return error
        } else {
          {
            {
              throw Error(
                'clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.'
              )
            }
          }
        }
      }

      /**
       * `ReactInstanceMap` maintains a mapping from a public facing stateful
       * instance (key) and the internal representation (value). This allows public
       * methods to accept the user facing instance as an argument and map them back
       * to internal methods.
       *
       * Note that this module is currently shared and assumed to be stateless.
       * If this becomes an actual Map, that will break.
       */
      function get(key) {
        return key._reactInternals
      }
      function has(key) {
        return key._reactInternals !== undefined
      }
      function set(key, value) {
        key._reactInternals = value
      }

      // Don't change these two values. They're used by React Dev Tools.
      var NoFlags =
        /*                      */
        0
      var PerformedWork =
        /*                */
        1 // You can change the rest (and add more).

      var Placement =
        /*                    */
        2
      var Update =
        /*                       */
        4
      var PlacementAndUpdate =
        /*           */
        6
      var Deletion =
        /*                     */
        8
      var ContentReset =
        /*                 */
        16
      var Callback =
        /*                     */
        32
      var DidCapture =
        /*                   */
        64
      var Ref =
        /*                          */
        128
      var Snapshot =
        /*                     */
        256
      var Passive =
        /*                      */
        512 // TODO (effects) Remove this bit once the new reconciler is synced to the old.

      var PassiveUnmountPendingDev =
        /*     */
        8192
      var Hydrating =
        /*                    */
        1024
      var HydratingAndUpdate =
        /*           */
        1028 // Passive & Update & Callback & Ref & Snapshot

      var LifecycleEffectMask =
        /*          */
        932 // Union of all host effects

      var HostEffectMask =
        /*               */
        2047 // These are not really side effects, but we still reuse this field.

      var Incomplete =
        /*                   */
        2048
      var ShouldCapture =
        /*                */
        4096
      var ForceUpdateForLegacySuspense =
        /* */
        16384 // Static tags describe aspects of a fiber that are not specific to a render,

      var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner
      function getNearestMountedFiber(fiber) {
        var node = fiber
        var nearestMounted = fiber

        if (!fiber.alternate) {
          // If there is no alternate, this might be a new tree that isn't inserted
          // yet. If it is, then it will have a pending insertion effect on it.
          var nextNode = node

          do {
            node = nextNode

            if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
              // This is an insertion or in-progress hydration. The nearest possible
              // mounted fiber is the parent but we need to continue to figure out
              // if that one is still mounted.
              nearestMounted = node.return
            }

            nextNode = node.return
          } while (nextNode)
        } else {
          while (node.return) {
            node = node.return
          }
        }

        if (node.tag === HostRoot) {
          // TODO: Check if this was a nested HostRoot when used with
          // renderContainerIntoSubtree.
          return nearestMounted
        } // If we didn't hit the root, that means that we're in an disconnected tree
        // that has been unmounted.

        return null
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (fiber.tag === SuspenseComponent) {
          var suspenseState = fiber.memoizedState

          if (suspenseState === null) {
            var current = fiber.alternate

            if (current !== null) {
              suspenseState = current.memoizedState
            }
          }

          if (suspenseState !== null) {
            return suspenseState.dehydrated
          }
        }

        return null
      }
      function getContainerFromFiber(fiber) {
        return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null
      }
      function isFiberMounted(fiber) {
        return getNearestMountedFiber(fiber) === fiber
      }
      function isMounted(component) {
        {
          var owner = ReactCurrentOwner.current

          if (owner !== null && owner.tag === ClassComponent) {
            var ownerFiber = owner
            var instance = ownerFiber.stateNode

            if (!instance._warnedAboutRefsInRender) {
              error(
                '%s is accessing isMounted inside its render() function. ' +
                  'render() should be a pure function of props and state. It should ' +
                  'never access something that requires stale data from the previous ' +
                  'render, such as refs. Move this logic to componentDidMount and ' +
                  'componentDidUpdate instead.',
                getComponentName(ownerFiber.type) || 'A component'
              )
            }

            instance._warnedAboutRefsInRender = true
          }
        }

        var fiber = get(component)

        if (!fiber) {
          return false
        }

        return getNearestMountedFiber(fiber) === fiber
      }

      function assertIsMounted(fiber) {
        if (!(getNearestMountedFiber(fiber) === fiber)) {
          {
            throw Error('Unable to find node on an unmounted component.')
          }
        }
      }

      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate

        if (!alternate) {
          // If there is no alternate, then we only need to check if it is mounted.
          var nearestMounted = getNearestMountedFiber(fiber)

          if (!(nearestMounted !== null)) {
            {
              throw Error('Unable to find node on an unmounted component.')
            }
          }

          if (nearestMounted !== fiber) {
            return null
          }

          return fiber
        } // If we have two possible branches, we'll walk backwards up to the root
        // to see what path the root points to. On the way we may hit one of the
        // special cases and we'll deal with them.

        var a = fiber
        var b = alternate

        while (true) {
          var parentA = a.return

          if (parentA === null) {
            // We're at the root.
            break
          }

          var parentB = parentA.alternate

          if (parentB === null) {
            // There is no alternate. This is an unusual case. Currently, it only
            // happens when a Suspense component is hidden. An extra fragment fiber
            // is inserted in between the Suspense fiber and its children. Skip
            // over this extra fragment fiber and proceed to the next parent.
            var nextParent = parentA.return

            if (nextParent !== null) {
              a = b = nextParent
              continue
            } // If there's no parent, we're at the root.

            break
          } // If both copies of the parent fiber point to the same child, we can
          // assume that the child is current. This happens when we bailout on low
          // priority: the bailed out fiber's child reuses the current child.

          if (parentA.child === parentB.child) {
            var child = parentA.child

            while (child) {
              if (child === a) {
                // We've determined that A is the current branch.
                assertIsMounted(parentA)
                return fiber
              }

              if (child === b) {
                // We've determined that B is the current branch.
                assertIsMounted(parentA)
                return alternate
              }

              child = child.sibling
            } // We should never have an alternate for any mounting node. So the only
            // way this could possibly happen is if this was unmounted, if at all.

            {
              {
                throw Error('Unable to find node on an unmounted component.')
              }
            }
          }

          if (a.return !== b.return) {
            // The return pointer of A and the return pointer of B point to different
            // fibers. We assume that return pointers never criss-cross, so A must
            // belong to the child set of A.return, and B must belong to the child
            // set of B.return.
            a = parentA
            b = parentB
          } else {
            // The return pointers point to the same fiber. We'll have to use the
            // default, slow path: scan the child sets of each parent alternate to see
            // which child belongs to which set.
            //
            // Search parent A's child set
            var didFindChild = false
            var _child = parentA.child

            while (_child) {
              if (_child === a) {
                didFindChild = true
                a = parentA
                b = parentB
                break
              }

              if (_child === b) {
                didFindChild = true
                b = parentA
                a = parentB
                break
              }

              _child = _child.sibling
            }

            if (!didFindChild) {
              // Search parent B's child set
              _child = parentB.child

              while (_child) {
                if (_child === a) {
                  didFindChild = true
                  a = parentB
                  b = parentA
                  break
                }

                if (_child === b) {
                  didFindChild = true
                  b = parentB
                  a = parentA
                  break
                }

                _child = _child.sibling
              }

              if (!didFindChild) {
                {
                  throw Error(
                    'Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.'
                  )
                }
              }
            }
          }

          if (!(a.alternate === b)) {
            {
              throw Error(
                "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
              )
            }
          }
        } // If the root is not a host container, we're in a disconnected tree. I.e.
        // unmounted.

        if (!(a.tag === HostRoot)) {
          {
            throw Error('Unable to find node on an unmounted component.')
          }
        }

        if (a.stateNode.current === a) {
          // We've determined that A is the current branch.
          return fiber
        } // Otherwise B has to be current branch.

        return alternate
      }
      function findCurrentHostFiber(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent)

        if (!currentParent) {
          return null
        } // Next we'll drill down this component to find the first HostComponent/Text.

        var node = currentParent

        while (true) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node
          } else if (node.child) {
            node.child.return = node
            node = node.child
            continue
          }

          if (node === currentParent) {
            return null
          }

          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null
            }

            node = node.return
          }

          node.sibling.return = node.return
          node = node.sibling
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable

        return null
      }
      function findCurrentHostFiberWithNoPortals(parent) {
        var currentParent = findCurrentFiberUsingSlowPath(parent)

        if (!currentParent) {
          return null
        } // Next we'll drill down this component to find the first HostComponent/Text.

        var node = currentParent

        while (true) {
          if (
            node.tag === HostComponent ||
            node.tag === HostText ||
            enableFundamentalAPI
          ) {
            return node
          } else if (node.child && node.tag !== HostPortal) {
            node.child.return = node
            node = node.child
            continue
          }

          if (node === currentParent) {
            return null
          }

          while (!node.sibling) {
            if (!node.return || node.return === currentParent) {
              return null
            }

            node = node.return
          }

          node.sibling.return = node.return
          node = node.sibling
        } // Flow needs the return null here, but ESLint complains about it.
        // eslint-disable-next-line no-unreachable

        return null
      }
      function doesFiberContain(parentFiber, childFiber) {
        var node = childFiber
        var parentFiberAlternate = parentFiber.alternate

        while (node !== null) {
          if (node === parentFiber || node === parentFiberAlternate) {
            return true
          }

          node = node.return
        }

        return false
      }

      var attemptUserBlockingHydration
      function setAttemptUserBlockingHydration(fn) {
        attemptUserBlockingHydration = fn
      }
      var attemptContinuousHydration
      function setAttemptContinuousHydration(fn) {
        attemptContinuousHydration = fn
      }
      var attemptHydrationAtCurrentPriority
      function setAttemptHydrationAtCurrentPriority(fn) {
        attemptHydrationAtCurrentPriority = fn
      }
      var attemptHydrationAtPriority
      function setAttemptHydrationAtPriority(fn) {
        attemptHydrationAtPriority = fn
      } // TODO: Upgrade this definition once we're on a newer version of Flow that
      var hasScheduledReplayAttempt = false // The queue of discrete events to be replayed.

      var queuedDiscreteEvents = [] // Indicates if any continuous event targets are non-null for early bailout.
      // if the last target was dehydrated.

      var queuedFocus = null
      var queuedDrag = null
      var queuedMouse = null // For pointer events there can be one latest event per pointerId.

      var queuedPointers = new Map()
      var queuedPointerCaptures = new Map() // We could consider replaying selectionchange and touchmoves too.

      var queuedExplicitHydrationTargets = []
      function hasQueuedDiscreteEvents() {
        return queuedDiscreteEvents.length > 0
      }
      var discreteReplayableEvents = [
        'mousedown',
        'mouseup',
        'touchcancel',
        'touchend',
        'touchstart',
        'auxclick',
        'dblclick',
        'pointercancel',
        'pointerdown',
        'pointerup',
        'dragend',
        'dragstart',
        'drop',
        'compositionend',
        'compositionstart',
        'keydown',
        'keypress',
        'keyup',
        'input',
        'textInput', // Intentionally camelCase
        'copy',
        'cut',
        'paste',
        'click',
        'change',
        'contextmenu',
        'reset',
        'submit',
      ]
      function isReplayableDiscreteEvent(eventType) {
        return discreteReplayableEvents.indexOf(eventType) > -1
      }

      function createQueuedReplayableEvent(
        blockedOn,
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
      ) {
        return {
          blockedOn: blockedOn,
          domEventName: domEventName,
          eventSystemFlags: eventSystemFlags | IS_REPLAYED,
          nativeEvent: nativeEvent,
          targetContainers: [targetContainer],
        }
      }

      function queueDiscreteEvent(
        blockedOn,
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
      ) {
        var queuedEvent = createQueuedReplayableEvent(
          blockedOn,
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        )
        queuedDiscreteEvents.push(queuedEvent)
      } // Resets the replaying for this type of continuous event to no event.

      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case 'focusin':
          case 'focusout':
            queuedFocus = null
            break

          case 'dragenter':
          case 'dragleave':
            queuedDrag = null
            break

          case 'mouseover':
          case 'mouseout':
            queuedMouse = null
            break

          case 'pointerover':
          case 'pointerout': {
            var pointerId = nativeEvent.pointerId
            queuedPointers.delete(pointerId)
            break
          }

          case 'gotpointercapture':
          case 'lostpointercapture': {
            var _pointerId = nativeEvent.pointerId
            queuedPointerCaptures.delete(_pointerId)
            break
          }
        }
      }

      function accumulateOrCreateContinuousQueuedReplayableEvent(
        existingQueuedEvent,
        blockedOn,
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
      ) {
        if (
          existingQueuedEvent === null ||
          existingQueuedEvent.nativeEvent !== nativeEvent
        ) {
          var queuedEvent = createQueuedReplayableEvent(
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          )

          if (blockedOn !== null) {
            var _fiber2 = getInstanceFromNode(blockedOn)

            if (_fiber2 !== null) {
              // Attempt to increase the priority of this target.
              attemptContinuousHydration(_fiber2)
            }
          }

          return queuedEvent
        } // If we have already queued this exact event, then it's because
        // the different event systems have different DOM event listeners.
        // We can accumulate the flags, and the targetContainers, and
        // store a single event to be replayed.

        existingQueuedEvent.eventSystemFlags |= eventSystemFlags
        var targetContainers = existingQueuedEvent.targetContainers

        if (
          targetContainer !== null &&
          targetContainers.indexOf(targetContainer) === -1
        ) {
          targetContainers.push(targetContainer)
        }

        return existingQueuedEvent
      }

      function queueIfContinuousEvent(
        blockedOn,
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
      ) {
        // These set relatedTarget to null because the replayed event will be treated as if we
        // moved from outside the window (no target) onto the target once it hydrates.
        // Instead of mutating we could clone the event.
        switch (domEventName) {
          case 'focusin': {
            var focusEvent = nativeEvent
            queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedFocus,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              focusEvent
            )
            return true
          }

          case 'dragenter': {
            var dragEvent = nativeEvent
            queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedDrag,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              dragEvent
            )
            return true
          }

          case 'mouseover': {
            var mouseEvent = nativeEvent
            queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedMouse,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              mouseEvent
            )
            return true
          }

          case 'pointerover': {
            var pointerEvent = nativeEvent
            var pointerId = pointerEvent.pointerId
            queuedPointers.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointers.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                pointerEvent
              )
            )
            return true
          }

          case 'gotpointercapture': {
            var _pointerEvent = nativeEvent
            var _pointerId2 = _pointerEvent.pointerId
            queuedPointerCaptures.set(
              _pointerId2,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointerCaptures.get(_pointerId2) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                _pointerEvent
              )
            )
            return true
          }
        }

        return false
      } // Check if this target is unblocked. Returns true if it's unblocked.

      function attemptExplicitHydrationTarget(queuedTarget) {
        // TODO: This function shares a lot of logic with attemptToDispatchEvent.
        // Try to unify them. It's a bit tricky since it would require two return
        // values.
        var targetInst = getClosestInstanceFromNode(queuedTarget.target)

        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst)

          if (nearestMounted !== null) {
            var tag = nearestMounted.tag

            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted)

              if (instance !== null) {
                // We're blocked on hydrating this boundary.
                // Increase its priority.
                queuedTarget.blockedOn = instance
                attemptHydrationAtPriority(
                  queuedTarget.lanePriority,
                  function () {
                    Scheduler.unstable_runWithPriority(
                      queuedTarget.priority,
                      function () {
                        attemptHydrationAtCurrentPriority(nearestMounted)
                      }
                    )
                  }
                )
                return
              }
            } else if (tag === HostRoot) {
              var root = nearestMounted.stateNode

              if (root.hydrate) {
                queuedTarget.blockedOn = getContainerFromFiber(nearestMounted) // We don't currently have a way to increase the priority of
                // a root other than sync.

                return
              }
            }
          }
        }

        queuedTarget.blockedOn = null
      }

      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (queuedEvent.blockedOn !== null) {
          return false
        }

        var targetContainers = queuedEvent.targetContainers

        while (targetContainers.length > 0) {
          var targetContainer = targetContainers[0]
          var nextBlockedOn = attemptToDispatchEvent(
            queuedEvent.domEventName,
            queuedEvent.eventSystemFlags,
            targetContainer,
            queuedEvent.nativeEvent
          )

          if (nextBlockedOn !== null) {
            // We're still blocked. Try again later.
            var _fiber3 = getInstanceFromNode(nextBlockedOn)

            if (_fiber3 !== null) {
              attemptContinuousHydration(_fiber3)
            }

            queuedEvent.blockedOn = nextBlockedOn
            return false
          } // This target container was successfully dispatched. Try the next.

          targetContainers.shift()
        }

        return true
      }

      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
        if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
          map.delete(key)
        }
      }

      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false // First replay discrete events.

        while (queuedDiscreteEvents.length > 0) {
          var nextDiscreteEvent = queuedDiscreteEvents[0]

          if (nextDiscreteEvent.blockedOn !== null) {
            // We're still blocked.
            // Increase the priority of this boundary to unblock
            // the next discrete event.
            var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn)

            if (_fiber4 !== null) {
              attemptUserBlockingHydration(_fiber4)
            }

            break
          }

          var targetContainers = nextDiscreteEvent.targetContainers

          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0]
            var nextBlockedOn = attemptToDispatchEvent(
              nextDiscreteEvent.domEventName,
              nextDiscreteEvent.eventSystemFlags,
              targetContainer,
              nextDiscreteEvent.nativeEvent
            )

            if (nextBlockedOn !== null) {
              // We're still blocked. Try again later.
              nextDiscreteEvent.blockedOn = nextBlockedOn
              break
            } // This target container was successfully dispatched. Try the next.

            targetContainers.shift()
          }

          if (nextDiscreteEvent.blockedOn === null) {
            // We've successfully replayed the first event. Let's try the next one.
            queuedDiscreteEvents.shift()
          }
        } // Next replay any continuous events.

        if (
          queuedFocus !== null &&
          attemptReplayContinuousQueuedEvent(queuedFocus)
        ) {
          queuedFocus = null
        }

        if (
          queuedDrag !== null &&
          attemptReplayContinuousQueuedEvent(queuedDrag)
        ) {
          queuedDrag = null
        }

        if (
          queuedMouse !== null &&
          attemptReplayContinuousQueuedEvent(queuedMouse)
        ) {
          queuedMouse = null
        }

        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap)
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap)
      }

      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        if (queuedEvent.blockedOn === unblocked) {
          queuedEvent.blockedOn = null

          if (!hasScheduledReplayAttempt) {
            hasScheduledReplayAttempt = true // Schedule a callback to attempt replaying as many events as are
            // now unblocked. This first might not actually be unblocked yet.
            // We could check it early to avoid scheduling an unnecessary callback.

            Scheduler.unstable_scheduleCallback(
              Scheduler.unstable_NormalPriority,
              replayUnblockedEvents
            )
          }
        }
      }

      function retryIfBlockedOn(unblocked) {
        // Mark anything that was blocked on this as no longer blocked
        // and eligible for a replay.
        if (queuedDiscreteEvents.length > 0) {
          scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked) // This is a exponential search for each boundary that commits. I think it's
          // worth it because we expect very few discrete events to queue up and once
          // we are actually fully unblocked it will be fast to replay them.

          for (var i = 1; i < queuedDiscreteEvents.length; i++) {
            var queuedEvent = queuedDiscreteEvents[i]

            if (queuedEvent.blockedOn === unblocked) {
              queuedEvent.blockedOn = null
            }
          }
        }

        if (queuedFocus !== null) {
          scheduleCallbackIfUnblocked(queuedFocus, unblocked)
        }

        if (queuedDrag !== null) {
          scheduleCallbackIfUnblocked(queuedDrag, unblocked)
        }

        if (queuedMouse !== null) {
          scheduleCallbackIfUnblocked(queuedMouse, unblocked)
        }

        var unblock = function (queuedEvent) {
          return scheduleCallbackIfUnblocked(queuedEvent, unblocked)
        }

        queuedPointers.forEach(unblock)
        queuedPointerCaptures.forEach(unblock)

        for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
          var queuedTarget = queuedExplicitHydrationTargets[_i]

          if (queuedTarget.blockedOn === unblocked) {
            queuedTarget.blockedOn = null
          }
        }

        while (queuedExplicitHydrationTargets.length > 0) {
          var nextExplicitTarget = queuedExplicitHydrationTargets[0]

          if (nextExplicitTarget.blockedOn !== null) {
            // We're still blocked.
            break
          } else {
            attemptExplicitHydrationTarget(nextExplicitTarget)

            if (nextExplicitTarget.blockedOn === null) {
              // We're unblocked.
              queuedExplicitHydrationTargets.shift()
            }
          }
        }
      }

      var DiscreteEvent = 0
      var UserBlockingEvent = 1
      var ContinuousEvent = 2

      /**
       * Generate a mapping of standard vendor prefixes using the defined style property and event name.
       *
       * @param {string} styleProp
       * @param {string} eventName
       * @returns {object}
       */

      function makePrefixMap(styleProp, eventName) {
        var prefixes = {}
        prefixes[styleProp.toLowerCase()] = eventName.toLowerCase()
        prefixes['Webkit' + styleProp] = 'webkit' + eventName
        prefixes['Moz' + styleProp] = 'moz' + eventName
        return prefixes
      }
      /**
       * A list of event names to a configurable list of vendor prefixes.
       */

      var vendorPrefixes = {
        animationend: makePrefixMap('Animation', 'AnimationEnd'),
        animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
        animationstart: makePrefixMap('Animation', 'AnimationStart'),
        transitionend: makePrefixMap('Transition', 'TransitionEnd'),
      }
      /**
       * Event names that have already been detected and prefixed (if applicable).
       */

      var prefixedEventNames = {}
      /**
       * Element to check for prefixes on.
       */

      var style = {}
      /**
       * Bootstrap if a DOM exists.
       */

      if (canUseDOM) {
        style = document.createElement('div').style // On some platforms, in particular some releases of Android 4.x,
        // the un-prefixed "animation" and "transition" properties are defined on the
        // style object but the events that fire will still be prefixed, so we need
        // to check if the un-prefixed events are usable, and if not remove them from the map.

        if (!('AnimationEvent' in window)) {
          delete vendorPrefixes.animationend.animation
          delete vendorPrefixes.animationiteration.animation
          delete vendorPrefixes.animationstart.animation
        } // Same as above

        if (!('TransitionEvent' in window)) {
          delete vendorPrefixes.transitionend.transition
        }
      }
      /**
       * Attempts to determine the correct vendor prefixed event name.
       *
       * @param {string} eventName
       * @returns {string}
       */

      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) {
          return prefixedEventNames[eventName]
        } else if (!vendorPrefixes[eventName]) {
          return eventName
        }

        var prefixMap = vendorPrefixes[eventName]

        for (var styleProp in prefixMap) {
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
            return (prefixedEventNames[eventName] = prefixMap[styleProp])
          }
        }

        return eventName
      }

      var ANIMATION_END = getVendorPrefixedEventName('animationend')
      var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration')
      var ANIMATION_START = getVendorPrefixedEventName('animationstart')
      var TRANSITION_END = getVendorPrefixedEventName('transitionend')

      var topLevelEventsToReactNames = new Map()
      var eventPriorities = new Map() // We store most of the events in this module in pairs of two strings so we can re-use
      // the code required to apply the same logic for event prioritization and that of the
      // SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
      // duplication (for which there would be quite a bit). For the events that are not needed
      // for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
      // array of top level events.
      // Lastly, we ignore prettier so we can keep the formatting sane.
      // prettier-ignore

      var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
  'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
  'focusout', 'blur', // Careful!
  'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
      var otherDiscreteEvents = [
        'change',
        'selectionchange',
        'textInput',
        'compositionstart',
        'compositionend',
        'compositionupdate',
      ]

      var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel']; // prettier-ignore

      var continuousPairsForSimpleEventPlugin = [
        'abort',
        'abort',
        ANIMATION_END,
        'animationEnd',
        ANIMATION_ITERATION,
        'animationIteration',
        ANIMATION_START,
        'animationStart',
        'canplay',
        'canPlay',
        'canplaythrough',
        'canPlayThrough',
        'durationchange',
        'durationChange',
        'emptied',
        'emptied',
        'encrypted',
        'encrypted',
        'ended',
        'ended',
        'error',
        'error',
        'gotpointercapture',
        'gotPointerCapture',
        'load',
        'load',
        'loadeddata',
        'loadedData',
        'loadedmetadata',
        'loadedMetadata',
        'loadstart',
        'loadStart',
        'lostpointercapture',
        'lostPointerCapture',
        'playing',
        'playing',
        'progress',
        'progress',
        'seeking',
        'seeking',
        'stalled',
        'stalled',
        'suspend',
        'suspend',
        'timeupdate',
        'timeUpdate',
        TRANSITION_END,
        'transitionEnd',
        'waiting',
        'waiting',
      ]
      /**
       * Turns
       * ['abort', ...]
       *
       * into
       *
       * topLevelEventsToReactNames = new Map([
       *   ['abort', 'onAbort'],
       * ]);
       *
       * and registers them.
       */

      function registerSimplePluginEventsAndSetTheirPriorities(
        eventTypes,
        priority
      ) {
        // As the event types are in pairs of two, we need to iterate
        // through in twos. The events are in pairs of two to save code
        // and improve init perf of processing this array, as it will
        // result in far fewer object allocations and property accesses
        // if we only use three arrays to process all the categories of
        // instead of tuples.
        for (var i = 0; i < eventTypes.length; i += 2) {
          var topEvent = eventTypes[i]
          var event = eventTypes[i + 1]
          var capitalizedEvent = event[0].toUpperCase() + event.slice(1)
          var reactName = 'on' + capitalizedEvent
          eventPriorities.set(topEvent, priority)
          topLevelEventsToReactNames.set(topEvent, reactName)
          registerTwoPhaseEvent(reactName, [topEvent])
        }
      }

      function setEventPriorities(eventTypes, priority) {
        for (var i = 0; i < eventTypes.length; i++) {
          eventPriorities.set(eventTypes[i], priority)
        }
      }

      function getEventPriorityForPluginSystem(domEventName) {
        var priority = eventPriorities.get(domEventName) // Default to a ContinuousEvent. Note: we might
        // want to warn if we can't detect the priority
        // for the event.

        return priority === undefined ? ContinuousEvent : priority
      }
      function registerSimpleEvents() {
        registerSimplePluginEventsAndSetTheirPriorities(
          discreteEventPairsForSimpleEventPlugin,
          DiscreteEvent
        )
        registerSimplePluginEventsAndSetTheirPriorities(
          userBlockingPairsForSimpleEventPlugin,
          UserBlockingEvent
        )
        registerSimplePluginEventsAndSetTheirPriorities(
          continuousPairsForSimpleEventPlugin,
          ContinuousEvent
        )
        setEventPriorities(otherDiscreteEvents, DiscreteEvent)
      }

      var Scheduler_now = Scheduler.unstable_now

      {
        // Provide explicit error message when production+profiling bundle of e.g.
        // react-dom is used with production (non-profiling) bundle of
        // scheduler/tracing
        if (
          !(
            tracing.__interactionsRef != null &&
            tracing.__interactionsRef.current != null
          )
        ) {
          {
            throw Error(
              'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling'
            )
          }
        }
      }
      // ascending numbers so we can compare them like numbers. They start at 90 to
      // avoid clashing with Scheduler's priorities.

      var ImmediatePriority = 99
      var UserBlockingPriority = 98
      var NormalPriority = 97
      var LowPriority = 96
      var IdlePriority = 95 // NoPriority is the absence of priority. Also React-only.

      var NoPriority = 90
      Scheduler_now() // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

      var SyncLanePriority = 15
      var SyncBatchedLanePriority = 14
      var InputDiscreteHydrationLanePriority = 13
      var InputDiscreteLanePriority = 12
      var InputContinuousHydrationLanePriority = 11
      var InputContinuousLanePriority = 10
      var DefaultHydrationLanePriority = 9
      var DefaultLanePriority = 8
      var TransitionHydrationPriority = 7
      var TransitionPriority = 6
      var RetryLanePriority = 5
      var SelectiveHydrationLanePriority = 4
      var IdleHydrationLanePriority = 3
      var IdleLanePriority = 2
      var OffscreenLanePriority = 1
      var NoLanePriority = 0
      var TotalLanes = 31
      var NoLanes =
        /*                        */
        0
      var NoLane =
        /*                          */
        0
      var SyncLane =
        /*                        */
        1
      var SyncBatchedLane =
        /*                 */
        2
      var InputDiscreteHydrationLane =
        /*      */
        4
      var InputDiscreteLanes =
        /*                    */
        24
      var InputContinuousHydrationLane =
        /*           */
        32
      var InputContinuousLanes =
        /*                  */
        192
      var DefaultHydrationLane =
        /*            */
        256
      var DefaultLanes =
        /*                   */
        3584
      var TransitionHydrationLane =
        /*                */
        4096
      var TransitionLanes =
        /*                       */
        4186112
      var RetryLanes =
        /*                            */
        62914560
      var SomeRetryLane =
        /*                  */
        33554432
      var SelectiveHydrationLane =
        /*          */
        67108864
      var NonIdleLanes =
        /*                                 */
        134217727
      var IdleHydrationLane =
        /*               */
        134217728
      var IdleLanes =
        /*                             */
        805306368
      var OffscreenLane =
        /*                   */
        1073741824
      var NoTimestamp = -1
      function setCurrentUpdateLanePriority(newLanePriority) {} // "Registers" used to "return" multiple values
      // Used by getHighestPriorityLanes and getNextLanes:

      var return_highestLanePriority = DefaultLanePriority

      function getHighestPriorityLanes(lanes) {
        if ((SyncLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncLanePriority
          return SyncLane
        }

        if ((SyncBatchedLane & lanes) !== NoLanes) {
          return_highestLanePriority = SyncBatchedLanePriority
          return SyncBatchedLane
        }

        if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
          return_highestLanePriority = InputDiscreteHydrationLanePriority
          return InputDiscreteHydrationLane
        }

        var inputDiscreteLanes = InputDiscreteLanes & lanes

        if (inputDiscreteLanes !== NoLanes) {
          return_highestLanePriority = InputDiscreteLanePriority
          return inputDiscreteLanes
        }

        if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
          return_highestLanePriority = InputContinuousHydrationLanePriority
          return InputContinuousHydrationLane
        }

        var inputContinuousLanes = InputContinuousLanes & lanes

        if (inputContinuousLanes !== NoLanes) {
          return_highestLanePriority = InputContinuousLanePriority
          return inputContinuousLanes
        }

        if ((lanes & DefaultHydrationLane) !== NoLanes) {
          return_highestLanePriority = DefaultHydrationLanePriority
          return DefaultHydrationLane
        }

        var defaultLanes = DefaultLanes & lanes

        if (defaultLanes !== NoLanes) {
          return_highestLanePriority = DefaultLanePriority
          return defaultLanes
        }

        if ((lanes & TransitionHydrationLane) !== NoLanes) {
          return_highestLanePriority = TransitionHydrationPriority
          return TransitionHydrationLane
        }

        var transitionLanes = TransitionLanes & lanes

        if (transitionLanes !== NoLanes) {
          return_highestLanePriority = TransitionPriority
          return transitionLanes
        }

        var retryLanes = RetryLanes & lanes

        if (retryLanes !== NoLanes) {
          return_highestLanePriority = RetryLanePriority
          return retryLanes
        }

        if (lanes & SelectiveHydrationLane) {
          return_highestLanePriority = SelectiveHydrationLanePriority
          return SelectiveHydrationLane
        }

        if ((lanes & IdleHydrationLane) !== NoLanes) {
          return_highestLanePriority = IdleHydrationLanePriority
          return IdleHydrationLane
        }

        var idleLanes = IdleLanes & lanes

        if (idleLanes !== NoLanes) {
          return_highestLanePriority = IdleLanePriority
          return idleLanes
        }

        if ((OffscreenLane & lanes) !== NoLanes) {
          return_highestLanePriority = OffscreenLanePriority
          return OffscreenLane
        }

        {
          error('Should have found matching lanes. This is a bug in React.')
        } // This shouldn't be reachable, but as a fallback, return the entire bitmask.

        return_highestLanePriority = DefaultLanePriority
        return lanes
      }

      function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
        switch (schedulerPriorityLevel) {
          case ImmediatePriority:
            return SyncLanePriority

          case UserBlockingPriority:
            return InputContinuousLanePriority

          case NormalPriority:
          case LowPriority:
            // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
            return DefaultLanePriority

          case IdlePriority:
            return IdleLanePriority

          default:
            return NoLanePriority
        }
      }
      function lanePriorityToSchedulerPriority(lanePriority) {
        switch (lanePriority) {
          case SyncLanePriority:
          case SyncBatchedLanePriority:
            return ImmediatePriority

          case InputDiscreteHydrationLanePriority:
          case InputDiscreteLanePriority:
          case InputContinuousHydrationLanePriority:
          case InputContinuousLanePriority:
            return UserBlockingPriority

          case DefaultHydrationLanePriority:
          case DefaultLanePriority:
          case TransitionHydrationPriority:
          case TransitionPriority:
          case SelectiveHydrationLanePriority:
          case RetryLanePriority:
            return NormalPriority

          case IdleHydrationLanePriority:
          case IdleLanePriority:
          case OffscreenLanePriority:
            return IdlePriority

          case NoLanePriority:
            return NoPriority

          default: {
            {
              throw Error(
                'Invalid update priority: ' +
                  lanePriority +
                  '. This is a bug in React.'
              )
            }
          }
        }
      }
      function getNextLanes(root, wipLanes) {
        // Early bailout if there's no pending work left.
        var pendingLanes = root.pendingLanes

        if (pendingLanes === NoLanes) {
          return_highestLanePriority = NoLanePriority
          return NoLanes
        }

        var nextLanes = NoLanes
        var nextLanePriority = NoLanePriority
        var expiredLanes = root.expiredLanes
        var suspendedLanes = root.suspendedLanes
        var pingedLanes = root.pingedLanes // Check if any work has expired.

        if (expiredLanes !== NoLanes) {
          nextLanes = expiredLanes
          nextLanePriority = return_highestLanePriority = SyncLanePriority
        } else {
          // Do not work on any idle work until all the non-idle work has finished,
          // even if the work is suspended.
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes

          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes

            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes)
              nextLanePriority = return_highestLanePriority
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes

              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes)
                nextLanePriority = return_highestLanePriority
              }
            }
          } else {
            // The only remaining work is Idle.
            var unblockedLanes = pendingLanes & ~suspendedLanes

            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes)
              nextLanePriority = return_highestLanePriority
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes)
                nextLanePriority = return_highestLanePriority
              }
            }
          }
        }

        if (nextLanes === NoLanes) {
          // This should only be reachable if we're suspended
          // TODO: Consider warning in this path if a fallback timer is not scheduled.
          return NoLanes
        } // If there are higher priority lanes, we'll include them even if they
        // are suspended.

        nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes) // If we're already in the middle of a render, switching lanes will interrupt
        // it and we'll lose our progress. We should only do this if the new lanes are
        // higher priority.

        if (
          wipLanes !== NoLanes &&
          wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes
        ) {
          getHighestPriorityLanes(wipLanes)
          var wipLanePriority = return_highestLanePriority

          if (nextLanePriority <= wipLanePriority) {
            return wipLanes
          } else {
            return_highestLanePriority = nextLanePriority
          }
        } // Check for entangled lanes and add them to the batch.
        //
        // A lane is said to be entangled with another when it's not allowed to render
        // in a batch that does not also include the other lane. Typically we do this
        // when multiple updates have the same source, and we only want to respond to
        // the most recent event from that source.
        //
        // Note that we apply entanglements *after* checking for partial work above.
        // This means that if a lane is entangled during an interleaved event while
        // it's already rendering, we won't interrupt it. This is intentional, since
        // entanglement is usually "best effort": we'll try our best to render the
        // lanes in the same batch, but it's not worth throwing out partially
        // completed work in order to do it.
        //
        // For those exceptions where entanglement is semantically important, like
        // useMutableSource, we should ensure that there is no partial work at the
        // time we apply the entanglement.

        var entangledLanes = root.entangledLanes

        if (entangledLanes !== NoLanes) {
          var entanglements = root.entanglements
          var lanes = nextLanes & entangledLanes

          while (lanes > 0) {
            var index = pickArbitraryLaneIndex(lanes)
            var lane = 1 << index
            nextLanes |= entanglements[index]
            lanes &= ~lane
          }
        }

        return nextLanes
      }
      function getMostRecentEventTime(root, lanes) {
        var eventTimes = root.eventTimes
        var mostRecentEventTime = NoTimestamp

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes)
          var lane = 1 << index
          var eventTime = eventTimes[index]

          if (eventTime > mostRecentEventTime) {
            mostRecentEventTime = eventTime
          }

          lanes &= ~lane
        }

        return mostRecentEventTime
      }

      function computeExpirationTime(lane, currentTime) {
        // TODO: Expiration heuristic is constant per lane, so could use a map.
        getHighestPriorityLanes(lane)
        var priority = return_highestLanePriority

        if (priority >= InputContinuousLanePriority) {
          // User interactions should expire slightly more quickly.
          //
          // NOTE: This is set to the corresponding constant as in Scheduler.js. When
          // we made it larger, a product metric in www regressed, suggesting there's
          // a user interaction that's being starved by a series of synchronous
          // updates. If that theory is correct, the proper solution is to fix the
          // starvation. However, this scenario supports the idea that expiration
          // times are an important safeguard when starvation does happen.
          //
          // Also note that, in the case of user input specifically, this will soon no
          // longer be an issue because we plan to make user input synchronous by
          // default (until you enter `startTransition`, of course.)
          //
          // If weren't planning to make these updates synchronous soon anyway, I
          // would probably make this number a configurable parameter.
          return currentTime + 250
        } else if (priority >= TransitionPriority) {
          return currentTime + 5000
        } else {
          // Anything idle priority or lower should never expire.
          return NoTimestamp
        }
      }

      function markStarvedLanesAsExpired(root, currentTime) {
        // TODO: This gets called every time we yield. We can optimize by storing
        // the earliest expiration time on the root. Then use that to quickly bail out
        // of this function.
        var pendingLanes = root.pendingLanes
        var suspendedLanes = root.suspendedLanes
        var pingedLanes = root.pingedLanes
        var expirationTimes = root.expirationTimes // Iterate through the pending lanes and check if we've reached their
        // expiration time. If so, we'll assume the update is being starved and mark
        // it as expired to force it to finish.

        var lanes = pendingLanes

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes)
          var lane = 1 << index
          var expirationTime = expirationTimes[index]

          if (expirationTime === NoTimestamp) {
            // Found a pending lane with no expiration time. If it's not suspended, or
            // if it's pinged, assume it's CPU-bound. Compute a new expiration time
            // using the current time.
            if (
              (lane & suspendedLanes) === NoLanes ||
              (lane & pingedLanes) !== NoLanes
            ) {
              // Assumes timestamps are monotonically increasing.
              expirationTimes[index] = computeExpirationTime(lane, currentTime)
            }
          } else if (expirationTime <= currentTime) {
            // This lane expired
            root.expiredLanes |= lane
          }

          lanes &= ~lane
        }
      } // This returns the highest priority pending lanes regardless of whether they
      function getLanesToRetrySynchronouslyOnError(root) {
        var everythingButOffscreen = root.pendingLanes & ~OffscreenLane

        if (everythingButOffscreen !== NoLanes) {
          return everythingButOffscreen
        }

        if (everythingButOffscreen & OffscreenLane) {
          return OffscreenLane
        }

        return NoLanes
      }
      function returnNextLanesPriority() {
        return return_highestLanePriority
      }
      function includesNonIdleWork(lanes) {
        return (lanes & NonIdleLanes) !== NoLanes
      }
      function includesOnlyRetries(lanes) {
        return (lanes & RetryLanes) === lanes
      }
      function includesOnlyTransitions(lanes) {
        return (lanes & TransitionLanes) === lanes
      } // To ensure consistency across multiple updates in the same event, this should
      // be a pure function, so that it always returns the same lane for given inputs.

      function findUpdateLane(lanePriority, wipLanes) {
        switch (lanePriority) {
          case NoLanePriority:
            break

          case SyncLanePriority:
            return SyncLane

          case SyncBatchedLanePriority:
            return SyncBatchedLane

          case InputDiscreteLanePriority: {
            var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes)

            if (_lane === NoLane) {
              // Shift to the next priority level
              return findUpdateLane(InputContinuousLanePriority, wipLanes)
            }

            return _lane
          }

          case InputContinuousLanePriority: {
            var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes)

            if (_lane2 === NoLane) {
              // Shift to the next priority level
              return findUpdateLane(DefaultLanePriority, wipLanes)
            }

            return _lane2
          }

          case DefaultLanePriority: {
            var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes)

            if (_lane3 === NoLane) {
              // If all the default lanes are already being worked on, look for a
              // lane in the transition range.
              _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes)

              if (_lane3 === NoLane) {
                // All the transition lanes are taken, too. This should be very
                // rare, but as a last resort, pick a default lane. This will have
                // the effect of interrupting the current work-in-progress render.
                _lane3 = pickArbitraryLane(DefaultLanes)
              }
            }

            return _lane3
          }

          case TransitionPriority: // Should be handled by findTransitionLane instead

          case RetryLanePriority:
            // Should be handled by findRetryLane instead
            break

          case IdleLanePriority:
            var lane = pickArbitraryLane(IdleLanes & ~wipLanes)

            if (lane === NoLane) {
              lane = pickArbitraryLane(IdleLanes)
            }

            return lane
        }

        {
          {
            throw Error(
              'Invalid update priority: ' +
                lanePriority +
                '. This is a bug in React.'
            )
          }
        }
      } // To ensure consistency across multiple updates in the same event, this should
      // be pure function, so that it always returns the same lane for given inputs.

      function findTransitionLane(wipLanes, pendingLanes) {
        // First look for lanes that are completely unclaimed, i.e. have no
        // pending work.
        var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes)

        if (lane === NoLane) {
          // If all lanes have pending work, look for a lane that isn't currently
          // being worked on.
          lane = pickArbitraryLane(TransitionLanes & ~wipLanes)

          if (lane === NoLane) {
            // If everything is being worked on, pick any lane. This has the
            // effect of interrupting the current work-in-progress.
            lane = pickArbitraryLane(TransitionLanes)
          }
        }

        return lane
      } // To ensure consistency across multiple updates in the same event, this should
      // be pure function, so that it always returns the same lane for given inputs.

      function findRetryLane(wipLanes) {
        // This is a fork of `findUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        var lane = pickArbitraryLane(RetryLanes & ~wipLanes)

        if (lane === NoLane) {
          lane = pickArbitraryLane(RetryLanes)
        }

        return lane
      }

      function getHighestPriorityLane(lanes) {
        return lanes & -lanes
      }

      function getLowestPriorityLane(lanes) {
        // This finds the most significant non-zero bit.
        var index = 31 - clz32(lanes)
        return index < 0 ? NoLanes : 1 << index
      }

      function getEqualOrHigherPriorityLanes(lanes) {
        return (getLowestPriorityLane(lanes) << 1) - 1
      }

      function pickArbitraryLane(lanes) {
        // This wrapper function gets inlined. Only exists so to communicate that it
        // doesn't matter which bit is selected; you can pick any bit without
        // affecting the algorithms where its used. Here I'm using
        // getHighestPriorityLane because it requires the fewest operations.
        return getHighestPriorityLane(lanes)
      }

      function pickArbitraryLaneIndex(lanes) {
        return 31 - clz32(lanes)
      }

      function laneToIndex(lane) {
        return pickArbitraryLaneIndex(lane)
      }

      function includesSomeLane(a, b) {
        return (a & b) !== NoLanes
      }
      function isSubsetOfLanes(set, subset) {
        return (set & subset) === subset
      }
      function mergeLanes(a, b) {
        return a | b
      }
      function removeLanes(set, subset) {
        return set & ~subset
      } // Seems redundant, but it changes the type from a single lane (used for
      // updates) to a group of lanes (used for flushing work).

      function laneToLanes(lane) {
        return lane
      }
      function higherPriorityLane(a, b) {
        // This works because the bit ranges decrease in priority as you go left.
        return a !== NoLane && a < b ? a : b
      }
      function createLaneMap(initial) {
        // Intentionally pushing one by one.
        // https://v8.dev/blog/elements-kinds#avoid-creating-holes
        var laneMap = []

        for (var i = 0; i < TotalLanes; i++) {
          laneMap.push(initial)
        }

        return laneMap
      }
      function markRootUpdated(root, updateLane, eventTime) {
        root.pendingLanes |= updateLane // TODO: Theoretically, any update to any lane can unblock any other lane. But
        // it's not practical to try every single possible combination. We need a
        // heuristic to decide which lanes to attempt to render, and in which batches.
        // For now, we use the same heuristic as in the old ExpirationTimes model:
        // retry any lane at equal or lower priority, but don't try updates at higher
        // priority without also including the lower priority updates. This works well
        // when considering updates across different priority levels, but isn't
        // sufficient for updates within the same priority, since we want to treat
        // those updates as parallel.
        // Unsuspend any update at equal or lower priority.

        var higherPriorityLanes = updateLane - 1 // Turns 0b1000 into 0b0111

        root.suspendedLanes &= higherPriorityLanes
        root.pingedLanes &= higherPriorityLanes
        var eventTimes = root.eventTimes
        var index = laneToIndex(updateLane) // We can always overwrite an existing timestamp because we prefer the most
        // recent event, and we assume time is monotonically increasing.

        eventTimes[index] = eventTime
      }
      function markRootSuspended(root, suspendedLanes) {
        root.suspendedLanes |= suspendedLanes
        root.pingedLanes &= ~suspendedLanes // The suspended lanes are no longer CPU-bound. Clear their expiration times.

        var expirationTimes = root.expirationTimes
        var lanes = suspendedLanes

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes)
          var lane = 1 << index
          expirationTimes[index] = NoTimestamp
          lanes &= ~lane
        }
      }
      function markRootPinged(root, pingedLanes, eventTime) {
        root.pingedLanes |= root.suspendedLanes & pingedLanes
      }
      function markDiscreteUpdatesExpired(root) {
        root.expiredLanes |= InputDiscreteLanes & root.pendingLanes
      }
      function hasDiscreteLanes(lanes) {
        return (lanes & InputDiscreteLanes) !== NoLanes
      }
      function markRootMutableRead(root, updateLane) {
        root.mutableReadLanes |= updateLane & root.pendingLanes
      }
      function markRootFinished(root, remainingLanes) {
        var noLongerPendingLanes = root.pendingLanes & ~remainingLanes
        root.pendingLanes = remainingLanes // Let's try everything again

        root.suspendedLanes = 0
        root.pingedLanes = 0
        root.expiredLanes &= remainingLanes
        root.mutableReadLanes &= remainingLanes
        root.entangledLanes &= remainingLanes
        var entanglements = root.entanglements
        var eventTimes = root.eventTimes
        var expirationTimes = root.expirationTimes // Clear the lanes that no longer have pending work

        var lanes = noLongerPendingLanes

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes)
          var lane = 1 << index
          entanglements[index] = NoLanes
          eventTimes[index] = NoTimestamp
          expirationTimes[index] = NoTimestamp
          lanes &= ~lane
        }
      }
      function markRootEntangled(root, entangledLanes) {
        root.entangledLanes |= entangledLanes
        var entanglements = root.entanglements
        var lanes = entangledLanes

        while (lanes > 0) {
          var index = pickArbitraryLaneIndex(lanes)
          var lane = 1 << index
          entanglements[index] |= entangledLanes
          lanes &= ~lane
        }
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback // Count leading zeros. Only used on lanes, so assume input is an integer.
      // Based on:
      // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

      var log = Math.log
      var LN2 = Math.LN2

      function clz32Fallback(lanes) {
        if (lanes === 0) {
          return 32
        }

        return (31 - ((log(lanes) / LN2) | 0)) | 0
      }

      // Intentionally not named imports because Rollup would use dynamic dispatch for
      var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority,
        runWithPriority = Scheduler.unstable_runWithPriority // TODO: can we stop exporting these?

      var _enabled = true // This is exported in FB builds for use by legacy FB layer infra.
      // We'd like to remove this but it's not clear if this is safe.

      function setEnabled(enabled) {
        _enabled = !!enabled
      }
      function isEnabled() {
        return _enabled
      }
      function createEventListenerWrapperWithPriority(
        targetContainer,
        domEventName,
        eventSystemFlags
      ) {
        var eventPriority = getEventPriorityForPluginSystem(domEventName)
        var listenerWrapper

        switch (eventPriority) {
          case DiscreteEvent:
            listenerWrapper = dispatchDiscreteEvent
            break

          case UserBlockingEvent:
            listenerWrapper = dispatchUserBlockingUpdate
            break

          case ContinuousEvent:
          default:
            listenerWrapper = dispatchEvent
            break
        }

        return listenerWrapper.bind(
          null,
          domEventName,
          eventSystemFlags,
          targetContainer
        )
      }

      function dispatchDiscreteEvent(
        domEventName,
        eventSystemFlags,
        container,
        nativeEvent
      ) {
        {
          flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp)
        }

        discreteUpdates(
          dispatchEvent,
          domEventName,
          eventSystemFlags,
          container,
          nativeEvent
        )
      }

      function dispatchUserBlockingUpdate(
        domEventName,
        eventSystemFlags,
        container,
        nativeEvent
      ) {
        {
          runWithPriority(
            UserBlockingPriority$1,
            dispatchEvent.bind(
              null,
              domEventName,
              eventSystemFlags,
              container,
              nativeEvent
            )
          )
        }
      }

      function dispatchEvent(
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
      ) {
        if (!_enabled) {
          return
        }

        var allowReplay = true

        {
          // TODO: replaying capture phase events is currently broken
          // because we used to do it during top-level native bubble handlers
          // but now we use different bubble and capture handlers.
          // In eager mode, we attach capture listeners early, so we need
          // to filter them out until we fix the logic to handle them correctly.
          // This could've been outside the flag but I put it inside to reduce risk.
          allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0
        }

        if (
          allowReplay &&
          hasQueuedDiscreteEvents() &&
          isReplayableDiscreteEvent(domEventName)
        ) {
          // If we already have a queue of discrete events, and this is another discrete
          // event, then we can't dispatch it regardless of its target, since they
          // need to dispatch in order.
          queueDiscreteEvent(
            null, // Flags that we're not actually blocked on anything as far as we know.
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          )
          return
        }

        var blockedOn = attemptToDispatchEvent(
          domEventName,
          eventSystemFlags,
          targetContainer,
          nativeEvent
        )

        if (blockedOn === null) {
          // We successfully dispatched this event.
          if (allowReplay) {
            clearIfContinuousEvent(domEventName, nativeEvent)
          }

          return
        }

        if (allowReplay) {
          if (isReplayableDiscreteEvent(domEventName)) {
            // This this to be replayed later once the target is available.
            queueDiscreteEvent(
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )
            return
          }

          if (
            queueIfContinuousEvent(
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            )
          ) {
            return
          } // We need to clear only if we didn't queue because
          // queueing is accummulative.

          clearIfContinuousEvent(domEventName, nativeEvent)
        } // This is not replayable so we'll invoke it but without a target,
        // in case the event system needs to trace it.

        dispatchEventForPluginEventSystem(
          domEventName,
          eventSystemFlags,
          nativeEvent,
          null,
          targetContainer
        )
      } // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

      function attemptToDispatchEvent(
        domEventName,
        eventSystemFlags,
        targetContainer,
        nativeEvent
      ) {
        // TODO: Warn if _enabled is false.
        var nativeEventTarget = getEventTarget(nativeEvent)
        var targetInst = getClosestInstanceFromNode(nativeEventTarget)

        if (targetInst !== null) {
          var nearestMounted = getNearestMountedFiber(targetInst)

          if (nearestMounted === null) {
            // This tree has been unmounted already. Dispatch without a target.
            targetInst = null
          } else {
            var tag = nearestMounted.tag

            if (tag === SuspenseComponent) {
              var instance = getSuspenseInstanceFromFiber(nearestMounted)

              if (instance !== null) {
                // Queue the event to be replayed later. Abort dispatching since we
                // don't want this event dispatched twice through the event system.
                // TODO: If this is the first discrete event in the queue. Schedule an increased
                // priority for this boundary.
                return instance
              } // This shouldn't happen, something went wrong but to avoid blocking
              // the whole system, dispatch the event without a target.
              // TODO: Warn.

              targetInst = null
            } else if (tag === HostRoot) {
              var root = nearestMounted.stateNode

              if (root.hydrate) {
                // If this happens during a replay something went wrong and it might block
                // the whole system.
                return getContainerFromFiber(nearestMounted)
              }

              targetInst = null
            } else if (nearestMounted !== targetInst) {
              // If we get an event (ex: img onload) before committing that
              // component's mount, ignore it for now (that is, treat it as if it was an
              // event on a non-React tree). We might also consider queueing events and
              // dispatching them after the mount.
              targetInst = null
            }
          }
        }

        dispatchEventForPluginEventSystem(
          domEventName,
          eventSystemFlags,
          nativeEvent,
          targetInst,
          targetContainer
        ) // We're not blocked on anything.

        return null
      }

      function addEventBubbleListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, false)
        return listener
      }
      function addEventCaptureListener(target, eventType, listener) {
        target.addEventListener(eventType, listener, true)
        return listener
      }
      function addEventCaptureListenerWithPassiveFlag(
        target,
        eventType,
        listener,
        passive
      ) {
        target.addEventListener(eventType, listener, {
          capture: true,
          passive: passive,
        })
        return listener
      }
      function addEventBubbleListenerWithPassiveFlag(
        target,
        eventType,
        listener,
        passive
      ) {
        target.addEventListener(eventType, listener, {
          passive: passive,
        })
        return listener
      }

      /**
       * These variables store information about text content of a target node,
       * allowing comparison of content before and after a given event.
       *
       * Identify the node where selection currently begins, then observe
       * both its text content and its current position in the DOM. Since the
       * browser may natively replace the target node during composition, we can
       * use its position to find its replacement.
       *
       *
       */
      var root = null
      var startText = null
      var fallbackText = null
      function initialize(nativeEventTarget) {
        root = nativeEventTarget
        startText = getText()
        return true
      }
      function reset() {
        root = null
        startText = null
        fallbackText = null
      }
      function getData() {
        if (fallbackText) {
          return fallbackText
        }

        var start
        var startValue = startText
        var startLength = startValue.length
        var end
        var endValue = getText()
        var endLength = endValue.length

        for (start = 0; start < startLength; start++) {
          if (startValue[start] !== endValue[start]) {
            break
          }
        }

        var minEnd = startLength - start

        for (end = 1; end <= minEnd; end++) {
          if (startValue[startLength - end] !== endValue[endLength - end]) {
            break
          }
        }

        var sliceTail = end > 1 ? 1 - end : undefined
        fallbackText = endValue.slice(start, sliceTail)
        return fallbackText
      }
      function getText() {
        if ('value' in root) {
          return root.value
        }

        return root.textContent
      }

      /**
       * `charCode` represents the actual "character code" and is safe to use with
       * `String.fromCharCode`. As such, only keys that correspond to printable
       * characters produce a valid `charCode`, the only exception to this is Enter.
       * The Tab-key is considered non-printable and does not have a `charCode`,
       * presumably because it does not produce a tab-character in browsers.
       *
       * @param {object} nativeEvent Native browser event.
       * @return {number} Normalized `charCode` property.
       */
      function getEventCharCode(nativeEvent) {
        var charCode
        var keyCode = nativeEvent.keyCode

        if ('charCode' in nativeEvent) {
          charCode = nativeEvent.charCode // FF does not set `charCode` for the Enter-key, check against `keyCode`.

          if (charCode === 0 && keyCode === 13) {
            charCode = 13
          }
        } else {
          // IE8 does not implement `charCode`, but `keyCode` has the correct value.
          charCode = keyCode
        } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
        // report Enter as charCode 10 when ctrl is pressed.

        if (charCode === 10) {
          charCode = 13
        } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
        // Must not discard the (non-)printable Enter-key.

        if (charCode >= 32 || charCode === 13) {
          return charCode
        }

        return 0
      }

      function functionThatReturnsTrue() {
        return true
      }

      function functionThatReturnsFalse() {
        return false
      } // This is intentionally a factory so that we have different returned constructors.
      // If we had a single constructor, it would be megamorphic and engines would deopt.

      function createSyntheticEvent(Interface) {
        /**
         * Synthetic events are dispatched by event plugins, typically in response to a
         * top-level event delegation handler.
         *
         * These systems should generally use pooling to reduce the frequency of garbage
         * collection. The system should check `isPersistent` to determine whether the
         * event should be released into the pool after being dispatched. Users that
         * need a persisted event should invoke `persist`.
         *
         * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
         * normalizing browser quirks. Subclasses do not necessarily have to implement a
         * DOM interface; custom application-specific events can also subclass this.
         */
        function SyntheticBaseEvent(
          reactName,
          reactEventType,
          targetInst,
          nativeEvent,
          nativeEventTarget
        ) {
          this._reactName = reactName
          this._targetInst = targetInst
          this.type = reactEventType
          this.nativeEvent = nativeEvent
          this.target = nativeEventTarget
          this.currentTarget = null

          for (var _propName in Interface) {
            if (!Interface.hasOwnProperty(_propName)) {
              continue
            }

            var normalize = Interface[_propName]

            if (normalize) {
              this[_propName] = normalize(nativeEvent)
            } else {
              this[_propName] = nativeEvent[_propName]
            }
          }

          var defaultPrevented =
            nativeEvent.defaultPrevented != null
              ? nativeEvent.defaultPrevented
              : nativeEvent.returnValue === false

          if (defaultPrevented) {
            this.isDefaultPrevented = functionThatReturnsTrue
          } else {
            this.isDefaultPrevented = functionThatReturnsFalse
          }

          this.isPropagationStopped = functionThatReturnsFalse
          return this
        }

        _assign(SyntheticBaseEvent.prototype, {
          preventDefault: function () {
            this.defaultPrevented = true
            var event = this.nativeEvent

            if (!event) {
              return
            }

            if (event.preventDefault) {
              event.preventDefault() // $FlowFixMe - flow is not aware of `unknown` in IE
            } else if (typeof event.returnValue !== 'unknown') {
              event.returnValue = false
            }

            this.isDefaultPrevented = functionThatReturnsTrue
          },
          stopPropagation: function () {
            var event = this.nativeEvent

            if (!event) {
              return
            }

            if (event.stopPropagation) {
              event.stopPropagation() // $FlowFixMe - flow is not aware of `unknown` in IE
            } else if (typeof event.cancelBubble !== 'unknown') {
              // The ChangeEventPlugin registers a "propertychange" event for
              // IE. This event does not support bubbling or cancelling, and
              // any references to cancelBubble throw "Member not found".  A
              // typeof check of "unknown" circumvents this issue (and is also
              // IE specific).
              event.cancelBubble = true
            }

            this.isPropagationStopped = functionThatReturnsTrue
          },

          /**
           * We release all dispatched `SyntheticEvent`s after each event loop, adding
           * them back into the pool. This allows a way to hold onto a reference that
           * won't be added back into the pool.
           */
          persist: function () {
            // Modern event system doesn't use pooling.
          },

          /**
           * Checks if this event should be released back into the pool.
           *
           * @return {boolean} True if this should not be released, false otherwise.
           */
          isPersistent: functionThatReturnsTrue,
        })

        return SyntheticBaseEvent
      }
      /**
       * @interface Event
       * @see http://www.w3.org/TR/DOM-Level-3-Events/
       */

      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function (event) {
          return event.timeStamp || Date.now()
        },
        defaultPrevented: 0,
        isTrusted: 0,
      }
      var SyntheticEvent = createSyntheticEvent(EventInterface)

      var UIEventInterface = _assign({}, EventInterface, {
        view: 0,
        detail: 0,
      })

      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface)
      var lastMovementX
      var lastMovementY
      var lastMouseEvent

      function updateMouseMovementPolyfillState(event) {
        if (event !== lastMouseEvent) {
          if (lastMouseEvent && event.type === 'mousemove') {
            lastMovementX = event.screenX - lastMouseEvent.screenX
            lastMovementY = event.screenY - lastMouseEvent.screenY
          } else {
            lastMovementX = 0
            lastMovementY = 0
          }

          lastMouseEvent = event
        }
      }
      /**
       * @interface MouseEvent
       * @see http://www.w3.org/TR/DOM-Level-3-Events/
       */

      var MouseEventInterface = _assign({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function (event) {
          if (event.relatedTarget === undefined)
            return event.fromElement === event.srcElement
              ? event.toElement
              : event.fromElement
          return event.relatedTarget
        },
        movementX: function (event) {
          if ('movementX' in event) {
            return event.movementX
          }

          updateMouseMovementPolyfillState(event)
          return lastMovementX
        },
        movementY: function (event) {
          if ('movementY' in event) {
            return event.movementY
          } // Don't need to call updateMouseMovementPolyfillState() here
          // because it's guaranteed to have already run when movementX
          // was copied.

          return lastMovementY
        },
      })

      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface)
      /**
       * @interface DragEvent
       * @see http://www.w3.org/TR/DOM-Level-3-Events/
       */

      var DragEventInterface = _assign({}, MouseEventInterface, {
        dataTransfer: 0,
      })

      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface)
      /**
       * @interface FocusEvent
       * @see http://www.w3.org/TR/DOM-Level-3-Events/
       */

      var FocusEventInterface = _assign({}, UIEventInterface, {
        relatedTarget: 0,
      })

      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface)
      /**
       * @interface Event
       * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
       * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
       */

      var AnimationEventInterface = _assign({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0,
      })

      var SyntheticAnimationEvent = createSyntheticEvent(
        AnimationEventInterface
      )
      /**
       * @interface Event
       * @see http://www.w3.org/TR/clipboard-apis/
       */

      var ClipboardEventInterface = _assign({}, EventInterface, {
        clipboardData: function (event) {
          return 'clipboardData' in event
            ? event.clipboardData
            : window.clipboardData
        },
      })

      var SyntheticClipboardEvent = createSyntheticEvent(
        ClipboardEventInterface
      )
      /**
       * @interface Event
       * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
       */

      var CompositionEventInterface = _assign({}, EventInterface, {
        data: 0,
      })

      var SyntheticCompositionEvent = createSyntheticEvent(
        CompositionEventInterface
      )
      /**
       * @interface Event
       * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
       *      /#events-inputevents
       */
      // Happens to share the same list for now.

      var SyntheticInputEvent = SyntheticCompositionEvent
      /**
       * Normalization of deprecated HTML5 `key` values
       * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
       */

      var normalizeKey = {
        Esc: 'Escape',
        Spacebar: ' ',
        Left: 'ArrowLeft',
        Up: 'ArrowUp',
        Right: 'ArrowRight',
        Down: 'ArrowDown',
        Del: 'Delete',
        Win: 'OS',
        Menu: 'ContextMenu',
        Apps: 'ContextMenu',
        Scroll: 'ScrollLock',
        MozPrintableKey: 'Unidentified',
      }
      /**
       * Translation from legacy `keyCode` to HTML5 `key`
       * Only special keys supported, all others depend on keyboard layout or browser
       * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
       */

      var translateToKey = {
        8: 'Backspace',
        9: 'Tab',
        12: 'Clear',
        13: 'Enter',
        16: 'Shift',
        17: 'Control',
        18: 'Alt',
        19: 'Pause',
        20: 'CapsLock',
        27: 'Escape',
        32: ' ',
        33: 'PageUp',
        34: 'PageDown',
        35: 'End',
        36: 'Home',
        37: 'ArrowLeft',
        38: 'ArrowUp',
        39: 'ArrowRight',
        40: 'ArrowDown',
        45: 'Insert',
        46: 'Delete',
        112: 'F1',
        113: 'F2',
        114: 'F3',
        115: 'F4',
        116: 'F5',
        117: 'F6',
        118: 'F7',
        119: 'F8',
        120: 'F9',
        121: 'F10',
        122: 'F11',
        123: 'F12',
        144: 'NumLock',
        145: 'ScrollLock',
        224: 'Meta',
      }
      /**
       * @param {object} nativeEvent Native browser event.
       * @return {string} Normalized `key` property.
       */

      function getEventKey(nativeEvent) {
        if (nativeEvent.key) {
          // Normalize inconsistent values reported by browsers due to
          // implementations of a working draft specification.
          // FireFox implements `key` but returns `MozPrintableKey` for all
          // printable characters (normalized to `Unidentified`), ignore it.
          var key = normalizeKey[nativeEvent.key] || nativeEvent.key

          if (key !== 'Unidentified') {
            return key
          }
        } // Browser does not implement `key`, polyfill as much of it as we can.

        if (nativeEvent.type === 'keypress') {
          var charCode = getEventCharCode(nativeEvent) // The enter-key is technically both printable and non-printable and can
          // thus be captured by `keypress`, no other non-printable key should.

          return charCode === 13 ? 'Enter' : String.fromCharCode(charCode)
        }

        if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
          // While user keyboard layout determines the actual meaning of each
          // `keyCode` value, almost all function keys have a universal value.
          return translateToKey[nativeEvent.keyCode] || 'Unidentified'
        }

        return ''
      }
      /**
       * Translation from modifier key to the associated property in the event.
       * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
       */

      var modifierKeyToProp = {
        Alt: 'altKey',
        Control: 'ctrlKey',
        Meta: 'metaKey',
        Shift: 'shiftKey',
      } // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
      // getModifierState. If getModifierState is not supported, we map it to a set of
      // modifier keys exposed by the event. In this case, Lock-keys are not supported.

      function modifierStateGetter(keyArg) {
        var syntheticEvent = this
        var nativeEvent = syntheticEvent.nativeEvent

        if (nativeEvent.getModifierState) {
          return nativeEvent.getModifierState(keyArg)
        }

        var keyProp = modifierKeyToProp[keyArg]
        return keyProp ? !!nativeEvent[keyProp] : false
      }

      function getEventModifierState(nativeEvent) {
        return modifierStateGetter
      }
      /**
       * @interface KeyboardEvent
       * @see http://www.w3.org/TR/DOM-Level-3-Events/
       */

      var KeyboardEventInterface = _assign({}, UIEventInterface, {
        key: getEventKey,
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        // Legacy Interface
        charCode: function (event) {
          // `charCode` is the result of a KeyPress event and represents the value of
          // the actual printable character.
          // KeyPress is deprecated, but its replacement is not yet final and not
          // implemented in any major browser. Only KeyPress has charCode.
          if (event.type === 'keypress') {
            return getEventCharCode(event)
          }

          return 0
        },
        keyCode: function (event) {
          // `keyCode` is the result of a KeyDown/Up event and represents the value of
          // physical keyboard key.
          // The actual meaning of the value depends on the users' keyboard layout
          // which cannot be detected. Assuming that it is a US keyboard layout
          // provides a surprisingly accurate mapping for US and European users.
          // Due to this, it is left to the user to implement at this time.
          if (event.type === 'keydown' || event.type === 'keyup') {
            return event.keyCode
          }

          return 0
        },
        which: function (event) {
          // `which` is an alias for either `keyCode` or `charCode` depending on the
          // type of the event.
          if (event.type === 'keypress') {
            return getEventCharCode(event)
          }

          if (event.type === 'keydown' || event.type === 'keyup') {
            return event.keyCode
          }

          return 0
        },
      })

      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface)
      /**
       * @interface PointerEvent
       * @see http://www.w3.org/TR/pointerevents/
       */

      var PointerEventInterface = _assign({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0,
      })

      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface)
      /**
       * @interface TouchEvent
       * @see http://www.w3.org/TR/touch-events/
       */

      var TouchEventInterface = _assign({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState,
      })

      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface)
      /**
       * @interface Event
       * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
       * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
       */

      var TransitionEventInterface = _assign({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0,
      })

      var SyntheticTransitionEvent = createSyntheticEvent(
        TransitionEventInterface
      )
      /**
       * @interface WheelEvent
       * @see http://www.w3.org/TR/DOM-Level-3-Events/
       */

      var WheelEventInterface = _assign({}, MouseEventInterface, {
        deltaX: function (event) {
          return 'deltaX' in event
            ? event.deltaX // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
            : 'wheelDeltaX' in event
            ? -event.wheelDeltaX
            : 0
        },
        deltaY: function (event) {
          return 'deltaY' in event
            ? event.deltaY // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
            : 'wheelDeltaY' in event
            ? -event.wheelDeltaY // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
            : 'wheelDelta' in event
            ? -event.wheelDelta
            : 0
        },
        deltaZ: 0,
        // Browsers without "deltaMode" is reporting in raw wheel delta where one
        // notch on the scroll is always +/- 120, roughly equivalent to pixels.
        // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
        // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
        deltaMode: 0,
      })

      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface)

      var END_KEYCODES = [9, 13, 27, 32] // Tab, Return, Esc, Space

      var START_KEYCODE = 229
      var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window
      var documentMode = null

      if (canUseDOM && 'documentMode' in document) {
        documentMode = document.documentMode
      } // Webkit offers a very useful `textInput` event that can be used to
      // directly represent `beforeInput`. The IE `textinput` event is not as
      // useful, so we don't use it.

      var canUseTextInputEvent =
        canUseDOM && 'TextEvent' in window && !documentMode // In IE9+, we have access to composition events, but the data supplied
      // by the native compositionend event may be incorrect. Japanese ideographic
      // spaces, for instance (\u3000) are not recorded correctly.

      var useFallbackCompositionData =
        canUseDOM &&
        (!canUseCompositionEvent ||
          (documentMode && documentMode > 8 && documentMode <= 11))
      var SPACEBAR_CODE = 32
      var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE)

      function registerEvents() {
        registerTwoPhaseEvent('onBeforeInput', [
          'compositionend',
          'keypress',
          'textInput',
          'paste',
        ])
        registerTwoPhaseEvent('onCompositionEnd', [
          'compositionend',
          'focusout',
          'keydown',
          'keypress',
          'keyup',
          'mousedown',
        ])
        registerTwoPhaseEvent('onCompositionStart', [
          'compositionstart',
          'focusout',
          'keydown',
          'keypress',
          'keyup',
          'mousedown',
        ])
        registerTwoPhaseEvent('onCompositionUpdate', [
          'compositionupdate',
          'focusout',
          'keydown',
          'keypress',
          'keyup',
          'mousedown',
        ])
      } // Track whether we've ever handled a keypress on the space key.

      var hasSpaceKeypress = false
      /**
       * Return whether a native keypress event is assumed to be a command.
       * This is required because Firefox fires `keypress` events for key commands
       * (cut, copy, select-all, etc.) even though no character is inserted.
       */

      function isKeypressCommand(nativeEvent) {
        return (
          (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey)
        )
      }
      /**
       * Translate native top level events into event types.
       */

      function getCompositionEventType(domEventName) {
        switch (domEventName) {
          case 'compositionstart':
            return 'onCompositionStart'

          case 'compositionend':
            return 'onCompositionEnd'

          case 'compositionupdate':
            return 'onCompositionUpdate'
        }
      }
      /**
       * Does our fallback best-guess model think this event signifies that
       * composition has begun?
       */

      function isFallbackCompositionStart(domEventName, nativeEvent) {
        return (
          domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE
        )
      }
      /**
       * Does our fallback mode think that this event is the end of composition?
       */

      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case 'keyup':
            // Command keys insert or clear IME input.
            return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1

          case 'keydown':
            // Expect IME keyCode on each keydown. If we get any other
            // code we must have exited earlier.
            return nativeEvent.keyCode !== START_KEYCODE

          case 'keypress':
          case 'mousedown':
          case 'focusout':
            // Events are not possible without cancelling IME.
            return true

          default:
            return false
        }
      }
      /**
       * Google Input Tools provides composition data via a CustomEvent,
       * with the `data` property populated in the `detail` object. If this
       * is available on the event object, use it. If not, this is a plain
       * composition event and we have nothing special to extract.
       *
       * @param {object} nativeEvent
       * @return {?string}
       */

      function getDataFromCustomEvent(nativeEvent) {
        var detail = nativeEvent.detail

        if (typeof detail === 'object' && 'data' in detail) {
          return detail.data
        }

        return null
      }
      /**
       * Check if a composition event was triggered by Korean IME.
       * Our fallback mode does not work well with IE's Korean IME,
       * so just use native composition events when Korean IME is used.
       * Although CompositionEvent.locale property is deprecated,
       * it is available in IE, where our fallback mode is enabled.
       *
       * @param {object} nativeEvent
       * @return {boolean}
       */

      function isUsingKoreanIME(nativeEvent) {
        return nativeEvent.locale === 'ko'
      } // Track the current IME composition status, if any.

      var isComposing = false
      /**
       * @return {?object} A SyntheticCompositionEvent.
       */

      function extractCompositionEvent(
        dispatchQueue,
        domEventName,
        targetInst,
        nativeEvent,
        nativeEventTarget
      ) {
        var eventType
        var fallbackData

        if (canUseCompositionEvent) {
          eventType = getCompositionEventType(domEventName)
        } else if (!isComposing) {
          if (isFallbackCompositionStart(domEventName, nativeEvent)) {
            eventType = 'onCompositionStart'
          }
        } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
          eventType = 'onCompositionEnd'
        }

        if (!eventType) {
          return null
        }

        if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
          // The current composition is stored statically and must not be
          // overwritten while composition continues.
          if (!isComposing && eventType === 'onCompositionStart') {
            isComposing = initialize(nativeEventTarget)
          } else if (eventType === 'onCompositionEnd') {
            if (isComposing) {
              fallbackData = getData()
            }
          }
        }

        var listeners = accumulateTwoPhaseListeners(targetInst, eventType)

        if (listeners.length > 0) {
          var event = new SyntheticCompositionEvent(
            eventType,
            domEventName,
            null,
            nativeEvent,
            nativeEventTarget
          )
          dispatchQueue.push({
            event: event,
            listeners: listeners,
          })

          if (fallbackData) {
            // Inject data generated from fallback path into the synthetic event.
            // This matches the property of native CompositionEventInterface.
            event.data = fallbackData
          } else {
            var customData = getDataFromCustomEvent(nativeEvent)

            if (customData !== null) {
              event.data = customData
            }
          }
        }
      }

      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case 'compositionend':
            return getDataFromCustomEvent(nativeEvent)

          case 'keypress':
            /**
             * If native `textInput` events are available, our goal is to make
             * use of them. However, there is a special case: the spacebar key.
             * In Webkit, preventing default on a spacebar `textInput` event
             * cancels character insertion, but it *also* causes the browser
             * to fall back to its default spacebar behavior of scrolling the
             * page.
             *
             * Tracking at:
             * https://code.google.com/p/chromium/issues/detail?id=355103
             *
             * To avoid this issue, use the keypress event as if no `textInput`
             * event is available.
             */
            var which = nativeEvent.which

            if (which !== SPACEBAR_CODE) {
              return null
            }

            hasSpaceKeypress = true
            return SPACEBAR_CHAR

          case 'textInput':
            // Record the characters to be added to the DOM.
            var chars = nativeEvent.data // If it's a spacebar character, assume that we have already handled
            // it at the keypress level and bail immediately. Android Chrome
            // doesn't give us keycodes, so we need to ignore it.

            if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
              return null
            }

            return chars

          default:
            // For other native event types, do nothing.
            return null
        }
      }
      /**
       * For browsers that do not provide the `textInput` event, extract the
       * appropriate string to use for SyntheticInputEvent.
       */

      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        // If we are currently composing (IME) and using a fallback to do so,
        // try to extract the composed characters from the fallback object.
        // If composition event is available, we extract a string only at
        // compositionevent, otherwise extract it at fallback events.
        if (isComposing) {
          if (
            domEventName === 'compositionend' ||
            (!canUseCompositionEvent &&
              isFallbackCompositionEnd(domEventName, nativeEvent))
          ) {
            var chars = getData()
            reset()
            isComposing = false
            return chars
          }

          return null
        }

        switch (domEventName) {
          case 'paste':
            // If a paste event occurs after a keypress, throw out the input
            // chars. Paste events should not lead to BeforeInput events.
            return null

          case 'keypress':
            /**
             * As of v27, Firefox may fire keypress events even when no character
             * will be inserted. A few possibilities:
             *
             * - `which` is `0`. Arrow keys, Esc key, etc.
             *
             * - `which` is the pressed key code, but no char is available.
             *   Ex: 'AltGr + d` in Polish. There is no modified character for
             *   this key combination and no character is inserted into the
             *   document, but FF fires the keypress for char code `100` anyway.
             *   No `input` event will occur.
             *
             * - `which` is the pressed key code, but a command combination is
             *   being used. Ex: `Cmd+C`. No character is inserted, and no
             *   `input` event will occur.
             */
            if (!isKeypressCommand(nativeEvent)) {
              // IE fires the `keypress` event when a user types an emoji via
              // Touch keyboard of Windows.  In such a case, the `char` property
              // holds an emoji character like `\uD83D\uDE0A`.  Because its length
              // is 2, the property `which` does not represent an emoji correctly.
              // In such a case, we directly return the `char` property instead of
              // using `which`.
              if (nativeEvent.char && nativeEvent.char.length > 1) {
                return nativeEvent.char
              } else if (nativeEvent.which) {
                return String.fromCharCode(nativeEvent.which)
              }
            }

            return null

          case 'compositionend':
            return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)
              ? null
              : nativeEvent.data

          default:
            return null
        }
      }
      /**
       * Extract a SyntheticInputEvent for `beforeInput`, based on either native
       * `textInput` or fallback behavior.
       *
       * @return {?object} A SyntheticInputEvent.
       */

      function extractBeforeInputEvent(
        dispatchQueue,
        domEventName,
        targetInst,
        nativeEvent,
        nativeEventTarget
      ) {
        var chars

        if (canUseTextInputEvent) {
          chars = getNativeBeforeInputChars(domEventName, nativeEvent)
        } else {
          chars = getFallbackBeforeInputChars(domEventName, nativeEvent)
        } // If no characters are being inserted, no BeforeInput event should
        // be fired.

        if (!chars) {
          return null
        }

        var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput')

        if (listeners.length > 0) {
          var event = new SyntheticInputEvent(
            'onBeforeInput',
            'beforeinput',
            null,
            nativeEvent,
            nativeEventTarget
          )
          dispatchQueue.push({
            event: event,
            listeners: listeners,
          })
          event.data = chars
        }
      }
      /**
       * Create an `onBeforeInput` event to match
       * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
       *
       * This event plugin is based on the native `textInput` event
       * available in Chrome, Safari, Opera, and IE. This event fires after
       * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
       *
       * `beforeInput` is spec'd but not implemented in any browsers, and
       * the `input` event does not provide any useful information about what has
       * actually been added, contrary to the spec. Thus, `textInput` is the best
       * available event to identify the characters that have actually been inserted
       * into the target node.
       *
       * This plugin is also responsible for emitting `composition` events, thus
       * allowing us to share composition fallback code for both `beforeInput` and
       * `composition` event types.
       */

      function extractEvents(
        dispatchQueue,
        domEventName,
        targetInst,
        nativeEvent,
        nativeEventTarget,
        eventSystemFlags,
        targetContainer
      ) {
        extractCompositionEvent(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget
        )
        extractBeforeInputEvent(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget
        )
      }

      /**
       * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
       */
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        'datetime-local': true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true,
      }

      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase()

        if (nodeName === 'input') {
          return !!supportedInputTypes[elem.type]
        }

        if (nodeName === 'textarea') {
          return true
        }

        return false
      }

      /**
       * Checks if an event is supported in the current execution environment.
       *
       * NOTE: This will not work correctly for non-generic events such as `change`,
       * `reset`, `load`, `error`, and `select`.
       *
       * Borrows from Modernizr.
       *
       * @param {string} eventNameSuffix Event name, e.g. "click".
       * @return {boolean} True if the event is supported.
       * @internal
       * @license Modernizr 3.0.0pre (Custom Build) | MIT
       */

      function isEventSupported(eventNameSuffix) {
        if (!canUseDOM) {
          return false
        }

        var eventName = 'on' + eventNameSuffix
        var isSupported = eventName in document

        if (!isSupported) {
          var element = document.createElement('div')
          element.setAttribute(eventName, 'return;')
          isSupported = typeof element[eventName] === 'function'
        }

        return isSupported
      }

      function registerEvents$1() {
        registerTwoPhaseEvent('onChange', [
          'change',
          'click',
          'focusin',
          'focusout',
          'input',
          'keydown',
          'keyup',
          'selectionchange',
        ])
      }

      function createAndAccumulateChangeEvent(
        dispatchQueue,
        inst,
        nativeEvent,
        target
      ) {
        // Flag this event loop as needing state restore.
        enqueueStateRestore(target)
        var listeners = accumulateTwoPhaseListeners(inst, 'onChange')

        if (listeners.length > 0) {
          var event = new SyntheticEvent(
            'onChange',
            'change',
            null,
            nativeEvent,
            target
          )
          dispatchQueue.push({
            event: event,
            listeners: listeners,
          })
        }
      }
      /**
       * For IE shims
       */

      var activeElement = null
      var activeElementInst = null
      /**
       * SECTION: handle `change` event
       */

      function shouldUseChangeEvent(elem) {
        var nodeName = elem.nodeName && elem.nodeName.toLowerCase()
        return (
          nodeName === 'select' ||
          (nodeName === 'input' && elem.type === 'file')
        )
      }

      function manualDispatchChangeEvent(nativeEvent) {
        var dispatchQueue = []
        createAndAccumulateChangeEvent(
          dispatchQueue,
          activeElementInst,
          nativeEvent,
          getEventTarget(nativeEvent)
        ) // If change and propertychange bubbled, we'd just bind to it like all the
        // other events and have it go through ReactBrowserEventEmitter. Since it
        // doesn't, we manually listen for the events and so we have to enqueue and
        // process the abstract event manually.
        //
        // Batching is necessary here in order to ensure that all event handlers run
        // before the next rerender (including event handlers attached to ancestor
        // elements instead of directly on the input). Without this, controlled
        // components don't work properly in conjunction with event bubbling because
        // the component is rerendered and the value reverted before all the event
        // handlers can run. See https://github.com/facebook/react/issues/708.

        batchedUpdates(runEventInBatch, dispatchQueue)
      }

      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0)
      }

      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst)

        if (updateValueIfChanged(targetNode)) {
          return targetInst
        }
      }

      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if (domEventName === 'change') {
          return targetInst
        }
      }
      /**
       * SECTION: handle `input` event
       */

      var isInputEventSupported = false

      if (canUseDOM) {
        // IE9 claims to support the input event but fails to trigger it when
        // deleting text, so we ignore its input events.
        isInputEventSupported =
          isEventSupported('input') &&
          (!document.documentMode || document.documentMode > 9)
      }
      /**
       * (For IE <=9) Starts tracking propertychange events on the passed-in element
       * and override the value property so that we can distinguish user events from
       * value changes in JS.
       */

      function startWatchingForValueChange(target, targetInst) {
        activeElement = target
        activeElementInst = targetInst
        activeElement.attachEvent('onpropertychange', handlePropertyChange)
      }
      /**
       * (For IE <=9) Removes the event listeners from the currently-tracked element,
       * if any exists.
       */

      function stopWatchingForValueChange() {
        if (!activeElement) {
          return
        }

        activeElement.detachEvent('onpropertychange', handlePropertyChange)
        activeElement = null
        activeElementInst = null
      }
      /**
       * (For IE <=9) Handles a propertychange event, sending a `change` event if
       * the value of the active element has changed.
       */

      function handlePropertyChange(nativeEvent) {
        if (nativeEvent.propertyName !== 'value') {
          return
        }

        if (getInstIfValueChanged(activeElementInst)) {
          manualDispatchChangeEvent(nativeEvent)
        }
      }

      function handleEventsForInputEventPolyfill(
        domEventName,
        target,
        targetInst
      ) {
        if (domEventName === 'focusin') {
          // In IE9, propertychange fires for most input events but is buggy and
          // doesn't fire when text is deleted, but conveniently, selectionchange
          // appears to fire in all of the remaining cases so we catch those and
          // forward the event if the value has changed
          // In either case, we don't want to call the event handler if the value
          // is changed from JS so we redefine a setter for `.value` that updates
          // our activeElementValue variable, allowing us to ignore those changes
          //
          // stopWatching() should be a noop here but we call it just in case we
          // missed a blur event somehow.
          stopWatchingForValueChange()
          startWatchingForValueChange(target, targetInst)
        } else if (domEventName === 'focusout') {
          stopWatchingForValueChange()
        }
      } // For IE8 and IE9.

      function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
        if (
          domEventName === 'selectionchange' ||
          domEventName === 'keyup' ||
          domEventName === 'keydown'
        ) {
          // On the selectionchange event, the target is just document which isn't
          // helpful for us so just check activeElement instead.
          //
          // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
          // propertychange on the first input event after setting `value` from a
          // script and fires only keydown, keypress, keyup. Catching keyup usually
          // gets it and catching keydown lets us fire an event for the first
          // keystroke if user does a key repeat (it'll be a little delayed: right
          // before the second keystroke). Other input methods (e.g., paste) seem to
          // fire selectionchange normally.
          return getInstIfValueChanged(activeElementInst)
        }
      }
      /**
       * SECTION: handle `click` event
       */

      function shouldUseClickEvent(elem) {
        // Use the `click` event to detect changes to checkbox and radio inputs.
        // This approach works across all browsers, whereas `change` does not fire
        // until `blur` in IE8.
        var nodeName = elem.nodeName
        return (
          nodeName &&
          nodeName.toLowerCase() === 'input' &&
          (elem.type === 'checkbox' || elem.type === 'radio')
        )
      }

      function getTargetInstForClickEvent(domEventName, targetInst) {
        if (domEventName === 'click') {
          return getInstIfValueChanged(targetInst)
        }
      }

      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if (domEventName === 'input' || domEventName === 'change') {
          return getInstIfValueChanged(targetInst)
        }
      }

      function handleControlledInputBlur(node) {
        var state = node._wrapperState

        if (!state || !state.controlled || node.type !== 'number') {
          return
        }

        {
          // If controlled, assign the value attribute to the current value on blur
          setDefaultValue(node, 'number', node.value)
        }
      }
      /**
       * This plugin creates an `onChange` event that normalizes change events
       * across form elements. This event fires at a time when it's possible to
       * change the element's value without seeing a flicker.
       *
       * Supported elements are:
       * - input (see `isTextInputElement`)
       * - textarea
       * - select
       */

      function extractEvents$1(
        dispatchQueue,
        domEventName,
        targetInst,
        nativeEvent,
        nativeEventTarget,
        eventSystemFlags,
        targetContainer
      ) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window
        var getTargetInstFunc, handleEventFunc

        if (shouldUseChangeEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForChangeEvent
        } else if (isTextInputElement(targetNode)) {
          if (isInputEventSupported) {
            getTargetInstFunc = getTargetInstForInputOrChangeEvent
          } else {
            getTargetInstFunc = getTargetInstForInputEventPolyfill
            handleEventFunc = handleEventsForInputEventPolyfill
          }
        } else if (shouldUseClickEvent(targetNode)) {
          getTargetInstFunc = getTargetInstForClickEvent
        }

        if (getTargetInstFunc) {
          var inst = getTargetInstFunc(domEventName, targetInst)

          if (inst) {
            createAndAccumulateChangeEvent(
              dispatchQueue,
              inst,
              nativeEvent,
              nativeEventTarget
            )
            return
          }
        }

        if (handleEventFunc) {
          handleEventFunc(domEventName, targetNode, targetInst)
        } // When blurring, set the value attribute for number inputs

        if (domEventName === 'focusout') {
          handleControlledInputBlur(targetNode)
        }
      }

      function registerEvents$2() {
        registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover'])
        registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover'])
        registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover'])
        registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover'])
      }
      /**
       * For almost every interaction we care about, there will be both a top-level
       * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
       * we do not extract duplicate events. However, moving the mouse into the
       * browser from outside will not fire a `mouseout` event. In this case, we use
       * the `mouseover` top-level event.
       */

      function extractEvents$2(
        dispatchQueue,
        domEventName,
        targetInst,
        nativeEvent,
        nativeEventTarget,
        eventSystemFlags,
        targetContainer
      ) {
        var isOverEvent =
          domEventName === 'mouseover' || domEventName === 'pointerover'
        var isOutEvent =
          domEventName === 'mouseout' || domEventName === 'pointerout'

        if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
          // If this is an over event with a target, we might have already dispatched
          // the event in the out event of the other target. If this is replayed,
          // then it's because we couldn't dispatch against this target previously
          // so we have to do it now instead.
          var related = nativeEvent.relatedTarget || nativeEvent.fromElement

          if (related) {
            // If the related node is managed by React, we can assume that we have
            // already dispatched the corresponding events during its mouseout.
            if (
              getClosestInstanceFromNode(related) ||
              isContainerMarkedAsRoot(related)
            ) {
              return
            }
          }
        }

        if (!isOutEvent && !isOverEvent) {
          // Must not be a mouse or pointer in or out - ignoring.
          return
        }

        var win // TODO: why is this nullable in the types but we read from it?

        if (nativeEventTarget.window === nativeEventTarget) {
          // `nativeEventTarget` is probably a window object.
          win = nativeEventTarget
        } else {
          // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
          var doc = nativeEventTarget.ownerDocument

          if (doc) {
            win = doc.defaultView || doc.parentWindow
          } else {
            win = window
          }
        }

        var from
        var to

        if (isOutEvent) {
          var _related = nativeEvent.relatedTarget || nativeEvent.toElement

          from = targetInst
          to = _related ? getClosestInstanceFromNode(_related) : null

          if (to !== null) {
            var nearestMounted = getNearestMountedFiber(to)

            if (
              to !== nearestMounted ||
              (to.tag !== HostComponent && to.tag !== HostText)
            ) {
              to = null
            }
          }
        } else {
          // Moving to a node from outside the window.
          from = null
          to = targetInst
        }

        if (from === to) {
          // Nothing pertains to our managed components.
          return
        }

        var SyntheticEventCtor = SyntheticMouseEvent
        var leaveEventType = 'onMouseLeave'
        var enterEventType = 'onMouseEnter'
        var eventTypePrefix = 'mouse'

        if (domEventName === 'pointerout' || domEventName === 'pointerover') {
          SyntheticEventCtor = SyntheticPointerEvent
          leaveEventType = 'onPointerLeave'
          enterEventType = 'onPointerEnter'
          eventTypePrefix = 'pointer'
        }

        var fromNode = from == null ? win : getNodeFromInstance(from)
        var toNode = to == null ? win : getNodeFromInstance(to)
        var leave = new SyntheticEventCtor(
          leaveEventType,
          eventTypePrefix + 'leave',
          from,
          nativeEvent,
          nativeEventTarget
        )
        leave.target = fromNode
        leave.relatedTarget = toNode
        var enter = null // We should only process this nativeEvent if we are processing
        // the first ancestor. Next time, we will ignore the event.

        var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget)

        if (nativeTargetInst === targetInst) {
          var enterEvent = new SyntheticEventCtor(
            enterEventType,
            eventTypePrefix + 'enter',
            to,
            nativeEvent,
            nativeEventTarget
          )
          enterEvent.target = toNode
          enterEvent.relatedTarget = fromNode
          enter = enterEvent
        }

        accumulateEnterLeaveTwoPhaseListeners(
          dispatchQueue,
          leave,
          enter,
          from,
          to
        )
      }

      /**
       * inlined Object.is polyfill to avoid requiring consumers ship their own
       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
       */
      function is(x, y) {
        return (
          (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare
        )
      }

      var objectIs = typeof Object.is === 'function' ? Object.is : is

      var hasOwnProperty$2 = Object.prototype.hasOwnProperty
      /**
       * Performs equality by iterating through keys on an object and returning false
       * when any key has values which are not strictly equal between the arguments.
       * Returns true when the values of all keys are strictly equal.
       */

      function shallowEqual(objA, objB) {
        if (objectIs(objA, objB)) {
          return true
        }

        if (
          typeof objA !== 'object' ||
          objA === null ||
          typeof objB !== 'object' ||
          objB === null
        ) {
          return false
        }

        var keysA = Object.keys(objA)
        var keysB = Object.keys(objB)

        if (keysA.length !== keysB.length) {
          return false
        } // Test for A's keys different from B.

        for (var i = 0; i < keysA.length; i++) {
          if (
            !hasOwnProperty$2.call(objB, keysA[i]) ||
            !objectIs(objA[keysA[i]], objB[keysA[i]])
          ) {
            return false
          }
        }

        return true
      }

      /**
       * Given any node return the first leaf node without children.
       *
       * @param {DOMElement|DOMTextNode} node
       * @return {DOMElement|DOMTextNode}
       */

      function getLeafNode(node) {
        while (node && node.firstChild) {
          node = node.firstChild
        }

        return node
      }
      /**
       * Get the next sibling within a container. This will walk up the
       * DOM if a node's siblings have been exhausted.
       *
       * @param {DOMElement|DOMTextNode} node
       * @return {?DOMElement|DOMTextNode}
       */

      function getSiblingNode(node) {
        while (node) {
          if (node.nextSibling) {
            return node.nextSibling
          }

          node = node.parentNode
        }
      }
      /**
       * Get object describing the nodes which contain characters at offset.
       *
       * @param {DOMElement|DOMTextNode} root
       * @param {number} offset
       * @return {?object}
       */

      function getNodeForCharacterOffset(root, offset) {
        var node = getLeafNode(root)
        var nodeStart = 0
        var nodeEnd = 0

        while (node) {
          if (node.nodeType === TEXT_NODE) {
            nodeEnd = nodeStart + node.textContent.length

            if (nodeStart <= offset && nodeEnd >= offset) {
              return {
                node: node,
                offset: offset - nodeStart,
              }
            }

            nodeStart = nodeEnd
          }

          node = getLeafNode(getSiblingNode(node))
        }
      }

      /**
       * @param {DOMElement} outerNode
       * @return {?object}
       */

      function getOffsets(outerNode) {
        var ownerDocument = outerNode.ownerDocument
        var win = (ownerDocument && ownerDocument.defaultView) || window
        var selection = win.getSelection && win.getSelection()

        if (!selection || selection.rangeCount === 0) {
          return null
        }

        var anchorNode = selection.anchorNode,
          anchorOffset = selection.anchorOffset,
          focusNode = selection.focusNode,
          focusOffset = selection.focusOffset // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
        // up/down buttons on an <input type="number">. Anonymous divs do not seem to
        // expose properties, triggering a "Permission denied error" if any of its
        // properties are accessed. The only seemingly possible way to avoid erroring
        // is to access a property that typically works for non-anonymous divs and
        // catch any error that may otherwise arise. See
        // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

        try {
          /* eslint-disable no-unused-expressions */
          anchorNode.nodeType
          focusNode.nodeType
          /* eslint-enable no-unused-expressions */
        } catch (e) {
          return null
        }

        return getModernOffsetsFromPoints(
          outerNode,
          anchorNode,
          anchorOffset,
          focusNode,
          focusOffset
        )
      }
      /**
       * Returns {start, end} where `start` is the character/codepoint index of
       * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
       * `end` is the index of (focusNode, focusOffset).
       *
       * Returns null if you pass in garbage input but we should probably just crash.
       *
       * Exported only for testing.
       */

      function getModernOffsetsFromPoints(
        outerNode,
        anchorNode,
        anchorOffset,
        focusNode,
        focusOffset
      ) {
        var length = 0
        var start = -1
        var end = -1
        var indexWithinAnchor = 0
        var indexWithinFocus = 0
        var node = outerNode
        var parentNode = null

        outer: while (true) {
          var next = null

          while (true) {
            if (
              node === anchorNode &&
              (anchorOffset === 0 || node.nodeType === TEXT_NODE)
            ) {
              start = length + anchorOffset
            }

            if (
              node === focusNode &&
              (focusOffset === 0 || node.nodeType === TEXT_NODE)
            ) {
              end = length + focusOffset
            }

            if (node.nodeType === TEXT_NODE) {
              length += node.nodeValue.length
            }

            if ((next = node.firstChild) === null) {
              break
            } // Moving from `node` to its first child `next`.

            parentNode = node
            node = next
          }

          while (true) {
            if (node === outerNode) {
              // If `outerNode` has children, this is always the second time visiting
              // it. If it has no children, this is still the first loop, and the only
              // valid selection is anchorNode and focusNode both equal to this node
              // and both offsets 0, in which case we will have handled above.
              break outer
            }

            if (
              parentNode === anchorNode &&
              ++indexWithinAnchor === anchorOffset
            ) {
              start = length
            }

            if (
              parentNode === focusNode &&
              ++indexWithinFocus === focusOffset
            ) {
              end = length
            }

            if ((next = node.nextSibling) !== null) {
              break
            }

            node = parentNode
            parentNode = node.parentNode
          } // Moving from `node` to its next sibling `next`.

          node = next
        }

        if (start === -1 || end === -1) {
          // This should never happen. (Would happen if the anchor/focus nodes aren't
          // actually inside the passed-in node.)
          return null
        }

        return {
          start: start,
          end: end,
        }
      }
      /**
       * In modern non-IE browsers, we can support both forward and backward
       * selections.
       *
       * Note: IE10+ supports the Selection object, but it does not support
       * the `extend` method, which means that even in modern IE, it's not possible
       * to programmatically create a backward selection. Thus, for all IE
       * versions, we use the old IE API to create our selections.
       *
       * @param {DOMElement|DOMTextNode} node
       * @param {object} offsets
       */

      function setOffsets(node, offsets) {
        var doc = node.ownerDocument || document
        var win = (doc && doc.defaultView) || window // Edge fails with "Object expected" in some scenarios.
        // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
        // fails when pasting 100+ items)

        if (!win.getSelection) {
          return
        }

        var selection = win.getSelection()
        var length = node.textContent.length
        var start = Math.min(offsets.start, length)
        var end =
          offsets.end === undefined ? start : Math.min(offsets.end, length) // IE 11 uses modern selection, but doesn't support the extend method.
        // Flip backward selections, so we can set with a single range.

        if (!selection.extend && start > end) {
          var temp = end
          end = start
          start = temp
        }

        var startMarker = getNodeForCharacterOffset(node, start)
        var endMarker = getNodeForCharacterOffset(node, end)

        if (startMarker && endMarker) {
          if (
            selection.rangeCount === 1 &&
            selection.anchorNode === startMarker.node &&
            selection.anchorOffset === startMarker.offset &&
            selection.focusNode === endMarker.node &&
            selection.focusOffset === endMarker.offset
          ) {
            return
          }

          var range = doc.createRange()
          range.setStart(startMarker.node, startMarker.offset)
          selection.removeAllRanges()

          if (start > end) {
            selection.addRange(range)
            selection.extend(endMarker.node, endMarker.offset)
          } else {
            range.setEnd(endMarker.node, endMarker.offset)
            selection.addRange(range)
          }
        }
      }

      function isTextNode(node) {
        return node && node.nodeType === TEXT_NODE
      }

      function containsNode(outerNode, innerNode) {
        if (!outerNode || !innerNode) {
          return false
        } else if (outerNode === innerNode) {
          return true
        } else if (isTextNode(outerNode)) {
          return false
        } else if (isTextNode(innerNode)) {
          return containsNode(outerNode, innerNode.parentNode)
        } else if ('contains' in outerNode) {
          return outerNode.contains(innerNode)
        } else if (outerNode.compareDocumentPosition) {
          return !!(outerNode.compareDocumentPosition(innerNode) & 16)
        } else {
          return false
        }
      }

      function isInDocument(node) {
        return (
          node &&
          node.ownerDocument &&
          containsNode(node.ownerDocument.documentElement, node)
        )
      }

      function isSameOriginFrame(iframe) {
        try {
          // Accessing the contentDocument of a HTMLIframeElement can cause the browser
          // to throw, e.g. if it has a cross-origin src attribute.
          // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
          // iframe.contentDocument.defaultView;
          // A safety way is to access one of the cross origin properties: Window or Location
          // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
          // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
          return typeof iframe.contentWindow.location.href === 'string'
        } catch (err) {
          return false
        }
      }

      function getActiveElementDeep() {
        var win = window
        var element = getActiveElement()

        while (element instanceof win.HTMLIFrameElement) {
          if (isSameOriginFrame(element)) {
            win = element.contentWindow
          } else {
            return element
          }

          element = getActiveElement(win.document)
        }

        return element
      }
      /**
       * @ReactInputSelection: React input selection module. Based on Selection.js,
       * but modified to be suitable for react and has a couple of bug fixes (doesn't
       * assume buttons have range selections allowed).
       * Input selection module for React.
       */

      /**
       * @hasSelectionCapabilities: we get the element types that support selection
       * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
       * and `selectionEnd` rows.
       */

      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase()
        return (
          nodeName &&
          ((nodeName === 'input' &&
            (elem.type === 'text' ||
              elem.type === 'search' ||
              elem.type === 'tel' ||
              elem.type === 'url' ||
              elem.type === 'password')) ||
            nodeName === 'textarea' ||
            elem.contentEditable === 'true')
        )
      }
      function getSelectionInformation() {
        var focusedElem = getActiveElementDeep()
        return {
          focusedElem: focusedElem,
          selectionRange: hasSelectionCapabilities(focusedElem)
            ? getSelection(focusedElem)
            : null,
        }
      }
      /**
       * @restoreSelection: If any selection information was potentially lost,
       * restore it. This is useful when performing operations that could remove dom
       * nodes and place them back in, resulting in focus being lost.
       */

      function restoreSelection(priorSelectionInformation) {
        var curFocusedElem = getActiveElementDeep()
        var priorFocusedElem = priorSelectionInformation.focusedElem
        var priorSelectionRange = priorSelectionInformation.selectionRange

        if (
          curFocusedElem !== priorFocusedElem &&
          isInDocument(priorFocusedElem)
        ) {
          if (
            priorSelectionRange !== null &&
            hasSelectionCapabilities(priorFocusedElem)
          ) {
            setSelection(priorFocusedElem, priorSelectionRange)
          } // Focusing a node can change the scroll position, which is undesirable

          var ancestors = []
          var ancestor = priorFocusedElem

          while ((ancestor = ancestor.parentNode)) {
            if (ancestor.nodeType === ELEMENT_NODE) {
              ancestors.push({
                element: ancestor,
                left: ancestor.scrollLeft,
                top: ancestor.scrollTop,
              })
            }
          }

          if (typeof priorFocusedElem.focus === 'function') {
            priorFocusedElem.focus()
          }

          for (var i = 0; i < ancestors.length; i++) {
            var info = ancestors[i]
            info.element.scrollLeft = info.left
            info.element.scrollTop = info.top
          }
        }
      }
      /**
       * @getSelection: Gets the selection bounds of a focused textarea, input or
       * contentEditable node.
       * -@input: Look up selection bounds of this input
       * -@return {start: selectionStart, end: selectionEnd}
       */

      function getSelection(input) {
        var selection

        if ('selectionStart' in input) {
          // Modern browser with input or textarea.
          selection = {
            start: input.selectionStart,
            end: input.selectionEnd,
          }
        } else {
          // Content editable or old IE textarea.
          selection = getOffsets(input)
        }

        return (
          selection || {
            start: 0,
            end: 0,
          }
        )
      }
      /**
       * @setSelection: Sets the selection bounds of a textarea or input and focuses
       * the input.
       * -@input     Set selection bounds of this input or textarea
       * -@offsets   Object of same form that is returned from get*
       */

      function setSelection(input, offsets) {
        var start = offsets.start
        var end = offsets.end

        if (end === undefined) {
          end = start
        }

        if ('selectionStart' in input) {
          input.selectionStart = start
          input.selectionEnd = Math.min(end, input.value.length)
        } else {
          setOffsets(input, offsets)
        }
      }

      var skipSelectionChangeEvent =
        canUseDOM && 'documentMode' in document && document.documentMode <= 11

      function registerEvents$3() {
        registerTwoPhaseEvent('onSelect', [
          'focusout',
          'contextmenu',
          'dragend',
          'focusin',
          'keydown',
          'keyup',
          'mousedown',
          'mouseup',
          'selectionchange',
        ])
      }

      var activeElement$1 = null
      var activeElementInst$1 = null
      var lastSelection = null
      var mouseDown = false
      /**
       * Get an object which is a unique representation of the current selection.
       *
       * The return value will not be consistent across nodes or browsers, but
       * two identical selections on the same node will return identical objects.
       */

      function getSelection$1(node) {
        if ('selectionStart' in node && hasSelectionCapabilities(node)) {
          return {
            start: node.selectionStart,
            end: node.selectionEnd,
          }
        } else {
          var win =
            (node.ownerDocument && node.ownerDocument.defaultView) || window
          var selection = win.getSelection()
          return {
            anchorNode: selection.anchorNode,
            anchorOffset: selection.anchorOffset,
            focusNode: selection.focusNode,
            focusOffset: selection.focusOffset,
          }
        }
      }
      /**
       * Get document associated with the event target.
       */

      function getEventTargetDocument(eventTarget) {
        return eventTarget.window === eventTarget
          ? eventTarget.document
          : eventTarget.nodeType === DOCUMENT_NODE
          ? eventTarget
          : eventTarget.ownerDocument
      }
      /**
       * Poll selection to see whether it's changed.
       *
       * @param {object} nativeEvent
       * @param {object} nativeEventTarget
       * @return {?SyntheticEvent}
       */

      function constructSelectEvent(
        dispatchQueue,
        nativeEvent,
        nativeEventTarget
      ) {
        // Ensure we have the right element, and that the user is not dragging a
        // selection (this matches native `select` event behavior). In HTML5, select
        // fires only on input and textarea thus if there's no focused element we
        // won't dispatch.
        var doc = getEventTargetDocument(nativeEventTarget)

        if (
          mouseDown ||
          activeElement$1 == null ||
          activeElement$1 !== getActiveElement(doc)
        ) {
          return
        } // Only fire when selection has actually changed.

        var currentSelection = getSelection$1(activeElement$1)

        if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
          lastSelection = currentSelection
          var listeners = accumulateTwoPhaseListeners(
            activeElementInst$1,
            'onSelect'
          )

          if (listeners.length > 0) {
            var event = new SyntheticEvent(
              'onSelect',
              'select',
              null,
              nativeEvent,
              nativeEventTarget
            )
            dispatchQueue.push({
              event: event,
              listeners: listeners,
            })
            event.target = activeElement$1
          }
        }
      }
      /**
       * This plugin creates an `onSelect` event that normalizes select events
       * across form elements.
       *
       * Supported elements are:
       * - input (see `isTextInputElement`)
       * - textarea
       * - contentEditable
       *
       * This differs from native browser implementations in the following ways:
       * - Fires on contentEditable fields as well as inputs.
       * - Fires for collapsed selection.
       * - Fires after user input.
       */

      function extractEvents$3(
        dispatchQueue,
        domEventName,
        targetInst,
        nativeEvent,
        nativeEventTarget,
        eventSystemFlags,
        targetContainer
      ) {
        var targetNode = targetInst ? getNodeFromInstance(targetInst) : window

        switch (domEventName) {
          // Track the input node that has focus.
          case 'focusin':
            if (
              isTextInputElement(targetNode) ||
              targetNode.contentEditable === 'true'
            ) {
              activeElement$1 = targetNode
              activeElementInst$1 = targetInst
              lastSelection = null
            }

            break

          case 'focusout':
            activeElement$1 = null
            activeElementInst$1 = null
            lastSelection = null
            break
          // Don't fire the event while the user is dragging. This matches the
          // semantics of the native select event.

          case 'mousedown':
            mouseDown = true
            break

          case 'contextmenu':
          case 'mouseup':
          case 'dragend':
            mouseDown = false
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget)
            break
          // Chrome and IE fire non-standard event when selection is changed (and
          // sometimes when it hasn't). IE's event fires out of order with respect
          // to key and input events on deletion, so we discard it.
          //
          // Firefox doesn't support selectionchange, so check selection status
          // after each key entry. The selection changes after keydown and before
          // keyup, but we check on keydown as well in the case of holding down a
          // key, when multiple keydown events are fired but only one keyup is.
          // This is also our approach for IE handling, for the reason above.

          case 'selectionchange':
            if (skipSelectionChangeEvent) {
              break
            }

          // falls through

          case 'keydown':
          case 'keyup':
            constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget)
        }
      }

      function extractEvents$4(
        dispatchQueue,
        domEventName,
        targetInst,
        nativeEvent,
        nativeEventTarget,
        eventSystemFlags,
        targetContainer
      ) {
        var reactName = topLevelEventsToReactNames.get(domEventName)

        if (reactName === undefined) {
          return
        }

        var SyntheticEventCtor = SyntheticEvent
        var reactEventType = domEventName

        switch (domEventName) {
          case 'keypress':
            // Firefox creates a keypress event for function keys too. This removes
            // the unwanted keypress events. Enter is however both printable and
            // non-printable. One would expect Tab to be as well (but it isn't).
            if (getEventCharCode(nativeEvent) === 0) {
              return
            }

          /* falls through */

          case 'keydown':
          case 'keyup':
            SyntheticEventCtor = SyntheticKeyboardEvent
            break

          case 'focusin':
            reactEventType = 'focus'
            SyntheticEventCtor = SyntheticFocusEvent
            break

          case 'focusout':
            reactEventType = 'blur'
            SyntheticEventCtor = SyntheticFocusEvent
            break

          case 'beforeblur':
          case 'afterblur':
            SyntheticEventCtor = SyntheticFocusEvent
            break

          case 'click':
            // Firefox creates a click event on right mouse clicks. This removes the
            // unwanted click events.
            if (nativeEvent.button === 2) {
              return
            }

          /* falls through */

          case 'auxclick':
          case 'dblclick':
          case 'mousedown':
          case 'mousemove':
          case 'mouseup': // TODO: Disabled elements should not respond to mouse events

          /* falls through */

          case 'mouseout':
          case 'mouseover':
          case 'contextmenu':
            SyntheticEventCtor = SyntheticMouseEvent
            break

          case 'drag':
          case 'dragend':
          case 'dragenter':
          case 'dragexit':
          case 'dragleave':
          case 'dragover':
          case 'dragstart':
          case 'drop':
            SyntheticEventCtor = SyntheticDragEvent
            break

          case 'touchcancel':
          case 'touchend':
          case 'touchmove':
          case 'touchstart':
            SyntheticEventCtor = SyntheticTouchEvent
            break

          case ANIMATION_END:
          case ANIMATION_ITERATION:
          case ANIMATION_START:
            SyntheticEventCtor = SyntheticAnimationEvent
            break

          case TRANSITION_END:
            SyntheticEventCtor = SyntheticTransitionEvent
            break

          case 'scroll':
            SyntheticEventCtor = SyntheticUIEvent
            break

          case 'wheel':
            SyntheticEventCtor = SyntheticWheelEvent
            break

          case 'copy':
          case 'cut':
          case 'paste':
            SyntheticEventCtor = SyntheticClipboardEvent
            break

          case 'gotpointercapture':
          case 'lostpointercapture':
          case 'pointercancel':
          case 'pointerdown':
          case 'pointermove':
          case 'pointerout':
          case 'pointerover':
          case 'pointerup':
            SyntheticEventCtor = SyntheticPointerEvent
            break
        }

        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0

        {
          // Some events don't bubble in the browser.
          // In the past, React has always bubbled them, but this can be surprising.
          // We're going to try aligning closer to the browser behavior by not bubbling
          // them in React either. We'll start by not bubbling onScroll, and then expand.
          var accumulateTargetOnly =
            !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === 'scroll'

          var _listeners = accumulateSinglePhaseListeners(
            targetInst,
            reactName,
            nativeEvent.type,
            inCapturePhase,
            accumulateTargetOnly
          )

          if (_listeners.length > 0) {
            // Intentionally create event lazily.
            var _event = new SyntheticEventCtor(
              reactName,
              reactEventType,
              null,
              nativeEvent,
              nativeEventTarget
            )

            dispatchQueue.push({
              event: _event,
              listeners: _listeners,
            })
          }
        }
      }

      // TODO: remove top-level side effect.
      registerSimpleEvents()
      registerEvents$2()
      registerEvents$1()
      registerEvents$3()
      registerEvents()

      function extractEvents$5(
        dispatchQueue,
        domEventName,
        targetInst,
        nativeEvent,
        nativeEventTarget,
        eventSystemFlags,
        targetContainer
      ) {
        // TODO: we should remove the concept of a "SimpleEventPlugin".
        // This is the basic functionality of the event system. All
        // the other plugins are essentially polyfills. So the plugin
        // should probably be inlined somewhere and have its logic
        // be core the to event system. This would potentially allow
        // us to ship builds of React without the polyfilled plugins below.
        extractEvents$4(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget,
          eventSystemFlags
        )
        var shouldProcessPolyfillPlugins =
          (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0 // We don't process these events unless we are in the
        // event's native "bubble" phase, which means that we're
        // not in the capture phase. That's because we emulate
        // the capture phase here still. This is a trade-off,
        // because in an ideal world we would not emulate and use
        // the phases properly, like we do with the SimpleEvent
        // plugin. However, the plugins below either expect
        // emulation (EnterLeave) or use state localized to that
        // plugin (BeforeInput, Change, Select). The state in
        // these modules complicates things, as you'll essentially
        // get the case where the capture phase event might change
        // state, only for the following bubble event to come in
        // later and not trigger anything as the state now
        // invalidates the heuristics of the event plugin. We
        // could alter all these plugins to work in such ways, but
        // that might cause other unknown side-effects that we
        // can't forsee right now.

        if (shouldProcessPolyfillPlugins) {
          extractEvents$2(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget,
            eventSystemFlags
          )
          extractEvents$1(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget
          )
          extractEvents$3(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget
          )
          extractEvents(
            dispatchQueue,
            domEventName,
            targetInst,
            nativeEvent,
            nativeEventTarget
          )
        }
      } // List of events that need to be individually attached to media elements.

      var mediaEventTypes = [
        'abort',
        'canplay',
        'canplaythrough',
        'durationchange',
        'emptied',
        'encrypted',
        'ended',
        'error',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'seeked',
        'seeking',
        'stalled',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting',
      ] // We should not delegate these events to the container, but rather
      // set them on the actual target element itself. This is primarily
      // because these events do not consistently bubble in the DOM.

      var nonDelegatedEvents = new Set(
        ['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(
          mediaEventTypes
        )
      )

      function executeDispatch(event, listener, currentTarget) {
        var type = event.type || 'unknown-event'
        event.currentTarget = currentTarget
        invokeGuardedCallbackAndCatchFirstError(
          type,
          listener,
          undefined,
          event
        )
        event.currentTarget = null
      }

      function processDispatchQueueItemsInOrder(
        event,
        dispatchListeners,
        inCapturePhase
      ) {
        var previousInstance

        if (inCapturePhase) {
          for (var i = dispatchListeners.length - 1; i >= 0; i--) {
            var _dispatchListeners$i = dispatchListeners[i],
              instance = _dispatchListeners$i.instance,
              currentTarget = _dispatchListeners$i.currentTarget,
              listener = _dispatchListeners$i.listener

            if (instance !== previousInstance && event.isPropagationStopped()) {
              return
            }

            executeDispatch(event, listener, currentTarget)
            previousInstance = instance
          }
        } else {
          for (var _i = 0; _i < dispatchListeners.length; _i++) {
            var _dispatchListeners$_i = dispatchListeners[_i],
              _instance = _dispatchListeners$_i.instance,
              _currentTarget = _dispatchListeners$_i.currentTarget,
              _listener = _dispatchListeners$_i.listener

            if (
              _instance !== previousInstance &&
              event.isPropagationStopped()
            ) {
              return
            }

            executeDispatch(event, _listener, _currentTarget)
            previousInstance = _instance
          }
        }
      }

      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0

        for (var i = 0; i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i],
            event = _dispatchQueue$i.event,
            listeners = _dispatchQueue$i.listeners
          processDispatchQueueItemsInOrder(event, listeners, inCapturePhase) //  event system doesn't use pooling.
        } // This would be a good time to rethrow if any of the event handlers threw.

        rethrowCaughtError()
      }

      function dispatchEventsForPlugins(
        domEventName,
        eventSystemFlags,
        nativeEvent,
        targetInst,
        targetContainer
      ) {
        var nativeEventTarget = getEventTarget(nativeEvent)
        var dispatchQueue = []
        extractEvents$5(
          dispatchQueue,
          domEventName,
          targetInst,
          nativeEvent,
          nativeEventTarget,
          eventSystemFlags
        )
        processDispatchQueue(dispatchQueue, eventSystemFlags)
      }

      function listenToNonDelegatedEvent(domEventName, targetElement) {
        var isCapturePhaseListener = false
        var listenerSet = getEventListenerSet(targetElement)
        var listenerSetKey = getListenerSetKey(
          domEventName,
          isCapturePhaseListener
        )

        if (!listenerSet.has(listenerSetKey)) {
          addTrappedEventListener(
            targetElement,
            domEventName,
            IS_NON_DELEGATED,
            isCapturePhaseListener
          )
          listenerSet.add(listenerSetKey)
        }
      }
      var listeningMarker =
        '_reactListening' + Math.random().toString(36).slice(2)
      function listenToAllSupportedEvents(rootContainerElement) {
        {
          if (rootContainerElement[listeningMarker]) {
            // Performance optimization: don't iterate through events
            // for the same portal container or root node more than once.
            // TODO: once we remove the flag, we may be able to also
            // remove some of the bookkeeping maps used for laziness.
            return
          }

          rootContainerElement[listeningMarker] = true
          allNativeEvents.forEach(function (domEventName) {
            if (!nonDelegatedEvents.has(domEventName)) {
              listenToNativeEvent(
                domEventName,
                false,
                rootContainerElement,
                null
              )
            }

            listenToNativeEvent(domEventName, true, rootContainerElement, null)
          })
        }
      }
      function listenToNativeEvent(
        domEventName,
        isCapturePhaseListener,
        rootContainerElement,
        targetElement
      ) {
        var eventSystemFlags =
          arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0
        var target = rootContainerElement // selectionchange needs to be attached to the document
        // otherwise it won't capture incoming events that are only
        // triggered on the document directly.

        if (
          domEventName === 'selectionchange' &&
          rootContainerElement.nodeType !== DOCUMENT_NODE
        ) {
          target = rootContainerElement.ownerDocument
        } // If the event can be delegated (or is capture phase), we can
        // register it to the root container. Otherwise, we should
        // register the event to the target element and mark it as
        // a non-delegated event.

        if (
          targetElement !== null &&
          !isCapturePhaseListener &&
          nonDelegatedEvents.has(domEventName)
        ) {
          // For all non-delegated events, apart from scroll, we attach
          // their event listeners to the respective elements that their
          // events fire on. That means we can skip this step, as event
          // listener has already been added previously. However, we
          // special case the scroll event because the reality is that any
          // element can scroll.
          // TODO: ideally, we'd eventually apply the same logic to all
          // events from the nonDelegatedEvents list. Then we can remove
          // this special case and use the same logic for all events.
          if (domEventName !== 'scroll') {
            return
          }

          eventSystemFlags |= IS_NON_DELEGATED
          target = targetElement
        }

        var listenerSet = getEventListenerSet(target)
        var listenerSetKey = getListenerSetKey(
          domEventName,
          isCapturePhaseListener
        ) // If the listener entry is empty or we should upgrade, then
        // we need to trap an event listener onto the target.

        if (!listenerSet.has(listenerSetKey)) {
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE
          }

          addTrappedEventListener(
            target,
            domEventName,
            eventSystemFlags,
            isCapturePhaseListener
          )
          listenerSet.add(listenerSetKey)
        }
      }

      function addTrappedEventListener(
        targetContainer,
        domEventName,
        eventSystemFlags,
        isCapturePhaseListener,
        isDeferredListenerForLegacyFBSupport
      ) {
        var listener = createEventListenerWrapperWithPriority(
          targetContainer,
          domEventName,
          eventSystemFlags
        ) // If passive option is not supported, then the event will be
        // active and not passive.

        var isPassiveListener = undefined

        if (passiveBrowserEventsSupported) {
          // Browsers introduced an intervention, making these events
          // passive by default on document. React doesn't bind them
          // to document anymore, but changing this now would undo
          // the performance wins from the change. So we emulate
          // the existing behavior manually on the roots now.
          // https://github.com/facebook/react/issues/19651
          if (
            domEventName === 'touchstart' ||
            domEventName === 'touchmove' ||
            domEventName === 'wheel'
          ) {
            isPassiveListener = true
          }
        }

        targetContainer = targetContainer

        if (isCapturePhaseListener) {
          if (isPassiveListener !== undefined) {
            addEventCaptureListenerWithPassiveFlag(
              targetContainer,
              domEventName,
              listener,
              isPassiveListener
            )
          } else {
            addEventCaptureListener(targetContainer, domEventName, listener)
          }
        } else {
          if (isPassiveListener !== undefined) {
            addEventBubbleListenerWithPassiveFlag(
              targetContainer,
              domEventName,
              listener,
              isPassiveListener
            )
          } else {
            addEventBubbleListener(targetContainer, domEventName, listener)
          }
        }
      }

      function isMatchingRootContainer(grandContainer, targetContainer) {
        return (
          grandContainer === targetContainer ||
          (grandContainer.nodeType === COMMENT_NODE &&
            grandContainer.parentNode === targetContainer)
        )
      }

      function dispatchEventForPluginEventSystem(
        domEventName,
        eventSystemFlags,
        nativeEvent,
        targetInst,
        targetContainer
      ) {
        var ancestorInst = targetInst

        if (
          (eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 &&
          (eventSystemFlags & IS_NON_DELEGATED) === 0
        ) {
          var targetContainerNode = targetContainer // If we are using the legacy FB support flag, we

          if (targetInst !== null) {
            // The below logic attempts to work out if we need to change
            // the target fiber to a different ancestor. We had similar logic
            // in the legacy event system, except the big difference between
            // systems is that the modern event system now has an event listener
            // attached to each React Root and React Portal Root. Together,
            // the DOM nodes representing these roots are the "rootContainer".
            // To figure out which ancestor instance we should use, we traverse
            // up the fiber tree from the target instance and attempt to find
            // root boundaries that match that of our current "rootContainer".
            // If we find that "rootContainer", we find the parent fiber
            // sub-tree for that root and make that our ancestor instance.
            var node = targetInst

            mainLoop: while (true) {
              if (node === null) {
                return
              }

              var nodeTag = node.tag

              if (nodeTag === HostRoot || nodeTag === HostPortal) {
                var container = node.stateNode.containerInfo

                if (isMatchingRootContainer(container, targetContainerNode)) {
                  break
                }

                if (nodeTag === HostPortal) {
                  // The target is a portal, but it's not the rootContainer we're looking for.
                  // Normally portals handle their own events all the way down to the root.
                  // So we should be able to stop now. However, we don't know if this portal
                  // was part of *our* root.
                  var grandNode = node.return

                  while (grandNode !== null) {
                    var grandTag = grandNode.tag

                    if (grandTag === HostRoot || grandTag === HostPortal) {
                      var grandContainer = grandNode.stateNode.containerInfo

                      if (
                        isMatchingRootContainer(
                          grandContainer,
                          targetContainerNode
                        )
                      ) {
                        // This is the rootContainer we're looking for and we found it as
                        // a parent of the Portal. That means we can ignore it because the
                        // Portal will bubble through to us.
                        return
                      }
                    }

                    grandNode = grandNode.return
                  }
                } // Now we need to find it's corresponding host fiber in the other
                // tree. To do this we can use getClosestInstanceFromNode, but we
                // need to validate that the fiber is a host instance, otherwise
                // we need to traverse up through the DOM till we find the correct
                // node that is from the other tree.

                while (container !== null) {
                  var parentNode = getClosestInstanceFromNode(container)

                  if (parentNode === null) {
                    return
                  }

                  var parentTag = parentNode.tag

                  if (parentTag === HostComponent || parentTag === HostText) {
                    node = ancestorInst = parentNode
                    continue mainLoop
                  }

                  container = container.parentNode
                }
              }

              node = node.return
            }
          }
        }

        batchedEventUpdates(function () {
          return dispatchEventsForPlugins(
            domEventName,
            eventSystemFlags,
            nativeEvent,
            ancestorInst
          )
        })
      }

      function createDispatchListener(instance, listener, currentTarget) {
        return {
          instance: instance,
          listener: listener,
          currentTarget: currentTarget,
        }
      }

      function accumulateSinglePhaseListeners(
        targetFiber,
        reactName,
        nativeEventType,
        inCapturePhase,
        accumulateTargetOnly
      ) {
        var captureName = reactName !== null ? reactName + 'Capture' : null
        var reactEventName = inCapturePhase ? captureName : reactName
        var listeners = []
        var instance = targetFiber
        var lastHostComponent = null // Accumulate all instances and listeners via the target -> root path.

        while (instance !== null) {
          var _instance2 = instance,
            stateNode = _instance2.stateNode,
            tag = _instance2.tag // Handle listeners that are on HostComponents (i.e. <div>)

          if (tag === HostComponent && stateNode !== null) {
            lastHostComponent = stateNode // createEventHandle listeners

            if (reactEventName !== null) {
              var listener = getListener(instance, reactEventName)

              if (listener != null) {
                listeners.push(
                  createDispatchListener(instance, listener, lastHostComponent)
                )
              }
            }
          } // If we are only accumulating events for the target, then we don't
          // continue to propagate through the React fiber tree to find other
          // listeners.

          if (accumulateTargetOnly) {
            break
          }

          instance = instance.return
        }

        return listeners
      } // We should only use this function for:
      // - BeforeInputEventPlugin
      // - ChangeEventPlugin
      // - SelectEventPlugin
      // This is because we only process these plugins
      // in the bubble phase, so we need to accumulate two
      // phase event listeners (via emulation).

      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        var captureName = reactName + 'Capture'
        var listeners = []
        var instance = targetFiber // Accumulate all instances and listeners via the target -> root path.

        while (instance !== null) {
          var _instance3 = instance,
            stateNode = _instance3.stateNode,
            tag = _instance3.tag // Handle listeners that are on HostComponents (i.e. <div>)

          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode
            var captureListener = getListener(instance, captureName)

            if (captureListener != null) {
              listeners.unshift(
                createDispatchListener(instance, captureListener, currentTarget)
              )
            }

            var bubbleListener = getListener(instance, reactName)

            if (bubbleListener != null) {
              listeners.push(
                createDispatchListener(instance, bubbleListener, currentTarget)
              )
            }
          }

          instance = instance.return
        }

        return listeners
      }

      function getParent(inst) {
        if (inst === null) {
          return null
        }

        do {
          inst = inst.return // TODO: If this is a HostRoot we might want to bail out.
          // That is depending on if we want nested subtrees (layers) to bubble
          // events to their parent. We could also go through parentNode on the
          // host node but that wouldn't work for React Native and doesn't let us
          // do the portal feature.
        } while (inst && inst.tag !== HostComponent)

        if (inst) {
          return inst
        }

        return null
      }
      /**
       * Return the lowest common ancestor of A and B, or null if they are in
       * different trees.
       */

      function getLowestCommonAncestor(instA, instB) {
        var nodeA = instA
        var nodeB = instB
        var depthA = 0

        for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
          depthA++
        }

        var depthB = 0

        for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
          depthB++
        } // If A is deeper, crawl up.

        while (depthA - depthB > 0) {
          nodeA = getParent(nodeA)
          depthA--
        } // If B is deeper, crawl up.

        while (depthB - depthA > 0) {
          nodeB = getParent(nodeB)
          depthB--
        } // Walk in lockstep until we find a match.

        var depth = depthA

        while (depth--) {
          if (
            nodeA === nodeB ||
            (nodeB !== null && nodeA === nodeB.alternate)
          ) {
            return nodeA
          }

          nodeA = getParent(nodeA)
          nodeB = getParent(nodeB)
        }

        return null
      }

      function accumulateEnterLeaveListenersForEvent(
        dispatchQueue,
        event,
        target,
        common,
        inCapturePhase
      ) {
        var registrationName = event._reactName
        var listeners = []
        var instance = target

        while (instance !== null) {
          if (instance === common) {
            break
          }

          var _instance4 = instance,
            alternate = _instance4.alternate,
            stateNode = _instance4.stateNode,
            tag = _instance4.tag

          if (alternate !== null && alternate === common) {
            break
          }

          if (tag === HostComponent && stateNode !== null) {
            var currentTarget = stateNode

            if (inCapturePhase) {
              var captureListener = getListener(instance, registrationName)

              if (captureListener != null) {
                listeners.unshift(
                  createDispatchListener(
                    instance,
                    captureListener,
                    currentTarget
                  )
                )
              }
            } else if (!inCapturePhase) {
              var bubbleListener = getListener(instance, registrationName)

              if (bubbleListener != null) {
                listeners.push(
                  createDispatchListener(
                    instance,
                    bubbleListener,
                    currentTarget
                  )
                )
              }
            }
          }

          instance = instance.return
        }

        if (listeners.length !== 0) {
          dispatchQueue.push({
            event: event,
            listeners: listeners,
          })
        }
      } // We should only use this function for:
      // - EnterLeaveEventPlugin
      // This is because we only process this plugin
      // in the bubble phase, so we need to accumulate two
      // phase event listeners.

      function accumulateEnterLeaveTwoPhaseListeners(
        dispatchQueue,
        leaveEvent,
        enterEvent,
        from,
        to
      ) {
        var common = from && to ? getLowestCommonAncestor(from, to) : null

        if (from !== null) {
          accumulateEnterLeaveListenersForEvent(
            dispatchQueue,
            leaveEvent,
            from,
            common,
            false
          )
        }

        if (to !== null && enterEvent !== null) {
          accumulateEnterLeaveListenersForEvent(
            dispatchQueue,
            enterEvent,
            to,
            common,
            true
          )
        }
      }
      function getListenerSetKey(domEventName, capture) {
        return domEventName + '__' + (capture ? 'capture' : 'bubble')
      }

      var didWarnInvalidHydration = false
      var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML'
      var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning'
      var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning'
      var AUTOFOCUS = 'autoFocus'
      var CHILDREN = 'children'
      var STYLE = 'style'
      var HTML$1 = '__html'
      var HTML_NAMESPACE$1 = Namespaces.html
      var warnedUnknownTags
      var suppressHydrationWarning
      var validatePropertiesInDevelopment
      var warnForTextDifference
      var warnForPropDifference
      var warnForExtraAttributes
      var warnForInvalidEventListener
      var canDiffStyleForHydrationWarning
      var normalizeMarkupForTextOrAttribute
      var normalizeHTML

      {
        warnedUnknownTags = {
          // There are working polyfills for <dialog>. Let people use it.
          dialog: true,
          // Electron ships a custom <webview> tag to display external web content in
          // an isolated frame and process.
          // This tag is not present in non Electron environments such as JSDom which
          // is often used for testing purposes.
          // @see https://electronjs.org/docs/api/webview-tag
          webview: true,
        }

        validatePropertiesInDevelopment = function (type, props) {
          validateProperties(type, props)
          validateProperties$1(type, props)
          validateProperties$2(type, props, {
            registrationNameDependencies: registrationNameDependencies,
            possibleRegistrationNames: possibleRegistrationNames,
          })
        } // IE 11 parses & normalizes the style attribute as opposed to other
        // browsers. It adds spaces and sorts the properties in some
        // non-alphabetical order. Handling that would require sorting CSS
        // properties in the client & server versions or applying
        // `expectedStyle` to a temporary DOM node to read its `style` attribute
        // normalized. Since it only affects IE, we're skipping style warnings
        // in that browser completely in favor of doing all that work.
        // See https://github.com/facebook/react/issues/11807

        canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode // HTML parsing normalizes CR and CRLF to LF.
        // It also can turn \u0000 into \uFFFD inside attributes.
        // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
        // If we have a mismatch, it might be caused by that.
        // We will still patch up in this case but not fire the warning.

        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g

        normalizeMarkupForTextOrAttribute = function (markup) {
          var markupString = typeof markup === 'string' ? markup : '' + markup
          return markupString
            .replace(NORMALIZE_NEWLINES_REGEX, '\n')
            .replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '')
        }

        warnForTextDifference = function (serverText, clientText) {
          if (didWarnInvalidHydration) {
            return
          }

          var normalizedClientText =
            normalizeMarkupForTextOrAttribute(clientText)
          var normalizedServerText =
            normalizeMarkupForTextOrAttribute(serverText)

          if (normalizedServerText === normalizedClientText) {
            return
          }

          didWarnInvalidHydration = true

          error(
            'Text content did not match. Server: "%s" Client: "%s"',
            normalizedServerText,
            normalizedClientText
          )
        }

        warnForPropDifference = function (propName, serverValue, clientValue) {
          if (didWarnInvalidHydration) {
            return
          }

          var normalizedClientValue =
            normalizeMarkupForTextOrAttribute(clientValue)
          var normalizedServerValue =
            normalizeMarkupForTextOrAttribute(serverValue)

          if (normalizedServerValue === normalizedClientValue) {
            return
          }

          didWarnInvalidHydration = true

          error(
            'Prop `%s` did not match. Server: %s Client: %s',
            propName,
            JSON.stringify(normalizedServerValue),
            JSON.stringify(normalizedClientValue)
          )
        }

        warnForExtraAttributes = function (attributeNames) {
          if (didWarnInvalidHydration) {
            return
          }

          didWarnInvalidHydration = true
          var names = []
          attributeNames.forEach(function (name) {
            names.push(name)
          })

          error('Extra attributes from the server: %s', names)
        }

        warnForInvalidEventListener = function (registrationName, listener) {
          if (listener === false) {
            error(
              'Expected `%s` listener to be a function, instead got `false`.\n\n' +
                'If you used to conditionally omit it with %s={condition && value}, ' +
                'pass %s={condition ? value : undefined} instead.',
              registrationName,
              registrationName,
              registrationName
            )
          } else {
            error(
              'Expected `%s` listener to be a function, instead got a value of `%s` type.',
              registrationName,
              typeof listener
            )
          }
        } // Parse the HTML and read it back to normalize the HTML string so that it
        // can be used for comparison.

        normalizeHTML = function (parent, html) {
          // We could have created a separate document here to avoid
          // re-initializing custom elements if they exist. But this breaks
          // how <noscript> is being handled. So we use the same document.
          // See the discussion in https://github.com/facebook/react/pull/11157.
          var testElement =
            parent.namespaceURI === HTML_NAMESPACE$1
              ? parent.ownerDocument.createElement(parent.tagName)
              : parent.ownerDocument.createElementNS(
                  parent.namespaceURI,
                  parent.tagName
                )
          testElement.innerHTML = html
          return testElement.innerHTML
        }
      }

      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return rootContainerElement.nodeType === DOCUMENT_NODE
          ? rootContainerElement
          : rootContainerElement.ownerDocument
      }

      function noop() {}

      function trapClickOnNonInteractiveElement(node) {
        // Mobile Safari does not fire properly bubble click events on
        // non-interactive elements, which means delegated click listeners do not
        // fire. The workaround for this bug involves attaching an empty click
        // listener on the target node.
        // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
        // Just set it using the onclick property so that we don't have to manage any
        // bookkeeping for it. Not sure if we need to clear it when the listener is
        // removed.
        // TODO: Only do this for the relevant Safaris maybe?
        node.onclick = noop
      }

      function setInitialDOMProperties(
        tag,
        domElement,
        rootContainerElement,
        nextProps,
        isCustomComponentTag
      ) {
        for (var propKey in nextProps) {
          if (!nextProps.hasOwnProperty(propKey)) {
            continue
          }

          var nextProp = nextProps[propKey]

          if (propKey === STYLE) {
            {
              if (nextProp) {
                // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp)
              }
            } // Relies on `updateStylesByID` not mutating `styleUpdates`.

            setValueForStyles(domElement, nextProp)
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined

            if (nextHtml != null) {
              setInnerHTML(domElement, nextHtml)
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === 'string') {
              // Avoid setting initial textContent when the text is empty. In IE11 setting
              // textContent on a <textarea> will cause the placeholder to not
              // show within the <textarea> until it has been focused and blurred again.
              // https://github.com/facebook/react/issues/6731#issuecomment-254874553
              var canSetTextContent = tag !== 'textarea' || nextProp !== ''

              if (canSetTextContent) {
                setTextContent(domElement, nextProp)
              }
            } else if (typeof nextProp === 'number') {
              setTextContent(domElement, '' + nextProp)
            }
          } else if (
            propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
            propKey === SUPPRESS_HYDRATION_WARNING
          );
          else if (propKey === AUTOFOCUS);
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== 'function') {
                warnForInvalidEventListener(propKey, nextProp)
              }

              if (propKey === 'onScroll') {
                listenToNonDelegatedEvent('scroll', domElement)
              }
            }
          } else if (nextProp != null) {
            setValueForProperty(
              domElement,
              propKey,
              nextProp,
              isCustomComponentTag
            )
          }
        }
      }

      function updateDOMProperties(
        domElement,
        updatePayload,
        wasCustomComponentTag,
        isCustomComponentTag
      ) {
        // TODO: Handle wasCustomComponentTag
        for (var i = 0; i < updatePayload.length; i += 2) {
          var propKey = updatePayload[i]
          var propValue = updatePayload[i + 1]

          if (propKey === STYLE) {
            setValueForStyles(domElement, propValue)
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            setInnerHTML(domElement, propValue)
          } else if (propKey === CHILDREN) {
            setTextContent(domElement, propValue)
          } else {
            setValueForProperty(
              domElement,
              propKey,
              propValue,
              isCustomComponentTag
            )
          }
        }
      }

      function createElement(
        type,
        props,
        rootContainerElement,
        parentNamespace
      ) {
        var isCustomComponentTag // We create tags in the namespace of their parent container, except HTML
        // tags get no namespace.

        var ownerDocument =
          getOwnerDocumentFromRootContainer(rootContainerElement)
        var domElement
        var namespaceURI = parentNamespace

        if (namespaceURI === HTML_NAMESPACE$1) {
          namespaceURI = getIntrinsicNamespace(type)
        }

        if (namespaceURI === HTML_NAMESPACE$1) {
          {
            isCustomComponentTag = isCustomComponent(type, props) // Should this check be gated by parent namespace? Not sure we want to
            // allow <SVG> or <mATH>.

            if (!isCustomComponentTag && type !== type.toLowerCase()) {
              error(
                '<%s /> is using incorrect casing. ' +
                  'Use PascalCase for React components, ' +
                  'or lowercase for HTML elements.',
                type
              )
            }
          }

          if (type === 'script') {
            // Create the script via .innerHTML so its "parser-inserted" flag is
            // set to true and it does not execute
            var div = ownerDocument.createElement('div')

            div.innerHTML = '<script><' + '/script>' // eslint-disable-line
            // This is guaranteed to yield a script element.

            var firstChild = div.firstChild
            domElement = div.removeChild(firstChild)
          } else if (typeof props.is === 'string') {
            // $FlowIssue `createElement` should be updated for Web Components
            domElement = ownerDocument.createElement(type, {
              is: props.is,
            })
          } else {
            // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
            // See discussion in https://github.com/facebook/react/pull/6896
            // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
            domElement = ownerDocument.createElement(type) // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
            // attributes on `select`s needs to be added before `option`s are inserted.
            // This prevents:
            // - a bug where the `select` does not scroll to the correct option because singular
            //  `select` elements automatically pick the first item #13222
            // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
            // See https://github.com/facebook/react/issues/13222
            // and https://github.com/facebook/react/issues/14239

            if (type === 'select') {
              var node = domElement

              if (props.multiple) {
                node.multiple = true
              } else if (props.size) {
                // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
                // it is possible that no option is selected.
                //
                // This is only necessary when a select in "single selection mode".
                node.size = props.size
              }
            }
          }
        } else {
          domElement = ownerDocument.createElementNS(namespaceURI, type)
        }

        {
          if (namespaceURI === HTML_NAMESPACE$1) {
            if (
              !isCustomComponentTag &&
              Object.prototype.toString.call(domElement) ===
                '[object HTMLUnknownElement]' &&
              !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)
            ) {
              warnedUnknownTags[type] = true

              error(
                'The tag <%s> is unrecognized in this browser. ' +
                  'If you meant to render a React component, start its name with ' +
                  'an uppercase letter.',
                type
              )
            }
          }
        }

        return domElement
      }
      function createTextNode(text, rootContainerElement) {
        return getOwnerDocumentFromRootContainer(
          rootContainerElement
        ).createTextNode(text)
      }
      function setInitialProperties(
        domElement,
        tag,
        rawProps,
        rootContainerElement
      ) {
        var isCustomComponentTag = isCustomComponent(tag, rawProps)

        {
          validatePropertiesInDevelopment(tag, rawProps)
        } // TODO: Make sure that we check isMounted before firing any of these events.

        var props

        switch (tag) {
          case 'dialog':
            listenToNonDelegatedEvent('cancel', domElement)
            listenToNonDelegatedEvent('close', domElement)
            props = rawProps
            break

          case 'iframe':
          case 'object':
          case 'embed':
            // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the load event.
            listenToNonDelegatedEvent('load', domElement)
            props = rawProps
            break

          case 'video':
          case 'audio':
            // We listen to these events in case to ensure emulated bubble
            // listeners still fire for all the media events.
            for (var i = 0; i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement)
            }

            props = rawProps
            break

          case 'source':
            // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the error event.
            listenToNonDelegatedEvent('error', domElement)
            props = rawProps
            break

          case 'img':
          case 'image':
          case 'link':
            // We listen to these events in case to ensure emulated bubble
            // listeners still fire for error and load events.
            listenToNonDelegatedEvent('error', domElement)
            listenToNonDelegatedEvent('load', domElement)
            props = rawProps
            break

          case 'details':
            // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the toggle event.
            listenToNonDelegatedEvent('toggle', domElement)
            props = rawProps
            break

          case 'input':
            initWrapperState(domElement, rawProps)
            props = getHostProps(domElement, rawProps) // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the invalid event.

            listenToNonDelegatedEvent('invalid', domElement)

            break

          case 'option':
            validateProps(domElement, rawProps)
            props = getHostProps$1(domElement, rawProps)
            break

          case 'select':
            initWrapperState$1(domElement, rawProps)
            props = getHostProps$2(domElement, rawProps) // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the invalid event.

            listenToNonDelegatedEvent('invalid', domElement)

            break

          case 'textarea':
            initWrapperState$2(domElement, rawProps)
            props = getHostProps$3(domElement, rawProps) // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the invalid event.

            listenToNonDelegatedEvent('invalid', domElement)

            break

          default:
            props = rawProps
        }

        assertValidProps(tag, props)
        setInitialDOMProperties(
          tag,
          domElement,
          rootContainerElement,
          props,
          isCustomComponentTag
        )

        switch (tag) {
          case 'input':
            // TODO: Make sure we check if this is still unmounted or do any clean
            // up necessary since we never stop tracking anymore.
            track(domElement)
            postMountWrapper(domElement, rawProps, false)
            break

          case 'textarea':
            // TODO: Make sure we check if this is still unmounted or do any clean
            // up necessary since we never stop tracking anymore.
            track(domElement)
            postMountWrapper$3(domElement)
            break

          case 'option':
            postMountWrapper$1(domElement, rawProps)
            break

          case 'select':
            postMountWrapper$2(domElement, rawProps)
            break

          default:
            if (typeof props.onClick === 'function') {
              // TODO: This cast may not be sound for SVG, MathML or custom elements.
              trapClickOnNonInteractiveElement(domElement)
            }

            break
        }
      } // Calculate the diff between the two objects.

      function diffProperties(
        domElement,
        tag,
        lastRawProps,
        nextRawProps,
        rootContainerElement
      ) {
        {
          validatePropertiesInDevelopment(tag, nextRawProps)
        }

        var updatePayload = null
        var lastProps
        var nextProps

        switch (tag) {
          case 'input':
            lastProps = getHostProps(domElement, lastRawProps)
            nextProps = getHostProps(domElement, nextRawProps)
            updatePayload = []
            break

          case 'option':
            lastProps = getHostProps$1(domElement, lastRawProps)
            nextProps = getHostProps$1(domElement, nextRawProps)
            updatePayload = []
            break

          case 'select':
            lastProps = getHostProps$2(domElement, lastRawProps)
            nextProps = getHostProps$2(domElement, nextRawProps)
            updatePayload = []
            break

          case 'textarea':
            lastProps = getHostProps$3(domElement, lastRawProps)
            nextProps = getHostProps$3(domElement, nextRawProps)
            updatePayload = []
            break

          default:
            lastProps = lastRawProps
            nextProps = nextRawProps

            if (
              typeof lastProps.onClick !== 'function' &&
              typeof nextProps.onClick === 'function'
            ) {
              // TODO: This cast may not be sound for SVG, MathML or custom elements.
              trapClickOnNonInteractiveElement(domElement)
            }

            break
        }

        assertValidProps(tag, nextProps)
        var propKey
        var styleName
        var styleUpdates = null

        for (propKey in lastProps) {
          if (
            nextProps.hasOwnProperty(propKey) ||
            !lastProps.hasOwnProperty(propKey) ||
            lastProps[propKey] == null
          ) {
            continue
          }

          if (propKey === STYLE) {
            var lastStyle = lastProps[propKey]

            for (styleName in lastStyle) {
              if (lastStyle.hasOwnProperty(styleName)) {
                if (!styleUpdates) {
                  styleUpdates = {}
                }

                styleUpdates[styleName] = ''
              }
            }
          } else if (
            propKey === DANGEROUSLY_SET_INNER_HTML ||
            propKey === CHILDREN
          );
          else if (
            propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
            propKey === SUPPRESS_HYDRATION_WARNING
          );
          else if (propKey === AUTOFOCUS);
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            // This is a special case. If any listener updates we need to ensure
            // that the "current" fiber pointer gets updated so we need a commit
            // to update this element.
            if (!updatePayload) {
              updatePayload = []
            }
          } else {
            // For all other deleted properties we add it to the queue. We use
            // the allowed property list in the commit phase instead.
            ;(updatePayload = updatePayload || []).push(propKey, null)
          }
        }

        for (propKey in nextProps) {
          var nextProp = nextProps[propKey]
          var lastProp = lastProps != null ? lastProps[propKey] : undefined

          if (
            !nextProps.hasOwnProperty(propKey) ||
            nextProp === lastProp ||
            (nextProp == null && lastProp == null)
          ) {
            continue
          }

          if (propKey === STYLE) {
            {
              if (nextProp) {
                // Freeze the next style object so that we can assume it won't be
                // mutated. We have already warned for this in the past.
                Object.freeze(nextProp)
              }
            }

            if (lastProp) {
              // Unset styles on `lastProp` but not on `nextProp`.
              for (styleName in lastProp) {
                if (
                  lastProp.hasOwnProperty(styleName) &&
                  (!nextProp || !nextProp.hasOwnProperty(styleName))
                ) {
                  if (!styleUpdates) {
                    styleUpdates = {}
                  }

                  styleUpdates[styleName] = ''
                }
              } // Update styles that changed since `lastProp`.

              for (styleName in nextProp) {
                if (
                  nextProp.hasOwnProperty(styleName) &&
                  lastProp[styleName] !== nextProp[styleName]
                ) {
                  if (!styleUpdates) {
                    styleUpdates = {}
                  }

                  styleUpdates[styleName] = nextProp[styleName]
                }
              }
            } else {
              // Relies on `updateStylesByID` not mutating `styleUpdates`.
              if (!styleUpdates) {
                if (!updatePayload) {
                  updatePayload = []
                }

                updatePayload.push(propKey, styleUpdates)
              }

              styleUpdates = nextProp
            }
          } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
            var nextHtml = nextProp ? nextProp[HTML$1] : undefined
            var lastHtml = lastProp ? lastProp[HTML$1] : undefined

            if (nextHtml != null) {
              if (lastHtml !== nextHtml) {
                ;(updatePayload = updatePayload || []).push(propKey, nextHtml)
              }
            }
          } else if (propKey === CHILDREN) {
            if (typeof nextProp === 'string' || typeof nextProp === 'number') {
              ;(updatePayload = updatePayload || []).push(
                propKey,
                '' + nextProp
              )
            }
          } else if (
            propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
            propKey === SUPPRESS_HYDRATION_WARNING
          );
          else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              // We eagerly listen to this even though we haven't committed yet.
              if (typeof nextProp !== 'function') {
                warnForInvalidEventListener(propKey, nextProp)
              }

              if (propKey === 'onScroll') {
                listenToNonDelegatedEvent('scroll', domElement)
              }
            }

            if (!updatePayload && lastProp !== nextProp) {
              // This is a special case. If any listener updates we need to ensure
              // that the "current" props pointer gets updated so we need a commit
              // to update this element.
              updatePayload = []
            }
          } else if (
            typeof nextProp === 'object' &&
            nextProp !== null &&
            nextProp.$$typeof === REACT_OPAQUE_ID_TYPE
          ) {
            // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
            // In this case, call the opaque object's toString function which generates a new client
            // ID so client and server IDs match and throws to rerender.
            nextProp.toString()
          } else {
            // For any other property we always add it to the queue and then we
            // filter it out using the allowed property list during the commit.
            ;(updatePayload = updatePayload || []).push(propKey, nextProp)
          }
        }

        if (styleUpdates) {
          {
            validateShorthandPropertyCollisionInDev(
              styleUpdates,
              nextProps[STYLE]
            )
          }

          ;(updatePayload = updatePayload || []).push(STYLE, styleUpdates)
        }

        return updatePayload
      } // Apply the diff.

      function updateProperties(
        domElement,
        updatePayload,
        tag,
        lastRawProps,
        nextRawProps
      ) {
        // Update checked *before* name.
        // In the middle of an update, it is possible to have multiple checked.
        // When a checked radio tries to change name, browser makes another radio's checked false.
        if (
          tag === 'input' &&
          nextRawProps.type === 'radio' &&
          nextRawProps.name != null
        ) {
          updateChecked(domElement, nextRawProps)
        }

        var wasCustomComponentTag = isCustomComponent(tag, lastRawProps)
        var isCustomComponentTag = isCustomComponent(tag, nextRawProps) // Apply the diff.

        updateDOMProperties(
          domElement,
          updatePayload,
          wasCustomComponentTag,
          isCustomComponentTag
        ) // TODO: Ensure that an update gets scheduled if any of the special props
        // changed.

        switch (tag) {
          case 'input':
            // Update the wrapper around inputs *after* updating props. This has to
            // happen after `updateDOMProperties`. Otherwise HTML5 input validations
            // raise warnings and prevent the new value from being assigned.
            updateWrapper(domElement, nextRawProps)
            break

          case 'textarea':
            updateWrapper$1(domElement, nextRawProps)
            break

          case 'select':
            // <select> value update needs to occur after <option> children
            // reconciliation
            postUpdateWrapper(domElement, nextRawProps)
            break
        }
      }

      function getPossibleStandardName(propName) {
        {
          var lowerCasedName = propName.toLowerCase()

          if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
            return null
          }

          return possibleStandardNames[lowerCasedName] || null
        }
      }

      function diffHydratedProperties(
        domElement,
        tag,
        rawProps,
        parentNamespace,
        rootContainerElement
      ) {
        var isCustomComponentTag
        var extraAttributeNames

        {
          suppressHydrationWarning =
            rawProps[SUPPRESS_HYDRATION_WARNING] === true
          isCustomComponentTag = isCustomComponent(tag, rawProps)
          validatePropertiesInDevelopment(tag, rawProps)
        } // TODO: Make sure that we check isMounted before firing any of these events.

        switch (tag) {
          case 'dialog':
            listenToNonDelegatedEvent('cancel', domElement)
            listenToNonDelegatedEvent('close', domElement)
            break

          case 'iframe':
          case 'object':
          case 'embed':
            // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the load event.
            listenToNonDelegatedEvent('load', domElement)
            break

          case 'video':
          case 'audio':
            // We listen to these events in case to ensure emulated bubble
            // listeners still fire for all the media events.
            for (var i = 0; i < mediaEventTypes.length; i++) {
              listenToNonDelegatedEvent(mediaEventTypes[i], domElement)
            }

            break

          case 'source':
            // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the error event.
            listenToNonDelegatedEvent('error', domElement)
            break

          case 'img':
          case 'image':
          case 'link':
            // We listen to these events in case to ensure emulated bubble
            // listeners still fire for error and load events.
            listenToNonDelegatedEvent('error', domElement)
            listenToNonDelegatedEvent('load', domElement)
            break

          case 'details':
            // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the toggle event.
            listenToNonDelegatedEvent('toggle', domElement)
            break

          case 'input':
            initWrapperState(domElement, rawProps) // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the invalid event.

            listenToNonDelegatedEvent('invalid', domElement)

            break

          case 'option':
            validateProps(domElement, rawProps)
            break

          case 'select':
            initWrapperState$1(domElement, rawProps) // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the invalid event.

            listenToNonDelegatedEvent('invalid', domElement)

            break

          case 'textarea':
            initWrapperState$2(domElement, rawProps) // We listen to this event in case to ensure emulated bubble
            // listeners still fire for the invalid event.

            listenToNonDelegatedEvent('invalid', domElement)

            break
        }

        assertValidProps(tag, rawProps)

        {
          extraAttributeNames = new Set()
          var attributes = domElement.attributes

          for (var _i = 0; _i < attributes.length; _i++) {
            var name = attributes[_i].name.toLowerCase()

            switch (name) {
              // Built-in SSR attribute is allowed
              case 'data-reactroot':
                break
              // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.

              case 'value':
                break

              case 'checked':
                break

              case 'selected':
                break

              default:
                // Intentionally use the original name.
                // See discussion in https://github.com/facebook/react/pull/10676.
                extraAttributeNames.add(attributes[_i].name)
            }
          }
        }

        var updatePayload = null

        for (var propKey in rawProps) {
          if (!rawProps.hasOwnProperty(propKey)) {
            continue
          }

          var nextProp = rawProps[propKey]

          if (propKey === CHILDREN) {
            // For text content children we compare against textContent. This
            // might match additional HTML that is hidden when we read it using
            // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
            // satisfies our requirement. Our requirement is not to produce perfect
            // HTML and attributes. Ideally we should preserve structure but it's
            // ok not to if the visible content is still enough to indicate what
            // even listeners these nodes might be wired up to.
            // TODO: Warn if there is more than a single textNode as a child.
            // TODO: Should we use domElement.firstChild.nodeValue to compare?
            if (typeof nextProp === 'string') {
              if (domElement.textContent !== nextProp) {
                if (!suppressHydrationWarning) {
                  warnForTextDifference(domElement.textContent, nextProp)
                }

                updatePayload = [CHILDREN, nextProp]
              }
            } else if (typeof nextProp === 'number') {
              if (domElement.textContent !== '' + nextProp) {
                if (!suppressHydrationWarning) {
                  warnForTextDifference(domElement.textContent, nextProp)
                }

                updatePayload = [CHILDREN, '' + nextProp]
              }
            }
          } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
            if (nextProp != null) {
              if (typeof nextProp !== 'function') {
                warnForInvalidEventListener(propKey, nextProp)
              }

              if (propKey === 'onScroll') {
                listenToNonDelegatedEvent('scroll', domElement)
              }
            }
          } else if (
            // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === 'boolean'
          ) {
            // Validate that the properties correspond to their expected values.
            var serverValue = void 0
            var propertyInfo = getPropertyInfo(propKey)

            if (suppressHydrationWarning);
            else if (
              propKey === SUPPRESS_CONTENT_EDITABLE_WARNING ||
              propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === 'value' ||
              propKey === 'checked' ||
              propKey === 'selected'
            );
            else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var serverHTML = domElement.innerHTML
              var nextHtml = nextProp ? nextProp[HTML$1] : undefined

              if (nextHtml != null) {
                var expectedHTML = normalizeHTML(domElement, nextHtml)

                if (expectedHTML !== serverHTML) {
                  warnForPropDifference(propKey, serverHTML, expectedHTML)
                }
              }
            } else if (propKey === STYLE) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propKey)

              if (canDiffStyleForHydrationWarning) {
                var expectedStyle = createDangerousStringForStyles(nextProp)
                serverValue = domElement.getAttribute('style')

                if (expectedStyle !== serverValue) {
                  warnForPropDifference(propKey, serverValue, expectedStyle)
                }
              }
            } else if (isCustomComponentTag) {
              // $FlowFixMe - Should be inferred as not undefined.
              extraAttributeNames.delete(propKey.toLowerCase())
              serverValue = getValueForAttribute(domElement, propKey, nextProp)

              if (nextProp !== serverValue) {
                warnForPropDifference(propKey, serverValue, nextProp)
              }
            } else if (
              !shouldIgnoreAttribute(
                propKey,
                propertyInfo,
                isCustomComponentTag
              ) &&
              !shouldRemoveAttribute(
                propKey,
                nextProp,
                propertyInfo,
                isCustomComponentTag
              )
            ) {
              var isMismatchDueToBadCasing = false

              if (propertyInfo !== null) {
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.delete(propertyInfo.attributeName)
                serverValue = getValueForProperty(
                  domElement,
                  propKey,
                  nextProp,
                  propertyInfo
                )
              } else {
                var ownNamespace = parentNamespace

                if (ownNamespace === HTML_NAMESPACE$1) {
                  ownNamespace = getIntrinsicNamespace(tag)
                }

                if (ownNamespace === HTML_NAMESPACE$1) {
                  // $FlowFixMe - Should be inferred as not undefined.
                  extraAttributeNames.delete(propKey.toLowerCase())
                } else {
                  var standardName = getPossibleStandardName(propKey)

                  if (standardName !== null && standardName !== propKey) {
                    // If an SVG prop is supplied with bad casing, it will
                    // be successfully parsed from HTML, but will produce a mismatch
                    // (and would be incorrectly rendered on the client).
                    // However, we already warn about bad casing elsewhere.
                    // So we'll skip the misleading extra mismatch warning in this case.
                    isMismatchDueToBadCasing = true // $FlowFixMe - Should be inferred as not undefined.

                    extraAttributeNames.delete(standardName)
                  } // $FlowFixMe - Should be inferred as not undefined.

                  extraAttributeNames.delete(propKey)
                }

                serverValue = getValueForAttribute(
                  domElement,
                  propKey,
                  nextProp
                )
              }

              if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
                warnForPropDifference(propKey, serverValue, nextProp)
              }
            }
          }
        }

        {
          // $FlowFixMe - Should be inferred as not undefined.
          if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
            // $FlowFixMe - Should be inferred as not undefined.
            warnForExtraAttributes(extraAttributeNames)
          }
        }

        switch (tag) {
          case 'input':
            // TODO: Make sure we check if this is still unmounted or do any clean
            // up necessary since we never stop tracking anymore.
            track(domElement)
            postMountWrapper(domElement, rawProps, true)
            break

          case 'textarea':
            // TODO: Make sure we check if this is still unmounted or do any clean
            // up necessary since we never stop tracking anymore.
            track(domElement)
            postMountWrapper$3(domElement)
            break

          case 'select':
          case 'option':
            // For input and textarea we current always set the value property at
            // post mount to force it to diverge from attributes. However, for
            // option and select we don't quite do the same thing and select
            // is not resilient to the DOM state changing so we don't do that here.
            // TODO: Consider not doing this for input and textarea.
            break

          default:
            if (typeof rawProps.onClick === 'function') {
              // TODO: This cast may not be sound for SVG, MathML or custom elements.
              trapClickOnNonInteractiveElement(domElement)
            }

            break
        }

        return updatePayload
      }
      function diffHydratedText(textNode, text) {
        var isDifferent = textNode.nodeValue !== text
        return isDifferent
      }
      function warnForUnmatchedText(textNode, text) {
        {
          warnForTextDifference(textNode.nodeValue, text)
        }
      }
      function warnForDeletedHydratableElement(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return
          }

          didWarnInvalidHydration = true

          error(
            'Did not expect server HTML to contain a <%s> in <%s>.',
            child.nodeName.toLowerCase(),
            parentNode.nodeName.toLowerCase()
          )
        }
      }
      function warnForDeletedHydratableText(parentNode, child) {
        {
          if (didWarnInvalidHydration) {
            return
          }

          didWarnInvalidHydration = true

          error(
            'Did not expect server HTML to contain the text node "%s" in <%s>.',
            child.nodeValue,
            parentNode.nodeName.toLowerCase()
          )
        }
      }
      function warnForInsertedHydratedElement(parentNode, tag, props) {
        {
          if (didWarnInvalidHydration) {
            return
          }

          didWarnInvalidHydration = true

          error(
            'Expected server HTML to contain a matching <%s> in <%s>.',
            tag,
            parentNode.nodeName.toLowerCase()
          )
        }
      }
      function warnForInsertedHydratedText(parentNode, text) {
        {
          if (text === '') {
            // We expect to insert empty text nodes since they're not represented in
            // the HTML.
            // TODO: Remove this special case if we can just avoid inserting empty
            // text nodes.
            return
          }

          if (didWarnInvalidHydration) {
            return
          }

          didWarnInvalidHydration = true

          error(
            'Expected server HTML to contain a matching text node for "%s" in <%s>.',
            text,
            parentNode.nodeName.toLowerCase()
          )
        }
      }
      function restoreControlledState$3(domElement, tag, props) {
        switch (tag) {
          case 'input':
            restoreControlledState(domElement, props)
            return

          case 'textarea':
            restoreControlledState$2(domElement, props)
            return

          case 'select':
            restoreControlledState$1(domElement, props)
            return
        }
      }

      var validateDOMNesting = function () {}

      var updatedAncestorInfo = function () {}

      {
        // This validation code was written based on the HTML5 parsing spec:
        // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
        //
        // Note: this does not catch all invalid nesting, nor does it try to (as it's
        // not clear what practical benefit doing so provides); instead, we warn only
        // for cases where the parser will give a parse tree differing from what React
        // intended. For example, <b><div></div></b> is invalid but we don't warn
        // because it still parses correctly; we do warn for other cases like nested
        // <p> tags where the beginning of the second element implicitly closes the
        // first, causing a confusing mess.
        // https://html.spec.whatwg.org/multipage/syntax.html#special
        var specialTags = [
          'address',
          'applet',
          'area',
          'article',
          'aside',
          'base',
          'basefont',
          'bgsound',
          'blockquote',
          'body',
          'br',
          'button',
          'caption',
          'center',
          'col',
          'colgroup',
          'dd',
          'details',
          'dir',
          'div',
          'dl',
          'dt',
          'embed',
          'fieldset',
          'figcaption',
          'figure',
          'footer',
          'form',
          'frame',
          'frameset',
          'h1',
          'h2',
          'h3',
          'h4',
          'h5',
          'h6',
          'head',
          'header',
          'hgroup',
          'hr',
          'html',
          'iframe',
          'img',
          'input',
          'isindex',
          'li',
          'link',
          'listing',
          'main',
          'marquee',
          'menu',
          'menuitem',
          'meta',
          'nav',
          'noembed',
          'noframes',
          'noscript',
          'object',
          'ol',
          'p',
          'param',
          'plaintext',
          'pre',
          'script',
          'section',
          'select',
          'source',
          'style',
          'summary',
          'table',
          'tbody',
          'td',
          'template',
          'textarea',
          'tfoot',
          'th',
          'thead',
          'title',
          'tr',
          'track',
          'ul',
          'wbr',
          'xmp',
        ] // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

        var inScopeTags = [
          'applet',
          'caption',
          'html',
          'table',
          'td',
          'th',
          'marquee',
          'object',
          'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
          // TODO: Distinguish by namespace here -- for <title>, including it here
          // errs on the side of fewer warnings
          'foreignObject',
          'desc',
          'title',
        ] // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

        var buttonScopeTags = inScopeTags.concat(['button']) // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

        var impliedEndTags = [
          'dd',
          'dt',
          'li',
          'option',
          'optgroup',
          'p',
          'rp',
          'rt',
        ]
        var emptyAncestorInfo = {
          current: null,
          formTag: null,
          aTagInScope: null,
          buttonTagInScope: null,
          nobrTagInScope: null,
          pTagInButtonScope: null,
          listItemTagAutoclosing: null,
          dlItemTagAutoclosing: null,
        }

        updatedAncestorInfo = function (oldInfo, tag) {
          var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo)

          var info = {
            tag: tag,
          }

          if (inScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.aTagInScope = null
            ancestorInfo.buttonTagInScope = null
            ancestorInfo.nobrTagInScope = null
          }

          if (buttonScopeTags.indexOf(tag) !== -1) {
            ancestorInfo.pTagInButtonScope = null
          } // See rules for 'li', 'dd', 'dt' start tags in
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

          if (
            specialTags.indexOf(tag) !== -1 &&
            tag !== 'address' &&
            tag !== 'div' &&
            tag !== 'p'
          ) {
            ancestorInfo.listItemTagAutoclosing = null
            ancestorInfo.dlItemTagAutoclosing = null
          }

          ancestorInfo.current = info

          if (tag === 'form') {
            ancestorInfo.formTag = info
          }

          if (tag === 'a') {
            ancestorInfo.aTagInScope = info
          }

          if (tag === 'button') {
            ancestorInfo.buttonTagInScope = info
          }

          if (tag === 'nobr') {
            ancestorInfo.nobrTagInScope = info
          }

          if (tag === 'p') {
            ancestorInfo.pTagInButtonScope = info
          }

          if (tag === 'li') {
            ancestorInfo.listItemTagAutoclosing = info
          }

          if (tag === 'dd' || tag === 'dt') {
            ancestorInfo.dlItemTagAutoclosing = info
          }

          return ancestorInfo
        }
        /**
         * Returns whether
         */

        var isTagValidWithParent = function (tag, parentTag) {
          // First, let's check if we're in an unusual parsing mode...
          switch (parentTag) {
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
            case 'select':
              return tag === 'option' || tag === 'optgroup' || tag === '#text'

            case 'optgroup':
              return tag === 'option' || tag === '#text'
            // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
            // but

            case 'option':
              return tag === '#text'
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
            // No special behavior since these rules fall back to "in body" mode for
            // all except special table nodes which cause bad parsing behavior anyway.
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

            case 'tr':
              return (
                tag === 'th' ||
                tag === 'td' ||
                tag === 'style' ||
                tag === 'script' ||
                tag === 'template'
              )
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

            case 'tbody':
            case 'thead':
            case 'tfoot':
              return (
                tag === 'tr' ||
                tag === 'style' ||
                tag === 'script' ||
                tag === 'template'
              )
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

            case 'colgroup':
              return tag === 'col' || tag === 'template'
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

            case 'table':
              return (
                tag === 'caption' ||
                tag === 'colgroup' ||
                tag === 'tbody' ||
                tag === 'tfoot' ||
                tag === 'thead' ||
                tag === 'style' ||
                tag === 'script' ||
                tag === 'template'
              )
            // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

            case 'head':
              return (
                tag === 'base' ||
                tag === 'basefont' ||
                tag === 'bgsound' ||
                tag === 'link' ||
                tag === 'meta' ||
                tag === 'title' ||
                tag === 'noscript' ||
                tag === 'noframes' ||
                tag === 'style' ||
                tag === 'script' ||
                tag === 'template'
              )
            // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

            case 'html':
              return tag === 'head' || tag === 'body' || tag === 'frameset'

            case 'frameset':
              return tag === 'frame'

            case '#document':
              return tag === 'html'
          } // Probably in the "in body" parsing mode, so we outlaw only tag combos
          // where the parsing rules cause implicit opens or closes to be added.
          // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody

          switch (tag) {
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
              return (
                parentTag !== 'h1' &&
                parentTag !== 'h2' &&
                parentTag !== 'h3' &&
                parentTag !== 'h4' &&
                parentTag !== 'h5' &&
                parentTag !== 'h6'
              )

            case 'rp':
            case 'rt':
              return impliedEndTags.indexOf(parentTag) === -1

            case 'body':
            case 'caption':
            case 'col':
            case 'colgroup':
            case 'frameset':
            case 'frame':
            case 'head':
            case 'html':
            case 'tbody':
            case 'td':
            case 'tfoot':
            case 'th':
            case 'thead':
            case 'tr':
              // These tags are only valid with a few parents that have special child
              // parsing rules -- if we're down here, then none of those matched and
              // so we allow it only if we don't know what the parent is, as all other
              // cases are invalid.
              return parentTag == null
          }

          return true
        }
        /**
         * Returns whether
         */

        var findInvalidAncestorForTag = function (tag, ancestorInfo) {
          switch (tag) {
            case 'address':
            case 'article':
            case 'aside':
            case 'blockquote':
            case 'center':
            case 'details':
            case 'dialog':
            case 'dir':
            case 'div':
            case 'dl':
            case 'fieldset':
            case 'figcaption':
            case 'figure':
            case 'footer':
            case 'header':
            case 'hgroup':
            case 'main':
            case 'menu':
            case 'nav':
            case 'ol':
            case 'p':
            case 'section':
            case 'summary':
            case 'ul':
            case 'pre':
            case 'listing':
            case 'table':
            case 'hr':
            case 'xmp':
            case 'h1':
            case 'h2':
            case 'h3':
            case 'h4':
            case 'h5':
            case 'h6':
              return ancestorInfo.pTagInButtonScope

            case 'form':
              return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope

            case 'li':
              return ancestorInfo.listItemTagAutoclosing

            case 'dd':
            case 'dt':
              return ancestorInfo.dlItemTagAutoclosing

            case 'button':
              return ancestorInfo.buttonTagInScope

            case 'a':
              // Spec says something about storing a list of markers, but it sounds
              // equivalent to this check.
              return ancestorInfo.aTagInScope

            case 'nobr':
              return ancestorInfo.nobrTagInScope
          }

          return null
        }

        var didWarn$1 = {}

        validateDOMNesting = function (childTag, childText, ancestorInfo) {
          ancestorInfo = ancestorInfo || emptyAncestorInfo
          var parentInfo = ancestorInfo.current
          var parentTag = parentInfo && parentInfo.tag

          if (childText != null) {
            if (childTag != null) {
              error(
                'validateDOMNesting: when childText is passed, childTag should be null'
              )
            }

            childTag = '#text'
          }

          var invalidParent = isTagValidWithParent(childTag, parentTag)
            ? null
            : parentInfo
          var invalidAncestor = invalidParent
            ? null
            : findInvalidAncestorForTag(childTag, ancestorInfo)
          var invalidParentOrAncestor = invalidParent || invalidAncestor

          if (!invalidParentOrAncestor) {
            return
          }

          var ancestorTag = invalidParentOrAncestor.tag
          var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag

          if (didWarn$1[warnKey]) {
            return
          }

          didWarn$1[warnKey] = true
          var tagDisplayName = childTag
          var whitespaceInfo = ''

          if (childTag === '#text') {
            if (/\S/.test(childText)) {
              tagDisplayName = 'Text nodes'
            } else {
              tagDisplayName = 'Whitespace text nodes'
              whitespaceInfo =
                " Make sure you don't have any extra whitespace between tags on " +
                'each line of your source code.'
            }
          } else {
            tagDisplayName = '<' + childTag + '>'
          }

          if (invalidParent) {
            var info = ''

            if (ancestorTag === 'table' && childTag === 'tr') {
              info +=
                ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' +
                'the browser.'
            }

            error(
              'validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s',
              tagDisplayName,
              ancestorTag,
              whitespaceInfo,
              info
            )
          } else {
            error(
              'validateDOMNesting(...): %s cannot appear as a descendant of ' +
                '<%s>.',
              tagDisplayName,
              ancestorTag
            )
          }
        }
      }

      var SUPPRESS_HYDRATION_WARNING$1

      {
        SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning'
      }

      var SUSPENSE_START_DATA = '$'
      var SUSPENSE_END_DATA = '/$'
      var SUSPENSE_PENDING_START_DATA = '$?'
      var SUSPENSE_FALLBACK_START_DATA = '$!'
      var STYLE$1 = 'style'
      var eventsEnabled = null
      var selectionInformation = null

      function shouldAutoFocusHostComponent(type, props) {
        switch (type) {
          case 'button':
          case 'input':
          case 'select':
          case 'textarea':
            return !!props.autoFocus
        }

        return false
      }
      function getRootHostContext(rootContainerInstance) {
        var type
        var namespace
        var nodeType = rootContainerInstance.nodeType

        switch (nodeType) {
          case DOCUMENT_NODE:
          case DOCUMENT_FRAGMENT_NODE: {
            type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment'
            var root = rootContainerInstance.documentElement
            namespace = root ? root.namespaceURI : getChildNamespace(null, '')
            break
          }

          default: {
            var container =
              nodeType === COMMENT_NODE
                ? rootContainerInstance.parentNode
                : rootContainerInstance
            var ownNamespace = container.namespaceURI || null
            type = container.tagName
            namespace = getChildNamespace(ownNamespace, type)
            break
          }
        }

        {
          var validatedTag = type.toLowerCase()
          var ancestorInfo = updatedAncestorInfo(null, validatedTag)
          return {
            namespace: namespace,
            ancestorInfo: ancestorInfo,
          }
        }
      }
      function getChildHostContext(
        parentHostContext,
        type,
        rootContainerInstance
      ) {
        {
          var parentHostContextDev = parentHostContext
          var namespace = getChildNamespace(
            parentHostContextDev.namespace,
            type
          )
          var ancestorInfo = updatedAncestorInfo(
            parentHostContextDev.ancestorInfo,
            type
          )
          return {
            namespace: namespace,
            ancestorInfo: ancestorInfo,
          }
        }
      }
      function getPublicInstance(instance) {
        return instance
      }
      function prepareForCommit(containerInfo) {
        eventsEnabled = isEnabled()
        selectionInformation = getSelectionInformation()
        var activeInstance = null

        setEnabled(false)
        return activeInstance
      }
      function resetAfterCommit(containerInfo) {
        restoreSelection(selectionInformation)
        setEnabled(eventsEnabled)
        eventsEnabled = null
        selectionInformation = null
      }
      function createInstance(
        type,
        props,
        rootContainerInstance,
        hostContext,
        internalInstanceHandle
      ) {
        var parentNamespace

        {
          // TODO: take namespace into account when validating.
          var hostContextDev = hostContext
          validateDOMNesting(type, null, hostContextDev.ancestorInfo)

          if (
            typeof props.children === 'string' ||
            typeof props.children === 'number'
          ) {
            var string = '' + props.children
            var ownAncestorInfo = updatedAncestorInfo(
              hostContextDev.ancestorInfo,
              type
            )
            validateDOMNesting(null, string, ownAncestorInfo)
          }

          parentNamespace = hostContextDev.namespace
        }

        var domElement = createElement(
          type,
          props,
          rootContainerInstance,
          parentNamespace
        )
        precacheFiberNode(internalInstanceHandle, domElement)
        updateFiberProps(domElement, props)
        return domElement
      }
      function appendInitialChild(parentInstance, child) {
        parentInstance.appendChild(child)
      }
      function finalizeInitialChildren(
        domElement,
        type,
        props,
        rootContainerInstance,
        hostContext
      ) {
        setInitialProperties(domElement, type, props, rootContainerInstance)
        return shouldAutoFocusHostComponent(type, props)
      }
      function prepareUpdate(
        domElement,
        type,
        oldProps,
        newProps,
        rootContainerInstance,
        hostContext
      ) {
        {
          var hostContextDev = hostContext

          if (
            typeof newProps.children !== typeof oldProps.children &&
            (typeof newProps.children === 'string' ||
              typeof newProps.children === 'number')
          ) {
            var string = '' + newProps.children
            var ownAncestorInfo = updatedAncestorInfo(
              hostContextDev.ancestorInfo,
              type
            )
            validateDOMNesting(null, string, ownAncestorInfo)
          }
        }

        return diffProperties(domElement, type, oldProps, newProps)
      }
      function shouldSetTextContent(type, props) {
        return (
          type === 'textarea' ||
          type === 'option' ||
          type === 'noscript' ||
          typeof props.children === 'string' ||
          typeof props.children === 'number' ||
          (typeof props.dangerouslySetInnerHTML === 'object' &&
            props.dangerouslySetInnerHTML !== null &&
            props.dangerouslySetInnerHTML.__html != null)
        )
      }
      function createTextInstance(
        text,
        rootContainerInstance,
        hostContext,
        internalInstanceHandle
      ) {
        {
          var hostContextDev = hostContext
          validateDOMNesting(null, text, hostContextDev.ancestorInfo)
        }

        var textNode = createTextNode(text, rootContainerInstance)
        precacheFiberNode(internalInstanceHandle, textNode)
        return textNode
      }
      // if a component just imports ReactDOM (e.g. for findDOMNode).
      // Some environments might not have setTimeout or clearTimeout.

      var scheduleTimeout =
        typeof setTimeout === 'function' ? setTimeout : undefined
      var cancelTimeout =
        typeof clearTimeout === 'function' ? clearTimeout : undefined
      var noTimeout = -1 // -------------------
      function commitMount(domElement, type, newProps, internalInstanceHandle) {
        // Despite the naming that might imply otherwise, this method only
        // fires if there is an `Update` effect scheduled during mounting.
        // This happens if `finalizeInitialChildren` returns `true` (which it
        // does to implement the `autoFocus` attribute on the client). But
        // there are also other cases when this might happen (such as patching
        // up text content during hydration mismatch). So we'll check this again.
        if (shouldAutoFocusHostComponent(type, newProps)) {
          domElement.focus()
        }
      }
      function commitUpdate(
        domElement,
        updatePayload,
        type,
        oldProps,
        newProps,
        internalInstanceHandle
      ) {
        // Update the props handle so that we know which props are the ones with
        // with current event handlers.
        updateFiberProps(domElement, newProps) // Apply the diff to the DOM node.

        updateProperties(domElement, updatePayload, type, oldProps, newProps)
      }
      function resetTextContent(domElement) {
        setTextContent(domElement, '')
      }
      function commitTextUpdate(textInstance, oldText, newText) {
        textInstance.nodeValue = newText
      }
      function appendChild(parentInstance, child) {
        parentInstance.appendChild(child)
      }
      function appendChildToContainer(container, child) {
        var parentNode

        if (container.nodeType === COMMENT_NODE) {
          parentNode = container.parentNode
          parentNode.insertBefore(child, container)
        } else {
          parentNode = container
          parentNode.appendChild(child)
        } // This container might be used for a portal.
        // If something inside a portal is clicked, that click should bubble
        // through the React tree. However, on Mobile Safari the click would
        // never bubble through the *DOM* tree unless an ancestor with onclick
        // event exists. So we wouldn't see it and dispatch it.
        // This is why we ensure that non React root containers have inline onclick
        // defined.
        // https://github.com/facebook/react/issues/11918

        var reactRootContainer = container._reactRootContainer

        if (
          (reactRootContainer === null || reactRootContainer === undefined) &&
          parentNode.onclick === null
        ) {
          // TODO: This cast may not be sound for SVG, MathML or custom elements.
          trapClickOnNonInteractiveElement(parentNode)
        }
      }
      function insertBefore(parentInstance, child, beforeChild) {
        parentInstance.insertBefore(child, beforeChild)
      }
      function insertInContainerBefore(container, child, beforeChild) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.insertBefore(child, beforeChild)
        } else {
          container.insertBefore(child, beforeChild)
        }
      }

      function removeChild(parentInstance, child) {
        parentInstance.removeChild(child)
      }
      function removeChildFromContainer(container, child) {
        if (container.nodeType === COMMENT_NODE) {
          container.parentNode.removeChild(child)
        } else {
          container.removeChild(child)
        }
      }
      function hideInstance(instance) {
        // TODO: Does this work for all element types? What about MathML? Should we
        // pass host context to this method?
        instance = instance
        var style = instance.style

        if (typeof style.setProperty === 'function') {
          style.setProperty('display', 'none', 'important')
        } else {
          style.display = 'none'
        }
      }
      function hideTextInstance(textInstance) {
        textInstance.nodeValue = ''
      }
      function unhideInstance(instance, props) {
        instance = instance
        var styleProp = props[STYLE$1]
        var display =
          styleProp !== undefined &&
          styleProp !== null &&
          styleProp.hasOwnProperty('display')
            ? styleProp.display
            : null
        instance.style.display = dangerousStyleValue('display', display)
      }
      function unhideTextInstance(textInstance, text) {
        textInstance.nodeValue = text
      }
      function clearContainer(container) {
        if (container.nodeType === ELEMENT_NODE) {
          container.textContent = ''
        } else if (container.nodeType === DOCUMENT_NODE) {
          var body = container.body

          if (body != null) {
            body.textContent = ''
          }
        }
      } // -------------------
      function canHydrateInstance(instance, type, props) {
        if (
          instance.nodeType !== ELEMENT_NODE ||
          type.toLowerCase() !== instance.nodeName.toLowerCase()
        ) {
          return null
        } // This has now been refined to an element node.

        return instance
      }
      function canHydrateTextInstance(instance, text) {
        if (text === '' || instance.nodeType !== TEXT_NODE) {
          // Empty strings are not parsed by HTML so there won't be a correct match here.
          return null
        } // This has now been refined to a text node.

        return instance
      }
      function isSuspenseInstancePending(instance) {
        return instance.data === SUSPENSE_PENDING_START_DATA
      }
      function isSuspenseInstanceFallback(instance) {
        return instance.data === SUSPENSE_FALLBACK_START_DATA
      }

      function getNextHydratable(node) {
        // Skip non-hydratable nodes.
        for (; node != null; node = node.nextSibling) {
          var nodeType = node.nodeType

          if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
            break
          }
        }

        return node
      }

      function getNextHydratableSibling(instance) {
        return getNextHydratable(instance.nextSibling)
      }
      function getFirstHydratableChild(parentInstance) {
        return getNextHydratable(parentInstance.firstChild)
      }
      function hydrateInstance(
        instance,
        type,
        props,
        rootContainerInstance,
        hostContext,
        internalInstanceHandle
      ) {
        precacheFiberNode(internalInstanceHandle, instance) // TODO: Possibly defer this until the commit phase where all the events
        // get attached.

        updateFiberProps(instance, props)
        var parentNamespace

        {
          var hostContextDev = hostContext
          parentNamespace = hostContextDev.namespace
        }

        return diffHydratedProperties(instance, type, props, parentNamespace)
      }
      function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
        precacheFiberNode(internalInstanceHandle, textInstance)
        return diffHydratedText(textInstance, text)
      }
      function getNextHydratableInstanceAfterSuspenseInstance(
        suspenseInstance
      ) {
        var node = suspenseInstance.nextSibling // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.

        var depth = 0

        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data

            if (data === SUSPENSE_END_DATA) {
              if (depth === 0) {
                return getNextHydratableSibling(node)
              } else {
                depth--
              }
            } else if (
              data === SUSPENSE_START_DATA ||
              data === SUSPENSE_FALLBACK_START_DATA ||
              data === SUSPENSE_PENDING_START_DATA
            ) {
              depth++
            }
          }

          node = node.nextSibling
        } // TODO: Warn, we didn't find the end comment boundary.

        return null
      } // Returns the SuspenseInstance if this node is a direct child of a
      // SuspenseInstance. I.e. if its previous sibling is a Comment with
      // SUSPENSE_x_START_DATA. Otherwise, null.

      function getParentSuspenseInstance(targetInstance) {
        var node = targetInstance.previousSibling // Skip past all nodes within this suspense boundary.
        // There might be nested nodes so we need to keep track of how
        // deep we are and only break out when we're back on top.

        var depth = 0

        while (node) {
          if (node.nodeType === COMMENT_NODE) {
            var data = node.data

            if (
              data === SUSPENSE_START_DATA ||
              data === SUSPENSE_FALLBACK_START_DATA ||
              data === SUSPENSE_PENDING_START_DATA
            ) {
              if (depth === 0) {
                return node
              } else {
                depth--
              }
            } else if (data === SUSPENSE_END_DATA) {
              depth++
            }
          }

          node = node.previousSibling
        }

        return null
      }
      function commitHydratedContainer(container) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(container)
      }
      function commitHydratedSuspenseInstance(suspenseInstance) {
        // Retry if any event replaying was blocked on this.
        retryIfBlockedOn(suspenseInstance)
      }
      function didNotMatchHydratedContainerTextInstance(
        parentContainer,
        textInstance,
        text
      ) {
        {
          warnForUnmatchedText(textInstance, text)
        }
      }
      function didNotMatchHydratedTextInstance(
        parentType,
        parentProps,
        parentInstance,
        textInstance,
        text
      ) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForUnmatchedText(textInstance, text)
        }
      }
      function didNotHydrateContainerInstance(parentContainer, instance) {
        {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentContainer, instance)
          } else if (instance.nodeType === COMMENT_NODE);
          else {
            warnForDeletedHydratableText(parentContainer, instance)
          }
        }
      }
      function didNotHydrateInstance(
        parentType,
        parentProps,
        parentInstance,
        instance
      ) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          if (instance.nodeType === ELEMENT_NODE) {
            warnForDeletedHydratableElement(parentInstance, instance)
          } else if (instance.nodeType === COMMENT_NODE);
          else {
            warnForDeletedHydratableText(parentInstance, instance)
          }
        }
      }
      function didNotFindHydratableContainerInstance(
        parentContainer,
        type,
        props
      ) {
        {
          warnForInsertedHydratedElement(parentContainer, type)
        }
      }
      function didNotFindHydratableContainerTextInstance(
        parentContainer,
        text
      ) {
        {
          warnForInsertedHydratedText(parentContainer, text)
        }
      }
      function didNotFindHydratableInstance(
        parentType,
        parentProps,
        parentInstance,
        type,
        props
      ) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedElement(parentInstance, type)
        }
      }
      function didNotFindHydratableTextInstance(
        parentType,
        parentProps,
        parentInstance,
        text
      ) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
          warnForInsertedHydratedText(parentInstance, text)
        }
      }
      function didNotFindHydratableSuspenseInstance(
        parentType,
        parentProps,
        parentInstance
      ) {
        if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true);
      }
      var clientId = 0
      function makeClientIdInDEV(warnOnAccessInDEV) {
        var id = 'r:' + (clientId++).toString(36)
        return {
          toString: function () {
            warnOnAccessInDEV()
            return id
          },
          valueOf: function () {
            warnOnAccessInDEV()
            return id
          },
        }
      }
      function isOpaqueHydratingObject(value) {
        return (
          value !== null &&
          typeof value === 'object' &&
          value.$$typeof === REACT_OPAQUE_ID_TYPE
        )
      }
      function makeOpaqueHydratingObject(attemptToReadValue) {
        return {
          $$typeof: REACT_OPAQUE_ID_TYPE,
          toString: attemptToReadValue,
          valueOf: attemptToReadValue,
        }
      }
      function preparePortalMount(portalInstance) {
        {
          listenToAllSupportedEvents(portalInstance)
        }
      }

      var randomKey = Math.random().toString(36).slice(2)
      var internalInstanceKey = '__reactFiber$' + randomKey
      var internalPropsKey = '__reactProps$' + randomKey
      var internalContainerInstanceKey = '__reactContainer$' + randomKey
      var internalEventHandlersKey = '__reactEvents$' + randomKey
      function precacheFiberNode(hostInst, node) {
        node[internalInstanceKey] = hostInst
      }
      function markContainerAsRoot(hostRoot, node) {
        node[internalContainerInstanceKey] = hostRoot
      }
      function unmarkContainerAsRoot(node) {
        node[internalContainerInstanceKey] = null
      }
      function isContainerMarkedAsRoot(node) {
        return !!node[internalContainerInstanceKey]
      } // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
      // If the target node is part of a hydrated or not yet rendered subtree, then
      // this may also return a SuspenseComponent or HostRoot to indicate that.
      // Conceptually the HostRoot fiber is a child of the Container node. So if you
      // pass the Container node as the targetNode, you will not actually get the
      // HostRoot back. To get to the HostRoot, you need to pass a child of it.
      // The same thing applies to Suspense boundaries.

      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey]

        if (targetInst) {
          // Don't return HostRoot or SuspenseComponent here.
          return targetInst
        } // If the direct event target isn't a React owned DOM node, we need to look
        // to see if one of its parents is a React owned DOM node.

        var parentNode = targetNode.parentNode

        while (parentNode) {
          // We'll check if this is a container root that could include
          // React nodes in the future. We need to check this first because
          // if we're a child of a dehydrated container, we need to first
          // find that inner container before moving on to finding the parent
          // instance. Note that we don't check this field on  the targetNode
          // itself because the fibers are conceptually between the container
          // node and the first child. It isn't surrounding the container node.
          // If it's not a container, we check if it's an instance.
          targetInst =
            parentNode[internalContainerInstanceKey] ||
            parentNode[internalInstanceKey]

          if (targetInst) {
            // Since this wasn't the direct target of the event, we might have
            // stepped past dehydrated DOM nodes to get here. However they could
            // also have been non-React nodes. We need to answer which one.
            // If we the instance doesn't have any children, then there can't be
            // a nested suspense boundary within it. So we can use this as a fast
            // bailout. Most of the time, when people add non-React children to
            // the tree, it is using a ref to a child-less DOM node.
            // Normally we'd only need to check one of the fibers because if it
            // has ever gone from having children to deleting them or vice versa
            // it would have deleted the dehydrated boundary nested inside already.
            // However, since the HostRoot starts out with an alternate it might
            // have one on the alternate so we need to check in case this was a
            // root.
            var alternate = targetInst.alternate

            if (
              targetInst.child !== null ||
              (alternate !== null && alternate.child !== null)
            ) {
              // Next we need to figure out if the node that skipped past is
              // nested within a dehydrated boundary and if so, which one.
              var suspenseInstance = getParentSuspenseInstance(targetNode)

              while (suspenseInstance !== null) {
                // We found a suspense instance. That means that we haven't
                // hydrated it yet. Even though we leave the comments in the
                // DOM after hydrating, and there are boundaries in the DOM
                // that could already be hydrated, we wouldn't have found them
                // through this pass since if the target is hydrated it would
                // have had an internalInstanceKey on it.
                // Let's get the fiber associated with the SuspenseComponent
                // as the deepest instance.
                var targetSuspenseInst = suspenseInstance[internalInstanceKey]

                if (targetSuspenseInst) {
                  return targetSuspenseInst
                } // If we don't find a Fiber on the comment, it might be because
                // we haven't gotten to hydrate it yet. There might still be a
                // parent boundary that hasn't above this one so we need to find
                // the outer most that is known.

                suspenseInstance = getParentSuspenseInstance(suspenseInstance) // If we don't find one, then that should mean that the parent
                // host component also hasn't hydrated yet. We can return it
                // below since it will bail out on the isMounted check later.
              }
            }

            return targetInst
          }

          targetNode = parentNode
          parentNode = targetNode.parentNode
        }

        return null
      }
      /**
       * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
       * instance, or null if the node was not rendered by this React.
       */

      function getInstanceFromNode(node) {
        var inst =
          node[internalInstanceKey] || node[internalContainerInstanceKey]

        if (inst) {
          if (
            inst.tag === HostComponent ||
            inst.tag === HostText ||
            inst.tag === SuspenseComponent ||
            inst.tag === HostRoot
          ) {
            return inst
          } else {
            return null
          }
        }

        return null
      }
      /**
       * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
       * DOM node.
       */

      function getNodeFromInstance(inst) {
        if (inst.tag === HostComponent || inst.tag === HostText) {
          // In Fiber this, is just the state node right now. We assume it will be
          // a host component or host text.
          return inst.stateNode
        } // Without this first invariant, passing a non-DOM-component triggers the next
        // invariant for a missing parent, which is super confusing.

        {
          {
            throw Error('getNodeFromInstance: Invalid argument.')
          }
        }
      }
      function getFiberCurrentPropsFromNode(node) {
        return node[internalPropsKey] || null
      }
      function updateFiberProps(node, props) {
        node[internalPropsKey] = props
      }
      function getEventListenerSet(node) {
        var elementListenerSet = node[internalEventHandlersKey]

        if (elementListenerSet === undefined) {
          elementListenerSet = node[internalEventHandlersKey] = new Set()
        }

        return elementListenerSet
      }

      var loggedTypeFailures = {}
      var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame

      function setCurrentlyValidatingElement(element) {
        {
          if (element) {
            var owner = element._owner
            var stack = describeUnknownElementTypeFrameInDEV(
              element.type,
              element._source,
              owner ? owner.type : null
            )
            ReactDebugCurrentFrame$1.setExtraStackFrame(stack)
          } else {
            ReactDebugCurrentFrame$1.setExtraStackFrame(null)
          }
        }
      }

      function checkPropTypes(
        typeSpecs,
        values,
        location,
        componentName,
        element
      ) {
        {
          // $FlowFixMe This is okay but Flow doesn't know it.
          var has = Function.call.bind(Object.prototype.hasOwnProperty)

          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error$1 = void 0 // Prop type validation may throw. In case they do, we don't want to
              // fail the render phase where it didn't fail before. So we log it.
              // After these have been cleaned up, we'll let them throw.

              try {
                // This is intentionally an invariant that gets caught. It's the same
                // behavior as without this statement except with a better message.
                if (typeof typeSpecs[typeSpecName] !== 'function') {
                  var err = Error(
                    (componentName || 'React class') +
                      ': ' +
                      location +
                      ' type `' +
                      typeSpecName +
                      '` is invalid; ' +
                      'it must be a function, usually from the `prop-types` package, but received `' +
                      typeof typeSpecs[typeSpecName] +
                      '`.' +
                      'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
                  )
                  err.name = 'Invariant Violation'
                  throw err
                }

                error$1 = typeSpecs[typeSpecName](
                  values,
                  typeSpecName,
                  componentName,
                  location,
                  null,
                  'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED'
                )
              } catch (ex) {
                error$1 = ex
              }

              if (error$1 && !(error$1 instanceof Error)) {
                setCurrentlyValidatingElement(element)

                error(
                  '%s: type specification of %s' +
                    ' `%s` is invalid; the type checker ' +
                    'function must return `null` or an `Error` but returned a %s. ' +
                    'You may have forgotten to pass an argument to the type checker ' +
                    'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
                    'shape all require an argument).',
                  componentName || 'React class',
                  location,
                  typeSpecName,
                  typeof error$1
                )

                setCurrentlyValidatingElement(null)
              }

              if (
                error$1 instanceof Error &&
                !(error$1.message in loggedTypeFailures)
              ) {
                // Only monitor this failure once because there tends to be a lot of the
                // same error.
                loggedTypeFailures[error$1.message] = true
                setCurrentlyValidatingElement(element)

                error('Failed %s type: %s', location, error$1.message)

                setCurrentlyValidatingElement(null)
              }
            }
          }
        }
      }

      var valueStack = []
      var fiberStack

      {
        fiberStack = []
      }

      var index = -1

      function createCursor(defaultValue) {
        return {
          current: defaultValue,
        }
      }

      function pop(cursor, fiber) {
        if (index < 0) {
          {
            error('Unexpected pop.')
          }

          return
        }

        {
          if (fiber !== fiberStack[index]) {
            error('Unexpected Fiber popped.')
          }
        }

        cursor.current = valueStack[index]
        valueStack[index] = null

        {
          fiberStack[index] = null
        }

        index--
      }

      function push(cursor, value, fiber) {
        index++
        valueStack[index] = cursor.current

        {
          fiberStack[index] = fiber
        }

        cursor.current = value
      }

      var warnedAboutMissingGetChildContext

      {
        warnedAboutMissingGetChildContext = {}
      }

      var emptyContextObject = {}

      {
        Object.freeze(emptyContextObject)
      } // A cursor to the current merged context object on the stack.

      var contextStackCursor = createCursor(emptyContextObject) // A cursor to a boolean indicating whether the context has changed.

      var didPerformWorkStackCursor = createCursor(false) // Keep track of the previous context object that was on the stack.
      // We use this to get access to the parent context after we have already
      // pushed the next context provider, and now need to merge their contexts.

      var previousContext = emptyContextObject

      function getUnmaskedContext(
        workInProgress,
        Component,
        didPushOwnContextIfProvider
      ) {
        {
          if (didPushOwnContextIfProvider && isContextProvider(Component)) {
            // If the fiber is a context provider itself, when we read its context
            // we may have already pushed its own child context on the stack. A context
            // provider should not "see" its own child context. Therefore we read the
            // previous (parent) context instead for a context provider.
            return previousContext
          }

          return contextStackCursor.current
        }
      }

      function cacheContext(workInProgress, unmaskedContext, maskedContext) {
        {
          var instance = workInProgress.stateNode
          instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext
          instance.__reactInternalMemoizedMaskedChildContext = maskedContext
        }
      }

      function getMaskedContext(workInProgress, unmaskedContext) {
        {
          var type = workInProgress.type
          var contextTypes = type.contextTypes

          if (!contextTypes) {
            return emptyContextObject
          } // Avoid recreating masked context unless unmasked context has changed.
          // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
          // This may trigger infinite loops if componentWillReceiveProps calls setState.

          var instance = workInProgress.stateNode

          if (
            instance &&
            instance.__reactInternalMemoizedUnmaskedChildContext ===
              unmaskedContext
          ) {
            return instance.__reactInternalMemoizedMaskedChildContext
          }

          var context = {}

          for (var key in contextTypes) {
            context[key] = unmaskedContext[key]
          }

          {
            var name = getComponentName(type) || 'Unknown'
            checkPropTypes(contextTypes, context, 'context', name)
          } // Cache unmasked context so we can avoid recreating masked context unless necessary.
          // Context is created before the class component is instantiated so check for instance.

          if (instance) {
            cacheContext(workInProgress, unmaskedContext, context)
          }

          return context
        }
      }

      function hasContextChanged() {
        {
          return didPerformWorkStackCursor.current
        }
      }

      function isContextProvider(type) {
        {
          var childContextTypes = type.childContextTypes
          return childContextTypes !== null && childContextTypes !== undefined
        }
      }

      function popContext(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber)
          pop(contextStackCursor, fiber)
        }
      }

      function popTopLevelContextObject(fiber) {
        {
          pop(didPerformWorkStackCursor, fiber)
          pop(contextStackCursor, fiber)
        }
      }

      function pushTopLevelContextObject(fiber, context, didChange) {
        {
          if (!(contextStackCursor.current === emptyContextObject)) {
            {
              throw Error(
                'Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.'
              )
            }
          }

          push(contextStackCursor, context, fiber)
          push(didPerformWorkStackCursor, didChange, fiber)
        }
      }

      function processChildContext(fiber, type, parentContext) {
        {
          var instance = fiber.stateNode
          var childContextTypes = type.childContextTypes // TODO (bvaughn) Replace this behavior with an invariant() in the future.
          // It has only been added in Fiber to match the (unintentional) behavior in Stack.

          if (typeof instance.getChildContext !== 'function') {
            {
              var componentName = getComponentName(type) || 'Unknown'

              if (!warnedAboutMissingGetChildContext[componentName]) {
                warnedAboutMissingGetChildContext[componentName] = true

                error(
                  '%s.childContextTypes is specified but there is no getChildContext() method ' +
                    'on the instance. You can either define getChildContext() on %s or remove ' +
                    'childContextTypes from it.',
                  componentName,
                  componentName
                )
              }
            }

            return parentContext
          }

          var childContext = instance.getChildContext()

          for (var contextKey in childContext) {
            if (!(contextKey in childContextTypes)) {
              {
                throw Error(
                  (getComponentName(type) || 'Unknown') +
                    '.getChildContext(): key "' +
                    contextKey +
                    '" is not defined in childContextTypes.'
                )
              }
            }
          }

          {
            var name = getComponentName(type) || 'Unknown'
            checkPropTypes(
              childContextTypes,
              childContext,
              'child context',
              name
            )
          }

          return _assign({}, parentContext, childContext)
        }
      }

      function pushContextProvider(workInProgress) {
        {
          var instance = workInProgress.stateNode // We push the context as early as possible to ensure stack integrity.
          // If the instance does not exist yet, we will push null at first,
          // and replace it on the stack later when invalidating the context.

          var memoizedMergedChildContext =
            (instance && instance.__reactInternalMemoizedMergedChildContext) ||
            emptyContextObject // Remember the parent context so we can merge with it later.
          // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

          previousContext = contextStackCursor.current
          push(contextStackCursor, memoizedMergedChildContext, workInProgress)
          push(
            didPerformWorkStackCursor,
            didPerformWorkStackCursor.current,
            workInProgress
          )
          return true
        }
      }

      function invalidateContextProvider(workInProgress, type, didChange) {
        {
          var instance = workInProgress.stateNode

          if (!instance) {
            {
              throw Error(
                'Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.'
              )
            }
          }

          if (didChange) {
            // Merge parent and own context.
            // Skip this if we're not updating due to sCU.
            // This avoids unnecessarily recomputing memoized values.
            var mergedContext = processChildContext(
              workInProgress,
              type,
              previousContext
            )
            instance.__reactInternalMemoizedMergedChildContext = mergedContext // Replace the old (or empty) context with the new one.
            // It is important to unwind the context in the reverse order.

            pop(didPerformWorkStackCursor, workInProgress)
            pop(contextStackCursor, workInProgress) // Now push the new context and mark that it has changed.

            push(contextStackCursor, mergedContext, workInProgress)
            push(didPerformWorkStackCursor, didChange, workInProgress)
          } else {
            pop(didPerformWorkStackCursor, workInProgress)
            push(didPerformWorkStackCursor, didChange, workInProgress)
          }
        }
      }

      function findCurrentUnmaskedContext(fiber) {
        {
          // Currently this is only used with renderSubtreeIntoContainer; not sure if it
          // makes sense elsewhere
          if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
            {
              throw Error(
                'Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.'
              )
            }
          }

          var node = fiber

          do {
            switch (node.tag) {
              case HostRoot:
                return node.stateNode.context

              case ClassComponent: {
                var Component = node.type

                if (isContextProvider(Component)) {
                  return node.stateNode
                    .__reactInternalMemoizedMergedChildContext
                }

                break
              }
            }

            node = node.return
          } while (node !== null)

          {
            {
              throw Error(
                'Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.'
              )
            }
          }
        }
      }

      var LegacyRoot = 0
      var BlockingRoot = 1
      var ConcurrentRoot = 2

      var rendererID = null
      var injectedHook = null
      var hasLoggedError = false
      var isDevToolsPresent =
        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined'
      function injectInternals(internals) {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
          // No DevTools
          return false
        }

        var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__

        if (hook.isDisabled) {
          // This isn't a real property on the hook, but it can be set to opt out
          // of DevTools integration and associated warnings and logs.
          // https://github.com/facebook/react/issues/3877
          return true
        }

        if (!hook.supportsFiber) {
          {
            error(
              'The installed version of React DevTools is too old and will not work ' +
                'with the current version of React. Please update React DevTools. ' +
                'https://reactjs.org/link/react-devtools'
            )
          } // DevTools exists, even though it doesn't support Fiber.

          return true
        }

        try {
          rendererID = hook.inject(internals) // We have successfully injected, so now it is safe to set up hooks.

          injectedHook = hook
        } catch (err) {
          // Catch all errors because it is unsafe to throw during initialization.
          {
            error('React instrumentation encountered an error: %s.', err)
          }
        } // DevTools exists

        return true
      }
      function onScheduleRoot(root, children) {
        {
          if (
            injectedHook &&
            typeof injectedHook.onScheduleFiberRoot === 'function'
          ) {
            try {
              injectedHook.onScheduleFiberRoot(rendererID, root, children)
            } catch (err) {
              if (!hasLoggedError) {
                hasLoggedError = true

                error('React instrumentation encountered an error: %s', err)
              }
            }
          }
        }
      }
      function onCommitRoot(root, priorityLevel) {
        if (
          injectedHook &&
          typeof injectedHook.onCommitFiberRoot === 'function'
        ) {
          try {
            var didError = (root.current.flags & DidCapture) === DidCapture

            if (enableProfilerTimer) {
              injectedHook.onCommitFiberRoot(
                rendererID,
                root,
                priorityLevel,
                didError
              )
            }
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true

                error('React instrumentation encountered an error: %s', err)
              }
            }
          }
        }
      }
      function onCommitUnmount(fiber) {
        if (
          injectedHook &&
          typeof injectedHook.onCommitFiberUnmount === 'function'
        ) {
          try {
            injectedHook.onCommitFiberUnmount(rendererID, fiber)
          } catch (err) {
            {
              if (!hasLoggedError) {
                hasLoggedError = true

                error('React instrumentation encountered an error: %s', err)
              }
            }
          }
        }
      }

      var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
        Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
        Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
        Scheduler_shouldYield = Scheduler.unstable_shouldYield,
        Scheduler_requestPaint = Scheduler.unstable_requestPaint,
        Scheduler_now$1 = Scheduler.unstable_now,
        Scheduler_getCurrentPriorityLevel =
          Scheduler.unstable_getCurrentPriorityLevel,
        Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
        Scheduler_UserBlockingPriority =
          Scheduler.unstable_UserBlockingPriority,
        Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
        Scheduler_LowPriority = Scheduler.unstable_LowPriority,
        Scheduler_IdlePriority = Scheduler.unstable_IdlePriority

      {
        // Provide explicit error message when production+profiling bundle of e.g.
        // react-dom is used with production (non-profiling) bundle of
        // scheduler/tracing
        if (
          !(
            tracing.__interactionsRef != null &&
            tracing.__interactionsRef.current != null
          )
        ) {
          {
            throw Error(
              'It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling'
            )
          }
        }
      }

      var fakeCallbackNode = {} // Except for NoPriority, these correspond to Scheduler priorities. We use
      // ascending numbers so we can compare them like numbers. They start at 90 to
      // avoid clashing with Scheduler's priorities.

      var ImmediatePriority$1 = 99
      var UserBlockingPriority$2 = 98
      var NormalPriority$1 = 97
      var LowPriority$1 = 96
      var IdlePriority$1 = 95 // NoPriority is the absence of priority. Also React-only.

      var NoPriority$1 = 90
      var shouldYield = Scheduler_shouldYield
      var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
        Scheduler_requestPaint !== undefined
          ? Scheduler_requestPaint
          : function () {}
      var syncQueue = null
      var immediateQueueCallbackNode = null
      var isFlushingSyncQueue = false
      var initialTimeMs$1 = Scheduler_now$1() // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
      // This will be the case for modern browsers that support `performance.now`. In
      // older browsers, Scheduler falls back to `Date.now`, which returns a Unix
      // timestamp. In that case, subtract the module initialization time to simulate
      // the behavior of performance.now and keep our times small enough to fit
      // within 32 bits.
      // TODO: Consider lifting this into Scheduler.

      var now =
        initialTimeMs$1 < 10000
          ? Scheduler_now$1
          : function () {
              return Scheduler_now$1() - initialTimeMs$1
            }
      function getCurrentPriorityLevel() {
        switch (Scheduler_getCurrentPriorityLevel()) {
          case Scheduler_ImmediatePriority:
            return ImmediatePriority$1

          case Scheduler_UserBlockingPriority:
            return UserBlockingPriority$2

          case Scheduler_NormalPriority:
            return NormalPriority$1

          case Scheduler_LowPriority:
            return LowPriority$1

          case Scheduler_IdlePriority:
            return IdlePriority$1

          default: {
            {
              throw Error('Unknown priority level.')
            }
          }
        }
      }

      function reactPriorityToSchedulerPriority(reactPriorityLevel) {
        switch (reactPriorityLevel) {
          case ImmediatePriority$1:
            return Scheduler_ImmediatePriority

          case UserBlockingPriority$2:
            return Scheduler_UserBlockingPriority

          case NormalPriority$1:
            return Scheduler_NormalPriority

          case LowPriority$1:
            return Scheduler_LowPriority

          case IdlePriority$1:
            return Scheduler_IdlePriority

          default: {
            {
              throw Error('Unknown priority level.')
            }
          }
        }
      }

      function runWithPriority$1(reactPriorityLevel, fn) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel)
        return Scheduler_runWithPriority(priorityLevel, fn)
      }
      function scheduleCallback(reactPriorityLevel, callback, options) {
        var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel)
        return Scheduler_scheduleCallback(priorityLevel, callback, options)
      }
      function scheduleSyncCallback(callback) {
        // Push this callback into an internal queue. We'll flush these either in
        // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
        if (syncQueue === null) {
          syncQueue = [callback] // Flush the queue in the next tick, at the earliest.

          immediateQueueCallbackNode = Scheduler_scheduleCallback(
            Scheduler_ImmediatePriority,
            flushSyncCallbackQueueImpl
          )
        } else {
          // Push onto existing queue. Don't need to schedule a callback because
          // we already scheduled one when we created the queue.
          syncQueue.push(callback)
        }

        return fakeCallbackNode
      }
      function cancelCallback(callbackNode) {
        if (callbackNode !== fakeCallbackNode) {
          Scheduler_cancelCallback(callbackNode)
        }
      }
      function flushSyncCallbackQueue() {
        if (immediateQueueCallbackNode !== null) {
          var node = immediateQueueCallbackNode
          immediateQueueCallbackNode = null
          Scheduler_cancelCallback(node)
        }

        flushSyncCallbackQueueImpl()
      }

      function flushSyncCallbackQueueImpl() {
        if (!isFlushingSyncQueue && syncQueue !== null) {
          // Prevent re-entrancy.
          isFlushingSyncQueue = true
          var i = 0

          {
            try {
              var _isSync2 = true
              var _queue = syncQueue
              runWithPriority$1(ImmediatePriority$1, function () {
                for (; i < _queue.length; i++) {
                  var callback = _queue[i]

                  do {
                    callback = callback(_isSync2)
                  } while (callback !== null)
                }
              })
              syncQueue = null
            } catch (error) {
              // If something throws, leave the remaining callbacks on the queue.
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1)
              } // Resume flushing in the next tick

              Scheduler_scheduleCallback(
                Scheduler_ImmediatePriority,
                flushSyncCallbackQueue
              )
              throw error
            } finally {
              isFlushingSyncQueue = false
            }
          }
        }
      }

      // TODO: this is special because it gets imported during build.
      var ReactVersion = '17.0.2'

      var NoMode = 0
      var StrictMode = 1 // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
      // tag instead

      var BlockingMode = 2
      var ConcurrentMode = 4
      var ProfileMode = 8
      var DebugTracingMode = 16

      var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig
      var NoTransition = 0
      function requestCurrentTransition() {
        return ReactCurrentBatchConfig.transition
      }

      var ReactStrictModeWarnings = {
        recordUnsafeLifecycleWarnings: function (fiber, instance) {},
        flushPendingUnsafeLifecycleWarnings: function () {},
        recordLegacyContextWarning: function (fiber, instance) {},
        flushLegacyContextWarning: function () {},
        discardPendingWarnings: function () {},
      }

      {
        var findStrictRoot = function (fiber) {
          var maybeStrictRoot = null
          var node = fiber

          while (node !== null) {
            if (node.mode & StrictMode) {
              maybeStrictRoot = node
            }

            node = node.return
          }

          return maybeStrictRoot
        }

        var setToSortedString = function (set) {
          var array = []
          set.forEach(function (value) {
            array.push(value)
          })
          return array.sort().join(', ')
        }

        var pendingComponentWillMountWarnings = []
        var pendingUNSAFE_ComponentWillMountWarnings = []
        var pendingComponentWillReceivePropsWarnings = []
        var pendingUNSAFE_ComponentWillReceivePropsWarnings = []
        var pendingComponentWillUpdateWarnings = []
        var pendingUNSAFE_ComponentWillUpdateWarnings = [] // Tracks components we have already warned about.

        var didWarnAboutUnsafeLifecycles = new Set()

        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (
          fiber,
          instance
        ) {
          // Dedup strategy: Warn once per component.
          if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
            return
          }

          if (
            typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true
          ) {
            pendingComponentWillMountWarnings.push(fiber)
          }

          if (
            fiber.mode & StrictMode &&
            typeof instance.UNSAFE_componentWillMount === 'function'
          ) {
            pendingUNSAFE_ComponentWillMountWarnings.push(fiber)
          }

          if (
            typeof instance.componentWillReceiveProps === 'function' &&
            instance.componentWillReceiveProps.__suppressDeprecationWarning !==
              true
          ) {
            pendingComponentWillReceivePropsWarnings.push(fiber)
          }

          if (
            fiber.mode & StrictMode &&
            typeof instance.UNSAFE_componentWillReceiveProps === 'function'
          ) {
            pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber)
          }

          if (
            typeof instance.componentWillUpdate === 'function' &&
            instance.componentWillUpdate.__suppressDeprecationWarning !== true
          ) {
            pendingComponentWillUpdateWarnings.push(fiber)
          }

          if (
            fiber.mode & StrictMode &&
            typeof instance.UNSAFE_componentWillUpdate === 'function'
          ) {
            pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber)
          }
        }

        ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings =
          function () {
            // We do an initial pass to gather component names
            var componentWillMountUniqueNames = new Set()

            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function (fiber) {
                componentWillMountUniqueNames.add(
                  getComponentName(fiber.type) || 'Component'
                )
                didWarnAboutUnsafeLifecycles.add(fiber.type)
              })
              pendingComponentWillMountWarnings = []
            }

            var UNSAFE_componentWillMountUniqueNames = new Set()

            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function (
                fiber
              ) {
                UNSAFE_componentWillMountUniqueNames.add(
                  getComponentName(fiber.type) || 'Component'
                )
                didWarnAboutUnsafeLifecycles.add(fiber.type)
              })
              pendingUNSAFE_ComponentWillMountWarnings = []
            }

            var componentWillReceivePropsUniqueNames = new Set()

            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function (
                fiber
              ) {
                componentWillReceivePropsUniqueNames.add(
                  getComponentName(fiber.type) || 'Component'
                )
                didWarnAboutUnsafeLifecycles.add(fiber.type)
              })
              pendingComponentWillReceivePropsWarnings = []
            }

            var UNSAFE_componentWillReceivePropsUniqueNames = new Set()

            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (
                fiber
              ) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(
                  getComponentName(fiber.type) || 'Component'
                )
                didWarnAboutUnsafeLifecycles.add(fiber.type)
              })
              pendingUNSAFE_ComponentWillReceivePropsWarnings = []
            }

            var componentWillUpdateUniqueNames = new Set()

            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function (fiber) {
                componentWillUpdateUniqueNames.add(
                  getComponentName(fiber.type) || 'Component'
                )
                didWarnAboutUnsafeLifecycles.add(fiber.type)
              })
              pendingComponentWillUpdateWarnings = []
            }

            var UNSAFE_componentWillUpdateUniqueNames = new Set()

            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (
                fiber
              ) {
                UNSAFE_componentWillUpdateUniqueNames.add(
                  getComponentName(fiber.type) || 'Component'
                )
                didWarnAboutUnsafeLifecycles.add(fiber.type)
              })
              pendingUNSAFE_ComponentWillUpdateWarnings = []
            } // Finally, we flush all the warnings
            // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'

            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(
                UNSAFE_componentWillMountUniqueNames
              )

              error(
                'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
                  'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' +
                  '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' +
                  '\nPlease update the following components: %s',
                sortedNames
              )
            }

            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(
                UNSAFE_componentWillReceivePropsUniqueNames
              )

              error(
                'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +
                  'and may indicate bugs in your code. ' +
                  'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' +
                  '* Move data fetching code or side effects to componentDidUpdate.\n' +
                  "* If you're updating state whenever props change, " +
                  'refactor your code to use memoization techniques or move it to ' +
                  'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' +
                  '\nPlease update the following components: %s',
                _sortedNames
              )
            }

            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(
                UNSAFE_componentWillUpdateUniqueNames
              )

              error(
                'Using UNSAFE_componentWillUpdate in strict mode is not recommended ' +
                  'and may indicate bugs in your code. ' +
                  'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' +
                  '* Move data fetching code or side effects to componentDidUpdate.\n' +
                  '\nPlease update the following components: %s',
                _sortedNames2
              )
            }

            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(
                componentWillMountUniqueNames
              )

              warn(
                'componentWillMount has been renamed, and is not recommended for use. ' +
                  'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' +
                  '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' +
                  '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' +
                  'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +
                  'To rename all deprecated lifecycles to their new names, you can run ' +
                  '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                  '\nPlease update the following components: %s',
                _sortedNames3
              )
            }

            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(
                componentWillReceivePropsUniqueNames
              )

              warn(
                'componentWillReceiveProps has been renamed, and is not recommended for use. ' +
                  'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' +
                  '* Move data fetching code or side effects to componentDidUpdate.\n' +
                  "* If you're updating state whenever props change, refactor your " +
                  'code to use memoization techniques or move it to ' +
                  'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' +
                  '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' +
                  'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +
                  'To rename all deprecated lifecycles to their new names, you can run ' +
                  '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                  '\nPlease update the following components: %s',
                _sortedNames4
              )
            }

            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(
                componentWillUpdateUniqueNames
              )

              warn(
                'componentWillUpdate has been renamed, and is not recommended for use. ' +
                  'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' +
                  '* Move data fetching code or side effects to componentDidUpdate.\n' +
                  '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' +
                  'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' +
                  'To rename all deprecated lifecycles to their new names, you can run ' +
                  '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' +
                  '\nPlease update the following components: %s',
                _sortedNames5
              )
            }
          }

        var pendingLegacyContextWarning = new Map() // Tracks components we have already warned about.

        var didWarnAboutLegacyContext = new Set()

        ReactStrictModeWarnings.recordLegacyContextWarning = function (
          fiber,
          instance
        ) {
          var strictRoot = findStrictRoot(fiber)

          if (strictRoot === null) {
            error(
              'Expected to find a StrictMode component in a strict mode tree. ' +
                'This error is likely caused by a bug in React. Please file an issue.'
            )

            return
          } // Dedup strategy: Warn once per component.

          if (didWarnAboutLegacyContext.has(fiber.type)) {
            return
          }

          var warningsForRoot = pendingLegacyContextWarning.get(strictRoot)

          if (
            fiber.type.contextTypes != null ||
            fiber.type.childContextTypes != null ||
            (instance !== null &&
              typeof instance.getChildContext === 'function')
          ) {
            if (warningsForRoot === undefined) {
              warningsForRoot = []
              pendingLegacyContextWarning.set(strictRoot, warningsForRoot)
            }

            warningsForRoot.push(fiber)
          }
        }

        ReactStrictModeWarnings.flushLegacyContextWarning = function () {
          pendingLegacyContextWarning.forEach(function (
            fiberArray,
            strictRoot
          ) {
            if (fiberArray.length === 0) {
              return
            }

            var firstFiber = fiberArray[0]
            var uniqueNames = new Set()
            fiberArray.forEach(function (fiber) {
              uniqueNames.add(getComponentName(fiber.type) || 'Component')
              didWarnAboutLegacyContext.add(fiber.type)
            })
            var sortedNames = setToSortedString(uniqueNames)

            try {
              setCurrentFiber(firstFiber)

              error(
                'Legacy context API has been detected within a strict-mode tree.' +
                  '\n\nThe old API will be supported in all 16.x releases, but applications ' +
                  'using it should migrate to the new version.' +
                  '\n\nPlease update the following components: %s' +
                  '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context',
                sortedNames
              )
            } finally {
              resetCurrentFiber()
            }
          })
        }

        ReactStrictModeWarnings.discardPendingWarnings = function () {
          pendingComponentWillMountWarnings = []
          pendingUNSAFE_ComponentWillMountWarnings = []
          pendingComponentWillReceivePropsWarnings = []
          pendingUNSAFE_ComponentWillReceivePropsWarnings = []
          pendingComponentWillUpdateWarnings = []
          pendingUNSAFE_ComponentWillUpdateWarnings = []
          pendingLegacyContextWarning = new Map()
        }
      }

      function resolveDefaultProps(Component, baseProps) {
        if (Component && Component.defaultProps) {
          // Resolve default props. Taken from ReactElement
          var props = _assign({}, baseProps)

          var defaultProps = Component.defaultProps

          for (var propName in defaultProps) {
            if (props[propName] === undefined) {
              props[propName] = defaultProps[propName]
            }
          }

          return props
        }

        return baseProps
      }

      // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
      // Math.pow(2, 30) - 1
      // 0b111111111111111111111111111111
      var MAX_SIGNED_31_BIT_INT = 1073741823

      var valueCursor = createCursor(null)
      var rendererSigil

      {
        // Use this to detect multiple renderers using the same context
        rendererSigil = {}
      }

      var currentlyRenderingFiber = null
      var lastContextDependency = null
      var lastContextWithAllBitsObserved = null
      var isDisallowedContextReadInDEV = false
      function resetContextDependencies() {
        // This is called right before React yields execution, to ensure `readContext`
        // cannot be called outside the render phase.
        currentlyRenderingFiber = null
        lastContextDependency = null
        lastContextWithAllBitsObserved = null

        {
          isDisallowedContextReadInDEV = false
        }
      }
      function enterDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = true
        }
      }
      function exitDisallowedContextReadInDEV() {
        {
          isDisallowedContextReadInDEV = false
        }
      }
      function pushProvider(providerFiber, nextValue) {
        var context = providerFiber.type._context

        {
          push(valueCursor, context._currentValue, providerFiber)
          context._currentValue = nextValue

          {
            if (
              context._currentRenderer !== undefined &&
              context._currentRenderer !== null &&
              context._currentRenderer !== rendererSigil
            ) {
              error(
                'Detected multiple renderers concurrently rendering the ' +
                  'same context provider. This is currently unsupported.'
              )
            }

            context._currentRenderer = rendererSigil
          }
        }
      }
      function popProvider(providerFiber) {
        var currentValue = valueCursor.current
        pop(valueCursor, providerFiber)
        var context = providerFiber.type._context

        {
          context._currentValue = currentValue
        }
      }
      function calculateChangedBits(context, newValue, oldValue) {
        if (objectIs(oldValue, newValue)) {
          // No change
          return 0
        } else {
          var changedBits =
            typeof context._calculateChangedBits === 'function'
              ? context._calculateChangedBits(oldValue, newValue)
              : MAX_SIGNED_31_BIT_INT

          {
            if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
              error(
                'calculateChangedBits: Expected the return value to be a ' +
                  '31-bit integer. Instead received: %s',
                changedBits
              )
            }
          }

          return changedBits | 0
        }
      }
      function scheduleWorkOnParentPath(parent, renderLanes) {
        // Update the child lanes of all the ancestors, including the alternates.
        var node = parent

        while (node !== null) {
          var alternate = node.alternate

          if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
            node.childLanes = mergeLanes(node.childLanes, renderLanes)

            if (alternate !== null) {
              alternate.childLanes = mergeLanes(
                alternate.childLanes,
                renderLanes
              )
            }
          } else if (
            alternate !== null &&
            !isSubsetOfLanes(alternate.childLanes, renderLanes)
          ) {
            alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes)
          } else {
            // Neither alternate was updated, which means the rest of the
            // ancestor path already has sufficient priority.
            break
          }

          node = node.return
        }
      }
      function propagateContextChange(
        workInProgress,
        context,
        changedBits,
        renderLanes
      ) {
        var fiber = workInProgress.child

        if (fiber !== null) {
          // Set the return pointer of the child to the work-in-progress fiber.
          fiber.return = workInProgress
        }

        while (fiber !== null) {
          var nextFiber = void 0 // Visit this fiber.

          var list = fiber.dependencies

          if (list !== null) {
            nextFiber = fiber.child
            var dependency = list.firstContext

            while (dependency !== null) {
              // Check if the context matches.
              if (
                dependency.context === context &&
                (dependency.observedBits & changedBits) !== 0
              ) {
                // Match! Schedule an update on this fiber.
                if (fiber.tag === ClassComponent) {
                  // Schedule a force update on the work-in-progress.
                  var update = createUpdate(
                    NoTimestamp,
                    pickArbitraryLane(renderLanes)
                  )
                  update.tag = ForceUpdate // TODO: Because we don't have a work-in-progress, this will add the
                  // update to the current fiber, too, which means it will persist even if
                  // this render is thrown away. Since it's a race condition, not sure it's
                  // worth fixing.

                  enqueueUpdate(fiber, update)
                }

                fiber.lanes = mergeLanes(fiber.lanes, renderLanes)
                var alternate = fiber.alternate

                if (alternate !== null) {
                  alternate.lanes = mergeLanes(alternate.lanes, renderLanes)
                }

                scheduleWorkOnParentPath(fiber.return, renderLanes) // Mark the updated lanes on the list, too.

                list.lanes = mergeLanes(list.lanes, renderLanes) // Since we already found a match, we can stop traversing the
                // dependency list.

                break
              }

              dependency = dependency.next
            }
          } else if (fiber.tag === ContextProvider) {
            // Don't scan deeper if this is a matching provider
            nextFiber = fiber.type === workInProgress.type ? null : fiber.child
          } else {
            // Traverse down.
            nextFiber = fiber.child
          }

          if (nextFiber !== null) {
            // Set the return pointer of the child to the work-in-progress fiber.
            nextFiber.return = fiber
          } else {
            // No child. Traverse to next sibling.
            nextFiber = fiber

            while (nextFiber !== null) {
              if (nextFiber === workInProgress) {
                // We're back to the root of this subtree. Exit.
                nextFiber = null
                break
              }

              var sibling = nextFiber.sibling

              if (sibling !== null) {
                // Set the return pointer of the sibling to the work-in-progress fiber.
                sibling.return = nextFiber.return
                nextFiber = sibling
                break
              } // No more siblings. Traverse up.

              nextFiber = nextFiber.return
            }
          }

          fiber = nextFiber
        }
      }
      function prepareToReadContext(workInProgress, renderLanes) {
        currentlyRenderingFiber = workInProgress
        lastContextDependency = null
        lastContextWithAllBitsObserved = null
        var dependencies = workInProgress.dependencies

        if (dependencies !== null) {
          var firstContext = dependencies.firstContext

          if (firstContext !== null) {
            if (includesSomeLane(dependencies.lanes, renderLanes)) {
              // Context list has a pending update. Mark that this fiber performed work.
              markWorkInProgressReceivedUpdate()
            } // Reset the work-in-progress list

            dependencies.firstContext = null
          }
        }
      }
      function readContext(context, observedBits) {
        {
          // This warning would fire if you read context inside a Hook like useMemo.
          // Unlike the class check below, it's not enforced in production for perf.
          if (isDisallowedContextReadInDEV) {
            error(
              'Context can only be read while React is rendering. ' +
                'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
                'In function components, you can read it directly in the function body, but not ' +
                'inside Hooks like useReducer() or useMemo().'
            )
          }
        }

        if (lastContextWithAllBitsObserved === context);
        else if (observedBits === false || observedBits === 0);
        else {
          var resolvedObservedBits // Avoid deopting on observable arguments or heterogeneous types.

          if (
            typeof observedBits !== 'number' ||
            observedBits === MAX_SIGNED_31_BIT_INT
          ) {
            // Observe all updates.
            lastContextWithAllBitsObserved = context
            resolvedObservedBits = MAX_SIGNED_31_BIT_INT
          } else {
            resolvedObservedBits = observedBits
          }

          var contextItem = {
            context: context,
            observedBits: resolvedObservedBits,
            next: null,
          }

          if (lastContextDependency === null) {
            if (!(currentlyRenderingFiber !== null)) {
              {
                throw Error(
                  'Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().'
                )
              }
            } // This is the first dependency for this component. Create a new list.

            lastContextDependency = contextItem
            currentlyRenderingFiber.dependencies = {
              lanes: NoLanes,
              firstContext: contextItem,
              responders: null,
            }
          } else {
            // Append a new context item.
            lastContextDependency = lastContextDependency.next = contextItem
          }
        }

        return context._currentValue
      }

      var UpdateState = 0
      var ReplaceState = 1
      var ForceUpdate = 2
      var CaptureUpdate = 3 // Global state that is reset at the beginning of calling `processUpdateQueue`.
      // It should only be read right after calling `processUpdateQueue`, via
      // `checkHasForceUpdateAfterProcessing`.

      var hasForceUpdate = false
      var didWarnUpdateInsideUpdate
      var currentlyProcessingQueue

      {
        didWarnUpdateInsideUpdate = false
        currentlyProcessingQueue = null
      }

      function initializeUpdateQueue(fiber) {
        var queue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: {
            pending: null,
          },
          effects: null,
        }
        fiber.updateQueue = queue
      }
      function cloneUpdateQueue(current, workInProgress) {
        // Clone the update queue from current. Unless it's already a clone.
        var queue = workInProgress.updateQueue
        var currentQueue = current.updateQueue

        if (queue === currentQueue) {
          var clone = {
            baseState: currentQueue.baseState,
            firstBaseUpdate: currentQueue.firstBaseUpdate,
            lastBaseUpdate: currentQueue.lastBaseUpdate,
            shared: currentQueue.shared,
            effects: currentQueue.effects,
          }
          workInProgress.updateQueue = clone
        }
      }
      function createUpdate(eventTime, lane) {
        var update = {
          eventTime: eventTime,
          lane: lane,
          tag: UpdateState,
          payload: null,
          callback: null,
          next: null,
        }
        return update
      }
      function enqueueUpdate(fiber, update) {
        var updateQueue = fiber.updateQueue

        if (updateQueue === null) {
          // Only occurs if the fiber has been unmounted.
          return
        }

        var sharedQueue = updateQueue.shared
        var pending = sharedQueue.pending

        if (pending === null) {
          // This is the first update. Create a circular list.
          update.next = update
        } else {
          update.next = pending.next
          pending.next = update
        }

        sharedQueue.pending = update

        {
          if (
            currentlyProcessingQueue === sharedQueue &&
            !didWarnUpdateInsideUpdate
          ) {
            error(
              'An update (setState, replaceState, or forceUpdate) was scheduled ' +
                'from inside an update function. Update functions should be pure, ' +
                'with zero side-effects. Consider using componentDidUpdate or a ' +
                'callback.'
            )

            didWarnUpdateInsideUpdate = true
          }
        }
      }
      function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
        // Captured updates are updates that are thrown by a child during the render
        // phase. They should be discarded if the render is aborted. Therefore,
        // we should only put them on the work-in-progress queue, not the current one.
        var queue = workInProgress.updateQueue // Check if the work-in-progress queue is a clone.

        var current = workInProgress.alternate

        if (current !== null) {
          var currentQueue = current.updateQueue

          if (queue === currentQueue) {
            // The work-in-progress queue is the same as current. This happens when
            // we bail out on a parent fiber that then captures an error thrown by
            // a child. Since we want to append the update only to the work-in
            // -progress queue, we need to clone the updates. We usually clone during
            // processUpdateQueue, but that didn't happen in this case because we
            // skipped over the parent when we bailed out.
            var newFirst = null
            var newLast = null
            var firstBaseUpdate = queue.firstBaseUpdate

            if (firstBaseUpdate !== null) {
              // Loop through the updates and clone them.
              var update = firstBaseUpdate

              do {
                var clone = {
                  eventTime: update.eventTime,
                  lane: update.lane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null,
                }

                if (newLast === null) {
                  newFirst = newLast = clone
                } else {
                  newLast.next = clone
                  newLast = clone
                }

                update = update.next
              } while (update !== null) // Append the captured update the end of the cloned list.

              if (newLast === null) {
                newFirst = newLast = capturedUpdate
              } else {
                newLast.next = capturedUpdate
                newLast = capturedUpdate
              }
            } else {
              // There are no base updates.
              newFirst = newLast = capturedUpdate
            }

            queue = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: newFirst,
              lastBaseUpdate: newLast,
              shared: currentQueue.shared,
              effects: currentQueue.effects,
            }
            workInProgress.updateQueue = queue
            return
          }
        } // Append the update to the end of the list.

        var lastBaseUpdate = queue.lastBaseUpdate

        if (lastBaseUpdate === null) {
          queue.firstBaseUpdate = capturedUpdate
        } else {
          lastBaseUpdate.next = capturedUpdate
        }

        queue.lastBaseUpdate = capturedUpdate
      }

      function getStateFromUpdate(
        workInProgress,
        queue,
        update,
        prevState,
        nextProps,
        instance
      ) {
        switch (update.tag) {
          case ReplaceState: {
            var payload = update.payload

            if (typeof payload === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV()
              }

              var nextState = payload.call(instance, prevState, nextProps)

              {
                if (workInProgress.mode & StrictMode) {
                  disableLogs()

                  try {
                    payload.call(instance, prevState, nextProps)
                  } finally {
                    reenableLogs()
                  }
                }

                exitDisallowedContextReadInDEV()
              }

              return nextState
            } // State object

            return payload
          }

          case CaptureUpdate: {
            workInProgress.flags =
              (workInProgress.flags & ~ShouldCapture) | DidCapture
          }
          // Intentional fallthrough

          case UpdateState: {
            var _payload = update.payload
            var partialState

            if (typeof _payload === 'function') {
              // Updater function
              {
                enterDisallowedContextReadInDEV()
              }

              partialState = _payload.call(instance, prevState, nextProps)

              {
                if (workInProgress.mode & StrictMode) {
                  disableLogs()

                  try {
                    _payload.call(instance, prevState, nextProps)
                  } finally {
                    reenableLogs()
                  }
                }

                exitDisallowedContextReadInDEV()
              }
            } else {
              // Partial state object
              partialState = _payload
            }

            if (partialState === null || partialState === undefined) {
              // Null and undefined are treated as no-ops.
              return prevState
            } // Merge the partial state and the previous state.

            return _assign({}, prevState, partialState)
          }

          case ForceUpdate: {
            hasForceUpdate = true
            return prevState
          }
        }

        return prevState
      }

      function processUpdateQueue(
        workInProgress,
        props,
        instance,
        renderLanes
      ) {
        // This is always non-null on a ClassComponent or HostRoot
        var queue = workInProgress.updateQueue
        hasForceUpdate = false

        {
          currentlyProcessingQueue = queue.shared
        }

        var firstBaseUpdate = queue.firstBaseUpdate
        var lastBaseUpdate = queue.lastBaseUpdate // Check if there are pending updates. If so, transfer them to the base queue.

        var pendingQueue = queue.shared.pending

        if (pendingQueue !== null) {
          queue.shared.pending = null // The pending queue is circular. Disconnect the pointer between first
          // and last so that it's non-circular.

          var lastPendingUpdate = pendingQueue
          var firstPendingUpdate = lastPendingUpdate.next
          lastPendingUpdate.next = null // Append pending updates to base queue

          if (lastBaseUpdate === null) {
            firstBaseUpdate = firstPendingUpdate
          } else {
            lastBaseUpdate.next = firstPendingUpdate
          }

          lastBaseUpdate = lastPendingUpdate // If there's a current queue, and it's different from the base queue, then
          // we need to transfer the updates to that queue, too. Because the base
          // queue is a singly-linked list with no cycles, we can append to both
          // lists and take advantage of structural sharing.
          // TODO: Pass `current` as argument

          var current = workInProgress.alternate

          if (current !== null) {
            // This is always non-null on a ClassComponent or HostRoot
            var currentQueue = current.updateQueue
            var currentLastBaseUpdate = currentQueue.lastBaseUpdate

            if (currentLastBaseUpdate !== lastBaseUpdate) {
              if (currentLastBaseUpdate === null) {
                currentQueue.firstBaseUpdate = firstPendingUpdate
              } else {
                currentLastBaseUpdate.next = firstPendingUpdate
              }

              currentQueue.lastBaseUpdate = lastPendingUpdate
            }
          }
        } // These values may change as we process the queue.

        if (firstBaseUpdate !== null) {
          // Iterate through the list of updates to compute the result.
          var newState = queue.baseState // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
          // from the original lanes.

          var newLanes = NoLanes
          var newBaseState = null
          var newFirstBaseUpdate = null
          var newLastBaseUpdate = null
          var update = firstBaseUpdate

          do {
            var updateLane = update.lane
            var updateEventTime = update.eventTime

            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              // Priority is insufficient. Skip this update. If this is the first
              // skipped update, the previous update/state is the new base
              // update/state.
              var clone = {
                eventTime: updateEventTime,
                lane: updateLane,
                tag: update.tag,
                payload: update.payload,
                callback: update.callback,
                next: null,
              }

              if (newLastBaseUpdate === null) {
                newFirstBaseUpdate = newLastBaseUpdate = clone
                newBaseState = newState
              } else {
                newLastBaseUpdate = newLastBaseUpdate.next = clone
              } // Update the remaining priority in the queue.

              newLanes = mergeLanes(newLanes, updateLane)
            } else {
              // This update does have sufficient priority.
              if (newLastBaseUpdate !== null) {
                var _clone = {
                  eventTime: updateEventTime,
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null,
                }
                newLastBaseUpdate = newLastBaseUpdate.next = _clone
              } // Process this update.

              newState = getStateFromUpdate(
                workInProgress,
                queue,
                update,
                newState,
                props,
                instance
              )
              var callback = update.callback

              if (callback !== null) {
                workInProgress.flags |= Callback
                var effects = queue.effects

                if (effects === null) {
                  queue.effects = [update]
                } else {
                  effects.push(update)
                }
              }
            }

            update = update.next

            if (update === null) {
              pendingQueue = queue.shared.pending

              if (pendingQueue === null) {
                break
              } else {
                // An update was scheduled from inside a reducer. Add the new
                // pending updates to the end of the list and keep processing.
                var _lastPendingUpdate = pendingQueue // Intentionally unsound. Pending updates form a circular list, but we
                // unravel them when transferring them to the base queue.

                var _firstPendingUpdate = _lastPendingUpdate.next
                _lastPendingUpdate.next = null
                update = _firstPendingUpdate
                queue.lastBaseUpdate = _lastPendingUpdate
                queue.shared.pending = null
              }
            }
          } while (true)

          if (newLastBaseUpdate === null) {
            newBaseState = newState
          }

          queue.baseState = newBaseState
          queue.firstBaseUpdate = newFirstBaseUpdate
          queue.lastBaseUpdate = newLastBaseUpdate // Set the remaining expiration time to be whatever is remaining in the queue.
          // This should be fine because the only two other things that contribute to
          // expiration time are props and context. We're already in the middle of the
          // begin phase by the time we start processing the queue, so we've already
          // dealt with the props. Context in components that specify
          // shouldComponentUpdate is tricky; but we'll have to account for
          // that regardless.

          markSkippedUpdateLanes(newLanes)
          workInProgress.lanes = newLanes
          workInProgress.memoizedState = newState
        }

        {
          currentlyProcessingQueue = null
        }
      }

      function callCallback(callback, context) {
        if (!(typeof callback === 'function')) {
          {
            throw Error(
              'Invalid argument passed as callback. Expected a function. Instead received: ' +
                callback
            )
          }
        }

        callback.call(context)
      }

      function resetHasForceUpdateBeforeProcessing() {
        hasForceUpdate = false
      }
      function checkHasForceUpdateAfterProcessing() {
        return hasForceUpdate
      }
      function commitUpdateQueue(finishedWork, finishedQueue, instance) {
        // Commit the effects
        var effects = finishedQueue.effects
        finishedQueue.effects = null

        if (effects !== null) {
          for (var i = 0; i < effects.length; i++) {
            var effect = effects[i]
            var callback = effect.callback

            if (callback !== null) {
              effect.callback = null
              callCallback(callback, instance)
            }
          }
        }
      }

      var fakeInternalInstance = {}
      var isArray = Array.isArray // React.Component uses a shared frozen object by default.
      // We'll use it to determine whether we need to initialize legacy refs.

      var emptyRefsObject = new React.Component().refs
      var didWarnAboutStateAssignmentForComponent
      var didWarnAboutUninitializedState
      var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate
      var didWarnAboutLegacyLifecyclesAndDerivedState
      var didWarnAboutUndefinedDerivedState
      var warnOnUndefinedDerivedState
      var warnOnInvalidCallback
      var didWarnAboutDirectlyAssigningPropsToState
      var didWarnAboutContextTypeAndContextTypes
      var didWarnAboutInvalidateContextType

      {
        didWarnAboutStateAssignmentForComponent = new Set()
        didWarnAboutUninitializedState = new Set()
        didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set()
        didWarnAboutLegacyLifecyclesAndDerivedState = new Set()
        didWarnAboutDirectlyAssigningPropsToState = new Set()
        didWarnAboutUndefinedDerivedState = new Set()
        didWarnAboutContextTypeAndContextTypes = new Set()
        didWarnAboutInvalidateContextType = new Set()
        var didWarnOnInvalidCallback = new Set()

        warnOnInvalidCallback = function (callback, callerName) {
          if (callback === null || typeof callback === 'function') {
            return
          }

          var key = callerName + '_' + callback

          if (!didWarnOnInvalidCallback.has(key)) {
            didWarnOnInvalidCallback.add(key)

            error(
              '%s(...): Expected the last optional `callback` argument to be a ' +
                'function. Instead received: %s.',
              callerName,
              callback
            )
          }
        }

        warnOnUndefinedDerivedState = function (type, partialState) {
          if (partialState === undefined) {
            var componentName = getComponentName(type) || 'Component'

            if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
              didWarnAboutUndefinedDerivedState.add(componentName)

              error(
                '%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' +
                  'You have returned undefined.',
                componentName
              )
            }
          }
        } // This is so gross but it's at least non-critical and can be removed if
        // it causes problems. This is meant to give a nicer error message for
        // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
        // ...)) which otherwise throws a "_processChildContext is not a function"
        // exception.

        Object.defineProperty(fakeInternalInstance, '_processChildContext', {
          enumerable: false,
          value: function () {
            {
              {
                throw Error(
                  "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)."
                )
              }
            }
          },
        })
        Object.freeze(fakeInternalInstance)
      }

      function applyDerivedStateFromProps(
        workInProgress,
        ctor,
        getDerivedStateFromProps,
        nextProps
      ) {
        var prevState = workInProgress.memoizedState

        {
          if (workInProgress.mode & StrictMode) {
            disableLogs()

            try {
              // Invoke the function an extra time to help detect side-effects.
              getDerivedStateFromProps(nextProps, prevState)
            } finally {
              reenableLogs()
            }
          }
        }

        var partialState = getDerivedStateFromProps(nextProps, prevState)

        {
          warnOnUndefinedDerivedState(ctor, partialState)
        } // Merge the partial state and the previous state.

        var memoizedState =
          partialState === null || partialState === undefined
            ? prevState
            : _assign({}, prevState, partialState)
        workInProgress.memoizedState = memoizedState // Once the update queue is empty, persist the derived state onto the
        // base state.

        if (workInProgress.lanes === NoLanes) {
          // Queue is always non-null for classes
          var updateQueue = workInProgress.updateQueue
          updateQueue.baseState = memoizedState
        }
      }
      var classComponentUpdater = {
        isMounted: isMounted,
        enqueueSetState: function (inst, payload, callback) {
          var fiber = get(inst)
          var eventTime = requestEventTime()
          var lane = requestUpdateLane(fiber)
          var update = createUpdate(eventTime, lane)
          update.payload = payload

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, 'setState')
            }

            update.callback = callback
          }

          enqueueUpdate(fiber, update)
          scheduleUpdateOnFiber(fiber, lane, eventTime)
        },
        enqueueReplaceState: function (inst, payload, callback) {
          var fiber = get(inst)
          var eventTime = requestEventTime()
          var lane = requestUpdateLane(fiber)
          var update = createUpdate(eventTime, lane)
          update.tag = ReplaceState
          update.payload = payload

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, 'replaceState')
            }

            update.callback = callback
          }

          enqueueUpdate(fiber, update)
          scheduleUpdateOnFiber(fiber, lane, eventTime)
        },
        enqueueForceUpdate: function (inst, callback) {
          var fiber = get(inst)
          var eventTime = requestEventTime()
          var lane = requestUpdateLane(fiber)
          var update = createUpdate(eventTime, lane)
          update.tag = ForceUpdate

          if (callback !== undefined && callback !== null) {
            {
              warnOnInvalidCallback(callback, 'forceUpdate')
            }

            update.callback = callback
          }

          enqueueUpdate(fiber, update)
          scheduleUpdateOnFiber(fiber, lane, eventTime)
        },
      }

      function checkShouldComponentUpdate(
        workInProgress,
        ctor,
        oldProps,
        newProps,
        oldState,
        newState,
        nextContext
      ) {
        var instance = workInProgress.stateNode

        if (typeof instance.shouldComponentUpdate === 'function') {
          {
            if (workInProgress.mode & StrictMode) {
              disableLogs()

              try {
                // Invoke the function an extra time to help detect side-effects.
                instance.shouldComponentUpdate(newProps, newState, nextContext)
              } finally {
                reenableLogs()
              }
            }
          }

          var shouldUpdate = instance.shouldComponentUpdate(
            newProps,
            newState,
            nextContext
          )

          {
            if (shouldUpdate === undefined) {
              error(
                '%s.shouldComponentUpdate(): Returned undefined instead of a ' +
                  'boolean value. Make sure to return true or false.',
                getComponentName(ctor) || 'Component'
              )
            }
          }

          return shouldUpdate
        }

        if (ctor.prototype && ctor.prototype.isPureReactComponent) {
          return (
            !shallowEqual(oldProps, newProps) ||
            !shallowEqual(oldState, newState)
          )
        }

        return true
      }

      function checkClassInstance(workInProgress, ctor, newProps) {
        var instance = workInProgress.stateNode

        {
          var name = getComponentName(ctor) || 'Component'
          var renderPresent = instance.render

          if (!renderPresent) {
            if (ctor.prototype && typeof ctor.prototype.render === 'function') {
              error(
                '%s(...): No `render` method found on the returned component ' +
                  'instance: did you accidentally return an object from the constructor?',
                name
              )
            } else {
              error(
                '%s(...): No `render` method found on the returned component ' +
                  'instance: you may have forgotten to define `render`.',
                name
              )
            }
          }

          if (
            instance.getInitialState &&
            !instance.getInitialState.isReactClassApproved &&
            !instance.state
          ) {
            error(
              'getInitialState was defined on %s, a plain JavaScript class. ' +
                'This is only supported for classes created using React.createClass. ' +
                'Did you mean to define a state property instead?',
              name
            )
          }

          if (
            instance.getDefaultProps &&
            !instance.getDefaultProps.isReactClassApproved
          ) {
            error(
              'getDefaultProps was defined on %s, a plain JavaScript class. ' +
                'This is only supported for classes created using React.createClass. ' +
                'Use a static property to define defaultProps instead.',
              name
            )
          }

          if (instance.propTypes) {
            error(
              'propTypes was defined as an instance property on %s. Use a static ' +
                'property to define propTypes instead.',
              name
            )
          }

          if (instance.contextType) {
            error(
              'contextType was defined as an instance property on %s. Use a static ' +
                'property to define contextType instead.',
              name
            )
          }

          {
            if (instance.contextTypes) {
              error(
                'contextTypes was defined as an instance property on %s. Use a static ' +
                  'property to define contextTypes instead.',
                name
              )
            }

            if (
              ctor.contextType &&
              ctor.contextTypes &&
              !didWarnAboutContextTypeAndContextTypes.has(ctor)
            ) {
              didWarnAboutContextTypeAndContextTypes.add(ctor)

              error(
                '%s declares both contextTypes and contextType static properties. ' +
                  'The legacy contextTypes property will be ignored.',
                name
              )
            }
          }

          if (typeof instance.componentShouldUpdate === 'function') {
            error(
              '%s has a method called ' +
                'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' +
                'The name is phrased as a question because the function is ' +
                'expected to return a value.',
              name
            )
          }

          if (
            ctor.prototype &&
            ctor.prototype.isPureReactComponent &&
            typeof instance.shouldComponentUpdate !== 'undefined'
          ) {
            error(
              '%s has a method called shouldComponentUpdate(). ' +
                'shouldComponentUpdate should not be used when extending React.PureComponent. ' +
                'Please extend React.Component if shouldComponentUpdate is used.',
              getComponentName(ctor) || 'A pure component'
            )
          }

          if (typeof instance.componentDidUnmount === 'function') {
            error(
              '%s has a method called ' +
                'componentDidUnmount(). But there is no such lifecycle method. ' +
                'Did you mean componentWillUnmount()?',
              name
            )
          }

          if (typeof instance.componentDidReceiveProps === 'function') {
            error(
              '%s has a method called ' +
                'componentDidReceiveProps(). But there is no such lifecycle method. ' +
                'If you meant to update the state in response to changing props, ' +
                'use componentWillReceiveProps(). If you meant to fetch data or ' +
                'run side-effects or mutations after React has updated the UI, use componentDidUpdate().',
              name
            )
          }

          if (typeof instance.componentWillRecieveProps === 'function') {
            error(
              '%s has a method called ' +
                'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?',
              name
            )
          }

          if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
            error(
              '%s has a method called ' +
                'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?',
              name
            )
          }

          var hasMutatedProps = instance.props !== newProps

          if (instance.props !== undefined && hasMutatedProps) {
            error(
              '%s(...): When calling super() in `%s`, make sure to pass ' +
                "up the same props that your component's constructor was passed.",
              name,
              name
            )
          }

          if (instance.defaultProps) {
            error(
              'Setting defaultProps as an instance property on %s is not supported and will be ignored.' +
                ' Instead, define defaultProps as a static property on %s.',
              name,
              name
            )
          }

          if (
            typeof instance.getSnapshotBeforeUpdate === 'function' &&
            typeof instance.componentDidUpdate !== 'function' &&
            !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)
          ) {
            didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor)

            error(
              '%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' +
                'This component defines getSnapshotBeforeUpdate() only.',
              getComponentName(ctor)
            )
          }

          if (typeof instance.getDerivedStateFromProps === 'function') {
            error(
              '%s: getDerivedStateFromProps() is defined as an instance method ' +
                'and will be ignored. Instead, declare it as a static method.',
              name
            )
          }

          if (typeof instance.getDerivedStateFromError === 'function') {
            error(
              '%s: getDerivedStateFromError() is defined as an instance method ' +
                'and will be ignored. Instead, declare it as a static method.',
              name
            )
          }

          if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
            error(
              '%s: getSnapshotBeforeUpdate() is defined as a static method ' +
                'and will be ignored. Instead, declare it as an instance method.',
              name
            )
          }

          var _state = instance.state

          if (_state && (typeof _state !== 'object' || isArray(_state))) {
            error('%s.state: must be set to an object or null', name)
          }

          if (
            typeof instance.getChildContext === 'function' &&
            typeof ctor.childContextTypes !== 'object'
          ) {
            error(
              '%s.getChildContext(): childContextTypes must be defined in order to ' +
                'use getChildContext().',
              name
            )
          }
        }
      }

      function adoptClassInstance(workInProgress, instance) {
        instance.updater = classComponentUpdater
        workInProgress.stateNode = instance // The instance needs access to the fiber so that it can schedule updates

        set(instance, workInProgress)

        {
          instance._reactInternalInstance = fakeInternalInstance
        }
      }

      function constructClassInstance(workInProgress, ctor, props) {
        var isLegacyContextConsumer = false
        var unmaskedContext = emptyContextObject
        var context = emptyContextObject
        var contextType = ctor.contextType

        {
          if ('contextType' in ctor) {
            var isValid = // Allow null for conditional declaration
              contextType === null ||
              (contextType !== undefined &&
                contextType.$$typeof === REACT_CONTEXT_TYPE &&
                contextType._context === undefined) // Not a <Context.Consumer>

            if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
              didWarnAboutInvalidateContextType.add(ctor)
              var addendum = ''

              if (contextType === undefined) {
                addendum =
                  ' However, it is set to undefined. ' +
                  'This can be caused by a typo or by mixing up named and default imports. ' +
                  'This can also happen due to a circular dependency, so ' +
                  'try moving the createContext() call to a separate file.'
              } else if (typeof contextType !== 'object') {
                addendum =
                  ' However, it is set to a ' + typeof contextType + '.'
              } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                addendum =
                  ' Did you accidentally pass the Context.Provider instead?'
              } else if (contextType._context !== undefined) {
                // <Context.Consumer>
                addendum =
                  ' Did you accidentally pass the Context.Consumer instead?'
              } else {
                addendum =
                  ' However, it is set to an object with keys {' +
                  Object.keys(contextType).join(', ') +
                  '}.'
              }

              error(
                '%s defines an invalid contextType. ' +
                  'contextType should point to the Context object returned by React.createContext().%s',
                getComponentName(ctor) || 'Component',
                addendum
              )
            }
          }
        }

        if (typeof contextType === 'object' && contextType !== null) {
          context = readContext(contextType)
        } else {
          unmaskedContext = getUnmaskedContext(workInProgress, ctor, true)
          var contextTypes = ctor.contextTypes
          isLegacyContextConsumer =
            contextTypes !== null && contextTypes !== undefined
          context = isLegacyContextConsumer
            ? getMaskedContext(workInProgress, unmaskedContext)
            : emptyContextObject
        } // Instantiate twice to help detect side-effects.

        {
          if (workInProgress.mode & StrictMode) {
            disableLogs()

            try {
              new ctor(props, context) // eslint-disable-line no-new
            } finally {
              reenableLogs()
            }
          }
        }

        var instance = new ctor(props, context)
        var state = (workInProgress.memoizedState =
          instance.state !== null && instance.state !== undefined
            ? instance.state
            : null)
        adoptClassInstance(workInProgress, instance)

        {
          if (
            typeof ctor.getDerivedStateFromProps === 'function' &&
            state === null
          ) {
            var componentName = getComponentName(ctor) || 'Component'

            if (!didWarnAboutUninitializedState.has(componentName)) {
              didWarnAboutUninitializedState.add(componentName)

              error(
                '`%s` uses `getDerivedStateFromProps` but its initial state is ' +
                  '%s. This is not recommended. Instead, define the initial state by ' +
                  'assigning an object to `this.state` in the constructor of `%s`. ' +
                  'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.',
                componentName,
                instance.state === null ? 'null' : 'undefined',
                componentName
              )
            }
          } // If new component APIs are defined, "unsafe" lifecycles won't be called.
          // Warn about these lifecycles if they are present.
          // Don't warn about react-lifecycles-compat polyfilled methods though.

          if (
            typeof ctor.getDerivedStateFromProps === 'function' ||
            typeof instance.getSnapshotBeforeUpdate === 'function'
          ) {
            var foundWillMountName = null
            var foundWillReceivePropsName = null
            var foundWillUpdateName = null

            if (
              typeof instance.componentWillMount === 'function' &&
              instance.componentWillMount.__suppressDeprecationWarning !== true
            ) {
              foundWillMountName = 'componentWillMount'
            } else if (
              typeof instance.UNSAFE_componentWillMount === 'function'
            ) {
              foundWillMountName = 'UNSAFE_componentWillMount'
            }

            if (
              typeof instance.componentWillReceiveProps === 'function' &&
              instance.componentWillReceiveProps
                .__suppressDeprecationWarning !== true
            ) {
              foundWillReceivePropsName = 'componentWillReceiveProps'
            } else if (
              typeof instance.UNSAFE_componentWillReceiveProps === 'function'
            ) {
              foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps'
            }

            if (
              typeof instance.componentWillUpdate === 'function' &&
              instance.componentWillUpdate.__suppressDeprecationWarning !== true
            ) {
              foundWillUpdateName = 'componentWillUpdate'
            } else if (
              typeof instance.UNSAFE_componentWillUpdate === 'function'
            ) {
              foundWillUpdateName = 'UNSAFE_componentWillUpdate'
            }

            if (
              foundWillMountName !== null ||
              foundWillReceivePropsName !== null ||
              foundWillUpdateName !== null
            ) {
              var _componentName = getComponentName(ctor) || 'Component'

              var newApiName =
                typeof ctor.getDerivedStateFromProps === 'function'
                  ? 'getDerivedStateFromProps()'
                  : 'getSnapshotBeforeUpdate()'

              if (
                !didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)
              ) {
                didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName)

                error(
                  'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
                    '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' +
                    'The above lifecycles should be removed. Learn more about this warning here:\n' +
                    'https://reactjs.org/link/unsafe-component-lifecycles',
                  _componentName,
                  newApiName,
                  foundWillMountName !== null
                    ? '\n  ' + foundWillMountName
                    : '',
                  foundWillReceivePropsName !== null
                    ? '\n  ' + foundWillReceivePropsName
                    : '',
                  foundWillUpdateName !== null
                    ? '\n  ' + foundWillUpdateName
                    : ''
                )
              }
            }
          }
        } // Cache unmasked context so we can avoid recreating masked context unless necessary.
        // ReactFiberContext usually updates this cache but can't for newly-created instances.

        if (isLegacyContextConsumer) {
          cacheContext(workInProgress, unmaskedContext, context)
        }

        return instance
      }

      function callComponentWillMount(workInProgress, instance) {
        var oldState = instance.state

        if (typeof instance.componentWillMount === 'function') {
          instance.componentWillMount()
        }

        if (typeof instance.UNSAFE_componentWillMount === 'function') {
          instance.UNSAFE_componentWillMount()
        }

        if (oldState !== instance.state) {
          {
            error(
              '%s.componentWillMount(): Assigning directly to this.state is ' +
                "deprecated (except inside a component's " +
                'constructor). Use setState instead.',
              getComponentName(workInProgress.type) || 'Component'
            )
          }

          classComponentUpdater.enqueueReplaceState(
            instance,
            instance.state,
            null
          )
        }
      }

      function callComponentWillReceiveProps(
        workInProgress,
        instance,
        newProps,
        nextContext
      ) {
        var oldState = instance.state

        if (typeof instance.componentWillReceiveProps === 'function') {
          instance.componentWillReceiveProps(newProps, nextContext)
        }

        if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
          instance.UNSAFE_componentWillReceiveProps(newProps, nextContext)
        }

        if (instance.state !== oldState) {
          {
            var componentName =
              getComponentName(workInProgress.type) || 'Component'

            if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
              didWarnAboutStateAssignmentForComponent.add(componentName)

              error(
                '%s.componentWillReceiveProps(): Assigning directly to ' +
                  "this.state is deprecated (except inside a component's " +
                  'constructor). Use setState instead.',
                componentName
              )
            }
          }

          classComponentUpdater.enqueueReplaceState(
            instance,
            instance.state,
            null
          )
        }
      } // Invokes the mount life-cycles on a previously never rendered instance.

      function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
        {
          checkClassInstance(workInProgress, ctor, newProps)
        }

        var instance = workInProgress.stateNode
        instance.props = newProps
        instance.state = workInProgress.memoizedState
        instance.refs = emptyRefsObject
        initializeUpdateQueue(workInProgress)
        var contextType = ctor.contextType

        if (typeof contextType === 'object' && contextType !== null) {
          instance.context = readContext(contextType)
        } else {
          var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true)
          instance.context = getMaskedContext(workInProgress, unmaskedContext)
        }

        {
          if (instance.state === newProps) {
            var componentName = getComponentName(ctor) || 'Component'

            if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
              didWarnAboutDirectlyAssigningPropsToState.add(componentName)

              error(
                '%s: It is not recommended to assign props directly to state ' +
                  "because updates to props won't be reflected in state. " +
                  'In most cases, it is better to use props directly.',
                componentName
              )
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(
              workInProgress,
              instance
            )
          }

          {
            ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
              workInProgress,
              instance
            )
          }
        }

        processUpdateQueue(workInProgress, newProps, instance, renderLanes)
        instance.state = workInProgress.memoizedState
        var getDerivedStateFromProps = ctor.getDerivedStateFromProps

        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(
            workInProgress,
            ctor,
            getDerivedStateFromProps,
            newProps
          )
          instance.state = workInProgress.memoizedState
        } // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.

        if (
          typeof ctor.getDerivedStateFromProps !== 'function' &&
          typeof instance.getSnapshotBeforeUpdate !== 'function' &&
          (typeof instance.UNSAFE_componentWillMount === 'function' ||
            typeof instance.componentWillMount === 'function')
        ) {
          callComponentWillMount(workInProgress, instance) // If we had additional state updates during this life-cycle, let's
          // process them now.

          processUpdateQueue(workInProgress, newProps, instance, renderLanes)
          instance.state = workInProgress.memoizedState
        }

        if (typeof instance.componentDidMount === 'function') {
          workInProgress.flags |= Update
        }
      }

      function resumeMountClassInstance(
        workInProgress,
        ctor,
        newProps,
        renderLanes
      ) {
        var instance = workInProgress.stateNode
        var oldProps = workInProgress.memoizedProps
        instance.props = oldProps
        var oldContext = instance.context
        var contextType = ctor.contextType
        var nextContext = emptyContextObject

        if (typeof contextType === 'object' && contextType !== null) {
          nextContext = readContext(contextType)
        } else {
          var nextLegacyUnmaskedContext = getUnmaskedContext(
            workInProgress,
            ctor,
            true
          )
          nextContext = getMaskedContext(
            workInProgress,
            nextLegacyUnmaskedContext
          )
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps
        var hasNewLifecycles =
          typeof getDerivedStateFromProps === 'function' ||
          typeof instance.getSnapshotBeforeUpdate === 'function' // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.

        if (
          !hasNewLifecycles &&
          (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
            typeof instance.componentWillReceiveProps === 'function')
        ) {
          if (oldProps !== newProps || oldContext !== nextContext) {
            callComponentWillReceiveProps(
              workInProgress,
              instance,
              newProps,
              nextContext
            )
          }
        }

        resetHasForceUpdateBeforeProcessing()
        var oldState = workInProgress.memoizedState
        var newState = (instance.state = oldState)
        processUpdateQueue(workInProgress, newProps, instance, renderLanes)
        newState = workInProgress.memoizedState

        if (
          oldProps === newProps &&
          oldState === newState &&
          !hasContextChanged() &&
          !checkHasForceUpdateAfterProcessing()
        ) {
          // If an update was already in progress, we should schedule an Update
          // effect even though we're bailing out, so that cWU/cDU are called.
          if (typeof instance.componentDidMount === 'function') {
            workInProgress.flags |= Update
          }

          return false
        }

        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(
            workInProgress,
            ctor,
            getDerivedStateFromProps,
            newProps
          )
          newState = workInProgress.memoizedState
        }

        var shouldUpdate =
          checkHasForceUpdateAfterProcessing() ||
          checkShouldComponentUpdate(
            workInProgress,
            ctor,
            oldProps,
            newProps,
            oldState,
            newState,
            nextContext
          )

        if (shouldUpdate) {
          // In order to support react-lifecycles-compat polyfilled components,
          // Unsafe lifecycles should not be invoked for components using the new APIs.
          if (
            !hasNewLifecycles &&
            (typeof instance.UNSAFE_componentWillMount === 'function' ||
              typeof instance.componentWillMount === 'function')
          ) {
            if (typeof instance.componentWillMount === 'function') {
              instance.componentWillMount()
            }

            if (typeof instance.UNSAFE_componentWillMount === 'function') {
              instance.UNSAFE_componentWillMount()
            }
          }

          if (typeof instance.componentDidMount === 'function') {
            workInProgress.flags |= Update
          }
        } else {
          // If an update was already in progress, we should schedule an Update
          // effect even though we're bailing out, so that cWU/cDU are called.
          if (typeof instance.componentDidMount === 'function') {
            workInProgress.flags |= Update
          } // If shouldComponentUpdate returned false, we should still update the
          // memoized state to indicate that this work can be reused.

          workInProgress.memoizedProps = newProps
          workInProgress.memoizedState = newState
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.

        instance.props = newProps
        instance.state = newState
        instance.context = nextContext
        return shouldUpdate
      } // Invokes the update life-cycles and returns false if it shouldn't rerender.

      function updateClassInstance(
        current,
        workInProgress,
        ctor,
        newProps,
        renderLanes
      ) {
        var instance = workInProgress.stateNode
        cloneUpdateQueue(current, workInProgress)
        var unresolvedOldProps = workInProgress.memoizedProps
        var oldProps =
          workInProgress.type === workInProgress.elementType
            ? unresolvedOldProps
            : resolveDefaultProps(workInProgress.type, unresolvedOldProps)
        instance.props = oldProps
        var unresolvedNewProps = workInProgress.pendingProps
        var oldContext = instance.context
        var contextType = ctor.contextType
        var nextContext = emptyContextObject

        if (typeof contextType === 'object' && contextType !== null) {
          nextContext = readContext(contextType)
        } else {
          var nextUnmaskedContext = getUnmaskedContext(
            workInProgress,
            ctor,
            true
          )
          nextContext = getMaskedContext(workInProgress, nextUnmaskedContext)
        }

        var getDerivedStateFromProps = ctor.getDerivedStateFromProps
        var hasNewLifecycles =
          typeof getDerivedStateFromProps === 'function' ||
          typeof instance.getSnapshotBeforeUpdate === 'function' // Note: During these life-cycles, instance.props/instance.state are what
        // ever the previously attempted to render - not the "current". However,
        // during componentDidUpdate we pass the "current" props.
        // In order to support react-lifecycles-compat polyfilled components,
        // Unsafe lifecycles should not be invoked for components using the new APIs.

        if (
          !hasNewLifecycles &&
          (typeof instance.UNSAFE_componentWillReceiveProps === 'function' ||
            typeof instance.componentWillReceiveProps === 'function')
        ) {
          if (
            unresolvedOldProps !== unresolvedNewProps ||
            oldContext !== nextContext
          ) {
            callComponentWillReceiveProps(
              workInProgress,
              instance,
              newProps,
              nextContext
            )
          }
        }

        resetHasForceUpdateBeforeProcessing()
        var oldState = workInProgress.memoizedState
        var newState = (instance.state = oldState)
        processUpdateQueue(workInProgress, newProps, instance, renderLanes)
        newState = workInProgress.memoizedState

        if (
          unresolvedOldProps === unresolvedNewProps &&
          oldState === newState &&
          !hasContextChanged() &&
          !checkHasForceUpdateAfterProcessing()
        ) {
          // If an update was already in progress, we should schedule an Update
          // effect even though we're bailing out, so that cWU/cDU are called.
          if (typeof instance.componentDidUpdate === 'function') {
            if (
              unresolvedOldProps !== current.memoizedProps ||
              oldState !== current.memoizedState
            ) {
              workInProgress.flags |= Update
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === 'function') {
            if (
              unresolvedOldProps !== current.memoizedProps ||
              oldState !== current.memoizedState
            ) {
              workInProgress.flags |= Snapshot
            }
          }

          return false
        }

        if (typeof getDerivedStateFromProps === 'function') {
          applyDerivedStateFromProps(
            workInProgress,
            ctor,
            getDerivedStateFromProps,
            newProps
          )
          newState = workInProgress.memoizedState
        }

        var shouldUpdate =
          checkHasForceUpdateAfterProcessing() ||
          checkShouldComponentUpdate(
            workInProgress,
            ctor,
            oldProps,
            newProps,
            oldState,
            newState,
            nextContext
          )

        if (shouldUpdate) {
          // In order to support react-lifecycles-compat polyfilled components,
          // Unsafe lifecycles should not be invoked for components using the new APIs.
          if (
            !hasNewLifecycles &&
            (typeof instance.UNSAFE_componentWillUpdate === 'function' ||
              typeof instance.componentWillUpdate === 'function')
          ) {
            if (typeof instance.componentWillUpdate === 'function') {
              instance.componentWillUpdate(newProps, newState, nextContext)
            }

            if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
              instance.UNSAFE_componentWillUpdate(
                newProps,
                newState,
                nextContext
              )
            }
          }

          if (typeof instance.componentDidUpdate === 'function') {
            workInProgress.flags |= Update
          }

          if (typeof instance.getSnapshotBeforeUpdate === 'function') {
            workInProgress.flags |= Snapshot
          }
        } else {
          // If an update was already in progress, we should schedule an Update
          // effect even though we're bailing out, so that cWU/cDU are called.
          if (typeof instance.componentDidUpdate === 'function') {
            if (
              unresolvedOldProps !== current.memoizedProps ||
              oldState !== current.memoizedState
            ) {
              workInProgress.flags |= Update
            }
          }

          if (typeof instance.getSnapshotBeforeUpdate === 'function') {
            if (
              unresolvedOldProps !== current.memoizedProps ||
              oldState !== current.memoizedState
            ) {
              workInProgress.flags |= Snapshot
            }
          } // If shouldComponentUpdate returned false, we should still update the
          // memoized props/state to indicate that this work can be reused.

          workInProgress.memoizedProps = newProps
          workInProgress.memoizedState = newState
        } // Update the existing instance's state, props, and context pointers even
        // if shouldComponentUpdate returns false.

        instance.props = newProps
        instance.state = newState
        instance.context = nextContext
        return shouldUpdate
      }

      var didWarnAboutMaps
      var didWarnAboutGenerators
      var didWarnAboutStringRefs
      var ownerHasKeyUseWarning
      var ownerHasFunctionTypeWarning

      var warnForMissingKey = function (child, returnFiber) {}

      {
        didWarnAboutMaps = false
        didWarnAboutGenerators = false
        didWarnAboutStringRefs = {}
        /**
         * Warn if there's no key explicitly set on dynamic arrays of children or
         * object keys are not valid. This allows us to keep track of children between
         * updates.
         */

        ownerHasKeyUseWarning = {}
        ownerHasFunctionTypeWarning = {}

        warnForMissingKey = function (child, returnFiber) {
          if (child === null || typeof child !== 'object') {
            return
          }

          if (!child._store || child._store.validated || child.key != null) {
            return
          }

          if (!(typeof child._store === 'object')) {
            {
              throw Error(
                'React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.'
              )
            }
          }

          child._store.validated = true
          var componentName = getComponentName(returnFiber.type) || 'Component'

          if (ownerHasKeyUseWarning[componentName]) {
            return
          }

          ownerHasKeyUseWarning[componentName] = true

          error(
            'Each child in a list should have a unique ' +
              '"key" prop. See https://reactjs.org/link/warning-keys for ' +
              'more information.'
          )
        }
      }

      var isArray$1 = Array.isArray

      function coerceRef(returnFiber, current, element) {
        var mixedRef = element.ref

        if (
          mixedRef !== null &&
          typeof mixedRef !== 'function' &&
          typeof mixedRef !== 'object'
        ) {
          {
            // TODO: Clean this up once we turn on the string ref warning for
            // everyone, because the strict mode case will no longer be relevant
            if (
              (returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(
                element._owner &&
                element._self &&
                element._owner.stateNode !== element._self
              )
            ) {
              var componentName =
                getComponentName(returnFiber.type) || 'Component'

              if (!didWarnAboutStringRefs[componentName]) {
                {
                  error(
                    'A string ref, "%s", has been found within a strict mode tree. ' +
                      'String refs are a source of potential bugs and should be avoided. ' +
                      'We recommend using useRef() or createRef() instead. ' +
                      'Learn more about using refs safely here: ' +
                      'https://reactjs.org/link/strict-mode-string-ref',
                    mixedRef
                  )
                }

                didWarnAboutStringRefs[componentName] = true
              }
            }
          }

          if (element._owner) {
            var owner = element._owner
            var inst

            if (owner) {
              var ownerFiber = owner

              if (!(ownerFiber.tag === ClassComponent)) {
                {
                  throw Error(
                    'Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref'
                  )
                }
              }

              inst = ownerFiber.stateNode
            }

            if (!inst) {
              {
                throw Error(
                  'Missing owner for string ref ' +
                    mixedRef +
                    '. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }

            var stringRef = '' + mixedRef // Check if previous string ref matches new string ref

            if (
              current !== null &&
              current.ref !== null &&
              typeof current.ref === 'function' &&
              current.ref._stringRef === stringRef
            ) {
              return current.ref
            }

            var ref = function (value) {
              var refs = inst.refs

              if (refs === emptyRefsObject) {
                // This is a lazy pooled frozen object, so we need to initialize.
                refs = inst.refs = {}
              }

              if (value === null) {
                delete refs[stringRef]
              } else {
                refs[stringRef] = value
              }
            }

            ref._stringRef = stringRef
            return ref
          } else {
            if (!(typeof mixedRef === 'string')) {
              {
                throw Error(
                  'Expected ref to be a function, a string, an object returned by React.createRef(), or null.'
                )
              }
            }

            if (!element._owner) {
              {
                throw Error(
                  'Element ref was specified as a string (' +
                    mixedRef +
                    ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information."
                )
              }
            }
          }
        }

        return mixedRef
      }

      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (returnFiber.type !== 'textarea') {
          {
            {
              throw Error(
                'Objects are not valid as a React child (found: ' +
                  (Object.prototype.toString.call(newChild) ===
                  '[object Object]'
                    ? 'object with keys {' +
                      Object.keys(newChild).join(', ') +
                      '}'
                    : newChild) +
                  '). If you meant to render a collection of children, use an array instead.'
              )
            }
          }
        }
      }

      function warnOnFunctionType(returnFiber) {
        {
          var componentName = getComponentName(returnFiber.type) || 'Component'

          if (ownerHasFunctionTypeWarning[componentName]) {
            return
          }

          ownerHasFunctionTypeWarning[componentName] = true

          error(
            'Functions are not valid as a React child. This may happen if ' +
              'you return a Component instead of <Component /> from render. ' +
              'Or maybe you meant to call this function rather than return it.'
          )
        }
      } // We avoid inlining this to avoid potential deopts from using try/catch.
      // to be able to optimize each path individually by branching early. This needs
      // a compiler or we can do it manually. Helpers that don't need this branching
      // live outside of this function.

      function ChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (!shouldTrackSideEffects) {
            // Noop.
            return
          } // Deletions are added in reversed order so we add it to the front.
          // At this point, the return fiber's effect list is empty except for
          // deletions, so we can just append the deletion to the list. The remaining
          // effects aren't added until the complete phase. Once we implement
          // resuming, this may not be true.

          var last = returnFiber.lastEffect

          if (last !== null) {
            last.nextEffect = childToDelete
            returnFiber.lastEffect = childToDelete
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = childToDelete
          }

          childToDelete.nextEffect = null
          childToDelete.flags = Deletion
        }

        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) {
            // Noop.
            return null
          } // TODO: For the shouldClone case, this could be micro-optimized a bit by
          // assuming that after the first child we've already added everything.

          var childToDelete = currentFirstChild

          while (childToDelete !== null) {
            deleteChild(returnFiber, childToDelete)
            childToDelete = childToDelete.sibling
          }

          return null
        }

        function mapRemainingChildren(returnFiber, currentFirstChild) {
          // Add the remaining children to a temporary map so that we can find them by
          // keys quickly. Implicit (null) keys get added to this set with their index
          // instead.
          var existingChildren = new Map()
          var existingChild = currentFirstChild

          while (existingChild !== null) {
            if (existingChild.key !== null) {
              existingChildren.set(existingChild.key, existingChild)
            } else {
              existingChildren.set(existingChild.index, existingChild)
            }

            existingChild = existingChild.sibling
          }

          return existingChildren
        }

        function useFiber(fiber, pendingProps) {
          // We currently set sibling to null and index to 0 here because it is easy
          // to forget to do before returning it. E.g. for the single child case.
          var clone = createWorkInProgress(fiber, pendingProps)
          clone.index = 0
          clone.sibling = null
          return clone
        }

        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex

          if (!shouldTrackSideEffects) {
            // Noop.
            return lastPlacedIndex
          }

          var current = newFiber.alternate

          if (current !== null) {
            var oldIndex = current.index

            if (oldIndex < lastPlacedIndex) {
              // This is a move.
              newFiber.flags = Placement
              return lastPlacedIndex
            } else {
              // This item can stay in place.
              return oldIndex
            }
          } else {
            // This is an insertion.
            newFiber.flags = Placement
            return lastPlacedIndex
          }
        }

        function placeSingleChild(newFiber) {
          // This is simpler for the single child case. We only need to do a
          // placement for inserting new children.
          if (shouldTrackSideEffects && newFiber.alternate === null) {
            newFiber.flags = Placement
          }

          return newFiber
        }

        function updateTextNode(returnFiber, current, textContent, lanes) {
          if (current === null || current.tag !== HostText) {
            // Insert
            var created = createFiberFromText(
              textContent,
              returnFiber.mode,
              lanes
            )
            created.return = returnFiber
            return created
          } else {
            // Update
            var existing = useFiber(current, textContent)
            existing.return = returnFiber
            return existing
          }
        }

        function updateElement(returnFiber, current, element, lanes) {
          if (current !== null) {
            if (
              current.elementType === element.type || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current, element)
            ) {
              // Move based on index
              var existing = useFiber(current, element.props)
              existing.ref = coerceRef(returnFiber, current, element)
              existing.return = returnFiber

              {
                existing._debugSource = element._source
                existing._debugOwner = element._owner
              }

              return existing
            }
          } // Insert

          var created = createFiberFromElement(element, returnFiber.mode, lanes)
          created.ref = coerceRef(returnFiber, current, element)
          created.return = returnFiber
          return created
        }

        function updatePortal(returnFiber, current, portal, lanes) {
          if (
            current === null ||
            current.tag !== HostPortal ||
            current.stateNode.containerInfo !== portal.containerInfo ||
            current.stateNode.implementation !== portal.implementation
          ) {
            // Insert
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes)
            created.return = returnFiber
            return created
          } else {
            // Update
            var existing = useFiber(current, portal.children || [])
            existing.return = returnFiber
            return existing
          }
        }

        function updateFragment(returnFiber, current, fragment, lanes, key) {
          if (current === null || current.tag !== Fragment) {
            // Insert
            var created = createFiberFromFragment(
              fragment,
              returnFiber.mode,
              lanes,
              key
            )
            created.return = returnFiber
            return created
          } else {
            // Update
            var existing = useFiber(current, fragment)
            existing.return = returnFiber
            return existing
          }
        }

        function createChild(returnFiber, newChild, lanes) {
          if (typeof newChild === 'string' || typeof newChild === 'number') {
            // Text nodes don't have keys. If the previous node is implicitly keyed
            // we can continue to replace it without aborting even if it is not a text
            // node.
            var created = createFiberFromText(
              '' + newChild,
              returnFiber.mode,
              lanes
            )
            created.return = returnFiber
            return created
          }

          if (typeof newChild === 'object' && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _created = createFiberFromElement(
                  newChild,
                  returnFiber.mode,
                  lanes
                )

                _created.ref = coerceRef(returnFiber, null, newChild)
                _created.return = returnFiber
                return _created
              }

              case REACT_PORTAL_TYPE: {
                var _created2 = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                )

                _created2.return = returnFiber
                return _created2
              }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _created3 = createFiberFromFragment(
                newChild,
                returnFiber.mode,
                lanes,
                null
              )

              _created3.return = returnFiber
              return _created3
            }

            throwOnInvalidObjectType(returnFiber, newChild)
          }

          {
            if (typeof newChild === 'function') {
              warnOnFunctionType(returnFiber)
            }
          }

          return null
        }

        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          // Update the fiber if the keys match, otherwise return null.
          var key = oldFiber !== null ? oldFiber.key : null

          if (typeof newChild === 'string' || typeof newChild === 'number') {
            // Text nodes don't have keys. If the previous node is implicitly keyed
            // we can continue to replace it without aborting even if it is not a text
            // node.
            if (key !== null) {
              return null
            }

            return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes)
          }

          if (typeof newChild === 'object' && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                if (newChild.key === key) {
                  if (newChild.type === REACT_FRAGMENT_TYPE) {
                    return updateFragment(
                      returnFiber,
                      oldFiber,
                      newChild.props.children,
                      lanes,
                      key
                    )
                  }

                  return updateElement(returnFiber, oldFiber, newChild, lanes)
                } else {
                  return null
                }
              }

              case REACT_PORTAL_TYPE: {
                if (newChild.key === key) {
                  return updatePortal(returnFiber, oldFiber, newChild, lanes)
                } else {
                  return null
                }
              }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              if (key !== null) {
                return null
              }

              return updateFragment(
                returnFiber,
                oldFiber,
                newChild,
                lanes,
                null
              )
            }

            throwOnInvalidObjectType(returnFiber, newChild)
          }

          {
            if (typeof newChild === 'function') {
              warnOnFunctionType(returnFiber)
            }
          }

          return null
        }

        function updateFromMap(
          existingChildren,
          returnFiber,
          newIdx,
          newChild,
          lanes
        ) {
          if (typeof newChild === 'string' || typeof newChild === 'number') {
            // Text nodes don't have keys, so we neither have to check the old nor
            // new node for the key. If both are text nodes, they match.
            var matchedFiber = existingChildren.get(newIdx) || null
            return updateTextNode(
              returnFiber,
              matchedFiber,
              '' + newChild,
              lanes
            )
          }

          if (typeof newChild === 'object' && newChild !== null) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE: {
                var _matchedFiber =
                  existingChildren.get(
                    newChild.key === null ? newIdx : newChild.key
                  ) || null

                if (newChild.type === REACT_FRAGMENT_TYPE) {
                  return updateFragment(
                    returnFiber,
                    _matchedFiber,
                    newChild.props.children,
                    lanes,
                    newChild.key
                  )
                }

                return updateElement(
                  returnFiber,
                  _matchedFiber,
                  newChild,
                  lanes
                )
              }

              case REACT_PORTAL_TYPE: {
                var _matchedFiber2 =
                  existingChildren.get(
                    newChild.key === null ? newIdx : newChild.key
                  ) || null

                return updatePortal(
                  returnFiber,
                  _matchedFiber2,
                  newChild,
                  lanes
                )
              }
            }

            if (isArray$1(newChild) || getIteratorFn(newChild)) {
              var _matchedFiber3 = existingChildren.get(newIdx) || null

              return updateFragment(
                returnFiber,
                _matchedFiber3,
                newChild,
                lanes,
                null
              )
            }

            throwOnInvalidObjectType(returnFiber, newChild)
          }

          {
            if (typeof newChild === 'function') {
              warnOnFunctionType(returnFiber)
            }
          }

          return null
        }
        /**
         * Warns if there is a duplicate or missing key
         */

        function warnOnInvalidKey(child, knownKeys, returnFiber) {
          {
            if (typeof child !== 'object' || child === null) {
              return knownKeys
            }

            switch (child.$$typeof) {
              case REACT_ELEMENT_TYPE:
              case REACT_PORTAL_TYPE:
                warnForMissingKey(child, returnFiber)
                var key = child.key

                if (typeof key !== 'string') {
                  break
                }

                if (knownKeys === null) {
                  knownKeys = new Set()
                  knownKeys.add(key)
                  break
                }

                if (!knownKeys.has(key)) {
                  knownKeys.add(key)
                  break
                }

                error(
                  'Encountered two children with the same key, `%s`. ' +
                    'Keys should be unique so that components maintain their identity ' +
                    'across updates. Non-unique keys may cause children to be ' +
                    'duplicated and/or omitted — the behavior is unsupported and ' +
                    'could change in a future version.',
                  key
                )

                break
            }
          }

          return knownKeys
        }

        function reconcileChildrenArray(
          returnFiber,
          currentFirstChild,
          newChildren,
          lanes
        ) {
          // This algorithm can't optimize by searching from both ends since we
          // don't have backpointers on fibers. I'm trying to see how far we can get
          // with that model. If it ends up not being worth the tradeoffs, we can
          // add it later.
          // Even with a two ended optimization, we'd want to optimize for the case
          // where there are few changes and brute force the comparison instead of
          // going for the Map. It'd like to explore hitting that path first in
          // forward-only mode and only go for the Map once we notice that we need
          // lots of look ahead. This doesn't handle reversal as well as two ended
          // search but that's unusual. Besides, for the two ended optimization to
          // work on Iterables, we'd need to copy the whole set.
          // In this first iteration, we'll just live with hitting the bad case
          // (adding everything to a Map) in for every insert/move.
          // If you change this code, also update reconcileChildrenIterator() which
          // uses the same algorithm.
          {
            // First, validate keys.
            var knownKeys = null

            for (var i = 0; i < newChildren.length; i++) {
              var child = newChildren[i]
              knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber)
            }
          }

          var resultingFirstChild = null
          var previousNewFiber = null
          var oldFiber = currentFirstChild
          var lastPlacedIndex = 0
          var newIdx = 0
          var nextOldFiber = null

          for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber
              oldFiber = null
            } else {
              nextOldFiber = oldFiber.sibling
            }

            var newFiber = updateSlot(
              returnFiber,
              oldFiber,
              newChildren[newIdx],
              lanes
            )

            if (newFiber === null) {
              // TODO: This breaks on empty slots like null children. That's
              // unfortunate because it triggers the slow path all the time. We need
              // a better way to communicate whether this was a miss or null,
              // boolean, undefined, etc.
              if (oldFiber === null) {
                oldFiber = nextOldFiber
              }

              break
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                // We matched the slot, but we didn't reuse the existing fiber, so we
                // need to delete the existing child.
                deleteChild(returnFiber, oldFiber)
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx)

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = newFiber
            } else {
              // TODO: Defer siblings if we're not at the right index for this slot.
              // I.e. if we had null values before, then we want to defer this
              // for each null value. However, we also don't want to call updateSlot
              // with the previous one.
              previousNewFiber.sibling = newFiber
            }

            previousNewFiber = newFiber
            oldFiber = nextOldFiber
          }

          if (newIdx === newChildren.length) {
            // We've reached the end of the new children. We can delete the rest.
            deleteRemainingChildren(returnFiber, oldFiber)
            return resultingFirstChild
          }

          if (oldFiber === null) {
            // If we don't have any more existing children we can choose a fast path
            // since the rest will all be insertions.
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber = createChild(
                returnFiber,
                newChildren[newIdx],
                lanes
              )

              if (_newFiber === null) {
                continue
              }

              lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx)

              if (previousNewFiber === null) {
                // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = _newFiber
              } else {
                previousNewFiber.sibling = _newFiber
              }

              previousNewFiber = _newFiber
            }

            return resultingFirstChild
          } // Add all children to a key map for quick lookups.

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber) // Keep scanning and use the map to restore deleted items as moves.

          for (; newIdx < newChildren.length; newIdx++) {
            var _newFiber2 = updateFromMap(
              existingChildren,
              returnFiber,
              newIdx,
              newChildren[newIdx],
              lanes
            )

            if (_newFiber2 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber2.alternate !== null) {
                  // The new fiber is a work in progress, but if there exists a
                  // current, that means that we reused the fiber. We need to delete
                  // it from the child list so that we don't add it to the deletion
                  // list.
                  existingChildren.delete(
                    _newFiber2.key === null ? newIdx : _newFiber2.key
                  )
                }
              }

              lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx)

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber2
              } else {
                previousNewFiber.sibling = _newFiber2
              }

              previousNewFiber = _newFiber2
            }
          }

          if (shouldTrackSideEffects) {
            // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child)
            })
          }

          return resultingFirstChild
        }

        function reconcileChildrenIterator(
          returnFiber,
          currentFirstChild,
          newChildrenIterable,
          lanes
        ) {
          // This is the same implementation as reconcileChildrenArray(),
          // but using the iterator instead.
          var iteratorFn = getIteratorFn(newChildrenIterable)

          if (!(typeof iteratorFn === 'function')) {
            {
              throw Error(
                'An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.'
              )
            }
          }

          {
            // We don't support rendering Generators because it's a mutation.
            // See https://github.com/facebook/react/issues/12995
            if (
              typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === 'Generator'
            ) {
              if (!didWarnAboutGenerators) {
                error(
                  'Using Generators as children is unsupported and will likely yield ' +
                    'unexpected results because enumerating a generator mutates it. ' +
                    'You may convert it to an array with `Array.from()` or the ' +
                    '`[...spread]` operator before rendering. Keep in mind ' +
                    'you might need to polyfill these features for older browsers.'
                )
              }

              didWarnAboutGenerators = true
            } // Warn about using Maps as children

            if (newChildrenIterable.entries === iteratorFn) {
              if (!didWarnAboutMaps) {
                error(
                  'Using Maps as children is not supported. ' +
                    'Use an array of keyed ReactElements instead.'
                )
              }

              didWarnAboutMaps = true
            } // First, validate keys.
            // We'll get a different iterator later for the main pass.

            var _newChildren = iteratorFn.call(newChildrenIterable)

            if (_newChildren) {
              var knownKeys = null

              var _step = _newChildren.next()

              for (; !_step.done; _step = _newChildren.next()) {
                var child = _step.value
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber)
              }
            }
          }

          var newChildren = iteratorFn.call(newChildrenIterable)

          if (!(newChildren != null)) {
            {
              throw Error('An iterable object provided no iterator.')
            }
          }

          var resultingFirstChild = null
          var previousNewFiber = null
          var oldFiber = currentFirstChild
          var lastPlacedIndex = 0
          var newIdx = 0
          var nextOldFiber = null
          var step = newChildren.next()

          for (
            ;
            oldFiber !== null && !step.done;
            newIdx++, step = newChildren.next()
          ) {
            if (oldFiber.index > newIdx) {
              nextOldFiber = oldFiber
              oldFiber = null
            } else {
              nextOldFiber = oldFiber.sibling
            }

            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes)

            if (newFiber === null) {
              // TODO: This breaks on empty slots like null children. That's
              // unfortunate because it triggers the slow path all the time. We need
              // a better way to communicate whether this was a miss or null,
              // boolean, undefined, etc.
              if (oldFiber === null) {
                oldFiber = nextOldFiber
              }

              break
            }

            if (shouldTrackSideEffects) {
              if (oldFiber && newFiber.alternate === null) {
                // We matched the slot, but we didn't reuse the existing fiber, so we
                // need to delete the existing child.
                deleteChild(returnFiber, oldFiber)
              }
            }

            lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx)

            if (previousNewFiber === null) {
              // TODO: Move out of the loop. This only happens for the first run.
              resultingFirstChild = newFiber
            } else {
              // TODO: Defer siblings if we're not at the right index for this slot.
              // I.e. if we had null values before, then we want to defer this
              // for each null value. However, we also don't want to call updateSlot
              // with the previous one.
              previousNewFiber.sibling = newFiber
            }

            previousNewFiber = newFiber
            oldFiber = nextOldFiber
          }

          if (step.done) {
            // We've reached the end of the new children. We can delete the rest.
            deleteRemainingChildren(returnFiber, oldFiber)
            return resultingFirstChild
          }

          if (oldFiber === null) {
            // If we don't have any more existing children we can choose a fast path
            // since the rest will all be insertions.
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber3 = createChild(returnFiber, step.value, lanes)

              if (_newFiber3 === null) {
                continue
              }

              lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx)

              if (previousNewFiber === null) {
                // TODO: Move out of the loop. This only happens for the first run.
                resultingFirstChild = _newFiber3
              } else {
                previousNewFiber.sibling = _newFiber3
              }

              previousNewFiber = _newFiber3
            }

            return resultingFirstChild
          } // Add all children to a key map for quick lookups.

          var existingChildren = mapRemainingChildren(returnFiber, oldFiber) // Keep scanning and use the map to restore deleted items as moves.

          for (; !step.done; newIdx++, step = newChildren.next()) {
            var _newFiber4 = updateFromMap(
              existingChildren,
              returnFiber,
              newIdx,
              step.value,
              lanes
            )

            if (_newFiber4 !== null) {
              if (shouldTrackSideEffects) {
                if (_newFiber4.alternate !== null) {
                  // The new fiber is a work in progress, but if there exists a
                  // current, that means that we reused the fiber. We need to delete
                  // it from the child list so that we don't add it to the deletion
                  // list.
                  existingChildren.delete(
                    _newFiber4.key === null ? newIdx : _newFiber4.key
                  )
                }
              }

              lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx)

              if (previousNewFiber === null) {
                resultingFirstChild = _newFiber4
              } else {
                previousNewFiber.sibling = _newFiber4
              }

              previousNewFiber = _newFiber4
            }
          }

          if (shouldTrackSideEffects) {
            // Any existing children that weren't consumed above were deleted. We need
            // to add them to the deletion list.
            existingChildren.forEach(function (child) {
              return deleteChild(returnFiber, child)
            })
          }

          return resultingFirstChild
        }

        function reconcileSingleTextNode(
          returnFiber,
          currentFirstChild,
          textContent,
          lanes
        ) {
          // There's no need to check for keys on text nodes since we don't have a
          // way to define them.
          if (
            currentFirstChild !== null &&
            currentFirstChild.tag === HostText
          ) {
            // We already have an existing node so let's just update it and delete
            // the rest.
            deleteRemainingChildren(returnFiber, currentFirstChild.sibling)
            var existing = useFiber(currentFirstChild, textContent)
            existing.return = returnFiber
            return existing
          } // The existing first child is not a text node so we need to create one
          // and delete the existing ones.

          deleteRemainingChildren(returnFiber, currentFirstChild)
          var created = createFiberFromText(
            textContent,
            returnFiber.mode,
            lanes
          )
          created.return = returnFiber
          return created
        }

        function reconcileSingleElement(
          returnFiber,
          currentFirstChild,
          element,
          lanes
        ) {
          var key = element.key
          var child = currentFirstChild

          while (child !== null) {
            // TODO: If key === null and child.key === null, then this only applies to
            // the first item in the list.
            if (child.key === key) {
              switch (child.tag) {
                case Fragment: {
                  if (element.type === REACT_FRAGMENT_TYPE) {
                    deleteRemainingChildren(returnFiber, child.sibling)
                    var existing = useFiber(child, element.props.children)
                    existing.return = returnFiber

                    {
                      existing._debugSource = element._source
                      existing._debugOwner = element._owner
                    }

                    return existing
                  }

                  break
                }

                case Block:

                // We intentionally fallthrough here if enableBlocksAPI is not on.
                // eslint-disable-next-lined no-fallthrough

                default: {
                  if (
                    child.elementType === element.type || // Keep this check inline so it only runs on the false path:
                    isCompatibleFamilyForHotReloading(child, element)
                  ) {
                    deleteRemainingChildren(returnFiber, child.sibling)

                    var _existing3 = useFiber(child, element.props)

                    _existing3.ref = coerceRef(returnFiber, child, element)
                    _existing3.return = returnFiber

                    {
                      _existing3._debugSource = element._source
                      _existing3._debugOwner = element._owner
                    }

                    return _existing3
                  }

                  break
                }
              } // Didn't match.

              deleteRemainingChildren(returnFiber, child)
              break
            } else {
              deleteChild(returnFiber, child)
            }

            child = child.sibling
          }

          if (element.type === REACT_FRAGMENT_TYPE) {
            var created = createFiberFromFragment(
              element.props.children,
              returnFiber.mode,
              lanes,
              element.key
            )
            created.return = returnFiber
            return created
          } else {
            var _created4 = createFiberFromElement(
              element,
              returnFiber.mode,
              lanes
            )

            _created4.ref = coerceRef(returnFiber, currentFirstChild, element)
            _created4.return = returnFiber
            return _created4
          }
        }

        function reconcileSinglePortal(
          returnFiber,
          currentFirstChild,
          portal,
          lanes
        ) {
          var key = portal.key
          var child = currentFirstChild

          while (child !== null) {
            // TODO: If key === null and child.key === null, then this only applies to
            // the first item in the list.
            if (child.key === key) {
              if (
                child.tag === HostPortal &&
                child.stateNode.containerInfo === portal.containerInfo &&
                child.stateNode.implementation === portal.implementation
              ) {
                deleteRemainingChildren(returnFiber, child.sibling)
                var existing = useFiber(child, portal.children || [])
                existing.return = returnFiber
                return existing
              } else {
                deleteRemainingChildren(returnFiber, child)
                break
              }
            } else {
              deleteChild(returnFiber, child)
            }

            child = child.sibling
          }

          var created = createFiberFromPortal(portal, returnFiber.mode, lanes)
          created.return = returnFiber
          return created
        } // This API will tag the children with the side-effect of the reconciliation
        // itself. They will be added to the side-effect list as we pass through the
        // children and the parent.

        function reconcileChildFibers(
          returnFiber,
          currentFirstChild,
          newChild,
          lanes
        ) {
          // This function is not recursive.
          // If the top level item is an array, we treat it as a set of children,
          // not as a fragment. Nested arrays on the other hand will be treated as
          // fragment nodes. Recursion happens at the normal flow.
          // Handle top level unkeyed fragments as if they were arrays.
          // This leads to an ambiguity between <>{[...]}</> and <>...</>.
          // We treat the ambiguous cases above the same.
          var isUnkeyedTopLevelFragment =
            typeof newChild === 'object' &&
            newChild !== null &&
            newChild.type === REACT_FRAGMENT_TYPE &&
            newChild.key === null

          if (isUnkeyedTopLevelFragment) {
            newChild = newChild.props.children
          } // Handle object types

          var isObject = typeof newChild === 'object' && newChild !== null

          if (isObject) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return placeSingleChild(
                  reconcileSingleElement(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    lanes
                  )
                )

              case REACT_PORTAL_TYPE:
                return placeSingleChild(
                  reconcileSinglePortal(
                    returnFiber,
                    currentFirstChild,
                    newChild,
                    lanes
                  )
                )
            }
          }

          if (typeof newChild === 'string' || typeof newChild === 'number') {
            return placeSingleChild(
              reconcileSingleTextNode(
                returnFiber,
                currentFirstChild,
                '' + newChild,
                lanes
              )
            )
          }

          if (isArray$1(newChild)) {
            return reconcileChildrenArray(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            )
          }

          if (getIteratorFn(newChild)) {
            return reconcileChildrenIterator(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            )
          }

          if (isObject) {
            throwOnInvalidObjectType(returnFiber, newChild)
          }

          {
            if (typeof newChild === 'function') {
              warnOnFunctionType(returnFiber)
            }
          }

          if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
            // If the new child is undefined, and the return fiber is a composite
            // component, throw an error. If Fiber return types are disabled,
            // we already threw above.
            switch (returnFiber.tag) {
              case ClassComponent: {
                {
                  var instance = returnFiber.stateNode

                  if (instance.render._isMockFunction) {
                    // We allow auto-mocks to proceed as if they're returning null.
                    break
                  }
                }
              }
              // Intentionally fall through to the next case, which handles both
              // functions and classes
              // eslint-disable-next-lined no-fallthrough

              case Block:
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                {
                  {
                    throw Error(
                      (getComponentName(returnFiber.type) || 'Component') +
                        '(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null.'
                    )
                  }
                }
              }
            }
          } // Remaining cases are all treated as empty.

          return deleteRemainingChildren(returnFiber, currentFirstChild)
        }

        return reconcileChildFibers
      }

      var reconcileChildFibers = ChildReconciler(true)
      var mountChildFibers = ChildReconciler(false)
      function cloneChildFibers(current, workInProgress) {
        if (!(current === null || workInProgress.child === current.child)) {
          {
            throw Error('Resuming work not yet implemented.')
          }
        }

        if (workInProgress.child === null) {
          return
        }

        var currentChild = workInProgress.child
        var newChild = createWorkInProgress(
          currentChild,
          currentChild.pendingProps
        )
        workInProgress.child = newChild
        newChild.return = workInProgress

        while (currentChild.sibling !== null) {
          currentChild = currentChild.sibling
          newChild = newChild.sibling = createWorkInProgress(
            currentChild,
            currentChild.pendingProps
          )
          newChild.return = workInProgress
        }

        newChild.sibling = null
      } // Reset a workInProgress child set to prepare it for a second pass.

      function resetChildFibers(workInProgress, lanes) {
        var child = workInProgress.child

        while (child !== null) {
          resetWorkInProgress(child, lanes)
          child = child.sibling
        }
      }

      var NO_CONTEXT = {}
      var contextStackCursor$1 = createCursor(NO_CONTEXT)
      var contextFiberStackCursor = createCursor(NO_CONTEXT)
      var rootInstanceStackCursor = createCursor(NO_CONTEXT)

      function requiredContext(c) {
        if (!(c !== NO_CONTEXT)) {
          {
            throw Error(
              'Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }

        return c
      }

      function getRootHostContainer() {
        var rootInstance = requiredContext(rootInstanceStackCursor.current)
        return rootInstance
      }

      function pushHostContainer(fiber, nextRootInstance) {
        // Push current root instance onto the stack;
        // This allows us to reset root when portals are popped.
        push(rootInstanceStackCursor, nextRootInstance, fiber) // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.

        push(contextFiberStackCursor, fiber, fiber) // Finally, we need to push the host context to the stack.
        // However, we can't just call getRootHostContext() and push it because
        // we'd have a different number of entries on the stack depending on
        // whether getRootHostContext() throws somewhere in renderer code or not.
        // So we push an empty value first. This lets us safely unwind on errors.

        push(contextStackCursor$1, NO_CONTEXT, fiber)
        var nextRootContext = getRootHostContext(nextRootInstance) // Now that we know this function doesn't throw, replace it.

        pop(contextStackCursor$1, fiber)
        push(contextStackCursor$1, nextRootContext, fiber)
      }

      function popHostContainer(fiber) {
        pop(contextStackCursor$1, fiber)
        pop(contextFiberStackCursor, fiber)
        pop(rootInstanceStackCursor, fiber)
      }

      function getHostContext() {
        var context = requiredContext(contextStackCursor$1.current)
        return context
      }

      function pushHostContext(fiber) {
        requiredContext(rootInstanceStackCursor.current)
        var context = requiredContext(contextStackCursor$1.current)
        var nextContext = getChildHostContext(context, fiber.type) // Don't push this Fiber's context unless it's unique.

        if (context === nextContext) {
          return
        } // Track the context and the Fiber that provided it.
        // This enables us to pop only Fibers that provide unique contexts.

        push(contextFiberStackCursor, fiber, fiber)
        push(contextStackCursor$1, nextContext, fiber)
      }

      function popHostContext(fiber) {
        // Do not pop unless this Fiber provided the current context.
        // pushHostContext() only pushes Fibers that provide unique contexts.
        if (contextFiberStackCursor.current !== fiber) {
          return
        }

        pop(contextStackCursor$1, fiber)
        pop(contextFiberStackCursor, fiber)
      }

      var DefaultSuspenseContext = 0 // The Suspense Context is split into two parts. The lower bits is
      // inherited deeply down the subtree. The upper bits only affect
      // this immediate suspense boundary and gets reset each new
      // boundary or suspense list.

      var SubtreeSuspenseContextMask = 1 // Subtree Flags:
      // InvisibleParentSuspenseContext indicates that one of our parent Suspense
      // boundaries is not currently showing visible main content.
      // Either because it is already showing a fallback or is not mounted at all.
      // We can use this to determine if it is desirable to trigger a fallback at
      // the parent. If not, then we might need to trigger undesirable boundaries
      // and/or suspend the commit to avoid hiding the parent content.

      var InvisibleParentSuspenseContext = 1 // Shallow Flags:
      // ForceSuspenseFallback can be used by SuspenseList to force newly added
      // items into their fallback state during one of the render passes.

      var ForceSuspenseFallback = 2
      var suspenseStackCursor = createCursor(DefaultSuspenseContext)
      function hasSuspenseContext(parentContext, flag) {
        return (parentContext & flag) !== 0
      }
      function setDefaultShallowSuspenseContext(parentContext) {
        return parentContext & SubtreeSuspenseContextMask
      }
      function setShallowSuspenseContext(parentContext, shallowContext) {
        return (parentContext & SubtreeSuspenseContextMask) | shallowContext
      }
      function addSubtreeSuspenseContext(parentContext, subtreeContext) {
        return parentContext | subtreeContext
      }
      function pushSuspenseContext(fiber, newContext) {
        push(suspenseStackCursor, newContext, fiber)
      }
      function popSuspenseContext(fiber) {
        pop(suspenseStackCursor, fiber)
      }

      function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
        // If it was the primary children that just suspended, capture and render the
        // fallback. Otherwise, don't capture and bubble to the next boundary.
        var nextState = workInProgress.memoizedState

        if (nextState !== null) {
          if (nextState.dehydrated !== null) {
            // A dehydrated boundary always captures.
            return true
          }

          return false
        }

        var props = workInProgress.memoizedProps // In order to capture, the Suspense component must have a fallback prop.

        if (props.fallback === undefined) {
          return false
        } // Regular boundaries always capture.

        if (props.unstable_avoidThisFallback !== true) {
          return true
        } // If it's a boundary we should avoid, then we prefer to bubble up to the
        // parent boundary if it is currently invisible.

        if (hasInvisibleParent) {
          return false
        } // If the parent is not able to handle it, we must handle it.

        return true
      }
      function findFirstSuspended(row) {
        var node = row

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState

            if (state !== null) {
              var dehydrated = state.dehydrated

              if (
                dehydrated === null ||
                isSuspenseInstancePending(dehydrated) ||
                isSuspenseInstanceFallback(dehydrated)
              ) {
                return node
              }
            }
          } else if (
            node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== undefined
          ) {
            var didSuspend = (node.flags & DidCapture) !== NoFlags

            if (didSuspend) {
              return node
            }
          } else if (node.child !== null) {
            node.child.return = node
            node = node.child
            continue
          }

          if (node === row) {
            return null
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === row) {
              return null
            }

            node = node.return
          }

          node.sibling.return = node.return
          node = node.sibling
        }

        return null
      }

      var NoFlags$1 =
        /*  */
        0 // Represents whether effect should fire.

      var HasEffect =
        /* */
        1 // Represents the phase in which the effect (not the clean-up) fires.

      var Layout =
        /*    */
        2
      var Passive$1 =
        /*   */
        4

      // This may have been an insertion or a hydration.

      var hydrationParentFiber = null
      var nextHydratableInstance = null
      var isHydrating = false

      function enterHydrationState(fiber) {
        var parentInstance = fiber.stateNode.containerInfo
        nextHydratableInstance = getFirstHydratableChild(parentInstance)
        hydrationParentFiber = fiber
        isHydrating = true
        return true
      }

      function deleteHydratableInstance(returnFiber, instance) {
        {
          switch (returnFiber.tag) {
            case HostRoot:
              didNotHydrateContainerInstance(
                returnFiber.stateNode.containerInfo,
                instance
              )
              break

            case HostComponent:
              didNotHydrateInstance(
                returnFiber.type,
                returnFiber.memoizedProps,
                returnFiber.stateNode,
                instance
              )
              break
          }
        }

        var childToDelete = createFiberFromHostInstanceForDeletion()
        childToDelete.stateNode = instance
        childToDelete.return = returnFiber
        childToDelete.flags = Deletion // This might seem like it belongs on progressedFirstDeletion. However,
        // these children are not part of the reconciliation list of children.
        // Even if we abort and rereconcile the children, that will try to hydrate
        // again and the nodes are still in the host tree so these will be
        // recreated.

        if (returnFiber.lastEffect !== null) {
          returnFiber.lastEffect.nextEffect = childToDelete
          returnFiber.lastEffect = childToDelete
        } else {
          returnFiber.firstEffect = returnFiber.lastEffect = childToDelete
        }
      }

      function insertNonHydratedInstance(returnFiber, fiber) {
        fiber.flags = (fiber.flags & ~Hydrating) | Placement

        {
          switch (returnFiber.tag) {
            case HostRoot: {
              var parentContainer = returnFiber.stateNode.containerInfo

              switch (fiber.tag) {
                case HostComponent:
                  var type = fiber.type
                  fiber.pendingProps
                  didNotFindHydratableContainerInstance(parentContainer, type)
                  break

                case HostText:
                  var text = fiber.pendingProps
                  didNotFindHydratableContainerTextInstance(
                    parentContainer,
                    text
                  )
                  break
              }

              break
            }

            case HostComponent: {
              var parentType = returnFiber.type
              var parentProps = returnFiber.memoizedProps
              var parentInstance = returnFiber.stateNode

              switch (fiber.tag) {
                case HostComponent:
                  var _type = fiber.type
                  fiber.pendingProps
                  didNotFindHydratableInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _type
                  )
                  break

                case HostText:
                  var _text = fiber.pendingProps
                  didNotFindHydratableTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    _text
                  )
                  break

                case SuspenseComponent:
                  didNotFindHydratableSuspenseInstance(parentType, parentProps)
                  break
              }

              break
            }

            default:
              return
          }
        }
      }

      function tryHydrate(fiber, nextInstance) {
        switch (fiber.tag) {
          case HostComponent: {
            var type = fiber.type
            fiber.pendingProps
            var instance = canHydrateInstance(nextInstance, type)

            if (instance !== null) {
              fiber.stateNode = instance
              return true
            }

            return false
          }

          case HostText: {
            var text = fiber.pendingProps
            var textInstance = canHydrateTextInstance(nextInstance, text)

            if (textInstance !== null) {
              fiber.stateNode = textInstance
              return true
            }

            return false
          }

          case SuspenseComponent: {
            return false
          }

          default:
            return false
        }
      }

      function tryToClaimNextHydratableInstance(fiber) {
        if (!isHydrating) {
          return
        }

        var nextInstance = nextHydratableInstance

        if (!nextInstance) {
          // Nothing to hydrate. Make it an insertion.
          insertNonHydratedInstance(hydrationParentFiber, fiber)
          isHydrating = false
          hydrationParentFiber = fiber
          return
        }

        var firstAttemptedInstance = nextInstance

        if (!tryHydrate(fiber, nextInstance)) {
          // If we can't hydrate this instance let's try the next one.
          // We use this as a heuristic. It's based on intuition and not data so it
          // might be flawed or unnecessary.
          nextInstance = getNextHydratableSibling(firstAttemptedInstance)

          if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
            // Nothing to hydrate. Make it an insertion.
            insertNonHydratedInstance(hydrationParentFiber, fiber)
            isHydrating = false
            hydrationParentFiber = fiber
            return
          } // We matched the next one, we'll now assume that the first one was
          // superfluous and we'll delete it. Since we can't eagerly delete it
          // we'll have to schedule a deletion. To do that, this node needs a dummy
          // fiber associated with it.

          deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance)
        }

        hydrationParentFiber = fiber
        nextHydratableInstance = getFirstHydratableChild(nextInstance)
      }

      function prepareToHydrateHostInstance(
        fiber,
        rootContainerInstance,
        hostContext
      ) {
        var instance = fiber.stateNode
        var updatePayload = hydrateInstance(
          instance,
          fiber.type,
          fiber.memoizedProps,
          rootContainerInstance,
          hostContext,
          fiber
        ) // TODO: Type this specific to this type of component.

        fiber.updateQueue = updatePayload // If the update payload indicates that there is a change or if there
        // is a new ref we mark this as an update.

        if (updatePayload !== null) {
          return true
        }

        return false
      }

      function prepareToHydrateHostTextInstance(fiber) {
        var textInstance = fiber.stateNode
        var textContent = fiber.memoizedProps
        var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber)

        {
          if (shouldUpdate) {
            // We assume that prepareToHydrateHostTextInstance is called in a context where the
            // hydration parent is the parent host component of this host text.
            var returnFiber = hydrationParentFiber

            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent
                  )
                  break
                }

                case HostComponent: {
                  var parentType = returnFiber.type
                  var parentProps = returnFiber.memoizedProps
                  var parentInstance = returnFiber.stateNode
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent
                  )
                  break
                }
              }
            }
          }
        }

        return shouldUpdate
      }

      function skipPastDehydratedSuspenseInstance(fiber) {
        var suspenseState = fiber.memoizedState
        var suspenseInstance =
          suspenseState !== null ? suspenseState.dehydrated : null

        if (!suspenseInstance) {
          {
            throw Error(
              'Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }

        return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance)
      }

      function popToNextHostParent(fiber) {
        var parent = fiber.return

        while (
          parent !== null &&
          parent.tag !== HostComponent &&
          parent.tag !== HostRoot &&
          parent.tag !== SuspenseComponent
        ) {
          parent = parent.return
        }

        hydrationParentFiber = parent
      }

      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) {
          // We're deeper than the current hydration context, inside an inserted
          // tree.
          return false
        }

        if (!isHydrating) {
          // If we're not currently hydrating but we're in a hydration context, then
          // we were an insertion and now need to pop up reenter hydration of our
          // siblings.
          popToNextHostParent(fiber)
          isHydrating = true
          return false
        }

        var type = fiber.type // If we have any remaining hydratable nodes, we need to delete them now.
        // We only do this deeper than head and body since they tend to have random
        // other nodes in them. We also ignore components with pure text content in
        // side of them.
        // TODO: Better heuristic.

        if (
          fiber.tag !== HostComponent ||
          (type !== 'head' &&
            type !== 'body' &&
            !shouldSetTextContent(type, fiber.memoizedProps))
        ) {
          var nextInstance = nextHydratableInstance

          while (nextInstance) {
            deleteHydratableInstance(fiber, nextInstance)
            nextInstance = getNextHydratableSibling(nextInstance)
          }
        }

        popToNextHostParent(fiber)

        if (fiber.tag === SuspenseComponent) {
          nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber)
        } else {
          nextHydratableInstance = hydrationParentFiber
            ? getNextHydratableSibling(fiber.stateNode)
            : null
        }

        return true
      }

      function resetHydrationState() {
        hydrationParentFiber = null
        nextHydratableInstance = null
        isHydrating = false
      }

      function getIsHydrating() {
        return isHydrating
      }

      // and should be reset before starting a new render.
      // This tracks which mutable sources need to be reset after a render.

      var workInProgressSources = []
      var rendererSigil$1

      {
        // Used to detect multiple renderers using the same mutable source.
        rendererSigil$1 = {}
      }

      function markSourceAsDirty(mutableSource) {
        workInProgressSources.push(mutableSource)
      }
      function resetWorkInProgressVersions() {
        for (var i = 0; i < workInProgressSources.length; i++) {
          var mutableSource = workInProgressSources[i]

          {
            mutableSource._workInProgressVersionPrimary = null
          }
        }

        workInProgressSources.length = 0
      }
      function getWorkInProgressVersion(mutableSource) {
        {
          return mutableSource._workInProgressVersionPrimary
        }
      }
      function setWorkInProgressVersion(mutableSource, version) {
        {
          mutableSource._workInProgressVersionPrimary = version
        }

        workInProgressSources.push(mutableSource)
      }
      function warnAboutMultipleRenderersDEV(mutableSource) {
        {
          {
            if (mutableSource._currentPrimaryRenderer == null) {
              mutableSource._currentPrimaryRenderer = rendererSigil$1
            } else if (
              mutableSource._currentPrimaryRenderer !== rendererSigil$1
            ) {
              error(
                'Detected multiple renderers concurrently rendering the ' +
                  'same mutable source. This is currently unsupported.'
              )
            }
          }
        }
      } // Eager reads the version of a mutable source and stores it on the root.

      var ReactCurrentDispatcher$1 =
          ReactSharedInternals.ReactCurrentDispatcher,
        ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig
      var didWarnAboutMismatchedHooksForComponent
      var didWarnAboutUseOpaqueIdentifier

      {
        didWarnAboutUseOpaqueIdentifier = {}
        didWarnAboutMismatchedHooksForComponent = new Set()
      }

      // These are set right before calling the component.
      var renderLanes = NoLanes // The work-in-progress fiber. I've named it differently to distinguish it from
      // the work-in-progress hook.

      var currentlyRenderingFiber$1 = null // Hooks are stored as a linked list on the fiber's memoizedState field. The
      // current hook list is the list that belongs to the current fiber. The
      // work-in-progress hook list is a new list that will be added to the
      // work-in-progress fiber.

      var currentHook = null
      var workInProgressHook = null // Whether an update was scheduled at any point during the render phase. This
      // does not get reset if we do another render pass; only when we're completely
      // finished evaluating this component. This is an optimization so we know
      // whether we need to clear render phase updates after a throw.

      var didScheduleRenderPhaseUpdate = false // Where an update was scheduled only during the current render pass. This
      // gets reset after each attempt.
      // TODO: Maybe there's some way to consolidate this with
      // `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

      var didScheduleRenderPhaseUpdateDuringThisPass = false
      var RE_RENDER_LIMIT = 25 // In DEV, this is the name of the currently executing primitive hook

      var currentHookNameInDev = null // In DEV, this list ensures that hooks are called in the same order between renders.
      // The list stores the order of hooks used during the initial render (mount).
      // Subsequent renders (updates) reference this list.

      var hookTypesDev = null
      var hookTypesUpdateIndexDev = -1 // In DEV, this tracks whether currently rendering component needs to ignore
      // the dependencies for Hooks that need them (e.g. useEffect or useMemo).
      // When true, such Hooks will always be "remounted". Only used during hot reload.

      var ignorePreviousDependencies = false

      function mountHookTypesDev() {
        {
          var hookName = currentHookNameInDev

          if (hookTypesDev === null) {
            hookTypesDev = [hookName]
          } else {
            hookTypesDev.push(hookName)
          }
        }
      }

      function updateHookTypesDev() {
        {
          var hookName = currentHookNameInDev

          if (hookTypesDev !== null) {
            hookTypesUpdateIndexDev++

            if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
              warnOnHookMismatchInDev(hookName)
            }
          }
        }
      }

      function checkDepsAreArrayDev(deps) {
        {
          if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
            // Verify deps, but only on mount to avoid extra checks.
            // It's unlikely their type would change as usually you define them inline.
            error(
              '%s received a final argument that is not an array (instead, received `%s`). When ' +
                'specified, the final argument must be an array.',
              currentHookNameInDev,
              typeof deps
            )
          }
        }
      }

      function warnOnHookMismatchInDev(currentHookName) {
        {
          var componentName = getComponentName(currentlyRenderingFiber$1.type)

          if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
            didWarnAboutMismatchedHooksForComponent.add(componentName)

            if (hookTypesDev !== null) {
              var table = ''
              var secondColumnStart = 30

              for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                var oldHookName = hookTypesDev[i]
                var newHookName =
                  i === hookTypesUpdateIndexDev ? currentHookName : oldHookName
                var row = i + 1 + '. ' + oldHookName // Extra space so second column lines up
                // lol @ IE not supporting String#repeat

                while (row.length < secondColumnStart) {
                  row += ' '
                }

                row += newHookName + '\n'
                table += row
              }

              error(
                'React has detected a change in the order of Hooks called by %s. ' +
                  'This will lead to bugs and errors if not fixed. ' +
                  'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' +
                  '   Previous render            Next render\n' +
                  '   ------------------------------------------------------\n' +
                  '%s' +
                  '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n',
                componentName,
                table
              )
            }
          }
        }
      }

      function throwInvalidHookError() {
        {
          {
            throw Error(
              'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.'
            )
          }
        }
      }

      function areHookInputsEqual(nextDeps, prevDeps) {
        {
          if (ignorePreviousDependencies) {
            // Only true when this component is being hot reloaded.
            return false
          }
        }

        if (prevDeps === null) {
          {
            error(
              '%s received a final argument during this render, but not during ' +
                'the previous render. Even though the final argument is optional, ' +
                'its type cannot change between renders.',
              currentHookNameInDev
            )
          }

          return false
        }

        {
          // Don't bother comparing lengths in prod because these arrays should be
          // passed inline.
          if (nextDeps.length !== prevDeps.length) {
            error(
              'The final argument passed to %s changed size between renders. The ' +
                'order and size of this array must remain constant.\n\n' +
                'Previous: %s\n' +
                'Incoming: %s',
              currentHookNameInDev,
              '[' + prevDeps.join(', ') + ']',
              '[' + nextDeps.join(', ') + ']'
            )
          }
        }

        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
          if (objectIs(nextDeps[i], prevDeps[i])) {
            continue
          }

          return false
        }

        return true
      }

      function renderWithHooks(
        current,
        workInProgress,
        Component,
        props,
        secondArg,
        nextRenderLanes
      ) {
        renderLanes = nextRenderLanes
        currentlyRenderingFiber$1 = workInProgress

        {
          hookTypesDev = current !== null ? current._debugHookTypes : null
          hookTypesUpdateIndexDev = -1 // Used for hot reloading:

          ignorePreviousDependencies =
            current !== null && current.type !== workInProgress.type
        }

        workInProgress.memoizedState = null
        workInProgress.updateQueue = null
        workInProgress.lanes = NoLanes // The following should have already been reset
        // currentHook = null;
        // workInProgressHook = null;
        // didScheduleRenderPhaseUpdate = false;
        // TODO Warn if no hooks are used at all during mount, then some are used during update.
        // Currently we will identify the update render as a mount because memoizedState === null.
        // This is tricky because it's valid for certain types of components (e.g. React.lazy)
        // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
        // Non-stateful hooks (e.g. context) don't get added to memoizedState,
        // so memoizedState would be null during updates and mounts.

        {
          if (current !== null && current.memoizedState !== null) {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV
          } else if (hookTypesDev !== null) {
            // This dispatcher handles an edge case where a component is updating,
            // but no stateful hooks have been used.
            // We want to match the production code behavior (which will use HooksDispatcherOnMount),
            // but with the extra DEV validation to ensure hooks ordering hasn't changed.
            // This dispatcher does that.
            ReactCurrentDispatcher$1.current =
              HooksDispatcherOnMountWithHookTypesInDEV
          } else {
            ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV
          }
        }

        var children = Component(props, secondArg) // Check if there was a render phase update

        if (didScheduleRenderPhaseUpdateDuringThisPass) {
          // Keep rendering in a loop for as long as render phase updates continue to
          // be scheduled. Use a counter to prevent infinite loops.
          var numberOfReRenders = 0

          do {
            didScheduleRenderPhaseUpdateDuringThisPass = false

            if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
              {
                throw Error(
                  'Too many re-renders. React limits the number of renders to prevent an infinite loop.'
                )
              }
            }

            numberOfReRenders += 1

            {
              // Even when hot reloading, allow dependencies to stabilize
              // after first render to prevent infinite render phase updates.
              ignorePreviousDependencies = false
            } // Start over from the beginning of the list

            currentHook = null
            workInProgressHook = null
            workInProgress.updateQueue = null

            {
              // Also validate hook order for cascading updates.
              hookTypesUpdateIndexDev = -1
            }

            ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV
            children = Component(props, secondArg)
          } while (didScheduleRenderPhaseUpdateDuringThisPass)
        } // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.

        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher

        {
          workInProgress._debugHookTypes = hookTypesDev
        } // This check uses currentHook so that it works the same in DEV and prod bundles.
        // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.

        var didRenderTooFewHooks =
          currentHook !== null && currentHook.next !== null
        renderLanes = NoLanes
        currentlyRenderingFiber$1 = null
        currentHook = null
        workInProgressHook = null

        {
          currentHookNameInDev = null
          hookTypesDev = null
          hookTypesUpdateIndexDev = -1
        }

        didScheduleRenderPhaseUpdate = false

        if (!!didRenderTooFewHooks) {
          {
            throw Error(
              'Rendered fewer hooks than expected. This may be caused by an accidental early return statement.'
            )
          }
        }

        return children
      }
      function bailoutHooks(current, workInProgress, lanes) {
        workInProgress.updateQueue = current.updateQueue
        workInProgress.flags &= ~(Passive | Update)
        current.lanes = removeLanes(current.lanes, lanes)
      }
      function resetHooksAfterThrow() {
        // We can assume the previous dispatcher is always this one, since we set it
        // at the beginning of the render phase and there's no re-entrancy.
        ReactCurrentDispatcher$1.current = ContextOnlyDispatcher

        if (didScheduleRenderPhaseUpdate) {
          // There were render phase updates. These are only valid for this render
          // phase, which we are now aborting. Remove the updates from the queues so
          // they do not persist to the next render. Do not remove updates from hooks
          // that weren't processed.
          //
          // Only reset the updates from the queue if it has a clone. If it does
          // not have a clone, that means it wasn't processed, and the updates were
          // scheduled before we entered the render phase.
          var hook = currentlyRenderingFiber$1.memoizedState

          while (hook !== null) {
            var queue = hook.queue

            if (queue !== null) {
              queue.pending = null
            }

            hook = hook.next
          }

          didScheduleRenderPhaseUpdate = false
        }

        renderLanes = NoLanes
        currentlyRenderingFiber$1 = null
        currentHook = null
        workInProgressHook = null

        {
          hookTypesDev = null
          hookTypesUpdateIndexDev = -1
          currentHookNameInDev = null
          isUpdatingOpaqueValueInRenderPhase = false
        }

        didScheduleRenderPhaseUpdateDuringThisPass = false
      }

      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null,
        }

        if (workInProgressHook === null) {
          // This is the first hook in the list
          currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook
        } else {
          // Append to the end of the list
          workInProgressHook = workInProgressHook.next = hook
        }

        return workInProgressHook
      }

      function updateWorkInProgressHook() {
        // This function is used both for updates and for re-renders triggered by a
        // render phase update. It assumes there is either a current hook we can
        // clone, or a work-in-progress hook from a previous render pass that we can
        // use as a base. When we reach the end of the base list, we must switch to
        // the dispatcher used for mounts.
        var nextCurrentHook

        if (currentHook === null) {
          var current = currentlyRenderingFiber$1.alternate

          if (current !== null) {
            nextCurrentHook = current.memoizedState
          } else {
            nextCurrentHook = null
          }
        } else {
          nextCurrentHook = currentHook.next
        }

        var nextWorkInProgressHook

        if (workInProgressHook === null) {
          nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState
        } else {
          nextWorkInProgressHook = workInProgressHook.next
        }

        if (nextWorkInProgressHook !== null) {
          // There's already a work-in-progress. Reuse it.
          workInProgressHook = nextWorkInProgressHook
          nextWorkInProgressHook = workInProgressHook.next
          currentHook = nextCurrentHook
        } else {
          // Clone from the current hook.
          if (!(nextCurrentHook !== null)) {
            {
              throw Error(
                'Rendered more hooks than during the previous render.'
              )
            }
          }

          currentHook = nextCurrentHook
          var newHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null,
          }

          if (workInProgressHook === null) {
            // This is the first hook in the list.
            currentlyRenderingFiber$1.memoizedState = workInProgressHook =
              newHook
          } else {
            // Append to the end of the list.
            workInProgressHook = workInProgressHook.next = newHook
          }
        }

        return workInProgressHook
      }

      function createFunctionComponentUpdateQueue() {
        return {
          lastEffect: null,
        }
      }

      function basicStateReducer(state, action) {
        // $FlowFixMe: Flow doesn't like mixed types
        return typeof action === 'function' ? action(state) : action
      }

      function mountReducer(reducer, initialArg, init) {
        var hook = mountWorkInProgressHook()
        var initialState

        if (init !== undefined) {
          initialState = init(initialArg)
        } else {
          initialState = initialArg
        }

        hook.memoizedState = hook.baseState = initialState
        var queue = (hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: reducer,
          lastRenderedState: initialState,
        })
        var dispatch = (queue.dispatch = dispatchAction.bind(
          null,
          currentlyRenderingFiber$1,
          queue
        ))
        return [hook.memoizedState, dispatch]
      }

      function updateReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook()
        var queue = hook.queue

        if (!(queue !== null)) {
          {
            throw Error(
              'Should have a queue. This is likely a bug in React. Please file an issue.'
            )
          }
        }

        queue.lastRenderedReducer = reducer
        var current = currentHook // The last rebase update that is NOT part of the base state.

        var baseQueue = current.baseQueue // The last pending update that hasn't been processed yet.

        var pendingQueue = queue.pending

        if (pendingQueue !== null) {
          // We have new updates that haven't been processed yet.
          // We'll add them to the base queue.
          if (baseQueue !== null) {
            // Merge the pending queue and the base queue.
            var baseFirst = baseQueue.next
            var pendingFirst = pendingQueue.next
            baseQueue.next = pendingFirst
            pendingQueue.next = baseFirst
          }

          {
            if (current.baseQueue !== baseQueue) {
              // Internal invariant that should never happen, but feasibly could in
              // the future if we implement resuming, or some form of that.
              error(
                'Internal error: Expected work-in-progress queue to be a clone. ' +
                  'This is a bug in React.'
              )
            }
          }

          current.baseQueue = baseQueue = pendingQueue
          queue.pending = null
        }

        if (baseQueue !== null) {
          // We have a queue to process.
          var first = baseQueue.next
          var newState = current.baseState
          var newBaseState = null
          var newBaseQueueFirst = null
          var newBaseQueueLast = null
          var update = first

          do {
            var updateLane = update.lane

            if (!isSubsetOfLanes(renderLanes, updateLane)) {
              // Priority is insufficient. Skip this update. If this is the first
              // skipped update, the previous update/state is the new base
              // update/state.
              var clone = {
                lane: updateLane,
                action: update.action,
                eagerReducer: update.eagerReducer,
                eagerState: update.eagerState,
                next: null,
              }

              if (newBaseQueueLast === null) {
                newBaseQueueFirst = newBaseQueueLast = clone
                newBaseState = newState
              } else {
                newBaseQueueLast = newBaseQueueLast.next = clone
              } // Update the remaining priority in the queue.
              // TODO: Don't need to accumulate this. Instead, we can remove
              // renderLanes from the original lanes.

              currentlyRenderingFiber$1.lanes = mergeLanes(
                currentlyRenderingFiber$1.lanes,
                updateLane
              )
              markSkippedUpdateLanes(updateLane)
            } else {
              // This update does have sufficient priority.
              if (newBaseQueueLast !== null) {
                var _clone = {
                  // This update is going to be committed so we never want uncommit
                  // it. Using NoLane works because 0 is a subset of all bitmasks, so
                  // this will never be skipped by the check above.
                  lane: NoLane,
                  action: update.action,
                  eagerReducer: update.eagerReducer,
                  eagerState: update.eagerState,
                  next: null,
                }
                newBaseQueueLast = newBaseQueueLast.next = _clone
              } // Process this update.

              if (update.eagerReducer === reducer) {
                // If this update was processed eagerly, and its reducer matches the
                // current reducer, we can use the eagerly computed state.
                newState = update.eagerState
              } else {
                var action = update.action
                newState = reducer(newState, action)
              }
            }

            update = update.next
          } while (update !== null && update !== first)

          if (newBaseQueueLast === null) {
            newBaseState = newState
          } else {
            newBaseQueueLast.next = newBaseQueueFirst
          } // Mark that the fiber performed work, but only if the new state is
          // different from the current state.

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate()
          }

          hook.memoizedState = newState
          hook.baseState = newBaseState
          hook.baseQueue = newBaseQueueLast
          queue.lastRenderedState = newState
        }

        var dispatch = queue.dispatch
        return [hook.memoizedState, dispatch]
      }

      function rerenderReducer(reducer, initialArg, init) {
        var hook = updateWorkInProgressHook()
        var queue = hook.queue

        if (!(queue !== null)) {
          {
            throw Error(
              'Should have a queue. This is likely a bug in React. Please file an issue.'
            )
          }
        }

        queue.lastRenderedReducer = reducer // This is a re-render. Apply the new render phase updates to the previous
        // work-in-progress hook.

        var dispatch = queue.dispatch
        var lastRenderPhaseUpdate = queue.pending
        var newState = hook.memoizedState

        if (lastRenderPhaseUpdate !== null) {
          // The queue doesn't persist past this render pass.
          queue.pending = null
          var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next
          var update = firstRenderPhaseUpdate

          do {
            // Process this render phase update. We don't have to check the
            // priority because it will always be the same as the current
            // render's.
            var action = update.action
            newState = reducer(newState, action)
            update = update.next
          } while (update !== firstRenderPhaseUpdate) // Mark that the fiber performed work, but only if the new state is
          // different from the current state.

          if (!objectIs(newState, hook.memoizedState)) {
            markWorkInProgressReceivedUpdate()
          }

          hook.memoizedState = newState // Don't persist the state accumulated from the render phase updates to
          // the base state unless the queue is empty.
          // TODO: Not sure if this is the desired semantics, but it's what we
          // do for gDSFP. I can't remember why.

          if (hook.baseQueue === null) {
            hook.baseState = newState
          }

          queue.lastRenderedState = newState
        }

        return [newState, dispatch]
      }

      function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
        {
          warnAboutMultipleRenderersDEV(source)
        }

        var getVersion = source._getVersion
        var version = getVersion(source._source) // Is it safe for this component to read from this source during the current render?

        var isSafeToReadFromSource = false // Check the version first.
        // If this render has already been started with a specific version,
        // we can use it alone to determine if we can safely read from the source.

        var currentRenderVersion = getWorkInProgressVersion(source)

        if (currentRenderVersion !== null) {
          // It's safe to read if the store hasn't been mutated since the last time
          // we read something.
          isSafeToReadFromSource = currentRenderVersion === version
        } else {
          // If there's no version, then this is the first time we've read from the
          // source during the current render pass, so we need to do a bit more work.
          // What we need to determine is if there are any hooks that already
          // subscribed to the source, and if so, whether there are any pending
          // mutations that haven't been synchronized yet.
          //
          // If there are no pending mutations, then `root.mutableReadLanes` will be
          // empty, and we know we can safely read.
          //
          // If there *are* pending mutations, we may still be able to safely read
          // if the currently rendering lanes are inclusive of the pending mutation
          // lanes, since that guarantees that the value we're about to read from
          // the source is consistent with the values that we read during the most
          // recent mutation.
          isSafeToReadFromSource = isSubsetOfLanes(
            renderLanes,
            root.mutableReadLanes
          )

          if (isSafeToReadFromSource) {
            // If it's safe to read from this source during the current render,
            // store the version in case other components read from it.
            // A changed version number will let those components know to throw and restart the render.
            setWorkInProgressVersion(source, version)
          }
        }

        if (isSafeToReadFromSource) {
          var snapshot = getSnapshot(source._source)

          {
            if (typeof snapshot === 'function') {
              error(
                'Mutable source should not return a function as the snapshot value. ' +
                  'Functions may close over mutable values and cause tearing.'
              )
            }
          }

          return snapshot
        } else {
          // This handles the special case of a mutable source being shared between renderers.
          // In that case, if the source is mutated between the first and second renderer,
          // The second renderer don't know that it needs to reset the WIP version during unwind,
          // (because the hook only marks sources as dirty if it's written to their WIP version).
          // That would cause this tear check to throw again and eventually be visible to the user.
          // We can avoid this infinite loop by explicitly marking the source as dirty.
          //
          // This can lead to tearing in the first renderer when it resumes,
          // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
          markSourceAsDirty(source)

          {
            {
              throw Error(
                'Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue.'
              )
            }
          }
        }
      }

      function useMutableSource(hook, source, getSnapshot, subscribe) {
        var root = getWorkInProgressRoot()

        if (!(root !== null)) {
          {
            throw Error(
              'Expected a work-in-progress root. This is a bug in React. Please file an issue.'
            )
          }
        }

        var getVersion = source._getVersion
        var version = getVersion(source._source)
        var dispatcher = ReactCurrentDispatcher$1.current // eslint-disable-next-line prefer-const

        var _dispatcher$useState = dispatcher.useState(function () {
            return readFromUnsubcribedMutableSource(root, source, getSnapshot)
          }),
          currentSnapshot = _dispatcher$useState[0],
          setSnapshot = _dispatcher$useState[1]

        var snapshot = currentSnapshot // Grab a handle to the state hook as well.
        // We use it to clear the pending update queue if we have a new source.

        var stateHook = workInProgressHook
        var memoizedState = hook.memoizedState
        var refs = memoizedState.refs
        var prevGetSnapshot = refs.getSnapshot
        var prevSource = memoizedState.source
        var prevSubscribe = memoizedState.subscribe
        var fiber = currentlyRenderingFiber$1
        hook.memoizedState = {
          refs: refs,
          source: source,
          subscribe: subscribe,
        } // Sync the values needed by our subscription handler after each commit.

        dispatcher.useEffect(
          function () {
            refs.getSnapshot = getSnapshot // Normally the dispatch function for a state hook never changes,
            // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
            // handleChange() below needs to reference the dispatch function without re-subscribing,
            // so we use a ref to ensure that it always has the latest version.

            refs.setSnapshot = setSnapshot // Check for a possible change between when we last rendered now.

            var maybeNewVersion = getVersion(source._source)

            if (!objectIs(version, maybeNewVersion)) {
              var maybeNewSnapshot = getSnapshot(source._source)

              {
                if (typeof maybeNewSnapshot === 'function') {
                  error(
                    'Mutable source should not return a function as the snapshot value. ' +
                      'Functions may close over mutable values and cause tearing.'
                  )
                }
              }

              if (!objectIs(snapshot, maybeNewSnapshot)) {
                setSnapshot(maybeNewSnapshot)
                var lane = requestUpdateLane(fiber)
                markRootMutableRead(root, lane)
              } // If the source mutated between render and now,
              // there may be state updates already scheduled from the old source.
              // Entangle the updates so that they render in the same batch.

              markRootEntangled(root, root.mutableReadLanes)
            }
          },
          [getSnapshot, source, subscribe]
        ) // If we got a new source or subscribe function, re-subscribe in a passive effect.

        dispatcher.useEffect(
          function () {
            var handleChange = function () {
              var latestGetSnapshot = refs.getSnapshot
              var latestSetSnapshot = refs.setSnapshot

              try {
                latestSetSnapshot(latestGetSnapshot(source._source)) // Record a pending mutable source update with the same expiration time.

                var lane = requestUpdateLane(fiber)
                markRootMutableRead(root, lane)
              } catch (error) {
                // A selector might throw after a source mutation.
                // e.g. it might try to read from a part of the store that no longer exists.
                // In this case we should still schedule an update with React.
                // Worst case the selector will throw again and then an error boundary will handle it.
                latestSetSnapshot(function () {
                  throw error
                })
              }
            }

            var unsubscribe = subscribe(source._source, handleChange)

            {
              if (typeof unsubscribe !== 'function') {
                error(
                  'Mutable source subscribe function must return an unsubscribe function.'
                )
              }
            }

            return unsubscribe
          },
          [source, subscribe]
        ) // If any of the inputs to useMutableSource change, reading is potentially unsafe.
        //
        // If either the source or the subscription have changed we can't can't trust the update queue.
        // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
        //
        // If the getSnapshot function changed, we also shouldn't rely on the update queue.
        // It's possible that the underlying source was mutated between the when the last "change" event fired,
        // and when the current render (with the new getSnapshot function) is processed.
        //
        // In both cases, we need to throw away pending updates (since they are no longer relevant)
        // and treat reading from the source as we do in the mount case.

        if (
          !objectIs(prevGetSnapshot, getSnapshot) ||
          !objectIs(prevSource, source) ||
          !objectIs(prevSubscribe, subscribe)
        ) {
          // Create a new queue and setState method,
          // So if there are interleaved updates, they get pushed to the older queue.
          // When this becomes current, the previous queue and dispatch method will be discarded,
          // including any interleaving updates that occur.
          var newQueue = {
            pending: null,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: snapshot,
          }
          newQueue.dispatch = setSnapshot = dispatchAction.bind(
            null,
            currentlyRenderingFiber$1,
            newQueue
          )
          stateHook.queue = newQueue
          stateHook.baseQueue = null
          snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot)
          stateHook.memoizedState = stateHook.baseState = snapshot
        }

        return snapshot
      }

      function mountMutableSource(source, getSnapshot, subscribe) {
        var hook = mountWorkInProgressHook()
        hook.memoizedState = {
          refs: {
            getSnapshot: getSnapshot,
            setSnapshot: null,
          },
          source: source,
          subscribe: subscribe,
        }
        return useMutableSource(hook, source, getSnapshot, subscribe)
      }

      function updateMutableSource(source, getSnapshot, subscribe) {
        var hook = updateWorkInProgressHook()
        return useMutableSource(hook, source, getSnapshot, subscribe)
      }

      function mountState(initialState) {
        var hook = mountWorkInProgressHook()

        if (typeof initialState === 'function') {
          // $FlowFixMe: Flow doesn't like mixed types
          initialState = initialState()
        }

        hook.memoizedState = hook.baseState = initialState
        var queue = (hook.queue = {
          pending: null,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState,
        })
        var dispatch = (queue.dispatch = dispatchAction.bind(
          null,
          currentlyRenderingFiber$1,
          queue
        ))
        return [hook.memoizedState, dispatch]
      }

      function updateState(initialState) {
        return updateReducer(basicStateReducer)
      }

      function rerenderState(initialState) {
        return rerenderReducer(basicStateReducer)
      }

      function pushEffect(tag, create, destroy, deps) {
        var effect = {
          tag: tag,
          create: create,
          destroy: destroy,
          deps: deps,
          // Circular
          next: null,
        }
        var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue

        if (componentUpdateQueue === null) {
          componentUpdateQueue = createFunctionComponentUpdateQueue()
          currentlyRenderingFiber$1.updateQueue = componentUpdateQueue
          componentUpdateQueue.lastEffect = effect.next = effect
        } else {
          var lastEffect = componentUpdateQueue.lastEffect

          if (lastEffect === null) {
            componentUpdateQueue.lastEffect = effect.next = effect
          } else {
            var firstEffect = lastEffect.next
            lastEffect.next = effect
            effect.next = firstEffect
            componentUpdateQueue.lastEffect = effect
          }
        }

        return effect
      }

      function mountRef(initialValue) {
        var hook = mountWorkInProgressHook()
        var ref = {
          current: initialValue,
        }

        {
          Object.seal(ref)
        }

        hook.memoizedState = ref
        return ref
      }

      function updateRef(initialValue) {
        var hook = updateWorkInProgressHook()
        return hook.memoizedState
      }

      function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = mountWorkInProgressHook()
        var nextDeps = deps === undefined ? null : deps
        currentlyRenderingFiber$1.flags |= fiberFlags
        hook.memoizedState = pushEffect(
          HasEffect | hookFlags,
          create,
          undefined,
          nextDeps
        )
      }

      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook()
        var nextDeps = deps === undefined ? null : deps
        var destroy = undefined

        if (currentHook !== null) {
          var prevEffect = currentHook.memoizedState
          destroy = prevEffect.destroy

          if (nextDeps !== null) {
            var prevDeps = prevEffect.deps

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              pushEffect(hookFlags, create, destroy, nextDeps)
              return
            }
          }
        }

        currentlyRenderingFiber$1.flags |= fiberFlags
        hook.memoizedState = pushEffect(
          HasEffect | hookFlags,
          create,
          destroy,
          nextDeps
        )
      }

      function mountEffect(create, deps) {
        {
          // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
          if ('undefined' !== typeof jest) {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1)
          }
        }

        return mountEffectImpl(Update | Passive, Passive$1, create, deps)
      }

      function updateEffect(create, deps) {
        {
          // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
          if ('undefined' !== typeof jest) {
            warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1)
          }
        }

        return updateEffectImpl(Update | Passive, Passive$1, create, deps)
      }

      function mountLayoutEffect(create, deps) {
        return mountEffectImpl(Update, Layout, create, deps)
      }

      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(Update, Layout, create, deps)
      }

      function imperativeHandleEffect(create, ref) {
        if (typeof ref === 'function') {
          var refCallback = ref

          var _inst = create()

          refCallback(_inst)
          return function () {
            refCallback(null)
          }
        } else if (ref !== null && ref !== undefined) {
          var refObject = ref

          {
            if (!refObject.hasOwnProperty('current')) {
              error(
                'Expected useImperativeHandle() first argument to either be a ' +
                  'ref callback or React.createRef() object. Instead received: %s.',
                'an object with keys {' +
                  Object.keys(refObject).join(', ') +
                  '}'
              )
            }
          }

          var _inst2 = create()

          refObject.current = _inst2
          return function () {
            refObject.current = null
          }
        }
      }

      function mountImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== 'function') {
            error(
              'Expected useImperativeHandle() second argument to be a function ' +
                'that creates a handle. Instead received: %s.',
              create !== null ? typeof create : 'null'
            )
          }
        } // TODO: If deps are provided, should we skip comparing the ref itself?

        var effectDeps =
          deps !== null && deps !== undefined ? deps.concat([ref]) : null
        return mountEffectImpl(
          Update,
          Layout,
          imperativeHandleEffect.bind(null, create, ref),
          effectDeps
        )
      }

      function updateImperativeHandle(ref, create, deps) {
        {
          if (typeof create !== 'function') {
            error(
              'Expected useImperativeHandle() second argument to be a function ' +
                'that creates a handle. Instead received: %s.',
              create !== null ? typeof create : 'null'
            )
          }
        } // TODO: If deps are provided, should we skip comparing the ref itself?

        var effectDeps =
          deps !== null && deps !== undefined ? deps.concat([ref]) : null
        return updateEffectImpl(
          Update,
          Layout,
          imperativeHandleEffect.bind(null, create, ref),
          effectDeps
        )
      }

      function mountDebugValue(value, formatterFn) {
        // This hook is normally a no-op.
        // The react-debug-hooks package injects its own implementation
        // so that e.g. DevTools can display custom hook values.
      }

      var updateDebugValue = mountDebugValue

      function mountCallback(callback, deps) {
        var hook = mountWorkInProgressHook()
        var nextDeps = deps === undefined ? null : deps
        hook.memoizedState = [callback, nextDeps]
        return callback
      }

      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook()
        var nextDeps = deps === undefined ? null : deps
        var prevState = hook.memoizedState

        if (prevState !== null) {
          if (nextDeps !== null) {
            var prevDeps = prevState[1]

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0]
            }
          }
        }

        hook.memoizedState = [callback, nextDeps]
        return callback
      }

      function mountMemo(nextCreate, deps) {
        var hook = mountWorkInProgressHook()
        var nextDeps = deps === undefined ? null : deps
        var nextValue = nextCreate()
        hook.memoizedState = [nextValue, nextDeps]
        return nextValue
      }

      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook()
        var nextDeps = deps === undefined ? null : deps
        var prevState = hook.memoizedState

        if (prevState !== null) {
          // Assume these are defined. If they're not, areHookInputsEqual will warn.
          if (nextDeps !== null) {
            var prevDeps = prevState[1]

            if (areHookInputsEqual(nextDeps, prevDeps)) {
              return prevState[0]
            }
          }
        }

        var nextValue = nextCreate()
        hook.memoizedState = [nextValue, nextDeps]
        return nextValue
      }

      function mountDeferredValue(value) {
        var _mountState = mountState(value),
          prevValue = _mountState[0],
          setValue = _mountState[1]

        mountEffect(
          function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition
            ReactCurrentBatchConfig$1.transition = 1

            try {
              setValue(value)
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition
            }
          },
          [value]
        )
        return prevValue
      }

      function updateDeferredValue(value) {
        var _updateState = updateState(),
          prevValue = _updateState[0],
          setValue = _updateState[1]

        updateEffect(
          function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition
            ReactCurrentBatchConfig$1.transition = 1

            try {
              setValue(value)
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition
            }
          },
          [value]
        )
        return prevValue
      }

      function rerenderDeferredValue(value) {
        var _rerenderState = rerenderState(),
          prevValue = _rerenderState[0],
          setValue = _rerenderState[1]

        updateEffect(
          function () {
            var prevTransition = ReactCurrentBatchConfig$1.transition
            ReactCurrentBatchConfig$1.transition = 1

            try {
              setValue(value)
            } finally {
              ReactCurrentBatchConfig$1.transition = prevTransition
            }
          },
          [value]
        )
        return prevValue
      }

      function startTransition(setPending, callback) {
        var priorityLevel = getCurrentPriorityLevel()

        {
          runWithPriority$1(
            priorityLevel < UserBlockingPriority$2
              ? UserBlockingPriority$2
              : priorityLevel,
            function () {
              setPending(true)
            }
          )
          runWithPriority$1(
            priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel,
            function () {
              var prevTransition = ReactCurrentBatchConfig$1.transition
              ReactCurrentBatchConfig$1.transition = 1

              try {
                setPending(false)
                callback()
              } finally {
                ReactCurrentBatchConfig$1.transition = prevTransition
              }
            }
          )
        }
      }

      function mountTransition() {
        var _mountState2 = mountState(false),
          isPending = _mountState2[0],
          setPending = _mountState2[1] // The `start` method can be stored on a ref, since `setPending`
        // never changes.

        var start = startTransition.bind(null, setPending)
        mountRef(start)
        return [start, isPending]
      }

      function updateTransition() {
        var _updateState2 = updateState(),
          isPending = _updateState2[0]

        var startRef = updateRef()
        var start = startRef.current
        return [start, isPending]
      }

      function rerenderTransition() {
        var _rerenderState2 = rerenderState(),
          isPending = _rerenderState2[0]

        var startRef = updateRef()
        var start = startRef.current
        return [start, isPending]
      }

      var isUpdatingOpaqueValueInRenderPhase = false
      function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
        {
          return isUpdatingOpaqueValueInRenderPhase
        }
      }

      function warnOnOpaqueIdentifierAccessInDEV(fiber) {
        {
          // TODO: Should warn in effects and callbacks, too
          var name = getComponentName(fiber.type) || 'Unknown'

          if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
            error(
              'The object passed back from useOpaqueIdentifier is meant to be ' +
                'passed through to attributes only. Do not read the ' +
                'value directly.'
            )

            didWarnAboutUseOpaqueIdentifier[name] = true
          }
        }
      }

      function mountOpaqueIdentifier() {
        var makeId = makeClientIdInDEV.bind(
          null,
          warnOnOpaqueIdentifierAccessInDEV.bind(
            null,
            currentlyRenderingFiber$1
          )
        )

        if (getIsHydrating()) {
          var didUpgrade = false
          var fiber = currentlyRenderingFiber$1

          var readValue = function () {
            if (!didUpgrade) {
              // Only upgrade once. This works even inside the render phase because
              // the update is added to a shared queue, which outlasts the
              // in-progress render.
              didUpgrade = true

              {
                isUpdatingOpaqueValueInRenderPhase = true
                setId(makeId())
                isUpdatingOpaqueValueInRenderPhase = false
                warnOnOpaqueIdentifierAccessInDEV(fiber)
              }
            }

            {
              {
                throw Error(
                  'The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly.'
                )
              }
            }
          }

          var id = makeOpaqueHydratingObject(readValue)
          var setId = mountState(id)[1]

          if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
            currentlyRenderingFiber$1.flags |= Update | Passive
            pushEffect(
              HasEffect | Passive$1,
              function () {
                setId(makeId())
              },
              undefined,
              null
            )
          }

          return id
        } else {
          var _id = makeId()

          mountState(_id)
          return _id
        }
      }

      function updateOpaqueIdentifier() {
        var id = updateState()[0]
        return id
      }

      function rerenderOpaqueIdentifier() {
        var id = rerenderState()[0]
        return id
      }

      function dispatchAction(fiber, queue, action) {
        {
          if (typeof arguments[3] === 'function') {
            error(
              "State updates from the useState() and useReducer() Hooks don't support the " +
                'second callback argument. To execute a side effect after ' +
                'rendering, declare it in the component body with useEffect().'
            )
          }
        }

        var eventTime = requestEventTime()
        var lane = requestUpdateLane(fiber)
        var update = {
          lane: lane,
          action: action,
          eagerReducer: null,
          eagerState: null,
          next: null,
        } // Append the update to the end of the list.

        var pending = queue.pending

        if (pending === null) {
          // This is the first update. Create a circular list.
          update.next = update
        } else {
          update.next = pending.next
          pending.next = update
        }

        queue.pending = update
        var alternate = fiber.alternate

        if (
          fiber === currentlyRenderingFiber$1 ||
          (alternate !== null && alternate === currentlyRenderingFiber$1)
        ) {
          // This is a render phase update. Stash it in a lazily-created map of
          // queue -> linked list of updates. After this render pass, we'll restart
          // and apply the stashed updates on top of the work-in-progress hook.
          didScheduleRenderPhaseUpdateDuringThisPass =
            didScheduleRenderPhaseUpdate = true
        } else {
          if (
            fiber.lanes === NoLanes &&
            (alternate === null || alternate.lanes === NoLanes)
          ) {
            // The queue is currently empty, which means we can eagerly compute the
            // next state before entering the render phase. If the new state is the
            // same as the current state, we may be able to bail out entirely.
            var lastRenderedReducer = queue.lastRenderedReducer

            if (lastRenderedReducer !== null) {
              var prevDispatcher

              {
                prevDispatcher = ReactCurrentDispatcher$1.current
                ReactCurrentDispatcher$1.current =
                  InvalidNestedHooksDispatcherOnUpdateInDEV
              }

              try {
                var currentState = queue.lastRenderedState
                var eagerState = lastRenderedReducer(currentState, action) // Stash the eagerly computed state, and the reducer used to compute
                // it, on the update object. If the reducer hasn't changed by the
                // time we enter the render phase, then the eager state can be used
                // without calling the reducer again.

                update.eagerReducer = lastRenderedReducer
                update.eagerState = eagerState

                if (objectIs(eagerState, currentState)) {
                  // Fast path. We can bail out without scheduling React to re-render.
                  // It's still possible that we'll need to rebase this update later,
                  // if the component re-renders for a different reason and by that
                  // time the reducer has changed.
                  return
                }
              } catch (error) {
                // Suppress the error. It will throw again in the render phase.
              } finally {
                {
                  ReactCurrentDispatcher$1.current = prevDispatcher
                }
              }
            }
          }

          {
            // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
            if ('undefined' !== typeof jest) {
              warnIfNotScopedWithMatchingAct(fiber)
              warnIfNotCurrentlyActingUpdatesInDev(fiber)
            }
          }

          scheduleUpdateOnFiber(fiber, lane, eventTime)
        }
      }

      var ContextOnlyDispatcher = {
        readContext: readContext,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useMutableSource: throwInvalidHookError,
        useOpaqueIdentifier: throwInvalidHookError,
        unstable_isNewReconciler: enableNewReconciler,
      }
      var HooksDispatcherOnMountInDEV = null
      var HooksDispatcherOnMountWithHookTypesInDEV = null
      var HooksDispatcherOnUpdateInDEV = null
      var HooksDispatcherOnRerenderInDEV = null
      var InvalidNestedHooksDispatcherOnMountInDEV = null
      var InvalidNestedHooksDispatcherOnUpdateInDEV = null
      var InvalidNestedHooksDispatcherOnRerenderInDEV = null

      {
        var warnInvalidContextAccess = function () {
          error(
            'Context can only be read while React is rendering. ' +
              'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
              'In function components, you can read it directly in the function body, but not ' +
              'inside Hooks like useReducer() or useMemo().'
          )
        }

        var warnInvalidHookAccess = function () {
          error(
            'Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' +
              'You can only call Hooks at the top level of your React function. ' +
              'For more information, see ' +
              'https://reactjs.org/link/rules-of-hooks'
          )
        }

        HooksDispatcherOnMountInDEV = {
          readContext: function (context, observedBits) {
            return readContext(context, observedBits)
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback'
            mountHookTypesDev()
            checkDepsAreArrayDev(deps)
            return mountCallback(callback, deps)
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext'
            mountHookTypesDev()
            return readContext(context, observedBits)
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect'
            mountHookTypesDev()
            checkDepsAreArrayDev(deps)
            return mountEffect(create, deps)
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle'
            mountHookTypesDev()
            checkDepsAreArrayDev(deps)
            return mountImperativeHandle(ref, create, deps)
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect'
            mountHookTypesDev()
            checkDepsAreArrayDev(deps)
            return mountLayoutEffect(create, deps)
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo'
            mountHookTypesDev()
            checkDepsAreArrayDev(deps)
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnMountInDEV

            try {
              return mountMemo(create, deps)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer'
            mountHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnMountInDEV

            try {
              return mountReducer(reducer, initialArg, init)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef'
            mountHookTypesDev()
            return mountRef(initialValue)
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState'
            mountHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnMountInDEV

            try {
              return mountState(initialState)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue'
            mountHookTypesDev()
            return mountDebugValue()
          },
          useDeferredValue: function (value) {
            currentHookNameInDev = 'useDeferredValue'
            mountHookTypesDev()
            return mountDeferredValue(value)
          },
          useTransition: function () {
            currentHookNameInDev = 'useTransition'
            mountHookTypesDev()
            return mountTransition()
          },
          useMutableSource: function (source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource'
            mountHookTypesDev()
            return mountMutableSource(source, getSnapshot, subscribe)
          },
          useOpaqueIdentifier: function () {
            currentHookNameInDev = 'useOpaqueIdentifier'
            mountHookTypesDev()
            return mountOpaqueIdentifier()
          },
          unstable_isNewReconciler: enableNewReconciler,
        }
        HooksDispatcherOnMountWithHookTypesInDEV = {
          readContext: function (context, observedBits) {
            return readContext(context, observedBits)
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback'
            updateHookTypesDev()
            return mountCallback(callback, deps)
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext'
            updateHookTypesDev()
            return readContext(context, observedBits)
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect'
            updateHookTypesDev()
            return mountEffect(create, deps)
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle'
            updateHookTypesDev()
            return mountImperativeHandle(ref, create, deps)
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect'
            updateHookTypesDev()
            return mountLayoutEffect(create, deps)
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo'
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnMountInDEV

            try {
              return mountMemo(create, deps)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer'
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnMountInDEV

            try {
              return mountReducer(reducer, initialArg, init)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef'
            updateHookTypesDev()
            return mountRef(initialValue)
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState'
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnMountInDEV

            try {
              return mountState(initialState)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue'
            updateHookTypesDev()
            return mountDebugValue()
          },
          useDeferredValue: function (value) {
            currentHookNameInDev = 'useDeferredValue'
            updateHookTypesDev()
            return mountDeferredValue(value)
          },
          useTransition: function () {
            currentHookNameInDev = 'useTransition'
            updateHookTypesDev()
            return mountTransition()
          },
          useMutableSource: function (source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource'
            updateHookTypesDev()
            return mountMutableSource(source, getSnapshot, subscribe)
          },
          useOpaqueIdentifier: function () {
            currentHookNameInDev = 'useOpaqueIdentifier'
            updateHookTypesDev()
            return mountOpaqueIdentifier()
          },
          unstable_isNewReconciler: enableNewReconciler,
        }
        HooksDispatcherOnUpdateInDEV = {
          readContext: function (context, observedBits) {
            return readContext(context, observedBits)
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback'
            updateHookTypesDev()
            return updateCallback(callback, deps)
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext'
            updateHookTypesDev()
            return readContext(context, observedBits)
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect'
            updateHookTypesDev()
            return updateEffect(create, deps)
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle'
            updateHookTypesDev()
            return updateImperativeHandle(ref, create, deps)
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect'
            updateHookTypesDev()
            return updateLayoutEffect(create, deps)
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo'
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnUpdateInDEV

            try {
              return updateMemo(create, deps)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer'
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnUpdateInDEV

            try {
              return updateReducer(reducer, initialArg, init)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef'
            updateHookTypesDev()
            return updateRef()
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState'
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnUpdateInDEV

            try {
              return updateState(initialState)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue'
            updateHookTypesDev()
            return updateDebugValue()
          },
          useDeferredValue: function (value) {
            currentHookNameInDev = 'useDeferredValue'
            updateHookTypesDev()
            return updateDeferredValue(value)
          },
          useTransition: function () {
            currentHookNameInDev = 'useTransition'
            updateHookTypesDev()
            return updateTransition()
          },
          useMutableSource: function (source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource'
            updateHookTypesDev()
            return updateMutableSource(source, getSnapshot, subscribe)
          },
          useOpaqueIdentifier: function () {
            currentHookNameInDev = 'useOpaqueIdentifier'
            updateHookTypesDev()
            return updateOpaqueIdentifier()
          },
          unstable_isNewReconciler: enableNewReconciler,
        }
        HooksDispatcherOnRerenderInDEV = {
          readContext: function (context, observedBits) {
            return readContext(context, observedBits)
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback'
            updateHookTypesDev()
            return updateCallback(callback, deps)
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext'
            updateHookTypesDev()
            return readContext(context, observedBits)
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect'
            updateHookTypesDev()
            return updateEffect(create, deps)
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle'
            updateHookTypesDev()
            return updateImperativeHandle(ref, create, deps)
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect'
            updateHookTypesDev()
            return updateLayoutEffect(create, deps)
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo'
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnRerenderInDEV

            try {
              return updateMemo(create, deps)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer'
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnRerenderInDEV

            try {
              return rerenderReducer(reducer, initialArg, init)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef'
            updateHookTypesDev()
            return updateRef()
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState'
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnRerenderInDEV

            try {
              return rerenderState(initialState)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue'
            updateHookTypesDev()
            return updateDebugValue()
          },
          useDeferredValue: function (value) {
            currentHookNameInDev = 'useDeferredValue'
            updateHookTypesDev()
            return rerenderDeferredValue(value)
          },
          useTransition: function () {
            currentHookNameInDev = 'useTransition'
            updateHookTypesDev()
            return rerenderTransition()
          },
          useMutableSource: function (source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource'
            updateHookTypesDev()
            return updateMutableSource(source, getSnapshot, subscribe)
          },
          useOpaqueIdentifier: function () {
            currentHookNameInDev = 'useOpaqueIdentifier'
            updateHookTypesDev()
            return rerenderOpaqueIdentifier()
          },
          unstable_isNewReconciler: enableNewReconciler,
        }
        InvalidNestedHooksDispatcherOnMountInDEV = {
          readContext: function (context, observedBits) {
            warnInvalidContextAccess()
            return readContext(context, observedBits)
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountCallback(callback, deps)
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return readContext(context, observedBits)
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountEffect(create, deps)
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountImperativeHandle(ref, create, deps)
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountLayoutEffect(create, deps)
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo'
            warnInvalidHookAccess()
            mountHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnMountInDEV

            try {
              return mountMemo(create, deps)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer'
            warnInvalidHookAccess()
            mountHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnMountInDEV

            try {
              return mountReducer(reducer, initialArg, init)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountRef(initialValue)
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState'
            warnInvalidHookAccess()
            mountHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnMountInDEV

            try {
              return mountState(initialState)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountDebugValue()
          },
          useDeferredValue: function (value) {
            currentHookNameInDev = 'useDeferredValue'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountDeferredValue(value)
          },
          useTransition: function () {
            currentHookNameInDev = 'useTransition'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountTransition()
          },
          useMutableSource: function (source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountMutableSource(source, getSnapshot, subscribe)
          },
          useOpaqueIdentifier: function () {
            currentHookNameInDev = 'useOpaqueIdentifier'
            warnInvalidHookAccess()
            mountHookTypesDev()
            return mountOpaqueIdentifier()
          },
          unstable_isNewReconciler: enableNewReconciler,
        }
        InvalidNestedHooksDispatcherOnUpdateInDEV = {
          readContext: function (context, observedBits) {
            warnInvalidContextAccess()
            return readContext(context, observedBits)
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateCallback(callback, deps)
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return readContext(context, observedBits)
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateEffect(create, deps)
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateImperativeHandle(ref, create, deps)
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateLayoutEffect(create, deps)
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo'
            warnInvalidHookAccess()
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnUpdateInDEV

            try {
              return updateMemo(create, deps)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer'
            warnInvalidHookAccess()
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnUpdateInDEV

            try {
              return updateReducer(reducer, initialArg, init)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateRef()
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState'
            warnInvalidHookAccess()
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnUpdateInDEV

            try {
              return updateState(initialState)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateDebugValue()
          },
          useDeferredValue: function (value) {
            currentHookNameInDev = 'useDeferredValue'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateDeferredValue(value)
          },
          useTransition: function () {
            currentHookNameInDev = 'useTransition'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateTransition()
          },
          useMutableSource: function (source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateMutableSource(source, getSnapshot, subscribe)
          },
          useOpaqueIdentifier: function () {
            currentHookNameInDev = 'useOpaqueIdentifier'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateOpaqueIdentifier()
          },
          unstable_isNewReconciler: enableNewReconciler,
        }
        InvalidNestedHooksDispatcherOnRerenderInDEV = {
          readContext: function (context, observedBits) {
            warnInvalidContextAccess()
            return readContext(context, observedBits)
          },
          useCallback: function (callback, deps) {
            currentHookNameInDev = 'useCallback'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateCallback(callback, deps)
          },
          useContext: function (context, observedBits) {
            currentHookNameInDev = 'useContext'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return readContext(context, observedBits)
          },
          useEffect: function (create, deps) {
            currentHookNameInDev = 'useEffect'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateEffect(create, deps)
          },
          useImperativeHandle: function (ref, create, deps) {
            currentHookNameInDev = 'useImperativeHandle'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateImperativeHandle(ref, create, deps)
          },
          useLayoutEffect: function (create, deps) {
            currentHookNameInDev = 'useLayoutEffect'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateLayoutEffect(create, deps)
          },
          useMemo: function (create, deps) {
            currentHookNameInDev = 'useMemo'
            warnInvalidHookAccess()
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnUpdateInDEV

            try {
              return updateMemo(create, deps)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useReducer: function (reducer, initialArg, init) {
            currentHookNameInDev = 'useReducer'
            warnInvalidHookAccess()
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnUpdateInDEV

            try {
              return rerenderReducer(reducer, initialArg, init)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useRef: function (initialValue) {
            currentHookNameInDev = 'useRef'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateRef()
          },
          useState: function (initialState) {
            currentHookNameInDev = 'useState'
            warnInvalidHookAccess()
            updateHookTypesDev()
            var prevDispatcher = ReactCurrentDispatcher$1.current
            ReactCurrentDispatcher$1.current =
              InvalidNestedHooksDispatcherOnUpdateInDEV

            try {
              return rerenderState(initialState)
            } finally {
              ReactCurrentDispatcher$1.current = prevDispatcher
            }
          },
          useDebugValue: function (value, formatterFn) {
            currentHookNameInDev = 'useDebugValue'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateDebugValue()
          },
          useDeferredValue: function (value) {
            currentHookNameInDev = 'useDeferredValue'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return rerenderDeferredValue(value)
          },
          useTransition: function () {
            currentHookNameInDev = 'useTransition'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return rerenderTransition()
          },
          useMutableSource: function (source, getSnapshot, subscribe) {
            currentHookNameInDev = 'useMutableSource'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return updateMutableSource(source, getSnapshot, subscribe)
          },
          useOpaqueIdentifier: function () {
            currentHookNameInDev = 'useOpaqueIdentifier'
            warnInvalidHookAccess()
            updateHookTypesDev()
            return rerenderOpaqueIdentifier()
          },
          unstable_isNewReconciler: enableNewReconciler,
        }
      }

      var now$1 = Scheduler.unstable_now
      var commitTime = 0
      var profilerStartTime = -1

      function getCommitTime() {
        return commitTime
      }

      function recordCommitTime() {
        commitTime = now$1()
      }

      function startProfilerTimer(fiber) {
        profilerStartTime = now$1()

        if (fiber.actualStartTime < 0) {
          fiber.actualStartTime = now$1()
        }
      }

      function stopProfilerTimerIfRunning(fiber) {
        profilerStartTime = -1
      }

      function stopProfilerTimerIfRunningAndRecordDelta(
        fiber,
        overrideBaseTime
      ) {
        if (profilerStartTime >= 0) {
          var elapsedTime = now$1() - profilerStartTime
          fiber.actualDuration += elapsedTime

          if (overrideBaseTime) {
            fiber.selfBaseDuration = elapsedTime
          }

          profilerStartTime = -1
        }
      }

      function transferActualDuration(fiber) {
        // Transfer time spent rendering these children so we don't lose it
        // after we rerender. This is used as a helper in special cases
        // where we should count the work of multiple passes.
        var child = fiber.child

        while (child) {
          fiber.actualDuration += child.actualDuration
          child = child.sibling
        }
      }

      var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner
      var didReceiveUpdate = false
      var didWarnAboutBadClass
      var didWarnAboutModulePatternComponent
      var didWarnAboutContextTypeOnFunctionComponent
      var didWarnAboutGetDerivedStateOnFunctionComponent
      var didWarnAboutFunctionRefs
      var didWarnAboutReassigningProps
      var didWarnAboutRevealOrder
      var didWarnAboutTailOptions

      {
        didWarnAboutBadClass = {}
        didWarnAboutModulePatternComponent = {}
        didWarnAboutContextTypeOnFunctionComponent = {}
        didWarnAboutGetDerivedStateOnFunctionComponent = {}
        didWarnAboutFunctionRefs = {}
        didWarnAboutReassigningProps = false
        didWarnAboutRevealOrder = {}
        didWarnAboutTailOptions = {}
      }

      function reconcileChildren(
        current,
        workInProgress,
        nextChildren,
        renderLanes
      ) {
        if (current === null) {
          // If this is a fresh new component that hasn't been rendered yet, we
          // won't update its child set by applying minimal side-effects. Instead,
          // we will add them all to the child before it gets rendered. That means
          // we can optimize this reconciliation pass by not tracking side-effects.
          workInProgress.child = mountChildFibers(
            workInProgress,
            null,
            nextChildren,
            renderLanes
          )
        } else {
          // If the current child is the same as the work in progress, it means that
          // we haven't yet started any work on these children. Therefore, we use
          // the clone algorithm to create a copy of all the current children.
          // If we had any progressed work already, that is invalid at this point so
          // let's throw it out.
          workInProgress.child = reconcileChildFibers(
            workInProgress,
            current.child,
            nextChildren,
            renderLanes
          )
        }
      }

      function forceUnmountCurrentAndReconcile(
        current,
        workInProgress,
        nextChildren,
        renderLanes
      ) {
        // This function is fork of reconcileChildren. It's used in cases where we
        // want to reconcile without matching against the existing set. This has the
        // effect of all current children being unmounted; even if the type and key
        // are the same, the old child is unmounted and a new child is created.
        //
        // To do this, we're going to go through the reconcile algorithm twice. In
        // the first pass, we schedule a deletion for all the current children by
        // passing null.
        workInProgress.child = reconcileChildFibers(
          workInProgress,
          current.child,
          null,
          renderLanes
        ) // In the second pass, we mount the new children. The trick here is that we
        // pass null in place of where we usually pass the current child set. This has
        // the effect of remounting all children regardless of whether their
        // identities match.

        workInProgress.child = reconcileChildFibers(
          workInProgress,
          null,
          nextChildren,
          renderLanes
        )
      }

      function updateForwardRef(
        current,
        workInProgress,
        Component,
        nextProps,
        renderLanes
      ) {
        // TODO: current can be non-null here even if the component
        // hasn't yet mounted. This happens after the first render suspends.
        // We'll need to figure out if this is fine or can cause issues.
        {
          if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes

            if (innerPropTypes) {
              checkPropTypes(
                innerPropTypes,
                nextProps, // Resolved props
                'prop',
                getComponentName(Component)
              )
            }
          }
        }

        var render = Component.render
        var ref = workInProgress.ref // The rest is a fork of updateFunctionComponent

        var nextChildren
        prepareToReadContext(workInProgress, renderLanes)

        {
          ReactCurrentOwner$1.current = workInProgress
          setIsRendering(true)
          nextChildren = renderWithHooks(
            current,
            workInProgress,
            render,
            nextProps,
            ref,
            renderLanes
          )

          if (workInProgress.mode & StrictMode) {
            disableLogs()

            try {
              nextChildren = renderWithHooks(
                current,
                workInProgress,
                render,
                nextProps,
                ref,
                renderLanes
              )
            } finally {
              reenableLogs()
            }
          }

          setIsRendering(false)
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderLanes)
          return bailoutOnAlreadyFinishedWork(
            current,
            workInProgress,
            renderLanes
          )
        } // React DevTools reads this flag.

        workInProgress.flags |= PerformedWork
        reconcileChildren(current, workInProgress, nextChildren, renderLanes)
        return workInProgress.child
      }

      function updateMemoComponent(
        current,
        workInProgress,
        Component,
        nextProps,
        updateLanes,
        renderLanes
      ) {
        if (current === null) {
          var type = Component.type

          if (
            isSimpleFunctionComponent(type) &&
            Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === undefined
          ) {
            var resolvedType = type

            {
              resolvedType = resolveFunctionForHotReloading(type)
            } // If this is a plain function component without default props,
            // and with only the default shallow comparison, we upgrade it
            // to a SimpleMemoComponent to allow fast path updates.

            workInProgress.tag = SimpleMemoComponent
            workInProgress.type = resolvedType

            {
              validateFunctionComponentInDev(workInProgress, type)
            }

            return updateSimpleMemoComponent(
              current,
              workInProgress,
              resolvedType,
              nextProps,
              updateLanes,
              renderLanes
            )
          }

          {
            var innerPropTypes = type.propTypes

            if (innerPropTypes) {
              // Inner memo component props aren't currently validated in createElement.
              // We could move it there, but we'd still need this for lazy code path.
              checkPropTypes(
                innerPropTypes,
                nextProps, // Resolved props
                'prop',
                getComponentName(type)
              )
            }
          }

          var child = createFiberFromTypeAndProps(
            Component.type,
            null,
            nextProps,
            workInProgress,
            workInProgress.mode,
            renderLanes
          )
          child.ref = workInProgress.ref
          child.return = workInProgress
          workInProgress.child = child
          return child
        }

        {
          var _type = Component.type
          var _innerPropTypes = _type.propTypes

          if (_innerPropTypes) {
            // Inner memo component props aren't currently validated in createElement.
            // We could move it there, but we'd still need this for lazy code path.
            checkPropTypes(
              _innerPropTypes,
              nextProps, // Resolved props
              'prop',
              getComponentName(_type)
            )
          }
        }

        var currentChild = current.child // This is always exactly one child

        if (!includesSomeLane(updateLanes, renderLanes)) {
          // This will be the props with resolved defaultProps,
          // unlike current.memoizedProps which will be the unresolved ones.
          var prevProps = currentChild.memoizedProps // Default to shallow comparison

          var compare = Component.compare
          compare = compare !== null ? compare : shallowEqual

          if (
            compare(prevProps, nextProps) &&
            current.ref === workInProgress.ref
          ) {
            return bailoutOnAlreadyFinishedWork(
              current,
              workInProgress,
              renderLanes
            )
          }
        } // React DevTools reads this flag.

        workInProgress.flags |= PerformedWork
        var newChild = createWorkInProgress(currentChild, nextProps)
        newChild.ref = workInProgress.ref
        newChild.return = workInProgress
        workInProgress.child = newChild
        return newChild
      }

      function updateSimpleMemoComponent(
        current,
        workInProgress,
        Component,
        nextProps,
        updateLanes,
        renderLanes
      ) {
        // TODO: current can be non-null here even if the component
        // hasn't yet mounted. This happens when the inner render suspends.
        // We'll need to figure out if this is fine or can cause issues.
        {
          if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var outerMemoType = workInProgress.elementType

            if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
              // We warn when you define propTypes on lazy()
              // so let's just skip over it to find memo() outer wrapper.
              // Inner props for memo are validated later.
              var lazyComponent = outerMemoType
              var payload = lazyComponent._payload
              var init = lazyComponent._init

              try {
                outerMemoType = init(payload)
              } catch (x) {
                outerMemoType = null
              } // Inner propTypes will be validated in the function component path.

              var outerPropTypes = outerMemoType && outerMemoType.propTypes

              if (outerPropTypes) {
                checkPropTypes(
                  outerPropTypes,
                  nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
                  'prop',
                  getComponentName(outerMemoType)
                )
              }
            }
          }
        }

        if (current !== null) {
          var prevProps = current.memoizedProps

          if (
            shallowEqual(prevProps, nextProps) &&
            current.ref === workInProgress.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress.type === current.type
          ) {
            didReceiveUpdate = false

            if (!includesSomeLane(renderLanes, updateLanes)) {
              // The pending lanes were cleared at the beginning of beginWork. We're
              // about to bail out, but there might be other lanes that weren't
              // included in the current render. Usually, the priority level of the
              // remaining updates is accumlated during the evaluation of the
              // component (i.e. when processing the update queue). But since since
              // we're bailing out early *without* evaluating the component, we need
              // to account for it here, too. Reset to the value of the current fiber.
              // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
              // because a MemoComponent fiber does not have hooks or an update queue;
              // rather, it wraps around an inner component, which may or may not
              // contains hooks.
              // TODO: Move the reset at in beginWork out of the common path so that
              // this is no longer necessary.
              workInProgress.lanes = current.lanes
              return bailoutOnAlreadyFinishedWork(
                current,
                workInProgress,
                renderLanes
              )
            } else if (
              (current.flags & ForceUpdateForLegacySuspense) !==
              NoFlags
            ) {
              // This is a special case that only exists for legacy mode.
              // See https://github.com/facebook/react/pull/19216.
              didReceiveUpdate = true
            }
          }
        }

        return updateFunctionComponent(
          current,
          workInProgress,
          Component,
          nextProps,
          renderLanes
        )
      }

      function updateOffscreenComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps
        var nextChildren = nextProps.children
        var prevState = current !== null ? current.memoizedState : null

        if (
          nextProps.mode === 'hidden' ||
          nextProps.mode === 'unstable-defer-without-hiding'
        ) {
          if ((workInProgress.mode & ConcurrentMode) === NoMode) {
            // In legacy sync mode, don't defer the subtree. Render it now.
            // TODO: Figure out what we should do in Blocking mode.
            var nextState = {
              baseLanes: NoLanes,
            }
            workInProgress.memoizedState = nextState
            pushRenderLanes(workInProgress, renderLanes)
          } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
            var nextBaseLanes

            if (prevState !== null) {
              var prevBaseLanes = prevState.baseLanes
              nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes)
            } else {
              nextBaseLanes = renderLanes
            } // Schedule this fiber to re-render at offscreen priority. Then bailout.

            {
              markSpawnedWork(OffscreenLane)
            }

            workInProgress.lanes = workInProgress.childLanes =
              laneToLanes(OffscreenLane)
            var _nextState = {
              baseLanes: nextBaseLanes,
            }
            workInProgress.memoizedState = _nextState // We're about to bail out, but we need to push this to the stack anyway
            // to avoid a push/pop misalignment.

            pushRenderLanes(workInProgress, nextBaseLanes)
            return null
          } else {
            // Rendering at offscreen, so we can clear the base lanes.
            var _nextState2 = {
              baseLanes: NoLanes,
            }
            workInProgress.memoizedState = _nextState2 // Push the lanes that were skipped when we bailed out.

            var subtreeRenderLanes =
              prevState !== null ? prevState.baseLanes : renderLanes
            pushRenderLanes(workInProgress, subtreeRenderLanes)
          }
        } else {
          var _subtreeRenderLanes

          if (prevState !== null) {
            _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes) // Since we're not hidden anymore, reset the state

            workInProgress.memoizedState = null
          } else {
            // We weren't previously hidden, and we still aren't, so there's nothing
            // special to do. Need to push to the stack regardless, though, to avoid
            // a push/pop misalignment.
            _subtreeRenderLanes = renderLanes
          }

          pushRenderLanes(workInProgress, _subtreeRenderLanes)
        }

        reconcileChildren(current, workInProgress, nextChildren, renderLanes)
        return workInProgress.child
      } // Note: These happen to have identical begin phases, for now. We shouldn't hold
      // ourselves to this constraint, though. If the behavior diverges, we should
      // fork the function.

      var updateLegacyHiddenComponent = updateOffscreenComponent

      function updateFragment(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps
        reconcileChildren(current, workInProgress, nextChildren, renderLanes)
        return workInProgress.child
      }

      function updateMode(current, workInProgress, renderLanes) {
        var nextChildren = workInProgress.pendingProps.children
        reconcileChildren(current, workInProgress, nextChildren, renderLanes)
        return workInProgress.child
      }

      function updateProfiler(current, workInProgress, renderLanes) {
        {
          workInProgress.flags |= Update // Reset effect durations for the next eventual effect phase.
          // These are reset during render to allow the DevTools commit hook a chance to read them,

          var stateNode = workInProgress.stateNode
          stateNode.effectDuration = 0
          stateNode.passiveEffectDuration = 0
        }

        var nextProps = workInProgress.pendingProps
        var nextChildren = nextProps.children
        reconcileChildren(current, workInProgress, nextChildren, renderLanes)
        return workInProgress.child
      }

      function markRef(current, workInProgress) {
        var ref = workInProgress.ref

        if (
          (current === null && ref !== null) ||
          (current !== null && current.ref !== ref)
        ) {
          // Schedule a Ref effect
          workInProgress.flags |= Ref
        }
      }

      function updateFunctionComponent(
        current,
        workInProgress,
        Component,
        nextProps,
        renderLanes
      ) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes

            if (innerPropTypes) {
              checkPropTypes(
                innerPropTypes,
                nextProps, // Resolved props
                'prop',
                getComponentName(Component)
              )
            }
          }
        }

        var context

        {
          var unmaskedContext = getUnmaskedContext(
            workInProgress,
            Component,
            true
          )
          context = getMaskedContext(workInProgress, unmaskedContext)
        }

        var nextChildren
        prepareToReadContext(workInProgress, renderLanes)

        {
          ReactCurrentOwner$1.current = workInProgress
          setIsRendering(true)
          nextChildren = renderWithHooks(
            current,
            workInProgress,
            Component,
            nextProps,
            context,
            renderLanes
          )

          if (workInProgress.mode & StrictMode) {
            disableLogs()

            try {
              nextChildren = renderWithHooks(
                current,
                workInProgress,
                Component,
                nextProps,
                context,
                renderLanes
              )
            } finally {
              reenableLogs()
            }
          }

          setIsRendering(false)
        }

        if (current !== null && !didReceiveUpdate) {
          bailoutHooks(current, workInProgress, renderLanes)
          return bailoutOnAlreadyFinishedWork(
            current,
            workInProgress,
            renderLanes
          )
        } // React DevTools reads this flag.

        workInProgress.flags |= PerformedWork
        reconcileChildren(current, workInProgress, nextChildren, renderLanes)
        return workInProgress.child
      }

      function updateClassComponent(
        current,
        workInProgress,
        Component,
        nextProps,
        renderLanes
      ) {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            // Lazy component props can't be validated in createElement
            // because they're only guaranteed to be resolved here.
            var innerPropTypes = Component.propTypes

            if (innerPropTypes) {
              checkPropTypes(
                innerPropTypes,
                nextProps, // Resolved props
                'prop',
                getComponentName(Component)
              )
            }
          }
        } // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.

        var hasContext

        if (isContextProvider(Component)) {
          hasContext = true
          pushContextProvider(workInProgress)
        } else {
          hasContext = false
        }

        prepareToReadContext(workInProgress, renderLanes)
        var instance = workInProgress.stateNode
        var shouldUpdate

        if (instance === null) {
          if (current !== null) {
            // A class component without an instance only mounts if it suspended
            // inside a non-concurrent tree, in an inconsistent state. We want to
            // treat it like a new mount, even though an empty version of it already
            // committed. Disconnect the alternate pointers.
            current.alternate = null
            workInProgress.alternate = null // Since this is conceptually a new fiber, schedule a Placement effect

            workInProgress.flags |= Placement
          } // In the initial pass we might need to construct the instance.

          constructClassInstance(workInProgress, Component, nextProps)
          mountClassInstance(workInProgress, Component, nextProps, renderLanes)
          shouldUpdate = true
        } else if (current === null) {
          // In a resume, we'll already have an instance we can reuse.
          shouldUpdate = resumeMountClassInstance(
            workInProgress,
            Component,
            nextProps,
            renderLanes
          )
        } else {
          shouldUpdate = updateClassInstance(
            current,
            workInProgress,
            Component,
            nextProps,
            renderLanes
          )
        }

        var nextUnitOfWork = finishClassComponent(
          current,
          workInProgress,
          Component,
          shouldUpdate,
          hasContext,
          renderLanes
        )

        {
          var inst = workInProgress.stateNode

          if (shouldUpdate && inst.props !== nextProps) {
            if (!didWarnAboutReassigningProps) {
              error(
                'It looks like %s is reassigning its own `this.props` while rendering. ' +
                  'This is not supported and can lead to confusing bugs.',
                getComponentName(workInProgress.type) || 'a component'
              )
            }

            didWarnAboutReassigningProps = true
          }
        }

        return nextUnitOfWork
      }

      function finishClassComponent(
        current,
        workInProgress,
        Component,
        shouldUpdate,
        hasContext,
        renderLanes
      ) {
        // Refs should update even if shouldComponentUpdate returns false
        markRef(current, workInProgress)
        var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags

        if (!shouldUpdate && !didCaptureError) {
          // Context providers should defer to sCU for rendering
          if (hasContext) {
            invalidateContextProvider(workInProgress, Component, false)
          }

          return bailoutOnAlreadyFinishedWork(
            current,
            workInProgress,
            renderLanes
          )
        }

        var instance = workInProgress.stateNode // Rerender

        ReactCurrentOwner$1.current = workInProgress
        var nextChildren

        if (
          didCaptureError &&
          typeof Component.getDerivedStateFromError !== 'function'
        ) {
          // If we captured an error, but getDerivedStateFromError is not defined,
          // unmount all the children. componentDidCatch will schedule an update to
          // re-render a fallback. This is temporary until we migrate everyone to
          // the new API.
          // TODO: Warn in a future release.
          nextChildren = null

          {
            stopProfilerTimerIfRunning()
          }
        } else {
          {
            setIsRendering(true)
            nextChildren = instance.render()

            if (workInProgress.mode & StrictMode) {
              disableLogs()

              try {
                instance.render()
              } finally {
                reenableLogs()
              }
            }

            setIsRendering(false)
          }
        } // React DevTools reads this flag.

        workInProgress.flags |= PerformedWork

        if (current !== null && didCaptureError) {
          // If we're recovering from an error, reconcile without reusing any of
          // the existing children. Conceptually, the normal children and the children
          // that are shown on error are two different sets, so we shouldn't reuse
          // normal children even if their identities match.
          forceUnmountCurrentAndReconcile(
            current,
            workInProgress,
            nextChildren,
            renderLanes
          )
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderLanes)
        } // Memoize state using the values we just used to render.
        // TODO: Restructure so we never read values from the instance.

        workInProgress.memoizedState = instance.state // The context might have changed so we need to recalculate it.

        if (hasContext) {
          invalidateContextProvider(workInProgress, Component, true)
        }

        return workInProgress.child
      }

      function pushHostRootContext(workInProgress) {
        var root = workInProgress.stateNode

        if (root.pendingContext) {
          pushTopLevelContextObject(
            workInProgress,
            root.pendingContext,
            root.pendingContext !== root.context
          )
        } else if (root.context) {
          // Should always be set
          pushTopLevelContextObject(workInProgress, root.context, false)
        }

        pushHostContainer(workInProgress, root.containerInfo)
      }

      function updateHostRoot(current, workInProgress, renderLanes) {
        pushHostRootContext(workInProgress)
        var updateQueue = workInProgress.updateQueue

        if (!(current !== null && updateQueue !== null)) {
          {
            throw Error(
              'If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }

        var nextProps = workInProgress.pendingProps
        var prevState = workInProgress.memoizedState
        var prevChildren = prevState !== null ? prevState.element : null
        cloneUpdateQueue(current, workInProgress)
        processUpdateQueue(workInProgress, nextProps, null, renderLanes)
        var nextState = workInProgress.memoizedState // Caution: React DevTools currently depends on this property
        // being called "element".

        var nextChildren = nextState.element

        if (nextChildren === prevChildren) {
          resetHydrationState()
          return bailoutOnAlreadyFinishedWork(
            current,
            workInProgress,
            renderLanes
          )
        }

        var root = workInProgress.stateNode

        if (root.hydrate && enterHydrationState(workInProgress)) {
          // If we don't have any current children this might be the first pass.
          // We always try to hydrate. If this isn't a hydration pass there won't
          // be any children to hydrate which is effectively the same thing as
          // not hydrating.
          {
            var mutableSourceEagerHydrationData =
              root.mutableSourceEagerHydrationData

            if (mutableSourceEagerHydrationData != null) {
              for (
                var i = 0;
                i < mutableSourceEagerHydrationData.length;
                i += 2
              ) {
                var mutableSource = mutableSourceEagerHydrationData[i]
                var version = mutableSourceEagerHydrationData[i + 1]
                setWorkInProgressVersion(mutableSource, version)
              }
            }
          }

          var child = mountChildFibers(
            workInProgress,
            null,
            nextChildren,
            renderLanes
          )
          workInProgress.child = child
          var node = child

          while (node) {
            // Mark each child as hydrating. This is a fast path to know whether this
            // tree is part of a hydrating tree. This is used to determine if a child
            // node has fully mounted yet, and for scheduling event replaying.
            // Conceptually this is similar to Placement in that a new subtree is
            // inserted into the React tree here. It just happens to not need DOM
            // mutations because it already exists.
            node.flags = (node.flags & ~Placement) | Hydrating
            node = node.sibling
          }
        } else {
          // Otherwise reset hydration state in case we aborted and resumed another
          // root.
          reconcileChildren(current, workInProgress, nextChildren, renderLanes)
          resetHydrationState()
        }

        return workInProgress.child
      }

      function updateHostComponent(current, workInProgress, renderLanes) {
        pushHostContext(workInProgress)

        if (current === null) {
          tryToClaimNextHydratableInstance(workInProgress)
        }

        var type = workInProgress.type
        var nextProps = workInProgress.pendingProps
        var prevProps = current !== null ? current.memoizedProps : null
        var nextChildren = nextProps.children
        var isDirectTextChild = shouldSetTextContent(type, nextProps)

        if (isDirectTextChild) {
          // We special case a direct text child of a host node. This is a common
          // case. We won't handle it as a reified child. We will instead handle
          // this in the host environment that also has access to this prop. That
          // avoids allocating another HostText fiber and traversing it.
          nextChildren = null
        } else if (
          prevProps !== null &&
          shouldSetTextContent(type, prevProps)
        ) {
          // If we're switching from a direct text child to a normal child, or to
          // empty, we need to schedule the text content to be reset.
          workInProgress.flags |= ContentReset
        }

        markRef(current, workInProgress)
        reconcileChildren(current, workInProgress, nextChildren, renderLanes)
        return workInProgress.child
      }

      function updateHostText(current, workInProgress) {
        if (current === null) {
          tryToClaimNextHydratableInstance(workInProgress)
        } // Nothing to do here. This is terminal. We'll do the completion step
        // immediately after.

        return null
      }

      function mountLazyComponent(
        _current,
        workInProgress,
        elementType,
        updateLanes,
        renderLanes
      ) {
        if (_current !== null) {
          // A lazy component only mounts if it suspended inside a non-
          // concurrent tree, in an inconsistent state. We want to treat it like
          // a new mount, even though an empty version of it already committed.
          // Disconnect the alternate pointers.
          _current.alternate = null
          workInProgress.alternate = null // Since this is conceptually a new fiber, schedule a Placement effect

          workInProgress.flags |= Placement
        }

        var props = workInProgress.pendingProps
        var lazyComponent = elementType
        var payload = lazyComponent._payload
        var init = lazyComponent._init
        var Component = init(payload) // Store the unwrapped component in the type.

        workInProgress.type = Component
        var resolvedTag = (workInProgress.tag =
          resolveLazyComponentTag(Component))
        var resolvedProps = resolveDefaultProps(Component, props)
        var child

        switch (resolvedTag) {
          case FunctionComponent: {
            {
              validateFunctionComponentInDev(workInProgress, Component)
              workInProgress.type = Component =
                resolveFunctionForHotReloading(Component)
            }

            child = updateFunctionComponent(
              null,
              workInProgress,
              Component,
              resolvedProps,
              renderLanes
            )
            return child
          }

          case ClassComponent: {
            {
              workInProgress.type = Component =
                resolveClassForHotReloading(Component)
            }

            child = updateClassComponent(
              null,
              workInProgress,
              Component,
              resolvedProps,
              renderLanes
            )
            return child
          }

          case ForwardRef: {
            {
              workInProgress.type = Component =
                resolveForwardRefForHotReloading(Component)
            }

            child = updateForwardRef(
              null,
              workInProgress,
              Component,
              resolvedProps,
              renderLanes
            )
            return child
          }

          case MemoComponent: {
            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = Component.propTypes

                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    resolvedProps, // Resolved for outer only
                    'prop',
                    getComponentName(Component)
                  )
                }
              }
            }

            child = updateMemoComponent(
              null,
              workInProgress,
              Component,
              resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
              updateLanes,
              renderLanes
            )
            return child
          }
        }

        var hint = ''

        {
          if (
            Component !== null &&
            typeof Component === 'object' &&
            Component.$$typeof === REACT_LAZY_TYPE
          ) {
            hint = ' Did you wrap a component in React.lazy() more than once?'
          }
        } // This message intentionally doesn't mention ForwardRef or MemoComponent
        // because the fact that it's a separate type of work is an
        // implementation detail.

        {
          {
            throw Error(
              'Element type is invalid. Received a promise that resolves to: ' +
                Component +
                '. Lazy element type must resolve to a class or function.' +
                hint
            )
          }
        }
      }

      function mountIncompleteClassComponent(
        _current,
        workInProgress,
        Component,
        nextProps,
        renderLanes
      ) {
        if (_current !== null) {
          // An incomplete component only mounts if it suspended inside a non-
          // concurrent tree, in an inconsistent state. We want to treat it like
          // a new mount, even though an empty version of it already committed.
          // Disconnect the alternate pointers.
          _current.alternate = null
          workInProgress.alternate = null // Since this is conceptually a new fiber, schedule a Placement effect

          workInProgress.flags |= Placement
        } // Promote the fiber to a class and try rendering again.

        workInProgress.tag = ClassComponent // The rest of this function is a fork of `updateClassComponent`
        // Push context providers early to prevent context stack mismatches.
        // During mounting we don't know the child context yet as the instance doesn't exist.
        // We will invalidate the child context in finishClassComponent() right after rendering.

        var hasContext

        if (isContextProvider(Component)) {
          hasContext = true
          pushContextProvider(workInProgress)
        } else {
          hasContext = false
        }

        prepareToReadContext(workInProgress, renderLanes)
        constructClassInstance(workInProgress, Component, nextProps)
        mountClassInstance(workInProgress, Component, nextProps, renderLanes)
        return finishClassComponent(
          null,
          workInProgress,
          Component,
          true,
          hasContext,
          renderLanes
        )
      }

      function mountIndeterminateComponent(
        _current,
        workInProgress,
        Component,
        renderLanes
      ) {
        if (_current !== null) {
          // An indeterminate component only mounts if it suspended inside a non-
          // concurrent tree, in an inconsistent state. We want to treat it like
          // a new mount, even though an empty version of it already committed.
          // Disconnect the alternate pointers.
          _current.alternate = null
          workInProgress.alternate = null // Since this is conceptually a new fiber, schedule a Placement effect

          workInProgress.flags |= Placement
        }

        var props = workInProgress.pendingProps
        var context

        {
          var unmaskedContext = getUnmaskedContext(
            workInProgress,
            Component,
            false
          )
          context = getMaskedContext(workInProgress, unmaskedContext)
        }

        prepareToReadContext(workInProgress, renderLanes)
        var value

        {
          if (
            Component.prototype &&
            typeof Component.prototype.render === 'function'
          ) {
            var componentName = getComponentName(Component) || 'Unknown'

            if (!didWarnAboutBadClass[componentName]) {
              error(
                "The <%s /> component appears to have a render method, but doesn't extend React.Component. " +
                  'This is likely to cause errors. Change %s to extend React.Component instead.',
                componentName,
                componentName
              )

              didWarnAboutBadClass[componentName] = true
            }
          }

          if (workInProgress.mode & StrictMode) {
            ReactStrictModeWarnings.recordLegacyContextWarning(
              workInProgress,
              null
            )
          }

          setIsRendering(true)
          ReactCurrentOwner$1.current = workInProgress
          value = renderWithHooks(
            null,
            workInProgress,
            Component,
            props,
            context,
            renderLanes
          )
          setIsRendering(false)
        } // React DevTools reads this flag.

        workInProgress.flags |= PerformedWork

        {
          // Support for module components is deprecated and is removed behind a flag.
          // Whether or not it would crash later, we want to show a good message in DEV first.
          if (
            typeof value === 'object' &&
            value !== null &&
            typeof value.render === 'function' &&
            value.$$typeof === undefined
          ) {
            var _componentName = getComponentName(Component) || 'Unknown'

            if (!didWarnAboutModulePatternComponent[_componentName]) {
              error(
                'The <%s /> component appears to be a function component that returns a class instance. ' +
                  'Change %s to a class that extends React.Component instead. ' +
                  "If you can't use a class try assigning the prototype on the function as a workaround. " +
                  "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " +
                  'cannot be called with `new` by React.',
                _componentName,
                _componentName,
                _componentName
              )

              didWarnAboutModulePatternComponent[_componentName] = true
            }
          }
        }

        if (
          // Run these checks in production only if the flag is off.
          // Eventually we'll delete this branch altogether.
          typeof value === 'object' &&
          value !== null &&
          typeof value.render === 'function' &&
          value.$$typeof === undefined
        ) {
          {
            var _componentName2 = getComponentName(Component) || 'Unknown'

            if (!didWarnAboutModulePatternComponent[_componentName2]) {
              error(
                'The <%s /> component appears to be a function component that returns a class instance. ' +
                  'Change %s to a class that extends React.Component instead. ' +
                  "If you can't use a class try assigning the prototype on the function as a workaround. " +
                  "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " +
                  'cannot be called with `new` by React.',
                _componentName2,
                _componentName2,
                _componentName2
              )

              didWarnAboutModulePatternComponent[_componentName2] = true
            }
          } // Proceed under the assumption that this is a class instance

          workInProgress.tag = ClassComponent // Throw out any hooks that were used.

          workInProgress.memoizedState = null
          workInProgress.updateQueue = null // Push context providers early to prevent context stack mismatches.
          // During mounting we don't know the child context yet as the instance doesn't exist.
          // We will invalidate the child context in finishClassComponent() right after rendering.

          var hasContext = false

          if (isContextProvider(Component)) {
            hasContext = true
            pushContextProvider(workInProgress)
          } else {
            hasContext = false
          }

          workInProgress.memoizedState =
            value.state !== null && value.state !== undefined
              ? value.state
              : null
          initializeUpdateQueue(workInProgress)
          var getDerivedStateFromProps = Component.getDerivedStateFromProps

          if (typeof getDerivedStateFromProps === 'function') {
            applyDerivedStateFromProps(
              workInProgress,
              Component,
              getDerivedStateFromProps,
              props
            )
          }

          adoptClassInstance(workInProgress, value)
          mountClassInstance(workInProgress, Component, props, renderLanes)
          return finishClassComponent(
            null,
            workInProgress,
            Component,
            true,
            hasContext,
            renderLanes
          )
        } else {
          // Proceed under the assumption that this is a function component
          workInProgress.tag = FunctionComponent

          {
            if (workInProgress.mode & StrictMode) {
              disableLogs()

              try {
                value = renderWithHooks(
                  null,
                  workInProgress,
                  Component,
                  props,
                  context,
                  renderLanes
                )
              } finally {
                reenableLogs()
              }
            }
          }

          reconcileChildren(null, workInProgress, value, renderLanes)

          {
            validateFunctionComponentInDev(workInProgress, Component)
          }

          return workInProgress.child
        }
      }

      function validateFunctionComponentInDev(workInProgress, Component) {
        {
          if (Component) {
            if (Component.childContextTypes) {
              error(
                '%s(...): childContextTypes cannot be defined on a function component.',
                Component.displayName || Component.name || 'Component'
              )
            }
          }

          if (workInProgress.ref !== null) {
            var info = ''
            var ownerName = getCurrentFiberOwnerNameInDevOrNull()

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.'
            }

            var warningKey = ownerName || workInProgress._debugID || ''
            var debugSource = workInProgress._debugSource

            if (debugSource) {
              warningKey = debugSource.fileName + ':' + debugSource.lineNumber
            }

            if (!didWarnAboutFunctionRefs[warningKey]) {
              didWarnAboutFunctionRefs[warningKey] = true

              error(
                'Function components cannot be given refs. ' +
                  'Attempts to access this ref will fail. ' +
                  'Did you mean to use React.forwardRef()?%s',
                info
              )
            }
          }

          if (typeof Component.getDerivedStateFromProps === 'function') {
            var _componentName3 = getComponentName(Component) || 'Unknown'

            if (
              !didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]
            ) {
              error(
                '%s: Function components do not support getDerivedStateFromProps.',
                _componentName3
              )

              didWarnAboutGetDerivedStateOnFunctionComponent[
                _componentName3
              ] = true
            }
          }

          if (
            typeof Component.contextType === 'object' &&
            Component.contextType !== null
          ) {
            var _componentName4 = getComponentName(Component) || 'Unknown'

            if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
              error(
                '%s: Function components do not support contextType.',
                _componentName4
              )

              didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true
            }
          }
        }
      }

      var SUSPENDED_MARKER = {
        dehydrated: null,
        retryLane: NoLane,
      }

      function mountSuspenseOffscreenState(renderLanes) {
        return {
          baseLanes: renderLanes,
        }
      }

      function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
        return {
          baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
        }
      } // TODO: Probably should inline this back

      function shouldRemainOnFallback(
        suspenseContext,
        current,
        workInProgress,
        renderLanes
      ) {
        // If we're already showing a fallback, there are cases where we need to
        // remain on that fallback regardless of whether the content has resolved.
        // For example, SuspenseList coordinates when nested content appears.
        if (current !== null) {
          var suspenseState = current.memoizedState

          if (suspenseState === null) {
            // Currently showing content. Don't hide it, even if ForceSuspenseFallack
            // is true. More precise name might be "ForceRemainSuspenseFallback".
            // Note: This is a factoring smell. Can't remain on a fallback if there's
            // no fallback to remain on.
            return false
          }
        } // Not currently showing content. Consult the Suspense context.

        return hasSuspenseContext(suspenseContext, ForceSuspenseFallback)
      }

      function getRemainingWorkInPrimaryTree(current, renderLanes) {
        // TODO: Should not remove render lanes that were pinged during this render
        return removeLanes(current.childLanes, renderLanes)
      }

      function updateSuspenseComponent(current, workInProgress, renderLanes) {
        var nextProps = workInProgress.pendingProps // This is used by DevTools to force a boundary to suspend.

        {
          if (shouldSuspend(workInProgress)) {
            workInProgress.flags |= DidCapture
          }
        }

        var suspenseContext = suspenseStackCursor.current
        var showFallback = false
        var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags

        if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
          // Something in this boundary's subtree already suspended. Switch to
          // rendering the fallback children.
          showFallback = true
          workInProgress.flags &= ~DidCapture
        } else {
          // Attempting the main content
          if (current === null || current.memoizedState !== null) {
            // This is a new mount or this boundary is already showing a fallback state.
            // Mark this subtree context as having at least one invisible parent that could
            // handle the fallback state.
            // Boundaries without fallbacks or should be avoided are not considered since
            // they cannot handle preferred fallback states.
            if (
              nextProps.fallback !== undefined &&
              nextProps.unstable_avoidThisFallback !== true
            ) {
              suspenseContext = addSubtreeSuspenseContext(
                suspenseContext,
                InvisibleParentSuspenseContext
              )
            }
          }
        }

        suspenseContext = setDefaultShallowSuspenseContext(suspenseContext)
        pushSuspenseContext(workInProgress, suspenseContext) // OK, the next part is confusing. We're about to reconcile the Suspense
        // boundary's children. This involves some custom reconcilation logic. Two
        // main reasons this is so complicated.
        //
        // First, Legacy Mode has different semantics for backwards compatibility. The
        // primary tree will commit in an inconsistent state, so when we do the
        // second pass to render the fallback, we do some exceedingly, uh, clever
        // hacks to make that not totally break. Like transferring effects and
        // deletions from hidden tree. In Concurrent Mode, it's much simpler,
        // because we bailout on the primary tree completely and leave it in its old
        // state, no effects. Same as what we do for Offscreen (except that
        // Offscreen doesn't have the first render pass).
        //
        // Second is hydration. During hydration, the Suspense fiber has a slightly
        // different layout, where the child points to a dehydrated fragment, which
        // contains the DOM rendered by the server.
        //
        // Third, even if you set all that aside, Suspense is like error boundaries in
        // that we first we try to render one tree, and if that fails, we render again
        // and switch to a different tree. Like a try/catch block. So we have to track
        // which branch we're currently rendering. Ideally we would model this using
        // a stack.

        if (current === null) {
          // Initial mount
          // If we're currently hydrating, try to hydrate this boundary.
          // But only if this has a fallback.
          if (nextProps.fallback !== undefined) {
            tryToClaimNextHydratableInstance(workInProgress) // This could've been a dehydrated suspense component.
          }

          var nextPrimaryChildren = nextProps.children
          var nextFallbackChildren = nextProps.fallback

          if (showFallback) {
            var fallbackFragment = mountSuspenseFallbackChildren(
              workInProgress,
              nextPrimaryChildren,
              nextFallbackChildren,
              renderLanes
            )
            var primaryChildFragment = workInProgress.child
            primaryChildFragment.memoizedState =
              mountSuspenseOffscreenState(renderLanes)
            workInProgress.memoizedState = SUSPENDED_MARKER
            return fallbackFragment
          } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
            // This is a CPU-bound tree. Skip this tree and show a placeholder to
            // unblock the surrounding content. Then immediately retry after the
            // initial commit.
            var _fallbackFragment = mountSuspenseFallbackChildren(
              workInProgress,
              nextPrimaryChildren,
              nextFallbackChildren,
              renderLanes
            )

            var _primaryChildFragment = workInProgress.child
            _primaryChildFragment.memoizedState =
              mountSuspenseOffscreenState(renderLanes)
            workInProgress.memoizedState = SUSPENDED_MARKER // Since nothing actually suspended, there will nothing to ping this to
            // get it started back up to attempt the next item. While in terms of
            // priority this work has the same priority as this current render, it's
            // not part of the same transition once the transition has committed. If
            // it's sync, we still want to yield so that it can be painted.
            // Conceptually, this is really the same as pinging. We can use any
            // RetryLane even if it's the one currently rendering since we're leaving
            // it behind on this node.

            workInProgress.lanes = SomeRetryLane

            {
              markSpawnedWork(SomeRetryLane)
            }

            return _fallbackFragment
          } else {
            return mountSuspensePrimaryChildren(
              workInProgress,
              nextPrimaryChildren,
              renderLanes
            )
          }
        } else {
          // This is an update.
          // If the current fiber has a SuspenseState, that means it's already showing
          // a fallback.
          var prevState = current.memoizedState

          if (prevState !== null) {
            if (showFallback) {
              var _nextFallbackChildren2 = nextProps.fallback
              var _nextPrimaryChildren2 = nextProps.children

              var _fallbackChildFragment = updateSuspenseFallbackChildren(
                current,
                workInProgress,
                _nextPrimaryChildren2,
                _nextFallbackChildren2,
                renderLanes
              )

              var _primaryChildFragment3 = workInProgress.child
              var prevOffscreenState = current.child.memoizedState
              _primaryChildFragment3.memoizedState =
                prevOffscreenState === null
                  ? mountSuspenseOffscreenState(renderLanes)
                  : updateSuspenseOffscreenState(
                      prevOffscreenState,
                      renderLanes
                    )
              _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(
                current,
                renderLanes
              )
              workInProgress.memoizedState = SUSPENDED_MARKER
              return _fallbackChildFragment
            } else {
              var _nextPrimaryChildren3 = nextProps.children

              var _primaryChildFragment4 = updateSuspensePrimaryChildren(
                current,
                workInProgress,
                _nextPrimaryChildren3,
                renderLanes
              )

              workInProgress.memoizedState = null
              return _primaryChildFragment4
            }
          } else {
            // The current tree is not already showing a fallback.
            if (showFallback) {
              // Timed out.
              var _nextFallbackChildren3 = nextProps.fallback
              var _nextPrimaryChildren4 = nextProps.children

              var _fallbackChildFragment2 = updateSuspenseFallbackChildren(
                current,
                workInProgress,
                _nextPrimaryChildren4,
                _nextFallbackChildren3,
                renderLanes
              )

              var _primaryChildFragment5 = workInProgress.child
              var _prevOffscreenState = current.child.memoizedState
              _primaryChildFragment5.memoizedState =
                _prevOffscreenState === null
                  ? mountSuspenseOffscreenState(renderLanes)
                  : updateSuspenseOffscreenState(
                      _prevOffscreenState,
                      renderLanes
                    )
              _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(
                current,
                renderLanes
              ) // Skip the primary children, and continue working on the
              // fallback children.

              workInProgress.memoizedState = SUSPENDED_MARKER
              return _fallbackChildFragment2
            } else {
              // Still haven't timed out. Continue rendering the children, like we
              // normally do.
              var _nextPrimaryChildren5 = nextProps.children

              var _primaryChildFragment6 = updateSuspensePrimaryChildren(
                current,
                workInProgress,
                _nextPrimaryChildren5,
                renderLanes
              )

              workInProgress.memoizedState = null
              return _primaryChildFragment6
            }
          }
        }
      }

      function mountSuspensePrimaryChildren(
        workInProgress,
        primaryChildren,
        renderLanes
      ) {
        var mode = workInProgress.mode
        var primaryChildProps = {
          mode: 'visible',
          children: primaryChildren,
        }
        var primaryChildFragment = createFiberFromOffscreen(
          primaryChildProps,
          mode,
          renderLanes,
          null
        )
        primaryChildFragment.return = workInProgress
        workInProgress.child = primaryChildFragment
        return primaryChildFragment
      }

      function mountSuspenseFallbackChildren(
        workInProgress,
        primaryChildren,
        fallbackChildren,
        renderLanes
      ) {
        var mode = workInProgress.mode
        var progressedPrimaryFragment = workInProgress.child
        var primaryChildProps = {
          mode: 'hidden',
          children: primaryChildren,
        }
        var primaryChildFragment
        var fallbackChildFragment

        if (
          (mode & BlockingMode) === NoMode &&
          progressedPrimaryFragment !== null
        ) {
          // In legacy mode, we commit the primary tree as if it successfully
          // completed, even though it's in an inconsistent state.
          primaryChildFragment = progressedPrimaryFragment
          primaryChildFragment.childLanes = NoLanes
          primaryChildFragment.pendingProps = primaryChildProps

          if (workInProgress.mode & ProfileMode) {
            // Reset the durations from the first pass so they aren't included in the
            // final amounts. This seems counterintuitive, since we're intentionally
            // not measuring part of the render phase, but this makes it match what we
            // do in Concurrent Mode.
            primaryChildFragment.actualDuration = 0
            primaryChildFragment.actualStartTime = -1
            primaryChildFragment.selfBaseDuration = 0
            primaryChildFragment.treeBaseDuration = 0
          }

          fallbackChildFragment = createFiberFromFragment(
            fallbackChildren,
            mode,
            renderLanes,
            null
          )
        } else {
          primaryChildFragment = createFiberFromOffscreen(
            primaryChildProps,
            mode,
            NoLanes,
            null
          )
          fallbackChildFragment = createFiberFromFragment(
            fallbackChildren,
            mode,
            renderLanes,
            null
          )
        }

        primaryChildFragment.return = workInProgress
        fallbackChildFragment.return = workInProgress
        primaryChildFragment.sibling = fallbackChildFragment
        workInProgress.child = primaryChildFragment
        return fallbackChildFragment
      }

      function createWorkInProgressOffscreenFiber(current, offscreenProps) {
        // The props argument to `createWorkInProgress` is `any` typed, so we use this
        // wrapper function to constrain it.
        return createWorkInProgress(current, offscreenProps)
      }

      function updateSuspensePrimaryChildren(
        current,
        workInProgress,
        primaryChildren,
        renderLanes
      ) {
        var currentPrimaryChildFragment = current.child
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling
        var primaryChildFragment = createWorkInProgressOffscreenFiber(
          currentPrimaryChildFragment,
          {
            mode: 'visible',
            children: primaryChildren,
          }
        )

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          primaryChildFragment.lanes = renderLanes
        }

        primaryChildFragment.return = workInProgress
        primaryChildFragment.sibling = null

        if (currentFallbackChildFragment !== null) {
          // Delete the fallback child fragment
          currentFallbackChildFragment.nextEffect = null
          currentFallbackChildFragment.flags = Deletion
          workInProgress.firstEffect = workInProgress.lastEffect =
            currentFallbackChildFragment
        }

        workInProgress.child = primaryChildFragment
        return primaryChildFragment
      }

      function updateSuspenseFallbackChildren(
        current,
        workInProgress,
        primaryChildren,
        fallbackChildren,
        renderLanes
      ) {
        var mode = workInProgress.mode
        var currentPrimaryChildFragment = current.child
        var currentFallbackChildFragment = currentPrimaryChildFragment.sibling
        var primaryChildProps = {
          mode: 'hidden',
          children: primaryChildren,
        }
        var primaryChildFragment

        if (
          // In legacy mode, we commit the primary tree as if it successfully
          // completed, even though it's in an inconsistent state.
          (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
          // already cloned. In legacy mode, the only case where this isn't true is
          // when DevTools forces us to display a fallback; we skip the first render
          // pass entirely and go straight to rendering the fallback. (In Concurrent
          // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
          // only codepath.)
          workInProgress.child !== currentPrimaryChildFragment
        ) {
          var progressedPrimaryFragment = workInProgress.child
          primaryChildFragment = progressedPrimaryFragment
          primaryChildFragment.childLanes = NoLanes
          primaryChildFragment.pendingProps = primaryChildProps

          if (workInProgress.mode & ProfileMode) {
            // Reset the durations from the first pass so they aren't included in the
            // final amounts. This seems counterintuitive, since we're intentionally
            // not measuring part of the render phase, but this makes it match what we
            // do in Concurrent Mode.
            primaryChildFragment.actualDuration = 0
            primaryChildFragment.actualStartTime = -1
            primaryChildFragment.selfBaseDuration =
              currentPrimaryChildFragment.selfBaseDuration
            primaryChildFragment.treeBaseDuration =
              currentPrimaryChildFragment.treeBaseDuration
          } // The fallback fiber was added as a deletion effect during the first pass.
          // However, since we're going to remain on the fallback, we no longer want
          // to delete it. So we need to remove it from the list. Deletions are stored
          // on the same list as effects. We want to keep the effects from the primary
          // tree. So we copy the primary child fragment's effect list, which does not
          // include the fallback deletion effect.

          var progressedLastEffect = primaryChildFragment.lastEffect

          if (progressedLastEffect !== null) {
            workInProgress.firstEffect = primaryChildFragment.firstEffect
            workInProgress.lastEffect = progressedLastEffect
            progressedLastEffect.nextEffect = null
          } else {
            // TODO: Reset this somewhere else? Lol legacy mode is so weird.
            workInProgress.firstEffect = workInProgress.lastEffect = null
          }
        } else {
          primaryChildFragment = createWorkInProgressOffscreenFiber(
            currentPrimaryChildFragment,
            primaryChildProps
          )
        }

        var fallbackChildFragment

        if (currentFallbackChildFragment !== null) {
          fallbackChildFragment = createWorkInProgress(
            currentFallbackChildFragment,
            fallbackChildren
          )
        } else {
          fallbackChildFragment = createFiberFromFragment(
            fallbackChildren,
            mode,
            renderLanes,
            null
          ) // Needs a placement effect because the parent (the Suspense boundary) already
          // mounted but this is a new fiber.

          fallbackChildFragment.flags |= Placement
        }

        fallbackChildFragment.return = workInProgress
        primaryChildFragment.return = workInProgress
        primaryChildFragment.sibling = fallbackChildFragment
        workInProgress.child = primaryChildFragment
        return fallbackChildFragment
      }

      function scheduleWorkOnFiber(fiber, renderLanes) {
        fiber.lanes = mergeLanes(fiber.lanes, renderLanes)
        var alternate = fiber.alternate

        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, renderLanes)
        }

        scheduleWorkOnParentPath(fiber.return, renderLanes)
      }

      function propagateSuspenseContextChange(
        workInProgress,
        firstChild,
        renderLanes
      ) {
        // Mark any Suspense boundaries with fallbacks as having work to do.
        // If they were previously forced into fallbacks, they may now be able
        // to unblock.
        var node = firstChild

        while (node !== null) {
          if (node.tag === SuspenseComponent) {
            var state = node.memoizedState

            if (state !== null) {
              scheduleWorkOnFiber(node, renderLanes)
            }
          } else if (node.tag === SuspenseListComponent) {
            // If the tail is hidden there might not be an Suspense boundaries
            // to schedule work on. In this case we have to schedule it on the
            // list itself.
            // We don't have to traverse to the children of the list since
            // the list will propagate the change when it rerenders.
            scheduleWorkOnFiber(node, renderLanes)
          } else if (node.child !== null) {
            node.child.return = node
            node = node.child
            continue
          }

          if (node === workInProgress) {
            return
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === workInProgress) {
              return
            }

            node = node.return
          }

          node.sibling.return = node.return
          node = node.sibling
        }
      }

      function findLastContentRow(firstChild) {
        // This is going to find the last row among these children that is already
        // showing content on the screen, as opposed to being in fallback state or
        // new. If a row has multiple Suspense boundaries, any of them being in the
        // fallback state, counts as the whole row being in a fallback state.
        // Note that the "rows" will be workInProgress, but any nested children
        // will still be current since we haven't rendered them yet. The mounted
        // order may not be the same as the new order. We use the new order.
        var row = firstChild
        var lastContentRow = null

        while (row !== null) {
          var currentRow = row.alternate // New rows can't be content rows.

          if (currentRow !== null && findFirstSuspended(currentRow) === null) {
            lastContentRow = row
          }

          row = row.sibling
        }

        return lastContentRow
      }

      function validateRevealOrder(revealOrder) {
        {
          if (
            revealOrder !== undefined &&
            revealOrder !== 'forwards' &&
            revealOrder !== 'backwards' &&
            revealOrder !== 'together' &&
            !didWarnAboutRevealOrder[revealOrder]
          ) {
            didWarnAboutRevealOrder[revealOrder] = true

            if (typeof revealOrder === 'string') {
              switch (revealOrder.toLowerCase()) {
                case 'together':
                case 'forwards':
                case 'backwards': {
                  error(
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. ' +
                      'Use lowercase "%s" instead.',
                    revealOrder,
                    revealOrder.toLowerCase()
                  )

                  break
                }

                case 'forward':
                case 'backward': {
                  error(
                    '"%s" is not a valid value for revealOrder on <SuspenseList />. ' +
                      'React uses the -s suffix in the spelling. Use "%ss" instead.',
                    revealOrder,
                    revealOrder.toLowerCase()
                  )

                  break
                }

                default:
                  error(
                    '"%s" is not a supported revealOrder on <SuspenseList />. ' +
                      'Did you mean "together", "forwards" or "backwards"?',
                    revealOrder
                  )

                  break
              }
            } else {
              error(
                '%s is not a supported value for revealOrder on <SuspenseList />. ' +
                  'Did you mean "together", "forwards" or "backwards"?',
                revealOrder
              )
            }
          }
        }
      }

      function validateTailOptions(tailMode, revealOrder) {
        {
          if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
            if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
              didWarnAboutTailOptions[tailMode] = true

              error(
                '"%s" is not a supported value for tail on <SuspenseList />. ' +
                  'Did you mean "collapsed" or "hidden"?',
                tailMode
              )
            } else if (
              revealOrder !== 'forwards' &&
              revealOrder !== 'backwards'
            ) {
              didWarnAboutTailOptions[tailMode] = true

              error(
                '<SuspenseList tail="%s" /> is only valid if revealOrder is ' +
                  '"forwards" or "backwards". ' +
                  'Did you mean to specify revealOrder="forwards"?',
                tailMode
              )
            }
          }
        }
      }

      function validateSuspenseListNestedChild(childSlot, index) {
        {
          var isArray = Array.isArray(childSlot)
          var isIterable =
            !isArray && typeof getIteratorFn(childSlot) === 'function'

          if (isArray || isIterable) {
            var type = isArray ? 'array' : 'iterable'

            error(
              'A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' +
                'an additional SuspenseList to configure its revealOrder: ' +
                '<SuspenseList revealOrder=...> ... ' +
                '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' +
                '</SuspenseList>',
              type,
              index,
              type
            )

            return false
          }
        }

        return true
      }

      function validateSuspenseListChildren(children, revealOrder) {
        {
          if (
            (revealOrder === 'forwards' || revealOrder === 'backwards') &&
            children !== undefined &&
            children !== null &&
            children !== false
          ) {
            if (Array.isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                if (!validateSuspenseListNestedChild(children[i], i)) {
                  return
                }
              }
            } else {
              var iteratorFn = getIteratorFn(children)

              if (typeof iteratorFn === 'function') {
                var childrenIterator = iteratorFn.call(children)

                if (childrenIterator) {
                  var step = childrenIterator.next()
                  var _i = 0

                  for (; !step.done; step = childrenIterator.next()) {
                    if (!validateSuspenseListNestedChild(step.value, _i)) {
                      return
                    }

                    _i++
                  }
                }
              } else {
                error(
                  'A single row was passed to a <SuspenseList revealOrder="%s" />. ' +
                    'This is not useful since it needs multiple rows. ' +
                    'Did you mean to pass multiple children or an array?',
                  revealOrder
                )
              }
            }
          }
        }
      }

      function initSuspenseListRenderState(
        workInProgress,
        isBackwards,
        tail,
        lastContentRow,
        tailMode,
        lastEffectBeforeRendering
      ) {
        var renderState = workInProgress.memoizedState

        if (renderState === null) {
          workInProgress.memoizedState = {
            isBackwards: isBackwards,
            rendering: null,
            renderingStartTime: 0,
            last: lastContentRow,
            tail: tail,
            tailMode: tailMode,
            lastEffect: lastEffectBeforeRendering,
          }
        } else {
          // We can reuse the existing object from previous renders.
          renderState.isBackwards = isBackwards
          renderState.rendering = null
          renderState.renderingStartTime = 0
          renderState.last = lastContentRow
          renderState.tail = tail
          renderState.tailMode = tailMode
          renderState.lastEffect = lastEffectBeforeRendering
        }
      } // This can end up rendering this component multiple passes.
      // The first pass splits the children fibers into two sets. A head and tail.
      // We first render the head. If anything is in fallback state, we do another
      // pass through beginWork to rerender all children (including the tail) with
      // the force suspend context. If the first render didn't have anything in
      // in fallback state. Then we render each row in the tail one-by-one.
      // That happens in the completeWork phase without going back to beginWork.

      function updateSuspenseListComponent(
        current,
        workInProgress,
        renderLanes
      ) {
        var nextProps = workInProgress.pendingProps
        var revealOrder = nextProps.revealOrder
        var tailMode = nextProps.tail
        var newChildren = nextProps.children
        validateRevealOrder(revealOrder)
        validateTailOptions(tailMode, revealOrder)
        validateSuspenseListChildren(newChildren, revealOrder)
        reconcileChildren(current, workInProgress, newChildren, renderLanes)
        var suspenseContext = suspenseStackCursor.current
        var shouldForceFallback = hasSuspenseContext(
          suspenseContext,
          ForceSuspenseFallback
        )

        if (shouldForceFallback) {
          suspenseContext = setShallowSuspenseContext(
            suspenseContext,
            ForceSuspenseFallback
          )
          workInProgress.flags |= DidCapture
        } else {
          var didSuspendBefore =
            current !== null && (current.flags & DidCapture) !== NoFlags

          if (didSuspendBefore) {
            // If we previously forced a fallback, we need to schedule work
            // on any nested boundaries to let them know to try to render
            // again. This is the same as context updating.
            propagateSuspenseContextChange(
              workInProgress,
              workInProgress.child,
              renderLanes
            )
          }

          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext)
        }

        pushSuspenseContext(workInProgress, suspenseContext)

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // In legacy mode, SuspenseList doesn't work so we just
          // use make it a noop by treating it as the default revealOrder.
          workInProgress.memoizedState = null
        } else {
          switch (revealOrder) {
            case 'forwards': {
              var lastContentRow = findLastContentRow(workInProgress.child)
              var tail

              if (lastContentRow === null) {
                // The whole list is part of the tail.
                // TODO: We could fast path by just rendering the tail now.
                tail = workInProgress.child
                workInProgress.child = null
              } else {
                // Disconnect the tail rows after the content row.
                // We're going to render them separately later.
                tail = lastContentRow.sibling
                lastContentRow.sibling = null
              }

              initSuspenseListRenderState(
                workInProgress,
                false, // isBackwards
                tail,
                lastContentRow,
                tailMode,
                workInProgress.lastEffect
              )
              break
            }

            case 'backwards': {
              // We're going to find the first row that has existing content.
              // At the same time we're going to reverse the list of everything
              // we pass in the meantime. That's going to be our tail in reverse
              // order.
              var _tail = null
              var row = workInProgress.child
              workInProgress.child = null

              while (row !== null) {
                var currentRow = row.alternate // New rows can't be content rows.

                if (
                  currentRow !== null &&
                  findFirstSuspended(currentRow) === null
                ) {
                  // This is the beginning of the main content.
                  workInProgress.child = row
                  break
                }

                var nextRow = row.sibling
                row.sibling = _tail
                _tail = row
                row = nextRow
              } // TODO: If workInProgress.child is null, we can continue on the tail immediately.

              initSuspenseListRenderState(
                workInProgress,
                true, // isBackwards
                _tail,
                null, // last
                tailMode,
                workInProgress.lastEffect
              )
              break
            }

            case 'together': {
              initSuspenseListRenderState(
                workInProgress,
                false, // isBackwards
                null, // tail
                null, // last
                undefined,
                workInProgress.lastEffect
              )
              break
            }

            default: {
              // The default reveal order is the same as not having
              // a boundary.
              workInProgress.memoizedState = null
            }
          }
        }

        return workInProgress.child
      }

      function updatePortalComponent(current, workInProgress, renderLanes) {
        pushHostContainer(
          workInProgress,
          workInProgress.stateNode.containerInfo
        )
        var nextChildren = workInProgress.pendingProps

        if (current === null) {
          // Portals are special because we don't append the children during mount
          // but at commit. Therefore we need to track insertions which the normal
          // flow doesn't do during mount. This doesn't happen at the root because
          // the root always starts with a "current" with a null child.
          // TODO: Consider unifying this with how the root works.
          workInProgress.child = reconcileChildFibers(
            workInProgress,
            null,
            nextChildren,
            renderLanes
          )
        } else {
          reconcileChildren(current, workInProgress, nextChildren, renderLanes)
        }

        return workInProgress.child
      }

      var hasWarnedAboutUsingNoValuePropOnContextProvider = false

      function updateContextProvider(current, workInProgress, renderLanes) {
        var providerType = workInProgress.type
        var context = providerType._context
        var newProps = workInProgress.pendingProps
        var oldProps = workInProgress.memoizedProps
        var newValue = newProps.value

        {
          if (!('value' in newProps)) {
            if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
              hasWarnedAboutUsingNoValuePropOnContextProvider = true

              error(
                'The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?'
              )
            }
          }

          var providerPropTypes = workInProgress.type.propTypes

          if (providerPropTypes) {
            checkPropTypes(
              providerPropTypes,
              newProps,
              'prop',
              'Context.Provider'
            )
          }
        }

        pushProvider(workInProgress, newValue)

        if (oldProps !== null) {
          var oldValue = oldProps.value
          var changedBits = calculateChangedBits(context, newValue, oldValue)

          if (changedBits === 0) {
            // No change. Bailout early if children are the same.
            if (
              oldProps.children === newProps.children &&
              !hasContextChanged()
            ) {
              return bailoutOnAlreadyFinishedWork(
                current,
                workInProgress,
                renderLanes
              )
            }
          } else {
            // The context value changed. Search for matching consumers and schedule
            // them to update.
            propagateContextChange(
              workInProgress,
              context,
              changedBits,
              renderLanes
            )
          }
        }

        var newChildren = newProps.children
        reconcileChildren(current, workInProgress, newChildren, renderLanes)
        return workInProgress.child
      }

      var hasWarnedAboutUsingContextAsConsumer = false

      function updateContextConsumer(current, workInProgress, renderLanes) {
        var context = workInProgress.type // The logic below for Context differs depending on PROD or DEV mode. In
        // DEV mode, we create a separate object for Context.Consumer that acts
        // like a proxy to Context. This proxy object adds unnecessary code in PROD
        // so we use the old behaviour (Context.Consumer references Context) to
        // reduce size and overhead. The separate object references context via
        // a property called "_context", which also gives us the ability to check
        // in DEV mode if this property exists or not and warn if it does not.

        {
          if (context._context === undefined) {
            // This may be because it's a Context (rather than a Consumer).
            // Or it may be because it's older React where they're the same thing.
            // We only want to warn if we're sure it's a new React.
            if (context !== context.Consumer) {
              if (!hasWarnedAboutUsingContextAsConsumer) {
                hasWarnedAboutUsingContextAsConsumer = true

                error(
                  'Rendering <Context> directly is not supported and will be removed in ' +
                    'a future major release. Did you mean to render <Context.Consumer> instead?'
                )
              }
            }
          } else {
            context = context._context
          }
        }

        var newProps = workInProgress.pendingProps
        var render = newProps.children

        {
          if (typeof render !== 'function') {
            error(
              'A context consumer was rendered with multiple children, or a child ' +
                "that isn't a function. A context consumer expects a single child " +
                'that is a function. If you did pass a function, make sure there ' +
                'is no trailing or leading whitespace around it.'
            )
          }
        }

        prepareToReadContext(workInProgress, renderLanes)
        var newValue = readContext(context, newProps.unstable_observedBits)
        var newChildren

        {
          ReactCurrentOwner$1.current = workInProgress
          setIsRendering(true)
          newChildren = render(newValue)
          setIsRendering(false)
        } // React DevTools reads this flag.

        workInProgress.flags |= PerformedWork
        reconcileChildren(current, workInProgress, newChildren, renderLanes)
        return workInProgress.child
      }

      function markWorkInProgressReceivedUpdate() {
        didReceiveUpdate = true
      }

      function bailoutOnAlreadyFinishedWork(
        current,
        workInProgress,
        renderLanes
      ) {
        if (current !== null) {
          // Reuse previous dependencies
          workInProgress.dependencies = current.dependencies
        }

        {
          // Don't update "base" render times for bailouts.
          stopProfilerTimerIfRunning()
        }

        markSkippedUpdateLanes(workInProgress.lanes) // Check if the children have any pending work.

        if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
          // The children don't have any work either. We can skip them.
          // TODO: Once we add back resuming, we should check if the children are
          // a work-in-progress set. If so, we need to transfer their effects.
          return null
        } else {
          // This fiber doesn't have work, but its subtree does. Clone the child
          // fibers and continue.
          cloneChildFibers(current, workInProgress)
          return workInProgress.child
        }
      }

      function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
        {
          var returnFiber = oldWorkInProgress.return

          if (returnFiber === null) {
            throw new Error('Cannot swap the root fiber.')
          } // Disconnect from the old current.
          // It will get deleted.

          current.alternate = null
          oldWorkInProgress.alternate = null // Connect to the new tree.

          newWorkInProgress.index = oldWorkInProgress.index
          newWorkInProgress.sibling = oldWorkInProgress.sibling
          newWorkInProgress.return = oldWorkInProgress.return
          newWorkInProgress.ref = oldWorkInProgress.ref // Replace the child/sibling pointers above it.

          if (oldWorkInProgress === returnFiber.child) {
            returnFiber.child = newWorkInProgress
          } else {
            var prevSibling = returnFiber.child

            if (prevSibling === null) {
              throw new Error('Expected parent to have a child.')
            }

            while (prevSibling.sibling !== oldWorkInProgress) {
              prevSibling = prevSibling.sibling

              if (prevSibling === null) {
                throw new Error('Expected to find the previous sibling.')
              }
            }

            prevSibling.sibling = newWorkInProgress
          } // Delete the old fiber and place the new one.
          // Since the old fiber is disconnected, we have to schedule it manually.

          var last = returnFiber.lastEffect

          if (last !== null) {
            last.nextEffect = current
            returnFiber.lastEffect = current
          } else {
            returnFiber.firstEffect = returnFiber.lastEffect = current
          }

          current.nextEffect = null
          current.flags = Deletion
          newWorkInProgress.flags |= Placement // Restart work from the new fiber.

          return newWorkInProgress
        }
      }

      function beginWork(current, workInProgress, renderLanes) {
        var updateLanes = workInProgress.lanes

        {
          if (workInProgress._debugNeedsRemount && current !== null) {
            // This will restart the begin phase with a new fiber.
            return remountFiber(
              current,
              workInProgress,
              createFiberFromTypeAndProps(
                workInProgress.type,
                workInProgress.key,
                workInProgress.pendingProps,
                workInProgress._debugOwner || null,
                workInProgress.mode,
                workInProgress.lanes
              )
            )
          }
        }

        if (current !== null) {
          var oldProps = current.memoizedProps
          var newProps = workInProgress.pendingProps

          if (
            oldProps !== newProps ||
            hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress.type !== current.type
          ) {
            // If props or context changed, mark the fiber as having performed work.
            // This may be unset if the props are determined to be equal later (memo).
            didReceiveUpdate = true
          } else if (!includesSomeLane(renderLanes, updateLanes)) {
            didReceiveUpdate = false // This fiber does not have any pending work. Bailout without entering
            // the begin phase. There's still some bookkeeping we that needs to be done
            // in this optimized path, mostly pushing stuff onto the stack.

            switch (workInProgress.tag) {
              case HostRoot:
                pushHostRootContext(workInProgress)
                resetHydrationState()
                break

              case HostComponent:
                pushHostContext(workInProgress)
                break

              case ClassComponent: {
                var Component = workInProgress.type

                if (isContextProvider(Component)) {
                  pushContextProvider(workInProgress)
                }

                break
              }

              case HostPortal:
                pushHostContainer(
                  workInProgress,
                  workInProgress.stateNode.containerInfo
                )
                break

              case ContextProvider: {
                var newValue = workInProgress.memoizedProps.value
                pushProvider(workInProgress, newValue)
                break
              }

              case Profiler:
                {
                  // Profiler should only call onRender when one of its descendants actually rendered.
                  var hasChildWork = includesSomeLane(
                    renderLanes,
                    workInProgress.childLanes
                  )

                  if (hasChildWork) {
                    workInProgress.flags |= Update
                  } // Reset effect durations for the next eventual effect phase.
                  // These are reset during render to allow the DevTools commit hook a chance to read them,

                  var stateNode = workInProgress.stateNode
                  stateNode.effectDuration = 0
                  stateNode.passiveEffectDuration = 0
                }

                break

              case SuspenseComponent: {
                var state = workInProgress.memoizedState

                if (state !== null) {
                  // whether to retry the primary children, or to skip over it and
                  // go straight to the fallback. Check the priority of the primary
                  // child fragment.

                  var primaryChildFragment = workInProgress.child
                  var primaryChildLanes = primaryChildFragment.childLanes

                  if (includesSomeLane(renderLanes, primaryChildLanes)) {
                    // The primary children have pending work. Use the normal path
                    // to attempt to render the primary children again.
                    return updateSuspenseComponent(
                      current,
                      workInProgress,
                      renderLanes
                    )
                  } else {
                    // The primary child fragment does not have pending work marked
                    // on it
                    pushSuspenseContext(
                      workInProgress,
                      setDefaultShallowSuspenseContext(
                        suspenseStackCursor.current
                      )
                    ) // The primary children do not have pending work with sufficient
                    // priority. Bailout.

                    var child = bailoutOnAlreadyFinishedWork(
                      current,
                      workInProgress,
                      renderLanes
                    )

                    if (child !== null) {
                      // The fallback children have pending work. Skip over the
                      // primary children and work on the fallback.
                      return child.sibling
                    } else {
                      return null
                    }
                  }
                } else {
                  pushSuspenseContext(
                    workInProgress,
                    setDefaultShallowSuspenseContext(
                      suspenseStackCursor.current
                    )
                  )
                }

                break
              }

              case SuspenseListComponent: {
                var didSuspendBefore = (current.flags & DidCapture) !== NoFlags

                var _hasChildWork = includesSomeLane(
                  renderLanes,
                  workInProgress.childLanes
                )

                if (didSuspendBefore) {
                  if (_hasChildWork) {
                    // If something was in fallback state last time, and we have all the
                    // same children then we're still in progressive loading state.
                    // Something might get unblocked by state updates or retries in the
                    // tree which will affect the tail. So we need to use the normal
                    // path to compute the correct tail.
                    return updateSuspenseListComponent(
                      current,
                      workInProgress,
                      renderLanes
                    )
                  } // If none of the children had any work, that means that none of
                  // them got retried so they'll still be blocked in the same way
                  // as before. We can fast bail out.

                  workInProgress.flags |= DidCapture
                } // If nothing suspended before and we're rendering the same children,
                // then the tail doesn't matter. Anything new that suspends will work
                // in the "together" mode, so we can continue from the state we had.

                var renderState = workInProgress.memoizedState

                if (renderState !== null) {
                  // Reset to the "together" mode in case we've started a different
                  // update in the past but didn't complete it.
                  renderState.rendering = null
                  renderState.tail = null
                  renderState.lastEffect = null
                }

                pushSuspenseContext(workInProgress, suspenseStackCursor.current)

                if (_hasChildWork) {
                  break
                } else {
                  // If none of the children had any work, that means that none of
                  // them got retried so they'll still be blocked in the same way
                  // as before. We can fast bail out.
                  return null
                }
              }

              case OffscreenComponent:
              case LegacyHiddenComponent: {
                // Need to check if the tree still needs to be deferred. This is
                // almost identical to the logic used in the normal update path,
                // so we'll just enter that. The only difference is we'll bail out
                // at the next level instead of this one, because the child props
                // have not changed. Which is fine.
                // TODO: Probably should refactor `beginWork` to split the bailout
                // path from the normal path. I'm tempted to do a labeled break here
                // but I won't :)
                workInProgress.lanes = NoLanes
                return updateOffscreenComponent(
                  current,
                  workInProgress,
                  renderLanes
                )
              }
            }

            return bailoutOnAlreadyFinishedWork(
              current,
              workInProgress,
              renderLanes
            )
          } else {
            if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
              // This is a special case that only exists for legacy mode.
              // See https://github.com/facebook/react/pull/19216.
              didReceiveUpdate = true
            } else {
              // An update was scheduled on this fiber, but there are no new props
              // nor legacy context. Set this to false. If an update queue or context
              // consumer produces a changed value, it will set this to true. Otherwise,
              // the component will assume the children have not changed and bail out.
              didReceiveUpdate = false
            }
          }
        } else {
          didReceiveUpdate = false
        } // Before entering the begin phase, clear pending update priority.
        // TODO: This assumes that we're about to evaluate the component and process
        // the update queue. However, there's an exception: SimpleMemoComponent
        // sometimes bails out later in the begin phase. This indicates that we should
        // move this assignment out of the common path and into each branch.

        workInProgress.lanes = NoLanes

        switch (workInProgress.tag) {
          case IndeterminateComponent: {
            return mountIndeterminateComponent(
              current,
              workInProgress,
              workInProgress.type,
              renderLanes
            )
          }

          case LazyComponent: {
            var elementType = workInProgress.elementType
            return mountLazyComponent(
              current,
              workInProgress,
              elementType,
              updateLanes,
              renderLanes
            )
          }

          case FunctionComponent: {
            var _Component = workInProgress.type
            var unresolvedProps = workInProgress.pendingProps
            var resolvedProps =
              workInProgress.elementType === _Component
                ? unresolvedProps
                : resolveDefaultProps(_Component, unresolvedProps)
            return updateFunctionComponent(
              current,
              workInProgress,
              _Component,
              resolvedProps,
              renderLanes
            )
          }

          case ClassComponent: {
            var _Component2 = workInProgress.type
            var _unresolvedProps = workInProgress.pendingProps

            var _resolvedProps =
              workInProgress.elementType === _Component2
                ? _unresolvedProps
                : resolveDefaultProps(_Component2, _unresolvedProps)

            return updateClassComponent(
              current,
              workInProgress,
              _Component2,
              _resolvedProps,
              renderLanes
            )
          }

          case HostRoot:
            return updateHostRoot(current, workInProgress, renderLanes)

          case HostComponent:
            return updateHostComponent(current, workInProgress, renderLanes)

          case HostText:
            return updateHostText(current, workInProgress)

          case SuspenseComponent:
            return updateSuspenseComponent(current, workInProgress, renderLanes)

          case HostPortal:
            return updatePortalComponent(current, workInProgress, renderLanes)

          case ForwardRef: {
            var type = workInProgress.type
            var _unresolvedProps2 = workInProgress.pendingProps

            var _resolvedProps2 =
              workInProgress.elementType === type
                ? _unresolvedProps2
                : resolveDefaultProps(type, _unresolvedProps2)

            return updateForwardRef(
              current,
              workInProgress,
              type,
              _resolvedProps2,
              renderLanes
            )
          }

          case Fragment:
            return updateFragment(current, workInProgress, renderLanes)

          case Mode:
            return updateMode(current, workInProgress, renderLanes)

          case Profiler:
            return updateProfiler(current, workInProgress, renderLanes)

          case ContextProvider:
            return updateContextProvider(current, workInProgress, renderLanes)

          case ContextConsumer:
            return updateContextConsumer(current, workInProgress, renderLanes)

          case MemoComponent: {
            var _type2 = workInProgress.type
            var _unresolvedProps3 = workInProgress.pendingProps // Resolve outer props first, then resolve inner props.

            var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3)

            {
              if (workInProgress.type !== workInProgress.elementType) {
                var outerPropTypes = _type2.propTypes

                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    _resolvedProps3, // Resolved for outer only
                    'prop',
                    getComponentName(_type2)
                  )
                }
              }
            }

            _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3)
            return updateMemoComponent(
              current,
              workInProgress,
              _type2,
              _resolvedProps3,
              updateLanes,
              renderLanes
            )
          }

          case SimpleMemoComponent: {
            return updateSimpleMemoComponent(
              current,
              workInProgress,
              workInProgress.type,
              workInProgress.pendingProps,
              updateLanes,
              renderLanes
            )
          }

          case IncompleteClassComponent: {
            var _Component3 = workInProgress.type
            var _unresolvedProps4 = workInProgress.pendingProps

            var _resolvedProps4 =
              workInProgress.elementType === _Component3
                ? _unresolvedProps4
                : resolveDefaultProps(_Component3, _unresolvedProps4)

            return mountIncompleteClassComponent(
              current,
              workInProgress,
              _Component3,
              _resolvedProps4,
              renderLanes
            )
          }

          case SuspenseListComponent: {
            return updateSuspenseListComponent(
              current,
              workInProgress,
              renderLanes
            )
          }

          case FundamentalComponent: {
            break
          }

          case ScopeComponent: {
            break
          }

          case Block: {
            break
          }

          case OffscreenComponent: {
            return updateOffscreenComponent(
              current,
              workInProgress,
              renderLanes
            )
          }

          case LegacyHiddenComponent: {
            return updateLegacyHiddenComponent(
              current,
              workInProgress,
              renderLanes
            )
          }
        }

        {
          {
            throw Error(
              'Unknown unit of work tag (' +
                workInProgress.tag +
                '). This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }
      }

      function markUpdate(workInProgress) {
        // Tag the fiber with an update effect. This turns a Placement into
        // a PlacementAndUpdate.
        workInProgress.flags |= Update
      }

      function markRef$1(workInProgress) {
        workInProgress.flags |= Ref
      }

      var appendAllChildren
      var updateHostContainer
      var updateHostComponent$1
      var updateHostText$1

      {
        // Mutation mode
        appendAllChildren = function (
          parent,
          workInProgress,
          needsVisibilityToggle,
          isHidden
        ) {
          // We only have the top Fiber that was created but we need recurse down its
          // children to find all the terminal nodes.
          var node = workInProgress.child

          while (node !== null) {
            if (node.tag === HostComponent || node.tag === HostText) {
              appendInitialChild(parent, node.stateNode)
            } else if (node.tag === HostPortal);
            else if (node.child !== null) {
              node.child.return = node
              node = node.child
              continue
            }

            if (node === workInProgress) {
              return
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress) {
                return
              }

              node = node.return
            }

            node.sibling.return = node.return
            node = node.sibling
          }
        }

        updateHostContainer = function (workInProgress) {
          // Noop
        }

        updateHostComponent$1 = function (
          current,
          workInProgress,
          type,
          newProps,
          rootContainerInstance
        ) {
          // If we have an alternate, that means this is an update and we need to
          // schedule a side-effect to do the updates.
          var oldProps = current.memoizedProps

          if (oldProps === newProps) {
            // In mutation mode, this is sufficient for a bailout because
            // we won't touch this node even if children changed.
            return
          } // If we get updated because one of our children updated, we don't
          // have newProps so we'll have to reuse them.
          // TODO: Split the update API as separate for the props vs. children.
          // Even better would be if children weren't special cased at all tho.

          var instance = workInProgress.stateNode
          var currentHostContext = getHostContext() // TODO: Experiencing an error where oldProps is null. Suggests a host
          // component is hitting the resume path. Figure out why. Possibly
          // related to `hidden`.

          var updatePayload = prepareUpdate(
            instance,
            type,
            oldProps,
            newProps,
            rootContainerInstance,
            currentHostContext
          ) // TODO: Type this specific to this type of component.

          workInProgress.updateQueue = updatePayload // If the update payload indicates that there is a change or if there
          // is a new ref we mark this as an update. All the work is done in commitWork.

          if (updatePayload) {
            markUpdate(workInProgress)
          }
        }

        updateHostText$1 = function (
          current,
          workInProgress,
          oldText,
          newText
        ) {
          // If the text differs, mark it as an update. All the work in done in commitWork.
          if (oldText !== newText) {
            markUpdate(workInProgress)
          }
        }
      }

      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (getIsHydrating()) {
          // If we're hydrating, we should consume as many items as we can
          // so we don't leave any behind.
          return
        }

        switch (renderState.tailMode) {
          case 'hidden': {
            // Any insertions at the end of the tail list after this point
            // should be invisible. If there are already mounted boundaries
            // anything before them are not considered for collapsing.
            // Therefore we need to go through the whole tail to find if
            // there are any.
            var tailNode = renderState.tail
            var lastTailNode = null

            while (tailNode !== null) {
              if (tailNode.alternate !== null) {
                lastTailNode = tailNode
              }

              tailNode = tailNode.sibling
            } // Next we're simply going to delete all insertions after the
            // last rendered item.

            if (lastTailNode === null) {
              // All remaining items in the tail are insertions.
              renderState.tail = null
            } else {
              // Detach the insertion after the last node that was already
              // inserted.
              lastTailNode.sibling = null
            }

            break
          }

          case 'collapsed': {
            // Any insertions at the end of the tail list after this point
            // should be invisible. If there are already mounted boundaries
            // anything before them are not considered for collapsing.
            // Therefore we need to go through the whole tail to find if
            // there are any.
            var _tailNode = renderState.tail
            var _lastTailNode = null

            while (_tailNode !== null) {
              if (_tailNode.alternate !== null) {
                _lastTailNode = _tailNode
              }

              _tailNode = _tailNode.sibling
            } // Next we're simply going to delete all insertions after the
            // last rendered item.

            if (_lastTailNode === null) {
              // All remaining items in the tail are insertions.
              if (!hasRenderedATailFallback && renderState.tail !== null) {
                // We suspended during the head. We want to show at least one
                // row at the tail. So we'll keep on and cut off the rest.
                renderState.tail.sibling = null
              } else {
                renderState.tail = null
              }
            } else {
              // Detach the insertion after the last node that was already
              // inserted.
              _lastTailNode.sibling = null
            }

            break
          }
        }
      }

      function completeWork(current, workInProgress, renderLanes) {
        var newProps = workInProgress.pendingProps

        switch (workInProgress.tag) {
          case IndeterminateComponent:
          case LazyComponent:
          case SimpleMemoComponent:
          case FunctionComponent:
          case ForwardRef:
          case Fragment:
          case Mode:
          case Profiler:
          case ContextConsumer:
          case MemoComponent:
            return null

          case ClassComponent: {
            var Component = workInProgress.type

            if (isContextProvider(Component)) {
              popContext(workInProgress)
            }

            return null
          }

          case HostRoot: {
            popHostContainer(workInProgress)
            popTopLevelContextObject(workInProgress)
            resetWorkInProgressVersions()
            var fiberRoot = workInProgress.stateNode

            if (fiberRoot.pendingContext) {
              fiberRoot.context = fiberRoot.pendingContext
              fiberRoot.pendingContext = null
            }

            if (current === null || current.child === null) {
              // If we hydrated, pop so that we can delete any remaining children
              // that weren't hydrated.
              var wasHydrated = popHydrationState(workInProgress)

              if (wasHydrated) {
                // If we hydrated, then we'll need to schedule an update for
                // the commit side-effects on the root.
                markUpdate(workInProgress)
              } else if (!fiberRoot.hydrate) {
                // Schedule an effect to clear this container at the start of the next commit.
                // This handles the case of React rendering into a container with previous children.
                // It's also safe to do for updates too, because current.child would only be null
                // if the previous render was null (so the the container would already be empty).
                workInProgress.flags |= Snapshot
              }
            }

            updateHostContainer(workInProgress)
            return null
          }

          case HostComponent: {
            popHostContext(workInProgress)
            var rootContainerInstance = getRootHostContainer()
            var type = workInProgress.type

            if (current !== null && workInProgress.stateNode != null) {
              updateHostComponent$1(
                current,
                workInProgress,
                type,
                newProps,
                rootContainerInstance
              )

              if (current.ref !== workInProgress.ref) {
                markRef$1(workInProgress)
              }
            } else {
              if (!newProps) {
                if (!(workInProgress.stateNode !== null)) {
                  {
                    throw Error(
                      'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                    )
                  }
                } // This can happen when we abort work.

                return null
              }

              var currentHostContext = getHostContext() // TODO: Move createInstance to beginWork and keep it on a context
              // "stack" as the parent. Then append children as we go in beginWork
              // or completeWork depending on whether we want to add them top->down or
              // bottom->up. Top->down is faster in IE11.

              var _wasHydrated = popHydrationState(workInProgress)

              if (_wasHydrated) {
                // TODO: Move this and createInstance step into the beginPhase
                // to consolidate.
                if (
                  prepareToHydrateHostInstance(
                    workInProgress,
                    rootContainerInstance,
                    currentHostContext
                  )
                ) {
                  // If changes to the hydrated node need to be applied at the
                  // commit-phase we mark this as such.
                  markUpdate(workInProgress)
                }
              } else {
                var instance = createInstance(
                  type,
                  newProps,
                  rootContainerInstance,
                  currentHostContext,
                  workInProgress
                )
                appendAllChildren(instance, workInProgress, false, false)
                workInProgress.stateNode = instance // Certain renderers require commit-time effects for initial mount.
                // (eg DOM renderer supports auto-focus for certain elements).
                // Make sure such renderers get scheduled for later work.

                if (
                  finalizeInitialChildren(
                    instance,
                    type,
                    newProps,
                    rootContainerInstance
                  )
                ) {
                  markUpdate(workInProgress)
                }
              }

              if (workInProgress.ref !== null) {
                // If there is a ref on a host node we need to schedule a callback
                markRef$1(workInProgress)
              }
            }

            return null
          }

          case HostText: {
            var newText = newProps

            if (current && workInProgress.stateNode != null) {
              var oldText = current.memoizedProps // If we have an alternate, that means this is an update and we need
              // to schedule a side-effect to do the updates.

              updateHostText$1(current, workInProgress, oldText, newText)
            } else {
              if (typeof newText !== 'string') {
                if (!(workInProgress.stateNode !== null)) {
                  {
                    throw Error(
                      'We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.'
                    )
                  }
                } // This can happen when we abort work.
              }

              var _rootContainerInstance = getRootHostContainer()

              var _currentHostContext = getHostContext()

              var _wasHydrated2 = popHydrationState(workInProgress)

              if (_wasHydrated2) {
                if (prepareToHydrateHostTextInstance(workInProgress)) {
                  markUpdate(workInProgress)
                }
              } else {
                workInProgress.stateNode = createTextInstance(
                  newText,
                  _rootContainerInstance,
                  _currentHostContext,
                  workInProgress
                )
              }
            }

            return null
          }

          case SuspenseComponent: {
            popSuspenseContext(workInProgress)
            var nextState = workInProgress.memoizedState

            if ((workInProgress.flags & DidCapture) !== NoFlags) {
              // Something suspended. Re-render with the fallback children.
              workInProgress.lanes = renderLanes // Do not reset the effect list.

              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress)
              }

              return workInProgress
            }

            var nextDidTimeout = nextState !== null
            var prevDidTimeout = false

            if (current === null) {
              if (workInProgress.memoizedProps.fallback !== undefined) {
                popHydrationState(workInProgress)
              }
            } else {
              var prevState = current.memoizedState
              prevDidTimeout = prevState !== null
            }

            if (nextDidTimeout && !prevDidTimeout) {
              // If this subtreee is running in blocking mode we can suspend,
              // otherwise we won't suspend.
              // TODO: This will still suspend a synchronous tree if anything
              // in the concurrent tree already suspended during this render.
              // This is a known bug.
              if ((workInProgress.mode & BlockingMode) !== NoMode) {
                // TODO: Move this back to throwException because this is too late
                // if this is a large tree which is common for initial loads. We
                // don't know if we should restart a render or not until we get
                // this marker, and this is too late.
                // If this render already had a ping or lower pri updates,
                // and this is the first time we know we're going to suspend we
                // should be able to immediately restart from within throwException.
                var hasInvisibleChildContext =
                  current === null &&
                  workInProgress.memoizedProps.unstable_avoidThisFallback !==
                    true

                if (
                  hasInvisibleChildContext ||
                  hasSuspenseContext(
                    suspenseStackCursor.current,
                    InvisibleParentSuspenseContext
                  )
                ) {
                  // If this was in an invisible tree or a new render, then showing
                  // this boundary is ok.
                  renderDidSuspend()
                } else {
                  // Otherwise, we're going to have to hide content so we should
                  // suspend for longer if possible.
                  renderDidSuspendDelayIfPossible()
                }
              }
            }

            {
              // TODO: Only schedule updates if these values are non equal, i.e. it changed.
              if (nextDidTimeout || prevDidTimeout) {
                // If this boundary just timed out, schedule an effect to attach a
                // retry listener to the promise. This flag is also used to hide the
                // primary children. In mutation mode, we also need the flag to
                // *unhide* children that were previously hidden, so check if this
                // is currently timed out, too.
                workInProgress.flags |= Update
              }
            }

            return null
          }

          case HostPortal:
            popHostContainer(workInProgress)
            updateHostContainer(workInProgress)

            if (current === null) {
              preparePortalMount(workInProgress.stateNode.containerInfo)
            }

            return null

          case ContextProvider:
            // Pop provider fiber
            popProvider(workInProgress)
            return null

          case IncompleteClassComponent: {
            // Same as class component case. I put it down here so that the tags are
            // sequential to ensure this switch is compiled to a jump table.
            var _Component = workInProgress.type

            if (isContextProvider(_Component)) {
              popContext(workInProgress)
            }

            return null
          }

          case SuspenseListComponent: {
            popSuspenseContext(workInProgress)
            var renderState = workInProgress.memoizedState

            if (renderState === null) {
              // We're running in the default, "independent" mode.
              // We don't do anything in this mode.
              return null
            }

            var didSuspendAlready =
              (workInProgress.flags & DidCapture) !== NoFlags
            var renderedTail = renderState.rendering

            if (renderedTail === null) {
              // We just rendered the head.
              if (!didSuspendAlready) {
                // This is the first pass. We need to figure out if anything is still
                // suspended in the rendered set.
                // If new content unsuspended, but there's still some content that
                // didn't. Then we need to do a second pass that forces everything
                // to keep showing their fallbacks.
                // We might be suspended if something in this render pass suspended, or
                // something in the previous committed pass suspended. Otherwise,
                // there's no chance so we can skip the expensive call to
                // findFirstSuspended.
                var cannotBeSuspended =
                  renderHasNotSuspendedYet() &&
                  (current === null || (current.flags & DidCapture) === NoFlags)

                if (!cannotBeSuspended) {
                  var row = workInProgress.child

                  while (row !== null) {
                    var suspended = findFirstSuspended(row)

                    if (suspended !== null) {
                      didSuspendAlready = true
                      workInProgress.flags |= DidCapture
                      cutOffTailIfNeeded(renderState, false) // If this is a newly suspended tree, it might not get committed as
                      // part of the second pass. In that case nothing will subscribe to
                      // its thennables. Instead, we'll transfer its thennables to the
                      // SuspenseList so that it can retry if they resolve.
                      // There might be multiple of these in the list but since we're
                      // going to wait for all of them anyway, it doesn't really matter
                      // which ones gets to ping. In theory we could get clever and keep
                      // track of how many dependencies remain but it gets tricky because
                      // in the meantime, we can add/remove/change items and dependencies.
                      // We might bail out of the loop before finding any but that
                      // doesn't matter since that means that the other boundaries that
                      // we did find already has their listeners attached.

                      var newThennables = suspended.updateQueue

                      if (newThennables !== null) {
                        workInProgress.updateQueue = newThennables
                        workInProgress.flags |= Update
                      } // Rerender the whole list, but this time, we'll force fallbacks
                      // to stay in place.
                      // Reset the effect list before doing the second pass since that's now invalid.

                      if (renderState.lastEffect === null) {
                        workInProgress.firstEffect = null
                      }

                      workInProgress.lastEffect = renderState.lastEffect // Reset the child fibers to their original state.

                      resetChildFibers(workInProgress, renderLanes) // Set up the Suspense Context to force suspense and immediately
                      // rerender the children.

                      pushSuspenseContext(
                        workInProgress,
                        setShallowSuspenseContext(
                          suspenseStackCursor.current,
                          ForceSuspenseFallback
                        )
                      )
                      return workInProgress.child
                    }

                    row = row.sibling
                  }
                }

                if (
                  renderState.tail !== null &&
                  now() > getRenderTargetTime()
                ) {
                  // We have already passed our CPU deadline but we still have rows
                  // left in the tail. We'll just give up further attempts to render
                  // the main content and only render fallbacks.
                  workInProgress.flags |= DidCapture
                  didSuspendAlready = true
                  cutOffTailIfNeeded(renderState, false) // Since nothing actually suspended, there will nothing to ping this
                  // to get it started back up to attempt the next item. While in terms
                  // of priority this work has the same priority as this current render,
                  // it's not part of the same transition once the transition has
                  // committed. If it's sync, we still want to yield so that it can be
                  // painted. Conceptually, this is really the same as pinging.
                  // We can use any RetryLane even if it's the one currently rendering
                  // since we're leaving it behind on this node.

                  workInProgress.lanes = SomeRetryLane

                  {
                    markSpawnedWork(SomeRetryLane)
                  }
                }
              } else {
                cutOffTailIfNeeded(renderState, false)
              } // Next we're going to render the tail.
            } else {
              // Append the rendered row to the child list.
              if (!didSuspendAlready) {
                var _suspended = findFirstSuspended(renderedTail)

                if (_suspended !== null) {
                  workInProgress.flags |= DidCapture
                  didSuspendAlready = true // Ensure we transfer the update queue to the parent so that it doesn't
                  // get lost if this row ends up dropped during a second pass.

                  var _newThennables = _suspended.updateQueue

                  if (_newThennables !== null) {
                    workInProgress.updateQueue = _newThennables
                    workInProgress.flags |= Update
                  }

                  cutOffTailIfNeeded(renderState, true) // This might have been modified.

                  if (
                    renderState.tail === null &&
                    renderState.tailMode === 'hidden' &&
                    !renderedTail.alternate &&
                    !getIsHydrating() // We don't cut it if we're hydrating.
                  ) {
                    // We need to delete the row we just rendered.
                    // Reset the effect list to what it was before we rendered this
                    // child. The nested children have already appended themselves.
                    var lastEffect = (workInProgress.lastEffect =
                      renderState.lastEffect) // Remove any effects that were appended after this point.

                    if (lastEffect !== null) {
                      lastEffect.nextEffect = null
                    } // We're done.

                    return null
                  }
                } else if (
                  // The time it took to render last row is greater than the remaining
                  // time we have to render. So rendering one more row would likely
                  // exceed it.
                  now() * 2 - renderState.renderingStartTime >
                    getRenderTargetTime() &&
                  renderLanes !== OffscreenLane
                ) {
                  // We have now passed our CPU deadline and we'll just give up further
                  // attempts to render the main content and only render fallbacks.
                  // The assumption is that this is usually faster.
                  workInProgress.flags |= DidCapture
                  didSuspendAlready = true
                  cutOffTailIfNeeded(renderState, false) // Since nothing actually suspended, there will nothing to ping this
                  // to get it started back up to attempt the next item. While in terms
                  // of priority this work has the same priority as this current render,
                  // it's not part of the same transition once the transition has
                  // committed. If it's sync, we still want to yield so that it can be
                  // painted. Conceptually, this is really the same as pinging.
                  // We can use any RetryLane even if it's the one currently rendering
                  // since we're leaving it behind on this node.

                  workInProgress.lanes = SomeRetryLane

                  {
                    markSpawnedWork(SomeRetryLane)
                  }
                }
              }

              if (renderState.isBackwards) {
                // The effect list of the backwards tail will have been added
                // to the end. This breaks the guarantee that life-cycles fire in
                // sibling order but that isn't a strong guarantee promised by React.
                // Especially since these might also just pop in during future commits.
                // Append to the beginning of the list.
                renderedTail.sibling = workInProgress.child
                workInProgress.child = renderedTail
              } else {
                var previousSibling = renderState.last

                if (previousSibling !== null) {
                  previousSibling.sibling = renderedTail
                } else {
                  workInProgress.child = renderedTail
                }

                renderState.last = renderedTail
              }
            }

            if (renderState.tail !== null) {
              // We still have tail rows to render.
              // Pop a row.
              var next = renderState.tail
              renderState.rendering = next
              renderState.tail = next.sibling
              renderState.lastEffect = workInProgress.lastEffect
              renderState.renderingStartTime = now()
              next.sibling = null // Restore the context.
              // TODO: We can probably just avoid popping it instead and only
              // setting it the first time we go from not suspended to suspended.

              var suspenseContext = suspenseStackCursor.current

              if (didSuspendAlready) {
                suspenseContext = setShallowSuspenseContext(
                  suspenseContext,
                  ForceSuspenseFallback
                )
              } else {
                suspenseContext =
                  setDefaultShallowSuspenseContext(suspenseContext)
              }

              pushSuspenseContext(workInProgress, suspenseContext) // Do a pass over the next row.

              return next
            }

            return null
          }

          case FundamentalComponent: {
            break
          }

          case ScopeComponent: {
            break
          }

          case Block:
            break

          case OffscreenComponent:
          case LegacyHiddenComponent: {
            popRenderLanes(workInProgress)

            if (current !== null) {
              var _nextState = workInProgress.memoizedState
              var _prevState = current.memoizedState
              var prevIsHidden = _prevState !== null
              var nextIsHidden = _nextState !== null

              if (
                prevIsHidden !== nextIsHidden &&
                newProps.mode !== 'unstable-defer-without-hiding'
              ) {
                workInProgress.flags |= Update
              }
            }

            return null
          }
        }

        {
          {
            throw Error(
              'Unknown unit of work tag (' +
                workInProgress.tag +
                '). This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }
      }

      function unwindWork(workInProgress, renderLanes) {
        switch (workInProgress.tag) {
          case ClassComponent: {
            var Component = workInProgress.type

            if (isContextProvider(Component)) {
              popContext(workInProgress)
            }

            var flags = workInProgress.flags

            if (flags & ShouldCapture) {
              workInProgress.flags = (flags & ~ShouldCapture) | DidCapture

              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress)
              }

              return workInProgress
            }

            return null
          }

          case HostRoot: {
            popHostContainer(workInProgress)
            popTopLevelContextObject(workInProgress)
            resetWorkInProgressVersions()
            var _flags = workInProgress.flags

            if (!((_flags & DidCapture) === NoFlags)) {
              {
                throw Error(
                  'The root failed to unmount after an error. This is likely a bug in React. Please file an issue.'
                )
              }
            }

            workInProgress.flags = (_flags & ~ShouldCapture) | DidCapture
            return workInProgress
          }

          case HostComponent: {
            // TODO: popHydrationState
            popHostContext(workInProgress)
            return null
          }

          case SuspenseComponent: {
            popSuspenseContext(workInProgress)

            var _flags2 = workInProgress.flags

            if (_flags2 & ShouldCapture) {
              workInProgress.flags = (_flags2 & ~ShouldCapture) | DidCapture // Captured a suspense effect. Re-render the boundary.

              if ((workInProgress.mode & ProfileMode) !== NoMode) {
                transferActualDuration(workInProgress)
              }

              return workInProgress
            }

            return null
          }

          case SuspenseListComponent: {
            popSuspenseContext(workInProgress) // SuspenseList doesn't actually catch anything. It should've been
            // caught by a nested boundary. If not, it should bubble through.

            return null
          }

          case HostPortal:
            popHostContainer(workInProgress)
            return null

          case ContextProvider:
            popProvider(workInProgress)
            return null

          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(workInProgress)
            return null

          default:
            return null
        }
      }

      function unwindInterruptedWork(interruptedWork) {
        switch (interruptedWork.tag) {
          case ClassComponent: {
            var childContextTypes = interruptedWork.type.childContextTypes

            if (childContextTypes !== null && childContextTypes !== undefined) {
              popContext(interruptedWork)
            }

            break
          }

          case HostRoot: {
            popHostContainer(interruptedWork)
            popTopLevelContextObject(interruptedWork)
            resetWorkInProgressVersions()
            break
          }

          case HostComponent: {
            popHostContext(interruptedWork)
            break
          }

          case HostPortal:
            popHostContainer(interruptedWork)
            break

          case SuspenseComponent:
            popSuspenseContext(interruptedWork)
            break

          case SuspenseListComponent:
            popSuspenseContext(interruptedWork)
            break

          case ContextProvider:
            popProvider(interruptedWork)
            break

          case OffscreenComponent:
          case LegacyHiddenComponent:
            popRenderLanes(interruptedWork)
            break
        }
      }

      function createCapturedValue(value, source) {
        // If the value is an error, call this function immediately after it is thrown
        // so the stack is accurate.
        return {
          value: value,
          source: source,
          stack: getStackByFiberInDevAndProd(source),
        }
      }

      // This module is forked in different environments.
      // By default, return `true` to log errors to the console.
      // Forks can return `false` if this isn't desirable.
      function showErrorDialog(boundary, errorInfo) {
        return true
      }

      function logCapturedError(boundary, errorInfo) {
        try {
          var logError = showErrorDialog(boundary, errorInfo) // Allow injected showErrorDialog() to prevent default console.error logging.
          // This enables renderers like ReactNative to better manage redbox behavior.

          if (logError === false) {
            return
          }

          var error = errorInfo.value

          if (true) {
            var source = errorInfo.source
            var stack = errorInfo.stack
            var componentStack = stack !== null ? stack : '' // Browsers support silencing uncaught errors by calling
            // `preventDefault()` in window `error` handler.
            // We record this information as an expando on the error.

            if (error != null && error._suppressLogging) {
              if (boundary.tag === ClassComponent) {
                // The error is recoverable and was silenced.
                // Ignore it and don't print the stack addendum.
                // This is handy for testing error boundaries without noise.
                return
              } // The error is fatal. Since the silencing might have
              // been accidental, we'll surface it anyway.
              // However, the browser would have silenced the original error
              // so we'll print it first, and then print the stack addendum.

              console['error'](error) // Don't transform to our wrapper
              // For a more detailed description of this block, see:
              // https://github.com/facebook/react/pull/13384
            }

            var componentName = source ? getComponentName(source.type) : null
            var componentNameMessage = componentName
              ? 'The above error occurred in the <' +
                componentName +
                '> component:'
              : 'The above error occurred in one of your React components:'
            var errorBoundaryMessage
            var errorBoundaryName = getComponentName(boundary.type)

            if (errorBoundaryName) {
              errorBoundaryMessage =
                'React will try to recreate this component tree from scratch ' +
                ('using the error boundary you provided, ' +
                  errorBoundaryName +
                  '.')
            } else {
              errorBoundaryMessage =
                'Consider adding an error boundary to your tree to customize error handling behavior.\n' +
                'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.'
            }

            var combinedMessage =
              componentNameMessage +
              '\n' +
              componentStack +
              '\n\n' +
              ('' + errorBoundaryMessage) // In development, we provide our own message with just the component stack.
            // We don't include the original error message and JS stack because the browser
            // has already printed it. Even if the application swallows the error, it is still
            // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

            console['error'](combinedMessage) // Don't transform to our wrapper
          }
        } catch (e) {
          // This method must not throw, or React internal state will get messed up.
          // If console.error is overridden, or logCapturedError() shows a dialog that throws,
          // we want to report this error outside of the normal stack as a last resort.
          // https://github.com/facebook/react/issues/13188
          setTimeout(function () {
            throw e
          })
        }
      }

      var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map

      function createRootErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane) // Unmount the root by rendering null.

        update.tag = CaptureUpdate // Caution: React DevTools currently depends on this property
        // being called "element".

        update.payload = {
          element: null,
        }
        var error = errorInfo.value

        update.callback = function () {
          onUncaughtError(error)
          logCapturedError(fiber, errorInfo)
        }

        return update
      }

      function createClassErrorUpdate(fiber, errorInfo, lane) {
        var update = createUpdate(NoTimestamp, lane)
        update.tag = CaptureUpdate
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError

        if (typeof getDerivedStateFromError === 'function') {
          var error$1 = errorInfo.value

          update.payload = function () {
            logCapturedError(fiber, errorInfo)
            return getDerivedStateFromError(error$1)
          }
        }

        var inst = fiber.stateNode

        if (inst !== null && typeof inst.componentDidCatch === 'function') {
          update.callback = function callback() {
            {
              markFailedErrorBoundaryForHotReloading(fiber)
            }

            if (typeof getDerivedStateFromError !== 'function') {
              // To preserve the preexisting retry behavior of error boundaries,
              // we keep track of which ones already failed during this batch.
              // This gets reset before we yield back to the browser.
              // TODO: Warn in strict mode if getDerivedStateFromError is
              // not defined.
              markLegacyErrorBoundaryAsFailed(this) // Only log here if componentDidCatch is the only error boundary method defined

              logCapturedError(fiber, errorInfo)
            }

            var error$1 = errorInfo.value
            var stack = errorInfo.stack
            this.componentDidCatch(error$1, {
              componentStack: stack !== null ? stack : '',
            })

            {
              if (typeof getDerivedStateFromError !== 'function') {
                // If componentDidCatch is the only error boundary method defined,
                // then it needs to call setState to recover from errors.
                // If no state update is scheduled then the boundary will swallow the error.
                if (!includesSomeLane(fiber.lanes, SyncLane)) {
                  error(
                    '%s: Error boundaries should implement getDerivedStateFromError(). ' +
                      'In that method, return a state update to display an error message or fallback UI.',
                    getComponentName(fiber.type) || 'Unknown'
                  )
                }
              }
            }
          }
        } else {
          update.callback = function () {
            markFailedErrorBoundaryForHotReloading(fiber)
          }
        }

        return update
      }

      function attachPingListener(root, wakeable, lanes) {
        // Attach a listener to the promise to "ping" the root and retry. But only if
        // one does not already exist for the lanes we're currently rendering (which
        // acts like a "thread ID" here).
        var pingCache = root.pingCache
        var threadIDs

        if (pingCache === null) {
          pingCache = root.pingCache = new PossiblyWeakMap$1()
          threadIDs = new Set()
          pingCache.set(wakeable, threadIDs)
        } else {
          threadIDs = pingCache.get(wakeable)

          if (threadIDs === undefined) {
            threadIDs = new Set()
            pingCache.set(wakeable, threadIDs)
          }
        }

        if (!threadIDs.has(lanes)) {
          // Memoize using the thread ID to prevent redundant listeners.
          threadIDs.add(lanes)
          var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes)
          wakeable.then(ping, ping)
        }
      }

      function throwException(
        root,
        returnFiber,
        sourceFiber,
        value,
        rootRenderLanes
      ) {
        // The source fiber did not complete.
        sourceFiber.flags |= Incomplete // Its effect list is no longer valid.

        sourceFiber.firstEffect = sourceFiber.lastEffect = null

        if (
          value !== null &&
          typeof value === 'object' &&
          typeof value.then === 'function'
        ) {
          // This is a wakeable.
          var wakeable = value

          if ((sourceFiber.mode & BlockingMode) === NoMode) {
            // Reset the memoizedState to what it was before we attempted
            // to render it.
            var currentSource = sourceFiber.alternate

            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue
              sourceFiber.memoizedState = currentSource.memoizedState
              sourceFiber.lanes = currentSource.lanes
            } else {
              sourceFiber.updateQueue = null
              sourceFiber.memoizedState = null
            }
          }

          var hasInvisibleParentBoundary = hasSuspenseContext(
            suspenseStackCursor.current,
            InvisibleParentSuspenseContext
          ) // Schedule the nearest Suspense to re-render the timed out view.

          var _workInProgress = returnFiber

          do {
            if (
              _workInProgress.tag === SuspenseComponent &&
              shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)
            ) {
              // Found the nearest boundary.
              // Stash the promise on the boundary fiber. If the boundary times out, we'll
              // attach another listener to flip the boundary back to its normal state.
              var wakeables = _workInProgress.updateQueue

              if (wakeables === null) {
                var updateQueue = new Set()
                updateQueue.add(wakeable)
                _workInProgress.updateQueue = updateQueue
              } else {
                wakeables.add(wakeable)
              } // If the boundary is outside of blocking mode, we should *not*
              // suspend the commit. Pretend as if the suspended component rendered
              // null and keep rendering. In the commit phase, we'll schedule a
              // subsequent synchronous update to re-render the Suspense.
              //
              // Note: It doesn't matter whether the component that suspended was
              // inside a blocking mode tree. If the Suspense is outside of it, we
              // should *not* suspend the commit.

              if ((_workInProgress.mode & BlockingMode) === NoMode) {
                _workInProgress.flags |= DidCapture
                sourceFiber.flags |= ForceUpdateForLegacySuspense // We're going to commit this fiber even though it didn't complete.
                // But we shouldn't call any lifecycle methods or callbacks. Remove
                // all lifecycle effect tags.

                sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete)

                if (sourceFiber.tag === ClassComponent) {
                  var currentSourceFiber = sourceFiber.alternate

                  if (currentSourceFiber === null) {
                    // This is a new mount. Change the tag so it's not mistaken for a
                    // completed class component. For example, we should not call
                    // componentWillUnmount if it is deleted.
                    sourceFiber.tag = IncompleteClassComponent
                  } else {
                    // When we try rendering again, we should not reuse the current fiber,
                    // since it's known to be in an inconsistent state. Use a force update to
                    // prevent a bail out.
                    var update = createUpdate(NoTimestamp, SyncLane)
                    update.tag = ForceUpdate
                    enqueueUpdate(sourceFiber, update)
                  }
                } // The source fiber did not complete. Mark it with Sync priority to
                // indicate that it still has pending work.

                sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane) // Exit without suspending.

                return
              } // Confirmed that the boundary is in a concurrent mode tree. Continue
              // with the normal suspend path.
              //
              // After this we'll use a set of heuristics to determine whether this
              // render pass will run to completion or restart or "suspend" the commit.
              // The actual logic for this is spread out in different places.
              //
              // This first principle is that if we're going to suspend when we complete
              // a root, then we should also restart if we get an update or ping that
              // might unsuspend it, and vice versa. The only reason to suspend is
              // because you think you might want to restart before committing. However,
              // it doesn't make sense to restart only while in the period we're suspended.
              //
              // Restarting too aggressively is also not good because it starves out any
              // intermediate loading state. So we use heuristics to determine when.
              // Suspense Heuristics
              //
              // If nothing threw a Promise or all the same fallbacks are already showing,
              // then don't suspend/restart.
              //
              // If this is an initial render of a new tree of Suspense boundaries and
              // those trigger a fallback, then don't suspend/restart. We want to ensure
              // that we can show the initial loading state as quickly as possible.
              //
              // If we hit a "Delayed" case, such as when we'd switch from content back into
              // a fallback, then we should always suspend/restart. Transitions apply
              // to this case. If none is defined, JND is used instead.
              //
              // If we're already showing a fallback and it gets "retried", allowing us to show
              // another level, but there's still an inner boundary that would show a fallback,
              // then we suspend/restart for 500ms since the last time we showed a fallback
              // anywhere in the tree. This effectively throttles progressive loading into a
              // consistent train of commits. This also gives us an opportunity to restart to
              // get to the completed state slightly earlier.
              //
              // If there's ambiguity due to batching it's resolved in preference of:
              // 1) "delayed", 2) "initial render", 3) "retry".
              //
              // We want to ensure that a "busy" state doesn't get force committed. We want to
              // ensure that new initial loading states can commit as soon as possible.

              attachPingListener(root, wakeable, rootRenderLanes)
              _workInProgress.flags |= ShouldCapture
              _workInProgress.lanes = rootRenderLanes
              return
            } // This boundary already captured during this render. Continue to the next
            // boundary.

            _workInProgress = _workInProgress.return
          } while (_workInProgress !== null) // No boundary was found. Fallthrough to error mode.
          // TODO: Use invariant so the message is stripped in prod?

          value = new Error(
            (getComponentName(sourceFiber.type) || 'A React component') +
              ' suspended while rendering, but no fallback UI was specified.\n' +
              '\n' +
              'Add a <Suspense fallback=...> component higher in the tree to ' +
              'provide a loading indicator or placeholder to display.'
          )
        } // We didn't find a boundary that could handle this type of exception. Start
        // over and traverse parent path again, this time treating the exception
        // as an error.

        renderDidError()
        value = createCapturedValue(value, sourceFiber)
        var workInProgress = returnFiber

        do {
          switch (workInProgress.tag) {
            case HostRoot: {
              var _errorInfo = value
              workInProgress.flags |= ShouldCapture
              var lane = pickArbitraryLane(rootRenderLanes)
              workInProgress.lanes = mergeLanes(workInProgress.lanes, lane)

              var _update = createRootErrorUpdate(
                workInProgress,
                _errorInfo,
                lane
              )

              enqueueCapturedUpdate(workInProgress, _update)
              return
            }

            case ClassComponent:
              // Capture and retry
              var errorInfo = value
              var ctor = workInProgress.type
              var instance = workInProgress.stateNode

              if (
                (workInProgress.flags & DidCapture) === NoFlags &&
                (typeof ctor.getDerivedStateFromError === 'function' ||
                  (instance !== null &&
                    typeof instance.componentDidCatch === 'function' &&
                    !isAlreadyFailedLegacyErrorBoundary(instance)))
              ) {
                workInProgress.flags |= ShouldCapture

                var _lane = pickArbitraryLane(rootRenderLanes)

                workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane) // Schedule the error boundary to re-render using updated state

                var _update2 = createClassErrorUpdate(
                  workInProgress,
                  errorInfo,
                  _lane
                )

                enqueueCapturedUpdate(workInProgress, _update2)
                return
              }

              break
          }

          workInProgress = workInProgress.return
        } while (workInProgress !== null)
      }

      var didWarnAboutUndefinedSnapshotBeforeUpdate = null

      {
        didWarnAboutUndefinedSnapshotBeforeUpdate = new Set()
      }

      var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set

      var callComponentWillUnmountWithTimer = function (current, instance) {
        instance.props = current.memoizedProps
        instance.state = current.memoizedState

        {
          instance.componentWillUnmount()
        }
      } // Capture errors so they don't interrupt unmounting.

      function safelyCallComponentWillUnmount(current, instance) {
        {
          invokeGuardedCallback(
            null,
            callComponentWillUnmountWithTimer,
            null,
            current,
            instance
          )

          if (hasCaughtError()) {
            var unmountError = clearCaughtError()
            captureCommitPhaseError(current, unmountError)
          }
        }
      }

      function safelyDetachRef(current) {
        var ref = current.ref

        if (ref !== null) {
          if (typeof ref === 'function') {
            {
              invokeGuardedCallback(null, ref, null, null)

              if (hasCaughtError()) {
                var refError = clearCaughtError()
                captureCommitPhaseError(current, refError)
              }
            }
          } else {
            ref.current = null
          }
        }
      }

      function safelyCallDestroy(current, destroy) {
        {
          invokeGuardedCallback(null, destroy, null)

          if (hasCaughtError()) {
            var error = clearCaughtError()
            captureCommitPhaseError(current, error)
          }
        }
      }

      function commitBeforeMutationLifeCycles(current, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block: {
            return
          }

          case ClassComponent: {
            if (finishedWork.flags & Snapshot) {
              if (current !== null) {
                var prevProps = current.memoizedProps
                var prevState = current.memoizedState
                var instance = finishedWork.stateNode // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (
                    finishedWork.type === finishedWork.elementType &&
                    !didWarnAboutReassigningProps
                  ) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error(
                        'Expected %s props to match memoized props before ' +
                          'getSnapshotBeforeUpdate. ' +
                          'This might either be because of a bug in React, or because ' +
                          'a component reassigns its own `this.props`. ' +
                          'Please file an issue.',
                        getComponentName(finishedWork.type) || 'instance'
                      )
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error(
                        'Expected %s state to match memoized state before ' +
                          'getSnapshotBeforeUpdate. ' +
                          'This might either be because of a bug in React, or because ' +
                          'a component reassigns its own `this.state`. ' +
                          'Please file an issue.',
                        getComponentName(finishedWork.type) || 'instance'
                      )
                    }
                  }
                }

                var snapshot = instance.getSnapshotBeforeUpdate(
                  finishedWork.elementType === finishedWork.type
                    ? prevProps
                    : resolveDefaultProps(finishedWork.type, prevProps),
                  prevState
                )

                {
                  var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate

                  if (
                    snapshot === undefined &&
                    !didWarnSet.has(finishedWork.type)
                  ) {
                    didWarnSet.add(finishedWork.type)

                    error(
                      '%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' +
                        'must be returned. You have returned undefined.',
                      getComponentName(finishedWork.type)
                    )
                  }
                }

                instance.__reactInternalSnapshotBeforeUpdate = snapshot
              }
            }

            return
          }

          case HostRoot: {
            {
              if (finishedWork.flags & Snapshot) {
                var root = finishedWork.stateNode
                clearContainer(root.containerInfo)
              }
            }

            return
          }

          case HostComponent:
          case HostText:
          case HostPortal:
          case IncompleteClassComponent:
            // Nothing to do for these component types
            return
        }

        {
          {
            throw Error(
              'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }
      }

      function commitHookEffectListUnmount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next
          var effect = firstEffect

          do {
            if ((effect.tag & tag) === tag) {
              // Unmount
              var destroy = effect.destroy
              effect.destroy = undefined

              if (destroy !== undefined) {
                destroy()
              }
            }

            effect = effect.next
          } while (effect !== firstEffect)
        }
      }

      function commitHookEffectListMount(tag, finishedWork) {
        var updateQueue = finishedWork.updateQueue
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next
          var effect = firstEffect

          do {
            if ((effect.tag & tag) === tag) {
              // Mount
              var create = effect.create
              effect.destroy = create()

              {
                var destroy = effect.destroy

                if (destroy !== undefined && typeof destroy !== 'function') {
                  var addendum = void 0

                  if (destroy === null) {
                    addendum =
                      ' You returned null. If your effect does not require clean ' +
                      'up, return undefined (or nothing).'
                  } else if (typeof destroy.then === 'function') {
                    addendum =
                      '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' +
                      'Instead, write the async function inside your effect ' +
                      'and call it immediately:\n\n' +
                      'useEffect(() => {\n' +
                      '  async function fetchData() {\n' +
                      '    // You can await here\n' +
                      '    const response = await MyAPI.getData(someId);\n' +
                      '    // ...\n' +
                      '  }\n' +
                      '  fetchData();\n' +
                      "}, [someId]); // Or [] if effect doesn't need props or state\n\n" +
                      'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching'
                  } else {
                    addendum = ' You returned: ' + destroy
                  }

                  error(
                    'An effect function must not return anything besides a function, ' +
                      'which is used for clean-up.%s',
                    addendum
                  )
                }
              }
            }

            effect = effect.next
          } while (effect !== firstEffect)
        }
      }

      function schedulePassiveEffects(finishedWork) {
        var updateQueue = finishedWork.updateQueue
        var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null

        if (lastEffect !== null) {
          var firstEffect = lastEffect.next
          var effect = firstEffect

          do {
            var _effect = effect,
              next = _effect.next,
              tag = _effect.tag

            if (
              (tag & Passive$1) !== NoFlags$1 &&
              (tag & HasEffect) !== NoFlags$1
            ) {
              enqueuePendingPassiveHookEffectUnmount(finishedWork, effect)
              enqueuePendingPassiveHookEffectMount(finishedWork, effect)
            }

            effect = next
          } while (effect !== firstEffect)
        }
      }

      function commitLifeCycles(
        finishedRoot,
        current,
        finishedWork,
        committedLanes
      ) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case SimpleMemoComponent:
          case Block: {
            // At this point layout effects have already been destroyed (during mutation phase).
            // This is done to prevent sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
            {
              commitHookEffectListMount(Layout | HasEffect, finishedWork)
            }

            schedulePassiveEffects(finishedWork)
            return
          }

          case ClassComponent: {
            var instance = finishedWork.stateNode

            if (finishedWork.flags & Update) {
              if (current === null) {
                // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.
                {
                  if (
                    finishedWork.type === finishedWork.elementType &&
                    !didWarnAboutReassigningProps
                  ) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error(
                        'Expected %s props to match memoized props before ' +
                          'componentDidMount. ' +
                          'This might either be because of a bug in React, or because ' +
                          'a component reassigns its own `this.props`. ' +
                          'Please file an issue.',
                        getComponentName(finishedWork.type) || 'instance'
                      )
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error(
                        'Expected %s state to match memoized state before ' +
                          'componentDidMount. ' +
                          'This might either be because of a bug in React, or because ' +
                          'a component reassigns its own `this.state`. ' +
                          'Please file an issue.',
                        getComponentName(finishedWork.type) || 'instance'
                      )
                    }
                  }
                }

                {
                  instance.componentDidMount()
                }
              } else {
                var prevProps =
                  finishedWork.elementType === finishedWork.type
                    ? current.memoizedProps
                    : resolveDefaultProps(
                        finishedWork.type,
                        current.memoizedProps
                      )
                var prevState = current.memoizedState // We could update instance props and state here,
                // but instead we rely on them being set during last render.
                // TODO: revisit this when we implement resuming.

                {
                  if (
                    finishedWork.type === finishedWork.elementType &&
                    !didWarnAboutReassigningProps
                  ) {
                    if (instance.props !== finishedWork.memoizedProps) {
                      error(
                        'Expected %s props to match memoized props before ' +
                          'componentDidUpdate. ' +
                          'This might either be because of a bug in React, or because ' +
                          'a component reassigns its own `this.props`. ' +
                          'Please file an issue.',
                        getComponentName(finishedWork.type) || 'instance'
                      )
                    }

                    if (instance.state !== finishedWork.memoizedState) {
                      error(
                        'Expected %s state to match memoized state before ' +
                          'componentDidUpdate. ' +
                          'This might either be because of a bug in React, or because ' +
                          'a component reassigns its own `this.state`. ' +
                          'Please file an issue.',
                        getComponentName(finishedWork.type) || 'instance'
                      )
                    }
                  }
                }

                {
                  instance.componentDidUpdate(
                    prevProps,
                    prevState,
                    instance.__reactInternalSnapshotBeforeUpdate
                  )
                }
              }
            } // TODO: I think this is now always non-null by the time it reaches the
            // commit phase. Consider removing the type check.

            var updateQueue = finishedWork.updateQueue

            if (updateQueue !== null) {
              {
                if (
                  finishedWork.type === finishedWork.elementType &&
                  !didWarnAboutReassigningProps
                ) {
                  if (instance.props !== finishedWork.memoizedProps) {
                    error(
                      'Expected %s props to match memoized props before ' +
                        'processing the update queue. ' +
                        'This might either be because of a bug in React, or because ' +
                        'a component reassigns its own `this.props`. ' +
                        'Please file an issue.',
                      getComponentName(finishedWork.type) || 'instance'
                    )
                  }

                  if (instance.state !== finishedWork.memoizedState) {
                    error(
                      'Expected %s state to match memoized state before ' +
                        'processing the update queue. ' +
                        'This might either be because of a bug in React, or because ' +
                        'a component reassigns its own `this.state`. ' +
                        'Please file an issue.',
                      getComponentName(finishedWork.type) || 'instance'
                    )
                  }
                }
              } // We could update instance props and state here,
              // but instead we rely on them being set during last render.
              // TODO: revisit this when we implement resuming.

              commitUpdateQueue(finishedWork, updateQueue, instance)
            }

            return
          }

          case HostRoot: {
            // TODO: I think this is now always non-null by the time it reaches the
            // commit phase. Consider removing the type check.
            var _updateQueue = finishedWork.updateQueue

            if (_updateQueue !== null) {
              var _instance = null

              if (finishedWork.child !== null) {
                switch (finishedWork.child.tag) {
                  case HostComponent:
                    _instance = getPublicInstance(finishedWork.child.stateNode)
                    break

                  case ClassComponent:
                    _instance = finishedWork.child.stateNode
                    break
                }
              }

              commitUpdateQueue(finishedWork, _updateQueue, _instance)
            }

            return
          }

          case HostComponent: {
            var _instance2 = finishedWork.stateNode // Renderers may schedule work to be done after host components are mounted
            // (eg DOM renderer may schedule auto-focus for inputs and form controls).
            // These effects should only be committed when components are first mounted,
            // aka when there is no current/alternate.

            if (current === null && finishedWork.flags & Update) {
              var type = finishedWork.type
              var props = finishedWork.memoizedProps
              commitMount(_instance2, type, props)
            }

            return
          }

          case HostText: {
            // We have no life-cycles associated with text.
            return
          }

          case HostPortal: {
            // We have no life-cycles associated with portals.
            return
          }

          case Profiler: {
            {
              var _finishedWork$memoize2 = finishedWork.memoizedProps
              _finishedWork$memoize2.onCommit
              var onRender = _finishedWork$memoize2.onRender
              finishedWork.stateNode.effectDuration
              var commitTime = getCommitTime()

              if (typeof onRender === 'function') {
                {
                  onRender(
                    finishedWork.memoizedProps.id,
                    current === null ? 'mount' : 'update',
                    finishedWork.actualDuration,
                    finishedWork.treeBaseDuration,
                    finishedWork.actualStartTime,
                    commitTime,
                    finishedRoot.memoizedInteractions
                  )
                }
              }
            }

            return
          }

          case SuspenseComponent: {
            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork)
            return
          }

          case SuspenseListComponent:
          case IncompleteClassComponent:
          case FundamentalComponent:
          case ScopeComponent:
          case OffscreenComponent:
          case LegacyHiddenComponent:
            return
        }

        {
          {
            throw Error(
              'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }
      }

      function hideOrUnhideAllChildren(finishedWork, isHidden) {
        {
          // We only have the top Fiber that was inserted but we need to recurse down its
          // children to find all the terminal nodes.
          var node = finishedWork

          while (true) {
            if (node.tag === HostComponent) {
              var instance = node.stateNode

              if (isHidden) {
                hideInstance(instance)
              } else {
                unhideInstance(node.stateNode, node.memoizedProps)
              }
            } else if (node.tag === HostText) {
              var _instance3 = node.stateNode

              if (isHidden) {
                hideTextInstance(_instance3)
              } else {
                unhideTextInstance(_instance3, node.memoizedProps)
              }
            } else if (
              (node.tag === OffscreenComponent ||
                node.tag === LegacyHiddenComponent) &&
              node.memoizedState !== null &&
              node !== finishedWork
            );
            else if (node.child !== null) {
              node.child.return = node
              node = node.child
              continue
            }

            if (node === finishedWork) {
              return
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return
              }

              node = node.return
            }

            node.sibling.return = node.return
            node = node.sibling
          }
        }
      }

      function commitAttachRef(finishedWork) {
        var ref = finishedWork.ref

        if (ref !== null) {
          var instance = finishedWork.stateNode
          var instanceToUse

          switch (finishedWork.tag) {
            case HostComponent:
              instanceToUse = getPublicInstance(instance)
              break

            default:
              instanceToUse = instance
          } // Moved outside to ensure DCE works with this flag

          if (typeof ref === 'function') {
            ref(instanceToUse)
          } else {
            {
              if (!ref.hasOwnProperty('current')) {
                error(
                  'Unexpected ref object provided for %s. ' +
                    'Use either a ref-setter function or React.createRef().',
                  getComponentName(finishedWork.type)
                )
              }
            }

            ref.current = instanceToUse
          }
        }
      }

      function commitDetachRef(current) {
        var currentRef = current.ref

        if (currentRef !== null) {
          if (typeof currentRef === 'function') {
            currentRef(null)
          } else {
            currentRef.current = null
          }
        }
      } // User-originating errors (lifecycles and refs) should not interrupt
      // deletion, so don't let them throw. Host-originating errors should
      // interrupt deletion, so it's okay

      function commitUnmount(finishedRoot, current, renderPriorityLevel) {
        onCommitUnmount(current)

        switch (current.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block: {
            var updateQueue = current.updateQueue

            if (updateQueue !== null) {
              var lastEffect = updateQueue.lastEffect

              if (lastEffect !== null) {
                var firstEffect = lastEffect.next
                var effect = firstEffect

                do {
                  var _effect2 = effect,
                    destroy = _effect2.destroy,
                    tag = _effect2.tag

                  if (destroy !== undefined) {
                    if ((tag & Passive$1) !== NoFlags$1) {
                      enqueuePendingPassiveHookEffectUnmount(current, effect)
                    } else {
                      {
                        safelyCallDestroy(current, destroy)
                      }
                    }
                  }

                  effect = effect.next
                } while (effect !== firstEffect)
              }
            }

            return
          }

          case ClassComponent: {
            safelyDetachRef(current)
            var instance = current.stateNode

            if (typeof instance.componentWillUnmount === 'function') {
              safelyCallComponentWillUnmount(current, instance)
            }

            return
          }

          case HostComponent: {
            safelyDetachRef(current)
            return
          }

          case HostPortal: {
            // TODO: this is recursive.
            // We are also not using this parent because
            // the portal will get pushed immediately.
            {
              unmountHostComponents(finishedRoot, current)
            }

            return
          }

          case FundamentalComponent: {
            return
          }

          case DehydratedFragment: {
            return
          }

          case ScopeComponent: {
            return
          }
        }
      }

      function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
        // While we're inside a removed host node we don't want to call
        // removeChild on the inner nodes because they're removed by the top
        // call anyway. We also want to call componentWillUnmount on all
        // composites before this host node is removed from the tree. Therefore
        // we do an inner loop while we're still inside the host node.
        var node = root

        while (true) {
          commitUnmount(finishedRoot, node) // Visit children because they may contain more composite or host nodes.
          // Skip portals because commitUnmount() currently visits them recursively.

          if (
            node.child !== null && // If we use mutation we drill down into portals using commitUnmount above.
            // If we don't use mutation we drill down into portals here instead.
            node.tag !== HostPortal
          ) {
            node.child.return = node
            node = node.child
            continue
          }

          if (node === root) {
            return
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === root) {
              return
            }

            node = node.return
          }

          node.sibling.return = node.return
          node = node.sibling
        }
      }

      function detachFiberMutation(fiber) {
        // Cut off the return pointers to disconnect it from the tree. Ideally, we
        // should clear the child pointer of the parent alternate to let this
        // get GC:ed but we don't know which for sure which parent is the current
        // one so we'll settle for GC:ing the subtree of this child. This child
        // itself will be GC:ed when the parent updates the next time.
        // Note: we cannot null out sibling here, otherwise it can cause issues
        // with findDOMNode and how it requires the sibling field to carry out
        // traversal in a later effect. See PR #16820. We now clear the sibling
        // field after effects, see: detachFiberAfterEffects.
        //
        // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
        // It may be required if the current component is an error boundary,
        // and one of its descendants throws while unmounting a passive effect.
        fiber.alternate = null
        fiber.child = null
        fiber.dependencies = null
        fiber.firstEffect = null
        fiber.lastEffect = null
        fiber.memoizedProps = null
        fiber.memoizedState = null
        fiber.pendingProps = null
        fiber.return = null
        fiber.updateQueue = null

        {
          fiber._debugOwner = null
        }
      }

      function getHostParentFiber(fiber) {
        var parent = fiber.return

        while (parent !== null) {
          if (isHostParent(parent)) {
            return parent
          }

          parent = parent.return
        }

        {
          {
            throw Error(
              'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }
      }

      function isHostParent(fiber) {
        return (
          fiber.tag === HostComponent ||
          fiber.tag === HostRoot ||
          fiber.tag === HostPortal
        )
      }

      function getHostSibling(fiber) {
        // We're going to search forward into the tree until we find a sibling host
        // node. Unfortunately, if multiple insertions are done in a row we have to
        // search past them. This leads to exponential search for the next sibling.
        // TODO: Find a more efficient way to do this.
        var node = fiber

        siblings: while (true) {
          // If we didn't find anything, let's try the next sibling.
          while (node.sibling === null) {
            if (node.return === null || isHostParent(node.return)) {
              // If we pop out of the root or hit the parent the fiber we are the
              // last sibling.
              return null
            }

            node = node.return
          }

          node.sibling.return = node.return
          node = node.sibling

          while (
            node.tag !== HostComponent &&
            node.tag !== HostText &&
            node.tag !== DehydratedFragment
          ) {
            // If it is not host node and, we might have a host node inside it.
            // Try to search down until we find one.
            if (node.flags & Placement) {
              // If we don't have a child, try the siblings instead.
              continue siblings
            } // If we don't have a child, try the siblings instead.
            // We also skip portals because they are not part of this host tree.

            if (node.child === null || node.tag === HostPortal) {
              continue siblings
            } else {
              node.child.return = node
              node = node.child
            }
          } // Check if this host node is stable or about to be placed.

          if (!(node.flags & Placement)) {
            // Found it!
            return node.stateNode
          }
        }
      }

      function commitPlacement(finishedWork) {
        var parentFiber = getHostParentFiber(finishedWork) // Note: these two variables *must* always be updated together.

        var parent
        var isContainer
        var parentStateNode = parentFiber.stateNode

        switch (parentFiber.tag) {
          case HostComponent:
            parent = parentStateNode
            isContainer = false
            break

          case HostRoot:
            parent = parentStateNode.containerInfo
            isContainer = true
            break

          case HostPortal:
            parent = parentStateNode.containerInfo
            isContainer = true
            break

          case FundamentalComponent:

          // eslint-disable-next-line-no-fallthrough

          default: {
            {
              throw Error(
                'Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.'
              )
            }
          }
        }

        if (parentFiber.flags & ContentReset) {
          // Reset the text content of the parent before doing any insertions
          resetTextContent(parent) // Clear ContentReset from the effect tag

          parentFiber.flags &= ~ContentReset
        }

        var before = getHostSibling(finishedWork) // We only have the top Fiber that was inserted but we need to recurse down its
        // children to find all the terminal nodes.

        if (isContainer) {
          insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent)
        } else {
          insertOrAppendPlacementNode(finishedWork, before, parent)
        }
      }

      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag
        var isHost = tag === HostComponent || tag === HostText

        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance

          if (before) {
            insertInContainerBefore(parent, stateNode, before)
          } else {
            appendChildToContainer(parent, stateNode)
          }
        } else if (tag === HostPortal);
        else {
          var child = node.child

          if (child !== null) {
            insertOrAppendPlacementNodeIntoContainer(child, before, parent)
            var sibling = child.sibling

            while (sibling !== null) {
              insertOrAppendPlacementNodeIntoContainer(sibling, before, parent)
              sibling = sibling.sibling
            }
          }
        }
      }

      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag
        var isHost = tag === HostComponent || tag === HostText

        if (isHost || enableFundamentalAPI) {
          var stateNode = isHost ? node.stateNode : node.stateNode.instance

          if (before) {
            insertBefore(parent, stateNode, before)
          } else {
            appendChild(parent, stateNode)
          }
        } else if (tag === HostPortal);
        else {
          var child = node.child

          if (child !== null) {
            insertOrAppendPlacementNode(child, before, parent)
            var sibling = child.sibling

            while (sibling !== null) {
              insertOrAppendPlacementNode(sibling, before, parent)
              sibling = sibling.sibling
            }
          }
        }
      }

      function unmountHostComponents(
        finishedRoot,
        current,
        renderPriorityLevel
      ) {
        // We only have the top Fiber that was deleted but we need to recurse down its
        // children to find all the terminal nodes.
        var node = current // Each iteration, currentParent is populated with node's host parent if not
        // currentParentIsValid.

        var currentParentIsValid = false // Note: these two variables *must* always be updated together.

        var currentParent
        var currentParentIsContainer

        while (true) {
          if (!currentParentIsValid) {
            var parent = node.return

            findParent: while (true) {
              if (!(parent !== null)) {
                {
                  throw Error(
                    'Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.'
                  )
                }
              }

              var parentStateNode = parent.stateNode

              switch (parent.tag) {
                case HostComponent:
                  currentParent = parentStateNode
                  currentParentIsContainer = false
                  break findParent

                case HostRoot:
                  currentParent = parentStateNode.containerInfo
                  currentParentIsContainer = true
                  break findParent

                case HostPortal:
                  currentParent = parentStateNode.containerInfo
                  currentParentIsContainer = true
                  break findParent
              }

              parent = parent.return
            }

            currentParentIsValid = true
          }

          if (node.tag === HostComponent || node.tag === HostText) {
            commitNestedUnmounts(finishedRoot, node) // After all the children have unmounted, it is now safe to remove the
            // node from the tree.

            if (currentParentIsContainer) {
              removeChildFromContainer(currentParent, node.stateNode)
            } else {
              removeChild(currentParent, node.stateNode)
            } // Don't visit children because we already visited them.
          } else if (node.tag === HostPortal) {
            if (node.child !== null) {
              // When we go into a portal, it becomes the parent to remove from.
              // We will reassign it back when we pop the portal on the way up.
              currentParent = node.stateNode.containerInfo
              currentParentIsContainer = true // Visit children because portals might contain host components.

              node.child.return = node
              node = node.child
              continue
            }
          } else {
            commitUnmount(finishedRoot, node) // Visit children because we may find more host components below.

            if (node.child !== null) {
              node.child.return = node
              node = node.child
              continue
            }
          }

          if (node === current) {
            return
          }

          while (node.sibling === null) {
            if (node.return === null || node.return === current) {
              return
            }

            node = node.return

            if (node.tag === HostPortal) {
              // When we go out of the portal, we need to restore the parent.
              // Since we don't keep a stack of them, we will search for it.
              currentParentIsValid = false
            }
          }

          node.sibling.return = node.return
          node = node.sibling
        }
      }

      function commitDeletion(finishedRoot, current, renderPriorityLevel) {
        {
          // Recursively delete all host nodes from the parent.
          // Detach refs and call componentWillUnmount() on the whole subtree.
          unmountHostComponents(finishedRoot, current)
        }

        var alternate = current.alternate
        detachFiberMutation(current)

        if (alternate !== null) {
          detachFiberMutation(alternate)
        }
      }

      function commitWork(current, finishedWork) {
        switch (finishedWork.tag) {
          case FunctionComponent:
          case ForwardRef:
          case MemoComponent:
          case SimpleMemoComponent:
          case Block: {
            // Layout effects are destroyed during the mutation phase so that all
            // destroy functions for all fibers are called before any create functions.
            // This prevents sibling component effects from interfering with each other,
            // e.g. a destroy function in one component should never override a ref set
            // by a create function in another component during the same commit.
            {
              commitHookEffectListUnmount(Layout | HasEffect, finishedWork)
            }

            return
          }

          case ClassComponent: {
            return
          }

          case HostComponent: {
            var instance = finishedWork.stateNode

            if (instance != null) {
              // Commit the work prepared earlier.
              var newProps = finishedWork.memoizedProps // For hydration we reuse the update path but we treat the oldProps
              // as the newProps. The updatePayload will contain the real change in
              // this case.

              var oldProps = current !== null ? current.memoizedProps : newProps
              var type = finishedWork.type // TODO: Type the updateQueue to be specific to host components.

              var updatePayload = finishedWork.updateQueue
              finishedWork.updateQueue = null

              if (updatePayload !== null) {
                commitUpdate(instance, updatePayload, type, oldProps, newProps)
              }
            }

            return
          }

          case HostText: {
            if (!(finishedWork.stateNode !== null)) {
              {
                throw Error(
                  'This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.'
                )
              }
            }

            var textInstance = finishedWork.stateNode
            var newText = finishedWork.memoizedProps // For hydration we reuse the update path but we treat the oldProps
            // as the newProps. The updatePayload will contain the real change in
            // this case.

            var oldText = current !== null ? current.memoizedProps : newText
            commitTextUpdate(textInstance, oldText, newText)
            return
          }

          case HostRoot: {
            {
              var _root = finishedWork.stateNode

              if (_root.hydrate) {
                // We've just hydrated. No need to hydrate again.
                _root.hydrate = false
                commitHydratedContainer(_root.containerInfo)
              }
            }

            return
          }

          case Profiler: {
            return
          }

          case SuspenseComponent: {
            commitSuspenseComponent(finishedWork)
            attachSuspenseRetryListeners(finishedWork)
            return
          }

          case SuspenseListComponent: {
            attachSuspenseRetryListeners(finishedWork)
            return
          }

          case IncompleteClassComponent: {
            return
          }

          case FundamentalComponent: {
            break
          }

          case ScopeComponent: {
            break
          }

          case OffscreenComponent:
          case LegacyHiddenComponent: {
            var newState = finishedWork.memoizedState
            var isHidden = newState !== null
            hideOrUnhideAllChildren(finishedWork, isHidden)
            return
          }
        }

        {
          {
            throw Error(
              'This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        }
      }

      function commitSuspenseComponent(finishedWork) {
        var newState = finishedWork.memoizedState

        if (newState !== null) {
          markCommitTimeOfFallback()

          {
            // Hide the Offscreen component that contains the primary children. TODO:
            // Ideally, this effect would have been scheduled on the Offscreen fiber
            // itself. That's how unhiding works: the Offscreen component schedules an
            // effect on itself. However, in this case, the component didn't complete,
            // so the fiber was never added to the effect list in the normal path. We
            // could have appended it to the effect list in the Suspense component's
            // second pass, but doing it this way is less complicated. This would be
            // simpler if we got rid of the effect list and traversed the tree, like
            // we're planning to do.
            var primaryChildParent = finishedWork.child
            hideOrUnhideAllChildren(primaryChildParent, true)
          }
        }
      }

      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        var newState = finishedWork.memoizedState

        if (newState === null) {
          var current = finishedWork.alternate

          if (current !== null) {
            var prevState = current.memoizedState

            if (prevState !== null) {
              var suspenseInstance = prevState.dehydrated

              if (suspenseInstance !== null) {
                commitHydratedSuspenseInstance(suspenseInstance)
              }
            }
          }
        }
      }

      function attachSuspenseRetryListeners(finishedWork) {
        // If this boundary just timed out, then it will have a set of wakeables.
        // For each wakeable, attach a listener so that when it resolves, React
        // attempts to re-render the boundary in the primary (pre-timeout) state.
        var wakeables = finishedWork.updateQueue

        if (wakeables !== null) {
          finishedWork.updateQueue = null
          var retryCache = finishedWork.stateNode

          if (retryCache === null) {
            retryCache = finishedWork.stateNode = new PossiblyWeakSet()
          }

          wakeables.forEach(function (wakeable) {
            // Memoize using the boundary fiber to prevent redundant listeners.
            var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable)

            if (!retryCache.has(wakeable)) {
              {
                if (wakeable.__reactDoNotTraceInteractions !== true) {
                  retry = tracing.unstable_wrap(retry)
                }
              }

              retryCache.add(wakeable)
              wakeable.then(retry, retry)
            }
          })
        }
      } // This function detects when a Suspense boundary goes from visible to hidden.
      // It returns false if the boundary is already hidden.
      // TODO: Use an effect tag.

      function isSuspenseBoundaryBeingHidden(current, finishedWork) {
        if (current !== null) {
          var oldState = current.memoizedState

          if (oldState === null || oldState.dehydrated !== null) {
            var newState = finishedWork.memoizedState
            return newState !== null && newState.dehydrated === null
          }
        }

        return false
      }

      function commitResetTextContent(current) {
        resetTextContent(current.stateNode)
      }

      if (typeof Symbol === 'function' && Symbol.for) {
        var symbolFor$1 = Symbol.for
        symbolFor$1('selector.component')
        symbolFor$1('selector.has_pseudo_class')
        symbolFor$1('selector.role')
        symbolFor$1('selector.test_id')
        symbolFor$1('selector.text')
      }
      var commitHooks = []
      function onCommitRoot$1() {
        {
          commitHooks.forEach(function (commitHook) {
            return commitHook()
          })
        }
      }

      var ceil = Math.ceil
      var ReactCurrentDispatcher$2 =
          ReactSharedInternals.ReactCurrentDispatcher,
        ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
        IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing
      var NoContext =
        /*             */
        0
      var BatchedContext =
        /*               */
        1
      var EventContext =
        /*                 */
        2
      var DiscreteEventContext =
        /*         */
        4
      var LegacyUnbatchedContext =
        /*       */
        8
      var RenderContext =
        /*                */
        16
      var CommitContext =
        /*                */
        32
      var RetryAfterError =
        /*       */
        64
      var RootIncomplete = 0
      var RootFatalErrored = 1
      var RootErrored = 2
      var RootSuspended = 3
      var RootSuspendedWithDelay = 4
      var RootCompleted = 5 // Describes where we are in the React execution stack

      var executionContext = NoContext // The root we're working on

      var workInProgressRoot = null // The fiber we're working on

      var workInProgress = null // The lanes we're rendering

      var workInProgressRootRenderLanes = NoLanes // Stack that allows components to change the render lanes for its subtree
      // This is a superset of the lanes we started working on at the root. The only
      // case where it's different from `workInProgressRootRenderLanes` is when we
      // enter a subtree that is hidden and needs to be unhidden: Suspense and
      // Offscreen component.
      //
      // Most things in the work loop should deal with workInProgressRootRenderLanes.
      // Most things in begin/complete phases should deal with subtreeRenderLanes.

      var subtreeRenderLanes = NoLanes
      var subtreeRenderLanesCursor = createCursor(NoLanes) // Whether to root completed, errored, suspended, etc.

      var workInProgressRootExitStatus = RootIncomplete // A fatal error, if one is thrown

      var workInProgressRootFatalError = null // "Included" lanes refer to lanes that were worked on during this render. It's
      // slightly different than `renderLanes` because `renderLanes` can change as you
      // enter and exit an Offscreen tree. This value is the combination of all render
      // lanes for the entire render phase.

      var workInProgressRootIncludedLanes = NoLanes // The work left over by components that were visited during this render. Only
      // includes unprocessed updates, not work in bailed out children.

      var workInProgressRootSkippedLanes = NoLanes // Lanes that were updated (in an interleaved event) during this render.

      var workInProgressRootUpdatedLanes = NoLanes // Lanes that were pinged (in an interleaved event) during this render.

      var workInProgressRootPingedLanes = NoLanes
      var mostRecentlyUpdatedRoot = null // The most recent time we committed a fallback. This lets us ensure a train
      // model where we don't commit new loading states in too quick succession.

      var globalMostRecentFallbackTime = 0
      var FALLBACK_THROTTLE_MS = 500 // The absolute time for when we should start giving up on rendering
      // more and prefer CPU suspense heuristics instead.

      var workInProgressRootRenderTargetTime = Infinity // How long a render is supposed to take before we start following CPU
      // suspense heuristics and opt out of rendering more content.

      var RENDER_TIMEOUT_MS = 500

      function resetRenderTimer() {
        workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS
      }

      function getRenderTargetTime() {
        return workInProgressRootRenderTargetTime
      }
      var nextEffect = null
      var hasUncaughtError = false
      var firstUncaughtError = null
      var legacyErrorBoundariesThatAlreadyFailed = null
      var rootDoesHavePassiveEffects = false
      var rootWithPendingPassiveEffects = null
      var pendingPassiveEffectsRenderPriority = NoPriority$1
      var pendingPassiveEffectsLanes = NoLanes
      var pendingPassiveHookEffectsMount = []
      var pendingPassiveHookEffectsUnmount = []
      var rootsWithPendingDiscreteUpdates = null // Use these to prevent an infinite loop of nested updates

      var NESTED_UPDATE_LIMIT = 50
      var nestedUpdateCount = 0
      var rootWithNestedUpdates = null
      var NESTED_PASSIVE_UPDATE_LIMIT = 50
      var nestedPassiveUpdateCount = 0 // Marks the need to reschedule pending interactions at these lanes
      // during the commit phase. This enables them to be traced across components
      // that spawn new work during render. E.g. hidden boundaries, suspended SSR
      // hydration or SuspenseList.
      // TODO: Can use a bitmask instead of an array

      var spawnedWorkDuringRender = null // If two updates are scheduled within the same event, we should treat their
      // event times as simultaneous, even if the actual clock time has advanced
      // between the first and second call.

      var currentEventTime = NoTimestamp
      var currentEventWipLanes = NoLanes
      var currentEventPendingLanes = NoLanes // Dev only flag that tracks if passive effects are currently being flushed.
      // We warn about state updates for unmounted components differently in this case.

      var isFlushingPassiveEffects = false
      var focusedInstanceHandle = null
      var shouldFireAfterActiveInstanceBlur = false
      function getWorkInProgressRoot() {
        return workInProgressRoot
      }
      function requestEventTime() {
        if (
          (executionContext & (RenderContext | CommitContext)) !==
          NoContext
        ) {
          // We're inside React, so it's fine to read the actual time.
          return now()
        } // We're not inside React, so we may be in the middle of a browser event.

        if (currentEventTime !== NoTimestamp) {
          // Use the same start time for all updates until we enter React again.
          return currentEventTime
        } // This is the first update since React yielded. Compute a new start time.

        currentEventTime = now()
        return currentEventTime
      }
      function requestUpdateLane(fiber) {
        // Special cases
        var mode = fiber.mode

        if ((mode & BlockingMode) === NoMode) {
          return SyncLane
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1
            ? SyncLane
            : SyncBatchedLane
        } // The algorithm for assigning an update to a lane should be stable for all
        // updates at the same priority within the same event. To do this, the inputs
        // to the algorithm must be the same. For example, we use the `renderLanes`
        // to avoid choosing a lane that is already in the middle of rendering.
        //
        // However, the "included" lanes could be mutated in between updates in the
        // same event, like if you perform an update inside `flushSync`. Or any other
        // code path that might call `prepareFreshStack`.
        //
        // The trick we use is to cache the first of each of these inputs within an
        // event. Then reset the cached values once we can be sure the event is over.
        // Our heuristic for that is whenever we enter a concurrent work loop.
        //
        // We'll do the same for `currentEventPendingLanes` below.

        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes
        }

        var isTransition = requestCurrentTransition() !== NoTransition

        if (isTransition) {
          if (currentEventPendingLanes !== NoLanes) {
            currentEventPendingLanes =
              mostRecentlyUpdatedRoot !== null
                ? mostRecentlyUpdatedRoot.pendingLanes
                : NoLanes
          }

          return findTransitionLane(
            currentEventWipLanes,
            currentEventPendingLanes
          )
        } // TODO: Remove this dependency on the Scheduler priority.
        // To do that, we're replacing it with an update lane priority.

        var schedulerPriority = getCurrentPriorityLevel() // The old behavior was using the priority level of the Scheduler.
        // This couples React to the Scheduler internals, so we're replacing it
        // with the currentUpdateLanePriority above. As an example of how this
        // could be problematic, if we're not inside `Scheduler.runWithPriority`,
        // then we'll get the priority of the current running Scheduler task,
        // which is probably not what we want.

        var lane

        if (
          // TODO: Temporary. We're removing the concept of discrete updates.
          (executionContext & DiscreteEventContext) !== NoContext &&
          schedulerPriority === UserBlockingPriority$2
        ) {
          lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes)
        } else {
          var schedulerLanePriority =
            schedulerPriorityToLanePriority(schedulerPriority)

          lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes)
        }

        return lane
      }

      function requestRetryLane(fiber) {
        // This is a fork of `requestUpdateLane` designed specifically for Suspense
        // "retries" — a special update that attempts to flip a Suspense boundary
        // from its placeholder state to its primary/resolved state.
        // Special cases
        var mode = fiber.mode

        if ((mode & BlockingMode) === NoMode) {
          return SyncLane
        } else if ((mode & ConcurrentMode) === NoMode) {
          return getCurrentPriorityLevel() === ImmediatePriority$1
            ? SyncLane
            : SyncBatchedLane
        } // See `requestUpdateLane` for explanation of `currentEventWipLanes`

        if (currentEventWipLanes === NoLanes) {
          currentEventWipLanes = workInProgressRootIncludedLanes
        }

        return findRetryLane(currentEventWipLanes)
      }

      function scheduleUpdateOnFiber(fiber, lane, eventTime) {
        checkForNestedUpdates()
        warnAboutRenderPhaseUpdatesInDEV(fiber)
        var root = markUpdateLaneFromFiberToRoot(fiber, lane)

        if (root === null) {
          warnAboutUpdateOnUnmountedFiberInDEV(fiber)
          return null
        } // Mark that the root has a pending update.

        markRootUpdated(root, lane, eventTime)

        if (root === workInProgressRoot) {
          // Received an update to a tree that's in the middle of rendering. Mark
          // that there was an interleaved update work on this root. Unless the
          // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
          // phase update. In that case, we don't treat render phase updates as if
          // they were interleaved, for backwards compat reasons.
          {
            workInProgressRootUpdatedLanes = mergeLanes(
              workInProgressRootUpdatedLanes,
              lane
            )
          }

          if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
            // The root already suspended with a delay, which means this render
            // definitely won't finish. Since we have a new update, let's mark it as
            // suspended now, right before marking the incoming update. This has the
            // effect of interrupting the current render and switching to the update.
            // TODO: Make sure this doesn't override pings that happen while we've
            // already started rendering.
            markRootSuspended$1(root, workInProgressRootRenderLanes)
          }
        } // TODO: requestUpdateLanePriority also reads the priority. Pass the
        // priority as an argument to that function and this one.

        var priorityLevel = getCurrentPriorityLevel()

        if (lane === SyncLane) {
          if (
            // Check if we're inside unbatchedUpdates
            (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
            (executionContext & (RenderContext | CommitContext)) === NoContext
          ) {
            // Register pending interactions on the root to avoid losing traced interaction data.
            schedulePendingInteractions(root, lane) // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
            // root inside of batchedUpdates should be synchronous, but layout updates
            // should be deferred until the end of the batch.

            performSyncWorkOnRoot(root)
          } else {
            ensureRootIsScheduled(root, eventTime)
            schedulePendingInteractions(root, lane)

            if (executionContext === NoContext) {
              // Flush the synchronous work now, unless we're already working or inside
              // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
              // scheduleCallbackForFiber to preserve the ability to schedule a callback
              // without immediately flushing it. We only do this for user-initiated
              // updates, to preserve historical behavior of legacy mode.
              resetRenderTimer()
              flushSyncCallbackQueue()
            }
          }
        } else {
          // Schedule a discrete update but only if it's not Sync.
          if (
            (executionContext & DiscreteEventContext) !== NoContext && // Only updates at user-blocking priority or greater are considered
            // discrete, even inside a discrete event.
            (priorityLevel === UserBlockingPriority$2 ||
              priorityLevel === ImmediatePriority$1)
          ) {
            // This is the result of a discrete event. Track the lowest priority
            // discrete update per root so we can flush them early, if needed.
            if (rootsWithPendingDiscreteUpdates === null) {
              rootsWithPendingDiscreteUpdates = new Set([root])
            } else {
              rootsWithPendingDiscreteUpdates.add(root)
            }
          } // Schedule other updates after in case the callback is sync.

          ensureRootIsScheduled(root, eventTime)
          schedulePendingInteractions(root, lane)
        } // We use this when assigning a lane for a transition inside
        // `requestUpdateLane`. We assume it's the same as the root being updated,
        // since in the common case of a single root app it probably is. If it's not
        // the same root, then it's not a huge deal, we just might batch more stuff
        // together more than necessary.

        mostRecentlyUpdatedRoot = root
      } // This is split into a separate function so we can mark a fiber with pending
      // work without treating it as a typical update that originates from an event;
      // e.g. retrying a Suspense boundary isn't an update, but it does schedule work
      // on a fiber.

      function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
        // Update the source fiber's lanes
        sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane)
        var alternate = sourceFiber.alternate

        if (alternate !== null) {
          alternate.lanes = mergeLanes(alternate.lanes, lane)
        }

        {
          if (
            alternate === null &&
            (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags
          ) {
            warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber)
          }
        } // Walk the parent path to the root and update the child expiration time.

        var node = sourceFiber
        var parent = sourceFiber.return

        while (parent !== null) {
          parent.childLanes = mergeLanes(parent.childLanes, lane)
          alternate = parent.alternate

          if (alternate !== null) {
            alternate.childLanes = mergeLanes(alternate.childLanes, lane)
          } else {
            {
              if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber)
              }
            }
          }

          node = parent
          parent = parent.return
        }

        if (node.tag === HostRoot) {
          var root = node.stateNode
          return root
        } else {
          return null
        }
      } // Use this function to schedule a task for a root. There's only one task per
      // root; if a task was already scheduled, we'll check to make sure the priority
      // of the existing task is the same as the priority of the next level that the
      // root has work on. This function is called on every update, and right before
      // exiting a task.

      function ensureRootIsScheduled(root, currentTime) {
        var existingCallbackNode = root.callbackNode // Check if any lanes are being starved by other work. If so, mark them as
        // expired so we know to work on those next.

        markStarvedLanesAsExpired(root, currentTime) // Determine the next lanes to work on, and their priority.

        var nextLanes = getNextLanes(
          root,
          root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes
        ) // This returns the priority level computed during the `getNextLanes` call.

        var newCallbackPriority = returnNextLanesPriority()

        if (nextLanes === NoLanes) {
          // Special case: There's nothing to work on.
          if (existingCallbackNode !== null) {
            cancelCallback(existingCallbackNode)
            root.callbackNode = null
            root.callbackPriority = NoLanePriority
          }

          return
        } // Check if there's an existing task. We may be able to reuse it.

        if (existingCallbackNode !== null) {
          var existingCallbackPriority = root.callbackPriority

          if (existingCallbackPriority === newCallbackPriority) {
            // The priority hasn't changed. We can reuse the existing task. Exit.
            return
          } // The priority changed. Cancel the existing callback. We'll schedule a new
          // one below.

          cancelCallback(existingCallbackNode)
        } // Schedule a new callback.

        var newCallbackNode

        if (newCallbackPriority === SyncLanePriority) {
          // Special case: Sync React callbacks are scheduled on a special
          // internal queue
          newCallbackNode = scheduleSyncCallback(
            performSyncWorkOnRoot.bind(null, root)
          )
        } else if (newCallbackPriority === SyncBatchedLanePriority) {
          newCallbackNode = scheduleCallback(
            ImmediatePriority$1,
            performSyncWorkOnRoot.bind(null, root)
          )
        } else {
          var schedulerPriorityLevel =
            lanePriorityToSchedulerPriority(newCallbackPriority)
          newCallbackNode = scheduleCallback(
            schedulerPriorityLevel,
            performConcurrentWorkOnRoot.bind(null, root)
          )
        }

        root.callbackPriority = newCallbackPriority
        root.callbackNode = newCallbackNode
      } // This is the entry point for every concurrent task, i.e. anything that
      // goes through Scheduler.

      function performConcurrentWorkOnRoot(root) {
        // Since we know we're in a React event, we can clear the current
        // event time. The next update will compute a new event time.
        currentEventTime = NoTimestamp
        currentEventWipLanes = NoLanes
        currentEventPendingLanes = NoLanes

        if (
          !((executionContext & (RenderContext | CommitContext)) === NoContext)
        ) {
          {
            throw Error('Should not already be working.')
          }
        } // Flush any pending passive effects before deciding which lanes to work on,
        // in case they schedule additional work.

        var originalCallbackNode = root.callbackNode
        var didFlushPassiveEffects = flushPassiveEffects()

        if (didFlushPassiveEffects) {
          // Something in the passive effect phase may have canceled the current task.
          // Check if the task node for this root was changed.
          if (root.callbackNode !== originalCallbackNode) {
            // The current task was canceled. Exit. We don't need to call
            // `ensureRootIsScheduled` because the check above implies either that
            // there's a new task, or that there's no remaining work on this root.
            return null
          }
        } // Determine the next expiration time to work on, using the fields stored
        // on the root.

        var lanes = getNextLanes(
          root,
          root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes
        )

        if (lanes === NoLanes) {
          // Defensive coding. This is never expected to happen.
          return null
        }

        var exitStatus = renderRootConcurrent(root, lanes)

        if (
          includesSomeLane(
            workInProgressRootIncludedLanes,
            workInProgressRootUpdatedLanes
          )
        ) {
          // The render included lanes that were updated during the render phase.
          // For example, when unhiding a hidden tree, we include all the lanes
          // that were previously skipped when the tree was hidden. That set of
          // lanes is a superset of the lanes we started rendering with.
          //
          // So we'll throw out the current work and restart.
          prepareFreshStack(root, NoLanes)
        } else if (exitStatus !== RootIncomplete) {
          if (exitStatus === RootErrored) {
            executionContext |= RetryAfterError // If an error occurred during hydration,
            // discard server response and fall back to client side render.

            if (root.hydrate) {
              root.hydrate = false
              clearContainer(root.containerInfo)
            } // If something threw an error, try rendering one more time. We'll render
            // synchronously to block concurrent data mutations, and we'll includes
            // all pending updates are included. If it still fails after the second
            // attempt, we'll give up and commit the resulting tree.

            lanes = getLanesToRetrySynchronouslyOnError(root)

            if (lanes !== NoLanes) {
              exitStatus = renderRootSync(root, lanes)
            }
          }

          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError
            prepareFreshStack(root, NoLanes)
            markRootSuspended$1(root, lanes)
            ensureRootIsScheduled(root, now())
            throw fatalError
          } // We now have a consistent tree. The next step is either to commit it,
          // or, if something suspended, wait to commit it after a timeout.

          var finishedWork = root.current.alternate
          root.finishedWork = finishedWork
          root.finishedLanes = lanes
          finishConcurrentRender(root, exitStatus, lanes)
        }

        ensureRootIsScheduled(root, now())

        if (root.callbackNode === originalCallbackNode) {
          // The task node scheduled for this root is the same one that's
          // currently executed. Need to return a continuation.
          return performConcurrentWorkOnRoot.bind(null, root)
        }

        return null
      }

      function finishConcurrentRender(root, exitStatus, lanes) {
        switch (exitStatus) {
          case RootIncomplete:
          case RootFatalErrored: {
            {
              {
                throw Error('Root did not complete. This is a bug in React.')
              }
            }
          }
          // Flow knows about invariant, so it complains if I add a break
          // statement, but eslint doesn't know about invariant, so it complains
          // if I do. eslint-disable-next-line no-fallthrough

          case RootErrored: {
            // We should have already attempted to retry this tree. If we reached
            // this point, it errored again. Commit it.
            commitRoot(root)
            break
          }

          case RootSuspended: {
            markRootSuspended$1(root, lanes) // We have an acceptable loading state. We need to figure out if we
            // should immediately commit it or wait a bit.

            if (
              includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
              !shouldForceFlushFallbacksInDEV()
            ) {
              // This render only included retries, no updates. Throttle committing
              // retries so that we don't show too many loading states too quickly.
              var msUntilTimeout =
                globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now() // Don't bother with a very short suspense time.

              if (msUntilTimeout > 10) {
                var nextLanes = getNextLanes(root, NoLanes)

                if (nextLanes !== NoLanes) {
                  // There's additional work on this root.
                  break
                }

                var suspendedLanes = root.suspendedLanes

                if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                  // We should prefer to render the fallback of at the last
                  // suspended level. Ping the last suspended level to try
                  // rendering it again.
                  // FIXME: What if the suspended lanes are Idle? Should not restart.
                  requestEventTime()
                  markRootPinged(root, suspendedLanes)
                  break
                } // The render is suspended, it hasn't timed out, and there's no
                // lower priority work to do. Instead of committing the fallback
                // immediately, wait for more data to arrive.

                root.timeoutHandle = scheduleTimeout(
                  commitRoot.bind(null, root),
                  msUntilTimeout
                )
                break
              }
            } // The work expired. Commit immediately.

            commitRoot(root)
            break
          }

          case RootSuspendedWithDelay: {
            markRootSuspended$1(root, lanes)

            if (includesOnlyTransitions(lanes)) {
              // This is a transition, so we should exit without committing a
              // placeholder and without scheduling a timeout. Delay indefinitely
              // until we receive more data.
              break
            }

            {
              // This is not a transition, but we did trigger an avoided state.
              // Schedule a placeholder to display after a short delay, using the Just
              // Noticeable Difference.
              // TODO: Is the JND optimization worth the added complexity? If this is
              // the only reason we track the event time, then probably not.
              // Consider removing.
              var mostRecentEventTime = getMostRecentEventTime(root, lanes)
              var eventTimeMs = mostRecentEventTime
              var timeElapsedMs = now() - eventTimeMs

              var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs // Don't bother with a very short suspense time.

              if (_msUntilTimeout > 10) {
                // Instead of committing the fallback immediately, wait for more data
                // to arrive.
                root.timeoutHandle = scheduleTimeout(
                  commitRoot.bind(null, root),
                  _msUntilTimeout
                )
                break
              }
            } // Commit the placeholder.

            commitRoot(root)
            break
          }

          case RootCompleted: {
            // The work completed. Ready to commit.
            commitRoot(root)
            break
          }

          default: {
            {
              {
                throw Error('Unknown root exit status.')
              }
            }
          }
        }
      }

      function markRootSuspended$1(root, suspendedLanes) {
        // When suspending, we should always exclude lanes that were pinged or (more
        // rarely, since we try to avoid it) updated during the render phase.
        // TODO: Lol maybe there's a better way to factor this besides this
        // obnoxiously named function :)
        suspendedLanes = removeLanes(
          suspendedLanes,
          workInProgressRootPingedLanes
        )
        suspendedLanes = removeLanes(
          suspendedLanes,
          workInProgressRootUpdatedLanes
        )
        markRootSuspended(root, suspendedLanes)
      } // This is the entry point for synchronous tasks that don't go
      // through Scheduler

      function performSyncWorkOnRoot(root) {
        if (
          !((executionContext & (RenderContext | CommitContext)) === NoContext)
        ) {
          {
            throw Error('Should not already be working.')
          }
        }

        flushPassiveEffects()
        var lanes
        var exitStatus

        if (
          root === workInProgressRoot &&
          includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)
        ) {
          // There's a partial tree, and at least one of its lanes has expired. Finish
          // rendering it before rendering the rest of the expired work.
          lanes = workInProgressRootRenderLanes
          exitStatus = renderRootSync(root, lanes)

          if (
            includesSomeLane(
              workInProgressRootIncludedLanes,
              workInProgressRootUpdatedLanes
            )
          ) {
            // The render included lanes that were updated during the render phase.
            // For example, when unhiding a hidden tree, we include all the lanes
            // that were previously skipped when the tree was hidden. That set of
            // lanes is a superset of the lanes we started rendering with.
            //
            // Note that this only happens when part of the tree is rendered
            // concurrently. If the whole tree is rendered synchronously, then there
            // are no interleaved events.
            lanes = getNextLanes(root, lanes)
            exitStatus = renderRootSync(root, lanes)
          }
        } else {
          lanes = getNextLanes(root, NoLanes)
          exitStatus = renderRootSync(root, lanes)
        }

        if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
          executionContext |= RetryAfterError // If an error occurred during hydration,
          // discard server response and fall back to client side render.

          if (root.hydrate) {
            root.hydrate = false
            clearContainer(root.containerInfo)
          } // If something threw an error, try rendering one more time. We'll render
          // synchronously to block concurrent data mutations, and we'll includes
          // all pending updates are included. If it still fails after the second
          // attempt, we'll give up and commit the resulting tree.

          lanes = getLanesToRetrySynchronouslyOnError(root)

          if (lanes !== NoLanes) {
            exitStatus = renderRootSync(root, lanes)
          }
        }

        if (exitStatus === RootFatalErrored) {
          var fatalError = workInProgressRootFatalError
          prepareFreshStack(root, NoLanes)
          markRootSuspended$1(root, lanes)
          ensureRootIsScheduled(root, now())
          throw fatalError
        } // We now have a consistent tree. Because this is a sync render, we
        // will commit it even if something suspended.

        var finishedWork = root.current.alternate
        root.finishedWork = finishedWork
        root.finishedLanes = lanes
        commitRoot(root) // Before exiting, make sure there's a callback scheduled for the next
        // pending level.

        ensureRootIsScheduled(root, now())
        return null
      }
      function flushDiscreteUpdates() {
        // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
        // However, `act` uses `batchedUpdates`, so there's no way to distinguish
        // those two cases. Need to fix this before exposing flushDiscreteUpdates
        // as a public API.
        if (
          (executionContext &
            (BatchedContext | RenderContext | CommitContext)) !==
          NoContext
        ) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              error(
                'unstable_flushDiscreteUpdates: Cannot flush updates when React is ' +
                  'already rendering.'
              )
            }
          } // We're already rendering, so we can't synchronously flush pending work.
          // This is probably a nested event dispatch triggered by a lifecycle/effect,
          // like `el.focus()`. Exit.

          return
        }

        flushPendingDiscreteUpdates() // If the discrete updates scheduled passive effects, flush them now so that
        // they fire before the next serial event.

        flushPassiveEffects()
      }

      function flushPendingDiscreteUpdates() {
        if (rootsWithPendingDiscreteUpdates !== null) {
          // For each root with pending discrete updates, schedule a callback to
          // immediately flush them.
          var roots = rootsWithPendingDiscreteUpdates
          rootsWithPendingDiscreteUpdates = null
          roots.forEach(function (root) {
            markDiscreteUpdatesExpired(root)
            ensureRootIsScheduled(root, now())
          })
        } // Now flush the immediate queue.

        flushSyncCallbackQueue()
      }

      function batchedUpdates$1(fn, a) {
        var prevExecutionContext = executionContext
        executionContext |= BatchedContext

        try {
          return fn(a)
        } finally {
          executionContext = prevExecutionContext

          if (executionContext === NoContext) {
            // Flush the immediate callbacks that were scheduled during this batch
            resetRenderTimer()
            flushSyncCallbackQueue()
          }
        }
      }
      function batchedEventUpdates$1(fn, a) {
        var prevExecutionContext = executionContext
        executionContext |= EventContext

        try {
          return fn(a)
        } finally {
          executionContext = prevExecutionContext

          if (executionContext === NoContext) {
            // Flush the immediate callbacks that were scheduled during this batch
            resetRenderTimer()
            flushSyncCallbackQueue()
          }
        }
      }
      function discreteUpdates$1(fn, a, b, c, d) {
        var prevExecutionContext = executionContext
        executionContext |= DiscreteEventContext

        {
          try {
            return runWithPriority$1(
              UserBlockingPriority$2,
              fn.bind(null, a, b, c, d)
            )
          } finally {
            executionContext = prevExecutionContext

            if (executionContext === NoContext) {
              // Flush the immediate callbacks that were scheduled during this batch
              resetRenderTimer()
              flushSyncCallbackQueue()
            }
          }
        }
      }
      function unbatchedUpdates(fn, a) {
        var prevExecutionContext = executionContext
        executionContext &= ~BatchedContext
        executionContext |= LegacyUnbatchedContext

        try {
          return fn(a)
        } finally {
          executionContext = prevExecutionContext

          if (executionContext === NoContext) {
            // Flush the immediate callbacks that were scheduled during this batch
            resetRenderTimer()
            flushSyncCallbackQueue()
          }
        }
      }
      function flushSync(fn, a) {
        var prevExecutionContext = executionContext

        if (
          (prevExecutionContext & (RenderContext | CommitContext)) !==
          NoContext
        ) {
          {
            error(
              'flushSync was called from inside a lifecycle method. React cannot ' +
                'flush when React is already rendering. Consider moving this call to ' +
                'a scheduler task or micro task.'
            )
          }

          return fn(a)
        }

        executionContext |= BatchedContext

        {
          try {
            if (fn) {
              return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a))
            } else {
              return undefined
            }
          } finally {
            executionContext = prevExecutionContext // Flush the immediate callbacks that were scheduled during this batch.
            // Note that this will happen even if batchedUpdates is higher up
            // the stack.

            flushSyncCallbackQueue()
          }
        }
      }
      function pushRenderLanes(fiber, lanes) {
        push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber)
        subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes)
        workInProgressRootIncludedLanes = mergeLanes(
          workInProgressRootIncludedLanes,
          lanes
        )
      }
      function popRenderLanes(fiber) {
        subtreeRenderLanes = subtreeRenderLanesCursor.current
        pop(subtreeRenderLanesCursor, fiber)
      }

      function prepareFreshStack(root, lanes) {
        root.finishedWork = null
        root.finishedLanes = NoLanes
        var timeoutHandle = root.timeoutHandle

        if (timeoutHandle !== noTimeout) {
          // The root previous suspended and scheduled a timeout to commit a fallback
          // state. Now that we have additional work, cancel the timeout.
          root.timeoutHandle = noTimeout // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

          cancelTimeout(timeoutHandle)
        }

        if (workInProgress !== null) {
          var interruptedWork = workInProgress.return

          while (interruptedWork !== null) {
            unwindInterruptedWork(interruptedWork)
            interruptedWork = interruptedWork.return
          }
        }

        workInProgressRoot = root
        workInProgress = createWorkInProgress(root.current, null)
        workInProgressRootRenderLanes =
          subtreeRenderLanes =
          workInProgressRootIncludedLanes =
            lanes
        workInProgressRootExitStatus = RootIncomplete
        workInProgressRootFatalError = null
        workInProgressRootSkippedLanes = NoLanes
        workInProgressRootUpdatedLanes = NoLanes
        workInProgressRootPingedLanes = NoLanes

        {
          spawnedWorkDuringRender = null
        }

        {
          ReactStrictModeWarnings.discardPendingWarnings()
        }
      }

      function handleError(root, thrownValue) {
        do {
          var erroredWork = workInProgress

          try {
            // Reset module-level state that was set during the render phase.
            resetContextDependencies()
            resetHooksAfterThrow()
            resetCurrentFiber() // TODO: I found and added this missing line while investigating a
            // separate issue. Write a regression test using string refs.

            ReactCurrentOwner$2.current = null

            if (erroredWork === null || erroredWork.return === null) {
              // Expected to be working on a non-root fiber. This is a fatal error
              // because there's no ancestor that can handle it; the root is
              // supposed to capture all errors that weren't caught by an error
              // boundary.
              workInProgressRootExitStatus = RootFatalErrored
              workInProgressRootFatalError = thrownValue // Set `workInProgress` to null. This represents advancing to the next
              // sibling, or the parent if there are no siblings. But since the root
              // has no siblings nor a parent, we set it to null. Usually this is
              // handled by `completeUnitOfWork` or `unwindWork`, but since we're
              // intentionally not calling those, we need set it here.
              // TODO: Consider calling `unwindWork` to pop the contexts.

              workInProgress = null
              return
            }

            if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
              // Record the time spent rendering before an error was thrown. This
              // avoids inaccurate Profiler durations in the case of a
              // suspended render.
              stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true)
            }

            throwException(
              root,
              erroredWork.return,
              erroredWork,
              thrownValue,
              workInProgressRootRenderLanes
            )
            completeUnitOfWork(erroredWork)
          } catch (yetAnotherThrownValue) {
            // Something in the return path also threw.
            thrownValue = yetAnotherThrownValue

            if (workInProgress === erroredWork && erroredWork !== null) {
              // If this boundary has already errored, then we had trouble processing
              // the error. Bubble it to the next boundary.
              erroredWork = erroredWork.return
              workInProgress = erroredWork
            } else {
              erroredWork = workInProgress
            }

            continue
          } // Return to the normal work loop.

          return
        } while (true)
      }

      function pushDispatcher() {
        var prevDispatcher = ReactCurrentDispatcher$2.current
        ReactCurrentDispatcher$2.current = ContextOnlyDispatcher

        if (prevDispatcher === null) {
          // The React isomorphic package does not include a default dispatcher.
          // Instead the first renderer will lazily attach one, in order to give
          // nicer error messages.
          return ContextOnlyDispatcher
        } else {
          return prevDispatcher
        }
      }

      function popDispatcher(prevDispatcher) {
        ReactCurrentDispatcher$2.current = prevDispatcher
      }

      function pushInteractions(root) {
        {
          var prevInteractions = tracing.__interactionsRef.current
          tracing.__interactionsRef.current = root.memoizedInteractions
          return prevInteractions
        }
      }

      function popInteractions(prevInteractions) {
        {
          tracing.__interactionsRef.current = prevInteractions
        }
      }

      function markCommitTimeOfFallback() {
        globalMostRecentFallbackTime = now()
      }
      function markSkippedUpdateLanes(lane) {
        workInProgressRootSkippedLanes = mergeLanes(
          lane,
          workInProgressRootSkippedLanes
        )
      }
      function renderDidSuspend() {
        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootSuspended
        }
      }
      function renderDidSuspendDelayIfPossible() {
        if (
          workInProgressRootExitStatus === RootIncomplete ||
          workInProgressRootExitStatus === RootSuspended
        ) {
          workInProgressRootExitStatus = RootSuspendedWithDelay
        } // Check if there are updates that we skipped tree that might have unblocked
        // this render.

        if (
          workInProgressRoot !== null &&
          (includesNonIdleWork(workInProgressRootSkippedLanes) ||
            includesNonIdleWork(workInProgressRootUpdatedLanes))
        ) {
          // Mark the current render as suspended so that we switch to working on
          // the updates that were skipped. Usually we only suspend at the end of
          // the render phase.
          // TODO: We should probably always mark the root as suspended immediately
          // (inside this function), since by suspending at the end of the render
          // phase introduces a potential mistake where we suspend lanes that were
          // pinged or updated while we were rendering.
          markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes)
        }
      }
      function renderDidError() {
        if (workInProgressRootExitStatus !== RootCompleted) {
          workInProgressRootExitStatus = RootErrored
        }
      } // Called during render to determine if anything has suspended.
      // Returns false if we're not sure.

      function renderHasNotSuspendedYet() {
        // If something errored or completed, we can't really be sure,
        // so those are false.
        return workInProgressRootExitStatus === RootIncomplete
      }

      function renderRootSync(root, lanes) {
        var prevExecutionContext = executionContext
        executionContext |= RenderContext
        var prevDispatcher = pushDispatcher() // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.

        if (
          workInProgressRoot !== root ||
          workInProgressRootRenderLanes !== lanes
        ) {
          prepareFreshStack(root, lanes)
          startWorkOnPendingInteractions(root, lanes)
        }

        var prevInteractions = pushInteractions(root)

        do {
          try {
            workLoopSync()
            break
          } catch (thrownValue) {
            handleError(root, thrownValue)
          }
        } while (true)

        resetContextDependencies()

        {
          popInteractions(prevInteractions)
        }

        executionContext = prevExecutionContext
        popDispatcher(prevDispatcher)

        if (workInProgress !== null) {
          // This is a sync render, so we should have finished the whole tree.
          {
            {
              throw Error(
                'Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.'
              )
            }
          }
        }

        workInProgressRoot = null
        workInProgressRootRenderLanes = NoLanes
        return workInProgressRootExitStatus
      } // The work loop is an extremely hot path. Tell Closure not to inline it.

      /** @noinline */

      function workLoopSync() {
        // Already timed out, so perform work without checking if we need to yield.
        while (workInProgress !== null) {
          performUnitOfWork(workInProgress)
        }
      }

      function renderRootConcurrent(root, lanes) {
        var prevExecutionContext = executionContext
        executionContext |= RenderContext
        var prevDispatcher = pushDispatcher() // If the root or lanes have changed, throw out the existing stack
        // and prepare a fresh one. Otherwise we'll continue where we left off.

        if (
          workInProgressRoot !== root ||
          workInProgressRootRenderLanes !== lanes
        ) {
          resetRenderTimer()
          prepareFreshStack(root, lanes)
          startWorkOnPendingInteractions(root, lanes)
        }

        var prevInteractions = pushInteractions(root)

        do {
          try {
            workLoopConcurrent()
            break
          } catch (thrownValue) {
            handleError(root, thrownValue)
          }
        } while (true)

        resetContextDependencies()

        {
          popInteractions(prevInteractions)
        }

        popDispatcher(prevDispatcher)
        executionContext = prevExecutionContext

        if (workInProgress !== null) {
          return RootIncomplete
        } else {
          workInProgressRoot = null
          workInProgressRootRenderLanes = NoLanes // Return the final exit status.

          return workInProgressRootExitStatus
        }
      }
      /** @noinline */

      function workLoopConcurrent() {
        // Perform work until Scheduler asks us to yield
        while (workInProgress !== null && !shouldYield()) {
          performUnitOfWork(workInProgress)
        }
      }

      function performUnitOfWork(unitOfWork) {
        // The current, flushed, state of this fiber is the alternate. Ideally
        // nothing should rely on this, but relying on it here means that we don't
        // need an additional field on the work in progress.
        var current = unitOfWork.alternate
        setCurrentFiber(unitOfWork)
        var next

        if ((unitOfWork.mode & ProfileMode) !== NoMode) {
          startProfilerTimer(unitOfWork)
          next = beginWork$1(current, unitOfWork, subtreeRenderLanes)
          stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true)
        } else {
          next = beginWork$1(current, unitOfWork, subtreeRenderLanes)
        }

        resetCurrentFiber()
        unitOfWork.memoizedProps = unitOfWork.pendingProps

        if (next === null) {
          // If this doesn't spawn new work, complete the current work.
          completeUnitOfWork(unitOfWork)
        } else {
          workInProgress = next
        }

        ReactCurrentOwner$2.current = null
      }

      function completeUnitOfWork(unitOfWork) {
        // Attempt to complete the current unit of work, then move to the next
        // sibling. If there are no more siblings, return to the parent fiber.
        var completedWork = unitOfWork

        do {
          // The current, flushed, state of this fiber is the alternate. Ideally
          // nothing should rely on this, but relying on it here means that we don't
          // need an additional field on the work in progress.
          var current = completedWork.alternate
          var returnFiber = completedWork.return // Check if the work completed or if something threw.

          if ((completedWork.flags & Incomplete) === NoFlags) {
            setCurrentFiber(completedWork)
            var next = void 0

            if ((completedWork.mode & ProfileMode) === NoMode) {
              next = completeWork(current, completedWork, subtreeRenderLanes)
            } else {
              startProfilerTimer(completedWork)
              next = completeWork(current, completedWork, subtreeRenderLanes) // Update render duration assuming we didn't error.

              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false)
            }

            resetCurrentFiber()

            if (next !== null) {
              // Completing this fiber spawned new work. Work on that next.
              workInProgress = next
              return
            }

            resetChildLanes(completedWork)

            if (
              returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
              (returnFiber.flags & Incomplete) === NoFlags
            ) {
              // Append all the effects of the subtree and this fiber onto the effect
              // list of the parent. The completion order of the children affects the
              // side-effect order.
              if (returnFiber.firstEffect === null) {
                returnFiber.firstEffect = completedWork.firstEffect
              }

              if (completedWork.lastEffect !== null) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork.firstEffect
                }

                returnFiber.lastEffect = completedWork.lastEffect
              } // If this fiber had side-effects, we append it AFTER the children's
              // side-effects. We can perform certain side-effects earlier if needed,
              // by doing multiple passes over the effect list. We don't want to
              // schedule our own side-effect on our own list because if end up
              // reusing children we'll schedule this effect onto itself since we're
              // at the end.

              var flags = completedWork.flags // Skip both NoWork and PerformedWork tags when creating the effect
              // list. PerformedWork effect is read by React DevTools but shouldn't be
              // committed.

              if (flags > PerformedWork) {
                if (returnFiber.lastEffect !== null) {
                  returnFiber.lastEffect.nextEffect = completedWork
                } else {
                  returnFiber.firstEffect = completedWork
                }

                returnFiber.lastEffect = completedWork
              }
            }
          } else {
            // This fiber did not complete because something threw. Pop values off
            // the stack without entering the complete phase. If this is a boundary,
            // capture values if possible.
            var _next = unwindWork(completedWork) // Because this fiber did not complete, don't reset its expiration time.

            if (_next !== null) {
              // If completing this work spawned new work, do that next. We'll come
              // back here again.
              // Since we're restarting, remove anything that is not a host effect
              // from the effect tag.
              _next.flags &= HostEffectMask
              workInProgress = _next
              return
            }

            if ((completedWork.mode & ProfileMode) !== NoMode) {
              // Record the render duration for the fiber that errored.
              stopProfilerTimerIfRunningAndRecordDelta(completedWork, false) // Include the time spent working on failed children before continuing.

              var actualDuration = completedWork.actualDuration
              var child = completedWork.child

              while (child !== null) {
                actualDuration += child.actualDuration
                child = child.sibling
              }

              completedWork.actualDuration = actualDuration
            }

            if (returnFiber !== null) {
              // Mark the parent fiber as incomplete and clear its effect list.
              returnFiber.firstEffect = returnFiber.lastEffect = null
              returnFiber.flags |= Incomplete
            }
          }

          var siblingFiber = completedWork.sibling

          if (siblingFiber !== null) {
            // If there is more work to do in this returnFiber, do that next.
            workInProgress = siblingFiber
            return
          } // Otherwise, return to the parent

          completedWork = returnFiber // Update the next thing we're working on in case something throws.

          workInProgress = completedWork
        } while (completedWork !== null) // We've reached the root.

        if (workInProgressRootExitStatus === RootIncomplete) {
          workInProgressRootExitStatus = RootCompleted
        }
      }

      function resetChildLanes(completedWork) {
        if (
          // TODO: Move this check out of the hot path by moving `resetChildLanes`
          // to switch statement in `completeWork`.
          (completedWork.tag === LegacyHiddenComponent ||
            completedWork.tag === OffscreenComponent) &&
          completedWork.memoizedState !== null &&
          !includesSomeLane(subtreeRenderLanes, OffscreenLane) &&
          (completedWork.mode & ConcurrentMode) !== NoLanes
        ) {
          // The children of this component are hidden. Don't bubble their
          // expiration times.
          return
        }

        var newChildLanes = NoLanes // Bubble up the earliest expiration time.

        if ((completedWork.mode & ProfileMode) !== NoMode) {
          // In profiling mode, resetChildExpirationTime is also used to reset
          // profiler durations.
          var actualDuration = completedWork.actualDuration
          var treeBaseDuration = completedWork.selfBaseDuration // When a fiber is cloned, its actualDuration is reset to 0. This value will
          // only be updated if work is done on the fiber (i.e. it doesn't bailout).
          // When work is done, it should bubble to the parent's actualDuration. If
          // the fiber has not been cloned though, (meaning no work was done), then
          // this value will reflect the amount of time spent working on a previous
          // render. In that case it should not bubble. We determine whether it was
          // cloned by comparing the child pointer.

          var shouldBubbleActualDurations =
            completedWork.alternate === null ||
            completedWork.child !== completedWork.alternate.child
          var child = completedWork.child

          while (child !== null) {
            newChildLanes = mergeLanes(
              newChildLanes,
              mergeLanes(child.lanes, child.childLanes)
            )

            if (shouldBubbleActualDurations) {
              actualDuration += child.actualDuration
            }

            treeBaseDuration += child.treeBaseDuration
            child = child.sibling
          }

          var isTimedOutSuspense =
            completedWork.tag === SuspenseComponent &&
            completedWork.memoizedState !== null

          if (isTimedOutSuspense) {
            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
            var primaryChildFragment = completedWork.child

            if (primaryChildFragment !== null) {
              treeBaseDuration -= primaryChildFragment.treeBaseDuration
            }
          }

          completedWork.actualDuration = actualDuration
          completedWork.treeBaseDuration = treeBaseDuration
        } else {
          var _child = completedWork.child

          while (_child !== null) {
            newChildLanes = mergeLanes(
              newChildLanes,
              mergeLanes(_child.lanes, _child.childLanes)
            )
            _child = _child.sibling
          }
        }

        completedWork.childLanes = newChildLanes
      }

      function commitRoot(root) {
        var renderPriorityLevel = getCurrentPriorityLevel()
        runWithPriority$1(
          ImmediatePriority$1,
          commitRootImpl.bind(null, root, renderPriorityLevel)
        )
        return null
      }

      function commitRootImpl(root, renderPriorityLevel) {
        do {
          // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
          // means `flushPassiveEffects` will sometimes result in additional
          // passive effects. So we need to keep flushing in a loop until there are
          // no more pending effects.
          // TODO: Might be better if `flushPassiveEffects` did not automatically
          // flush synchronous work at the end, to avoid factoring hazards like this.
          flushPassiveEffects()
        } while (rootWithPendingPassiveEffects !== null)

        flushRenderPhaseStrictModeWarningsInDEV()

        if (
          !((executionContext & (RenderContext | CommitContext)) === NoContext)
        ) {
          {
            throw Error('Should not already be working.')
          }
        }

        var finishedWork = root.finishedWork
        var lanes = root.finishedLanes

        if (finishedWork === null) {
          return null
        }

        root.finishedWork = null
        root.finishedLanes = NoLanes

        if (!(finishedWork !== root.current)) {
          {
            throw Error(
              'Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.'
            )
          }
        } // commitRoot never returns a continuation; it always finishes synchronously.
        // So we can clear these now to allow a new callback to be scheduled.

        root.callbackNode = null // Update the first and last pending times on this root. The new first
        // pending time is whatever is left on the root fiber.

        var remainingLanes = mergeLanes(
          finishedWork.lanes,
          finishedWork.childLanes
        )
        markRootFinished(root, remainingLanes) // Clear already finished discrete updates in case that a later call of
        // `flushDiscreteUpdates` starts a useless render pass which may cancels
        // a scheduled timeout.

        if (rootsWithPendingDiscreteUpdates !== null) {
          if (
            !hasDiscreteLanes(remainingLanes) &&
            rootsWithPendingDiscreteUpdates.has(root)
          ) {
            rootsWithPendingDiscreteUpdates.delete(root)
          }
        }

        if (root === workInProgressRoot) {
          // We can reset these now that they are finished.
          workInProgressRoot = null
          workInProgress = null
          workInProgressRootRenderLanes = NoLanes
        } // Get the list of effects.

        var firstEffect

        if (finishedWork.flags > PerformedWork) {
          // A fiber's effect list consists only of its children, not itself. So if
          // the root has an effect, we need to add it to the end of the list. The
          // resulting list is the set that would belong to the root's parent, if it
          // had one; that is, all the effects in the tree including the root.
          if (finishedWork.lastEffect !== null) {
            finishedWork.lastEffect.nextEffect = finishedWork
            firstEffect = finishedWork.firstEffect
          } else {
            firstEffect = finishedWork
          }
        } else {
          // There is no effect on the root.
          firstEffect = finishedWork.firstEffect
        }

        if (firstEffect !== null) {
          var prevExecutionContext = executionContext
          executionContext |= CommitContext
          var prevInteractions = pushInteractions(root) // Reset this to null before calling lifecycles

          ReactCurrentOwner$2.current = null // The commit phase is broken into several sub-phases. We do a separate pass
          // of the effect list for each phase: all mutation effects come before all
          // layout effects, and so on.
          // The first phase a "before mutation" phase. We use this phase to read the
          // state of the host tree right before we mutate it. This is where
          // getSnapshotBeforeUpdate is called.

          focusedInstanceHandle = prepareForCommit(root.containerInfo)
          shouldFireAfterActiveInstanceBlur = false
          nextEffect = firstEffect

          do {
            {
              invokeGuardedCallback(null, commitBeforeMutationEffects, null)

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error('Should be working on an effect.')
                  }
                }

                var error = clearCaughtError()
                captureCommitPhaseError(nextEffect, error)
                nextEffect = nextEffect.nextEffect
              }
            }
          } while (nextEffect !== null) // We no longer need to track the active instance fiber

          focusedInstanceHandle = null

          {
            // Mark the current commit time to be shared by all Profilers in this
            // batch. This enables them to be grouped later.
            recordCommitTime()
          } // The next phase is the mutation phase, where we mutate the host tree.

          nextEffect = firstEffect

          do {
            {
              invokeGuardedCallback(
                null,
                commitMutationEffects,
                null,
                root,
                renderPriorityLevel
              )

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error('Should be working on an effect.')
                  }
                }

                var _error = clearCaughtError()

                captureCommitPhaseError(nextEffect, _error)
                nextEffect = nextEffect.nextEffect
              }
            }
          } while (nextEffect !== null)

          resetAfterCommit(root.containerInfo) // The work-in-progress tree is now the current tree. This must come after
          // the mutation phase, so that the previous tree is still current during
          // componentWillUnmount, but before the layout phase, so that the finished
          // work is current during componentDidMount/Update.

          root.current = finishedWork // The next phase is the layout phase, where we call effects that read
          // the host tree after it's been mutated. The idiomatic use case for this is
          // layout, but class component lifecycles also fire here for legacy reasons.

          nextEffect = firstEffect

          do {
            {
              invokeGuardedCallback(
                null,
                commitLayoutEffects,
                null,
                root,
                lanes
              )

              if (hasCaughtError()) {
                if (!(nextEffect !== null)) {
                  {
                    throw Error('Should be working on an effect.')
                  }
                }

                var _error2 = clearCaughtError()

                captureCommitPhaseError(nextEffect, _error2)
                nextEffect = nextEffect.nextEffect
              }
            }
          } while (nextEffect !== null)

          nextEffect = null // Tell Scheduler to yield at the end of the frame, so the browser has an
          // opportunity to paint.

          requestPaint()

          {
            popInteractions(prevInteractions)
          }

          executionContext = prevExecutionContext
        } else {
          // No effects.
          root.current = finishedWork // Measure these anyway so the flamegraph explicitly shows that there were
          // no effects.
          // TODO: Maybe there's a better way to report this.

          {
            recordCommitTime()
          }
        }

        var rootDidHavePassiveEffects = rootDoesHavePassiveEffects

        if (rootDoesHavePassiveEffects) {
          // This commit has passive effects. Stash a reference to them. But don't
          // schedule a callback until after flushing layout work.
          rootDoesHavePassiveEffects = false
          rootWithPendingPassiveEffects = root
          pendingPassiveEffectsLanes = lanes
          pendingPassiveEffectsRenderPriority = renderPriorityLevel
        } else {
          // We are done with the effect chain at this point so let's clear the
          // nextEffect pointers to assist with GC. If we have passive effects, we'll
          // clear this in flushPassiveEffects.
          nextEffect = firstEffect

          while (nextEffect !== null) {
            var nextNextEffect = nextEffect.nextEffect
            nextEffect.nextEffect = null

            if (nextEffect.flags & Deletion) {
              detachFiberAfterEffects(nextEffect)
            }

            nextEffect = nextNextEffect
          }
        } // Read this again, since an effect might have updated it

        remainingLanes = root.pendingLanes // Check if there's remaining work on this root

        if (remainingLanes !== NoLanes) {
          {
            if (spawnedWorkDuringRender !== null) {
              var expirationTimes = spawnedWorkDuringRender
              spawnedWorkDuringRender = null

              for (var i = 0; i < expirationTimes.length; i++) {
                scheduleInteractions(
                  root,
                  expirationTimes[i],
                  root.memoizedInteractions
                )
              }
            }

            schedulePendingInteractions(root, remainingLanes)
          }
        } else {
          // If there's no remaining work, we can clear the set of already failed
          // error boundaries.
          legacyErrorBoundariesThatAlreadyFailed = null
        }

        {
          if (!rootDidHavePassiveEffects) {
            // If there are no passive effects, then we can complete the pending interactions.
            // Otherwise, we'll wait until after the passive effects are flushed.
            // Wait to do this until after remaining work has been scheduled,
            // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
            finishPendingInteractions(root, lanes)
          }
        }

        if (remainingLanes === SyncLane) {
          // Count the number of times the root synchronously re-renders without
          // finishing. If there are too many, it indicates an infinite update loop.
          if (root === rootWithNestedUpdates) {
            nestedUpdateCount++
          } else {
            nestedUpdateCount = 0
            rootWithNestedUpdates = root
          }
        } else {
          nestedUpdateCount = 0
        }

        onCommitRoot(finishedWork.stateNode, renderPriorityLevel)

        {
          onCommitRoot$1()
        } // Always call this before exiting `commitRoot`, to ensure that any
        // additional work on this root is scheduled.

        ensureRootIsScheduled(root, now())

        if (hasUncaughtError) {
          hasUncaughtError = false
          var _error3 = firstUncaughtError
          firstUncaughtError = null
          throw _error3
        }

        if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
          // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
          // synchronously, but layout updates should be deferred until the end
          // of the batch.

          return null
        } // If layout work was scheduled, flush it now.

        flushSyncCallbackQueue()

        return null
      }

      function commitBeforeMutationEffects() {
        while (nextEffect !== null) {
          var current = nextEffect.alternate

          if (
            !shouldFireAfterActiveInstanceBlur &&
            focusedInstanceHandle !== null
          ) {
            if ((nextEffect.flags & Deletion) !== NoFlags) {
              if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
                shouldFireAfterActiveInstanceBlur = true
              }
            } else {
              // TODO: Move this out of the hot path using a dedicated effect tag.
              if (
                nextEffect.tag === SuspenseComponent &&
                isSuspenseBoundaryBeingHidden(current, nextEffect) &&
                doesFiberContain(nextEffect, focusedInstanceHandle)
              ) {
                shouldFireAfterActiveInstanceBlur = true
              }
            }
          }

          var flags = nextEffect.flags

          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(nextEffect)
            commitBeforeMutationLifeCycles(current, nextEffect)
            resetCurrentFiber()
          }

          if ((flags & Passive) !== NoFlags) {
            // If there are passive effects, schedule a callback to flush at
            // the earliest opportunity.
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true
              scheduleCallback(NormalPriority$1, function () {
                flushPassiveEffects()
                return null
              })
            }
          }

          nextEffect = nextEffect.nextEffect
        }
      }

      function commitMutationEffects(root, renderPriorityLevel) {
        // TODO: Should probably move the bulk of this function to commitWork.
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect)
          var flags = nextEffect.flags

          if (flags & ContentReset) {
            commitResetTextContent(nextEffect)
          }

          if (flags & Ref) {
            var current = nextEffect.alternate

            if (current !== null) {
              commitDetachRef(current)
            }
          } // The following switch statement is only concerned about placement,
          // updates, and deletions. To avoid needing to add a case for every possible
          // bitmap value, we remove the secondary effects from the effect tag and
          // switch on that value.

          var primaryFlags = flags & (Placement | Update | Deletion | Hydrating)

          switch (primaryFlags) {
            case Placement: {
              commitPlacement(nextEffect) // Clear the "placement" from effect tag so that we know that this is
              // inserted, before any life-cycles like componentDidMount gets called.
              // TODO: findDOMNode doesn't rely on this any more but isMounted does
              // and isMounted is deprecated anyway so we should be able to kill this.

              nextEffect.flags &= ~Placement
              break
            }

            case PlacementAndUpdate: {
              // Placement
              commitPlacement(nextEffect) // Clear the "placement" from effect tag so that we know that this is
              // inserted, before any life-cycles like componentDidMount gets called.

              nextEffect.flags &= ~Placement // Update

              var _current = nextEffect.alternate
              commitWork(_current, nextEffect)
              break
            }

            case Hydrating: {
              nextEffect.flags &= ~Hydrating
              break
            }

            case HydratingAndUpdate: {
              nextEffect.flags &= ~Hydrating // Update

              var _current2 = nextEffect.alternate
              commitWork(_current2, nextEffect)
              break
            }

            case Update: {
              var _current3 = nextEffect.alternate
              commitWork(_current3, nextEffect)
              break
            }

            case Deletion: {
              commitDeletion(root, nextEffect)
              break
            }
          }

          resetCurrentFiber()
          nextEffect = nextEffect.nextEffect
        }
      }

      function commitLayoutEffects(root, committedLanes) {
        while (nextEffect !== null) {
          setCurrentFiber(nextEffect)
          var flags = nextEffect.flags

          if (flags & (Update | Callback)) {
            var current = nextEffect.alternate
            commitLifeCycles(root, current, nextEffect)
          }

          {
            if (flags & Ref) {
              commitAttachRef(nextEffect)
            }
          }

          resetCurrentFiber()
          nextEffect = nextEffect.nextEffect
        }
      }

      function flushPassiveEffects() {
        // Returns whether passive effects were flushed.
        if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
          var priorityLevel =
            pendingPassiveEffectsRenderPriority > NormalPriority$1
              ? NormalPriority$1
              : pendingPassiveEffectsRenderPriority
          pendingPassiveEffectsRenderPriority = NoPriority$1

          {
            return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl)
          }
        }

        return false
      }
      function enqueuePendingPassiveHookEffectMount(fiber, effect) {
        pendingPassiveHookEffectsMount.push(effect, fiber)

        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true
          scheduleCallback(NormalPriority$1, function () {
            flushPassiveEffects()
            return null
          })
        }
      }
      function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
        pendingPassiveHookEffectsUnmount.push(effect, fiber)

        {
          fiber.flags |= PassiveUnmountPendingDev
          var alternate = fiber.alternate

          if (alternate !== null) {
            alternate.flags |= PassiveUnmountPendingDev
          }
        }

        if (!rootDoesHavePassiveEffects) {
          rootDoesHavePassiveEffects = true
          scheduleCallback(NormalPriority$1, function () {
            flushPassiveEffects()
            return null
          })
        }
      }

      function invokePassiveEffectCreate(effect) {
        var create = effect.create
        effect.destroy = create()
      }

      function flushPassiveEffectsImpl() {
        if (rootWithPendingPassiveEffects === null) {
          return false
        }

        var root = rootWithPendingPassiveEffects
        var lanes = pendingPassiveEffectsLanes
        rootWithPendingPassiveEffects = null
        pendingPassiveEffectsLanes = NoLanes

        if (
          !((executionContext & (RenderContext | CommitContext)) === NoContext)
        ) {
          {
            throw Error('Cannot flush passive effects while already rendering.')
          }
        }

        {
          isFlushingPassiveEffects = true
        }

        var prevExecutionContext = executionContext
        executionContext |= CommitContext
        var prevInteractions = pushInteractions(root) // It's important that ALL pending passive effect destroy functions are called
        // before ANY passive effect create functions are called.
        // Otherwise effects in sibling components might interfere with each other.
        // e.g. a destroy function in one component may unintentionally override a ref
        // value set by a create function in another component.
        // Layout effects have the same constraint.
        // First pass: Destroy stale passive effects.

        var unmountEffects = pendingPassiveHookEffectsUnmount
        pendingPassiveHookEffectsUnmount = []

        for (var i = 0; i < unmountEffects.length; i += 2) {
          var _effect = unmountEffects[i]
          var fiber = unmountEffects[i + 1]
          var destroy = _effect.destroy
          _effect.destroy = undefined

          {
            fiber.flags &= ~PassiveUnmountPendingDev
            var alternate = fiber.alternate

            if (alternate !== null) {
              alternate.flags &= ~PassiveUnmountPendingDev
            }
          }

          if (typeof destroy === 'function') {
            {
              setCurrentFiber(fiber)

              {
                invokeGuardedCallback(null, destroy, null)
              }

              if (hasCaughtError()) {
                if (!(fiber !== null)) {
                  {
                    throw Error('Should be working on an effect.')
                  }
                }

                var error = clearCaughtError()
                captureCommitPhaseError(fiber, error)
              }

              resetCurrentFiber()
            }
          }
        } // Second pass: Create new passive effects.

        var mountEffects = pendingPassiveHookEffectsMount
        pendingPassiveHookEffectsMount = []

        for (var _i = 0; _i < mountEffects.length; _i += 2) {
          var _effect2 = mountEffects[_i]
          var _fiber = mountEffects[_i + 1]

          {
            setCurrentFiber(_fiber)

            {
              invokeGuardedCallback(
                null,
                invokePassiveEffectCreate,
                null,
                _effect2
              )
            }

            if (hasCaughtError()) {
              if (!(_fiber !== null)) {
                {
                  throw Error('Should be working on an effect.')
                }
              }

              var _error4 = clearCaughtError()

              captureCommitPhaseError(_fiber, _error4)
            }

            resetCurrentFiber()
          }
        } // Note: This currently assumes there are no passive effects on the root fiber
        // because the root is not part of its own effect list.
        // This could change in the future.

        var effect = root.current.firstEffect

        while (effect !== null) {
          var nextNextEffect = effect.nextEffect // Remove nextEffect pointer to assist GC

          effect.nextEffect = null

          if (effect.flags & Deletion) {
            detachFiberAfterEffects(effect)
          }

          effect = nextNextEffect
        }

        {
          popInteractions(prevInteractions)
          finishPendingInteractions(root, lanes)
        }

        {
          isFlushingPassiveEffects = false
        }

        executionContext = prevExecutionContext
        flushSyncCallbackQueue() // If additional passive effects were scheduled, increment a counter. If this
        // exceeds the limit, we'll fire a warning.

        nestedPassiveUpdateCount =
          rootWithPendingPassiveEffects === null
            ? 0
            : nestedPassiveUpdateCount + 1
        return true
      }

      function isAlreadyFailedLegacyErrorBoundary(instance) {
        return (
          legacyErrorBoundariesThatAlreadyFailed !== null &&
          legacyErrorBoundariesThatAlreadyFailed.has(instance)
        )
      }
      function markLegacyErrorBoundaryAsFailed(instance) {
        if (legacyErrorBoundariesThatAlreadyFailed === null) {
          legacyErrorBoundariesThatAlreadyFailed = new Set([instance])
        } else {
          legacyErrorBoundariesThatAlreadyFailed.add(instance)
        }
      }

      function prepareToThrowUncaughtError(error) {
        if (!hasUncaughtError) {
          hasUncaughtError = true
          firstUncaughtError = error
        }
      }

      var onUncaughtError = prepareToThrowUncaughtError

      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        var errorInfo = createCapturedValue(error, sourceFiber)
        var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane)
        enqueueUpdate(rootFiber, update)
        var eventTime = requestEventTime()
        var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane)

        if (root !== null) {
          markRootUpdated(root, SyncLane, eventTime)
          ensureRootIsScheduled(root, eventTime)
          schedulePendingInteractions(root, SyncLane)
        }
      }

      function captureCommitPhaseError(sourceFiber, error) {
        if (sourceFiber.tag === HostRoot) {
          // Error was thrown at the root. There is no parent, so the root
          // itself should capture it.
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error)
          return
        }

        var fiber = sourceFiber.return

        while (fiber !== null) {
          if (fiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error)
            return
          } else if (fiber.tag === ClassComponent) {
            var ctor = fiber.type
            var instance = fiber.stateNode

            if (
              typeof ctor.getDerivedStateFromError === 'function' ||
              (typeof instance.componentDidCatch === 'function' &&
                !isAlreadyFailedLegacyErrorBoundary(instance))
            ) {
              var errorInfo = createCapturedValue(error, sourceFiber)
              var update = createClassErrorUpdate(fiber, errorInfo, SyncLane)
              enqueueUpdate(fiber, update)
              var eventTime = requestEventTime()
              var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane)

              if (root !== null) {
                markRootUpdated(root, SyncLane, eventTime)
                ensureRootIsScheduled(root, eventTime)
                schedulePendingInteractions(root, SyncLane)
              } else {
                // This component has already been unmounted.
                // We can't schedule any follow up work for the root because the fiber is already unmounted,
                // but we can still call the log-only boundary so the error isn't swallowed.
                //
                // TODO This is only a temporary bandaid for the old reconciler fork.
                // We can delete this special case once the new fork is merged.
                if (
                  typeof instance.componentDidCatch === 'function' &&
                  !isAlreadyFailedLegacyErrorBoundary(instance)
                ) {
                  try {
                    instance.componentDidCatch(error, errorInfo)
                  } catch (errorToIgnore) {
                    // TODO Ignore this error? Rethrow it?
                    // This is kind of an edge case.
                  }
                }
              }

              return
            }
          }

          fiber = fiber.return
        }
      }
      function pingSuspendedRoot(root, wakeable, pingedLanes) {
        var pingCache = root.pingCache

        if (pingCache !== null) {
          // The wakeable resolved, so we no longer need to memoize, because it will
          // never be thrown again.
          pingCache.delete(wakeable)
        }

        var eventTime = requestEventTime()
        markRootPinged(root, pingedLanes)

        if (
          workInProgressRoot === root &&
          isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)
        ) {
          // Received a ping at the same priority level at which we're currently
          // rendering. We might want to restart this render. This should mirror
          // the logic of whether or not a root suspends once it completes.
          // TODO: If we're rendering sync either due to Sync, Batched or expired,
          // we should probably never restart.
          // If we're suspended with delay, or if it's a retry, we'll always suspend
          // so we can always restart.
          if (
            workInProgressRootExitStatus === RootSuspendedWithDelay ||
            (workInProgressRootExitStatus === RootSuspended &&
              includesOnlyRetries(workInProgressRootRenderLanes) &&
              now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
          ) {
            // Restart from the root.
            prepareFreshStack(root, NoLanes)
          } else {
            // Even though we can't restart right now, we might get an
            // opportunity later. So we mark this render as having a ping.
            workInProgressRootPingedLanes = mergeLanes(
              workInProgressRootPingedLanes,
              pingedLanes
            )
          }
        }

        ensureRootIsScheduled(root, eventTime)
        schedulePendingInteractions(root, pingedLanes)
      }

      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        // The boundary fiber (a Suspense component or SuspenseList component)
        // previously was rendered in its fallback state. One of the promises that
        // suspended it has resolved, which means at least part of the tree was
        // likely unblocked. Try rendering again, at a new expiration time.
        if (retryLane === NoLane) {
          retryLane = requestRetryLane(boundaryFiber)
        } // TODO: Special case idle priority?

        var eventTime = requestEventTime()
        var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane)

        if (root !== null) {
          markRootUpdated(root, retryLane, eventTime)
          ensureRootIsScheduled(root, eventTime)
          schedulePendingInteractions(root, retryLane)
        }
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = NoLane // Default

        var retryCache

        {
          retryCache = boundaryFiber.stateNode
        }

        if (retryCache !== null) {
          // The wakeable resolved, so we no longer need to memoize, because it will
          // never be thrown again.
          retryCache.delete(wakeable)
        }

        retryTimedOutBoundary(boundaryFiber, retryLane)
      } // Computes the next Just Noticeable Difference (JND) boundary.
      // The theory is that a person can't tell the difference between small differences in time.
      // Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
      // difference in the experience. However, waiting for longer might mean that we can avoid
      // showing an intermediate loading state. The longer we have already waited, the harder it
      // is to tell small differences in time. Therefore, the longer we've already waited,
      // the longer we can wait additionally. At some point we have to give up though.
      // We pick a train model where the next boundary commits at a consistent schedule.
      // These particular numbers are vague estimates. We expect to adjust them based on research.

      function jnd(timeElapsed) {
        return timeElapsed < 120
          ? 120
          : timeElapsed < 480
          ? 480
          : timeElapsed < 1080
          ? 1080
          : timeElapsed < 1920
          ? 1920
          : timeElapsed < 3000
          ? 3000
          : timeElapsed < 4320
          ? 4320
          : ceil(timeElapsed / 1960) * 1960
      }

      function checkForNestedUpdates() {
        if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
          nestedUpdateCount = 0
          rootWithNestedUpdates = null

          {
            {
              throw Error(
                'Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.'
              )
            }
          }
        }

        {
          if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
            nestedPassiveUpdateCount = 0

            error(
              'Maximum update depth exceeded. This can happen when a component ' +
                "calls setState inside useEffect, but useEffect either doesn't " +
                'have a dependency array, or one of the dependencies changes on ' +
                'every render.'
            )
          }
        }
      }

      function flushRenderPhaseStrictModeWarningsInDEV() {
        {
          ReactStrictModeWarnings.flushLegacyContextWarning()

          {
            ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings()
          }
        }
      }

      var didWarnStateUpdateForNotYetMountedComponent = null

      function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
        {
          if ((executionContext & RenderContext) !== NoContext) {
            // We let the other warning about render phase updates deal with this one.
            return
          }

          if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
            return
          }

          var tag = fiber.tag

          if (
            tag !== IndeterminateComponent &&
            tag !== HostRoot &&
            tag !== ClassComponent &&
            tag !== FunctionComponent &&
            tag !== ForwardRef &&
            tag !== MemoComponent &&
            tag !== SimpleMemoComponent &&
            tag !== Block
          ) {
            // Only warn for user-defined components, not internal ones like Suspense.
            return
          } // We show the whole stack but dedupe on the top component's name because
          // the problematic code almost always lies inside that component.

          var componentName = getComponentName(fiber.type) || 'ReactComponent'

          if (didWarnStateUpdateForNotYetMountedComponent !== null) {
            if (
              didWarnStateUpdateForNotYetMountedComponent.has(componentName)
            ) {
              return
            }

            didWarnStateUpdateForNotYetMountedComponent.add(componentName)
          } else {
            didWarnStateUpdateForNotYetMountedComponent = new Set([
              componentName,
            ])
          }

          var previousFiber = current

          try {
            setCurrentFiber(fiber)

            error(
              "Can't perform a React state update on a component that hasn't mounted yet. " +
                'This indicates that you have a side-effect in your render function that ' +
                'asynchronously later calls tries to update the component. Move this work to ' +
                'useEffect instead.'
            )
          } finally {
            if (previousFiber) {
              setCurrentFiber(fiber)
            } else {
              resetCurrentFiber()
            }
          }
        }
      }

      var didWarnStateUpdateForUnmountedComponent = null

      function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
        {
          var tag = fiber.tag

          if (
            tag !== HostRoot &&
            tag !== ClassComponent &&
            tag !== FunctionComponent &&
            tag !== ForwardRef &&
            tag !== MemoComponent &&
            tag !== SimpleMemoComponent &&
            tag !== Block
          ) {
            // Only warn for user-defined components, not internal ones like Suspense.
            return
          } // If there are pending passive effects unmounts for this Fiber,
          // we can assume that they would have prevented this update.

          if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
            return
          } // We show the whole stack but dedupe on the top component's name because
          // the problematic code almost always lies inside that component.

          var componentName = getComponentName(fiber.type) || 'ReactComponent'

          if (didWarnStateUpdateForUnmountedComponent !== null) {
            if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
              return
            }

            didWarnStateUpdateForUnmountedComponent.add(componentName)
          } else {
            didWarnStateUpdateForUnmountedComponent = new Set([componentName])
          }

          if (isFlushingPassiveEffects);
          else {
            var previousFiber = current

            try {
              setCurrentFiber(fiber)

              error(
                "Can't perform a React state update on an unmounted component. This " +
                  'is a no-op, but it indicates a memory leak in your application. To ' +
                  'fix, cancel all subscriptions and asynchronous tasks in %s.',
                tag === ClassComponent
                  ? 'the componentWillUnmount method'
                  : 'a useEffect cleanup function'
              )
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber)
              } else {
                resetCurrentFiber()
              }
            }
          }
        }
      }

      var beginWork$1

      {
        var dummyFiber = null

        beginWork$1 = function (current, unitOfWork, lanes) {
          // If a component throws an error, we replay it again in a synchronously
          // dispatched event, so that the debugger will treat it as an uncaught
          // error See ReactErrorUtils for more information.
          // Before entering the begin phase, copy the work-in-progress onto a dummy
          // fiber. If beginWork throws, we'll use this to reset the state.
          var originalWorkInProgressCopy = assignFiberPropertiesInDEV(
            dummyFiber,
            unitOfWork
          )

          try {
            return beginWork(current, unitOfWork, lanes)
          } catch (originalError) {
            if (
              originalError !== null &&
              typeof originalError === 'object' &&
              typeof originalError.then === 'function'
            ) {
              // Don't replay promises. Treat everything else like an error.
              throw originalError
            } // Keep this code in sync with handleError; any changes here must have
            // corresponding changes there.

            resetContextDependencies()
            resetHooksAfterThrow() // Don't reset current debug fiber, since we're about to work on the
            // same fiber again.
            // Unwind the failed stack frame

            unwindInterruptedWork(unitOfWork) // Restore the original properties of the fiber.

            assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy)

            if (unitOfWork.mode & ProfileMode) {
              // Reset the profiler timer.
              startProfilerTimer(unitOfWork)
            } // Run beginWork again.

            invokeGuardedCallback(
              null,
              beginWork,
              null,
              current,
              unitOfWork,
              lanes
            )

            if (hasCaughtError()) {
              var replayError = clearCaughtError() // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
              // Rethrow this error instead of the original one.

              throw replayError
            } else {
              // This branch is reachable if the render phase is impure.
              throw originalError
            }
          }
        }
      }

      var didWarnAboutUpdateInRender = false
      var didWarnAboutUpdateInRenderForAnotherComponent

      {
        didWarnAboutUpdateInRenderForAnotherComponent = new Set()
      }

      function warnAboutRenderPhaseUpdatesInDEV(fiber) {
        {
          if (
            isRendering &&
            (executionContext & RenderContext) !== NoContext &&
            !getIsUpdatingOpaqueValueInRenderPhaseInDEV()
          ) {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                var renderingComponentName =
                  (workInProgress && getComponentName(workInProgress.type)) ||
                  'Unknown' // Dedupe by the rendering component because it's the one that needs to be fixed.

                var dedupeKey = renderingComponentName

                if (
                  !didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)
                ) {
                  didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey)
                  var setStateComponentName =
                    getComponentName(fiber.type) || 'Unknown'

                  error(
                    'Cannot update a component (`%s`) while rendering a ' +
                      'different component (`%s`). To locate the bad setState() call inside `%s`, ' +
                      'follow the stack trace as described in https://reactjs.org/link/setstate-in-render',
                    setStateComponentName,
                    renderingComponentName,
                    renderingComponentName
                  )
                }

                break
              }

              case ClassComponent: {
                if (!didWarnAboutUpdateInRender) {
                  error(
                    'Cannot update during an existing state transition (such as ' +
                      'within `render`). Render methods should be a pure ' +
                      'function of props and state.'
                  )

                  didWarnAboutUpdateInRender = true
                }

                break
              }
            }
          }
        }
      } // a 'shared' variable that changes when act() opens/closes in tests.

      var IsThisRendererActing = {
        current: false,
      }
      function warnIfNotScopedWithMatchingAct(fiber) {
        {
          if (
            IsSomeRendererActing.current === true &&
            IsThisRendererActing.current !== true
          ) {
            var previousFiber = current

            try {
              setCurrentFiber(fiber)

              error(
                "It looks like you're using the wrong act() around your test interactions.\n" +
                  'Be sure to use the matching version of act() corresponding to your renderer:\n\n' +
                  '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
                  'import {act} fr' +
                  "om 'react-dom/test-utils';\n" +
                  '// ...\n' +
                  'act(() => ...);\n\n' +
                  '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
                  'import TestRenderer fr' +
                  "om react-test-renderer';\n" +
                  'const {act} = TestRenderer;\n' +
                  '// ...\n' +
                  'act(() => ...);'
              )
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber)
              } else {
                resetCurrentFiber()
              }
            }
          }
        }
      }
      function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
        {
          if (
            (fiber.mode & StrictMode) !== NoMode &&
            IsSomeRendererActing.current === false &&
            IsThisRendererActing.current === false
          ) {
            error(
              'An update to %s ran an effect, but was not wrapped in act(...).\n\n' +
                'When testing, code that causes React state updates should be ' +
                'wrapped into act(...):\n\n' +
                'act(() => {\n' +
                '  /* fire events that update state */\n' +
                '});\n' +
                '/* assert on the output */\n\n' +
                "This ensures that you're testing the behavior the user would see " +
                'in the browser.' +
                ' Learn more at https://reactjs.org/link/wrap-tests-with-act',
              getComponentName(fiber.type)
            )
          }
        }
      }

      function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
        {
          if (
            executionContext === NoContext &&
            IsSomeRendererActing.current === false &&
            IsThisRendererActing.current === false
          ) {
            var previousFiber = current

            try {
              setCurrentFiber(fiber)

              error(
                'An update to %s inside a test was not wrapped in act(...).\n\n' +
                  'When testing, code that causes React state updates should be ' +
                  'wrapped into act(...):\n\n' +
                  'act(() => {\n' +
                  '  /* fire events that update state */\n' +
                  '});\n' +
                  '/* assert on the output */\n\n' +
                  "This ensures that you're testing the behavior the user would see " +
                  'in the browser.' +
                  ' Learn more at https://reactjs.org/link/wrap-tests-with-act',
                getComponentName(fiber.type)
              )
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber)
              } else {
                resetCurrentFiber()
              }
            }
          }
        }
      }

      var warnIfNotCurrentlyActingUpdatesInDev =
        warnIfNotCurrentlyActingUpdatesInDEV // In tests, we want to enforce a mocked scheduler.

      var didWarnAboutUnmockedScheduler = false // TODO Before we release concurrent mode, revisit this and decide whether a mocked
      // scheduler is the actual recommendation. The alternative could be a testing build,
      // a new lib, or whatever; we dunno just yet. This message is for early adopters
      // to get their tests right.

      function warnIfUnmockedScheduler(fiber) {
        {
          if (
            didWarnAboutUnmockedScheduler === false &&
            Scheduler.unstable_flushAllWithoutAsserting === undefined
          ) {
            if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
              didWarnAboutUnmockedScheduler = true

              error(
                'In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' +
                  'to guarantee consistent behaviour across tests and browsers. ' +
                  'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
                  "jest.mock('scheduler', () => require" +
                  "('scheduler/unstable_mock'));\n\n" +
                  'For more info, visit https://reactjs.org/link/mock-scheduler'
              )
            }
          }
        }
      }

      function computeThreadID(root, lane) {
        // Interaction threads are unique per root and expiration time.
        // NOTE: Intentionally unsound cast. All that matters is that it's a number
        // and it represents a batch of work. Could make a helper function instead,
        // but meh this is fine for now.
        return lane * 1000 + root.interactionThreadID
      }

      function markSpawnedWork(lane) {
        if (spawnedWorkDuringRender === null) {
          spawnedWorkDuringRender = [lane]
        } else {
          spawnedWorkDuringRender.push(lane)
        }
      }

      function scheduleInteractions(root, lane, interactions) {
        if (interactions.size > 0) {
          var pendingInteractionMap = root.pendingInteractionMap
          var pendingInteractions = pendingInteractionMap.get(lane)

          if (pendingInteractions != null) {
            interactions.forEach(function (interaction) {
              if (!pendingInteractions.has(interaction)) {
                // Update the pending async work count for previously unscheduled interaction.
                interaction.__count++
              }

              pendingInteractions.add(interaction)
            })
          } else {
            pendingInteractionMap.set(lane, new Set(interactions)) // Update the pending async work count for the current interactions.

            interactions.forEach(function (interaction) {
              interaction.__count++
            })
          }

          var subscriber = tracing.__subscriberRef.current

          if (subscriber !== null) {
            var threadID = computeThreadID(root, lane)
            subscriber.onWorkScheduled(interactions, threadID)
          }
        }
      }

      function schedulePendingInteractions(root, lane) {
        scheduleInteractions(root, lane, tracing.__interactionsRef.current)
      }

      function startWorkOnPendingInteractions(root, lanes) {
        // we can accurately attribute time spent working on it, And so that cascading
        // work triggered during the render phase will be associated with it.

        var interactions = new Set()
        root.pendingInteractionMap.forEach(function (
          scheduledInteractions,
          scheduledLane
        ) {
          if (includesSomeLane(lanes, scheduledLane)) {
            scheduledInteractions.forEach(function (interaction) {
              return interactions.add(interaction)
            })
          }
        }) // Store the current set of interactions on the FiberRoot for a few reasons:
        // We can re-use it in hot functions like performConcurrentWorkOnRoot()
        // without having to recalculate it. We will also use it in commitWork() to
        // pass to any Profiler onRender() hooks. This also provides DevTools with a
        // way to access it when the onCommitRoot() hook is called.

        root.memoizedInteractions = interactions

        if (interactions.size > 0) {
          var subscriber = tracing.__subscriberRef.current

          if (subscriber !== null) {
            var threadID = computeThreadID(root, lanes)

            try {
              subscriber.onWorkStarted(interactions, threadID)
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority$1, function () {
                throw error
              })
            }
          }
        }
      }

      function finishPendingInteractions(root, committedLanes) {
        var remainingLanesAfterCommit = root.pendingLanes
        var subscriber

        try {
          subscriber = tracing.__subscriberRef.current

          if (subscriber !== null && root.memoizedInteractions.size > 0) {
            // FIXME: More than one lane can finish in a single commit.
            var threadID = computeThreadID(root, committedLanes)
            subscriber.onWorkStopped(root.memoizedInteractions, threadID)
          }
        } catch (error) {
          // If the subscriber throws, rethrow it in a separate task
          scheduleCallback(ImmediatePriority$1, function () {
            throw error
          })
        } finally {
          // Clear completed interactions from the pending Map.
          // Unless the render was suspended or cascading work was scheduled,
          // In which case– leave pending interactions until the subsequent render.
          var pendingInteractionMap = root.pendingInteractionMap
          pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
            // Only decrement the pending interaction count if we're done.
            // If there's still work at the current priority,
            // That indicates that we are waiting for suspense data.
            if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
              pendingInteractionMap.delete(lane)
              scheduledInteractions.forEach(function (interaction) {
                interaction.__count--

                if (subscriber !== null && interaction.__count === 0) {
                  try {
                    subscriber.onInteractionScheduledWorkCompleted(interaction)
                  } catch (error) {
                    // If the subscriber throws, rethrow it in a separate task
                    scheduleCallback(ImmediatePriority$1, function () {
                      throw error
                    })
                  }
                }
              })
            }
          })
        }
      } // `act` testing API

      function shouldForceFlushFallbacksInDEV() {
        // Never force flush in production. This function should get stripped out.
        return actingUpdatesScopeDepth > 0
      }
      // so we can tell if any async act() calls try to run in parallel.

      var actingUpdatesScopeDepth = 0

      function detachFiberAfterEffects(fiber) {
        fiber.sibling = null
        fiber.stateNode = null
      }

      var resolveFamily = null // $FlowFixMe Flow gets confused by a WeakSet feature check below.

      var failedBoundaries = null
      var setRefreshHandler = function (handler) {
        {
          resolveFamily = handler
        }
      }
      function resolveFunctionForHotReloading(type) {
        {
          if (resolveFamily === null) {
            // Hot reloading is disabled.
            return type
          }

          var family = resolveFamily(type)

          if (family === undefined) {
            return type
          } // Use the latest known implementation.

          return family.current
        }
      }
      function resolveClassForHotReloading(type) {
        // No implementation differences.
        return resolveFunctionForHotReloading(type)
      }
      function resolveForwardRefForHotReloading(type) {
        {
          if (resolveFamily === null) {
            // Hot reloading is disabled.
            return type
          }

          var family = resolveFamily(type)

          if (family === undefined) {
            // Check if we're dealing with a real forwardRef. Don't want to crash early.
            if (
              type !== null &&
              type !== undefined &&
              typeof type.render === 'function'
            ) {
              // ForwardRef is special because its resolved .type is an object,
              // but it's possible that we only have its inner render function in the map.
              // If that inner render function is different, we'll build a new forwardRef type.
              var currentRender = resolveFunctionForHotReloading(type.render)

              if (type.render !== currentRender) {
                var syntheticType = {
                  $$typeof: REACT_FORWARD_REF_TYPE,
                  render: currentRender,
                }

                if (type.displayName !== undefined) {
                  syntheticType.displayName = type.displayName
                }

                return syntheticType
              }
            }

            return type
          } // Use the latest known implementation.

          return family.current
        }
      }
      function isCompatibleFamilyForHotReloading(fiber, element) {
        {
          if (resolveFamily === null) {
            // Hot reloading is disabled.
            return false
          }

          var prevType = fiber.elementType
          var nextType = element.type // If we got here, we know types aren't === equal.

          var needsCompareFamilies = false
          var $$typeofNextType =
            typeof nextType === 'object' && nextType !== null
              ? nextType.$$typeof
              : null

          switch (fiber.tag) {
            case ClassComponent: {
              if (typeof nextType === 'function') {
                needsCompareFamilies = true
              }

              break
            }

            case FunctionComponent: {
              if (typeof nextType === 'function') {
                needsCompareFamilies = true
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                // We don't know the inner type yet.
                // We're going to assume that the lazy inner type is stable,
                // and so it is sufficient to avoid reconciling it away.
                // We're not going to unwrap or actually use the new lazy type.
                needsCompareFamilies = true
              }

              break
            }

            case ForwardRef: {
              if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                needsCompareFamilies = true
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true
              }

              break
            }

            case MemoComponent:
            case SimpleMemoComponent: {
              if ($$typeofNextType === REACT_MEMO_TYPE) {
                // TODO: if it was but can no longer be simple,
                // we shouldn't set this.
                needsCompareFamilies = true
              } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                needsCompareFamilies = true
              }

              break
            }

            default:
              return false
          } // Check if both types have a family and it's the same one.

          if (needsCompareFamilies) {
            // Note: memo() and forwardRef() we'll compare outer rather than inner type.
            // This means both of them need to be registered to preserve state.
            // If we unwrapped and compared the inner types for wrappers instead,
            // then we would risk falsely saying two separate memo(Foo)
            // calls are equivalent because they wrap the same Foo function.
            var prevFamily = resolveFamily(prevType)

            if (
              prevFamily !== undefined &&
              prevFamily === resolveFamily(nextType)
            ) {
              return true
            }
          }

          return false
        }
      }
      function markFailedErrorBoundaryForHotReloading(fiber) {
        {
          if (resolveFamily === null) {
            // Hot reloading is disabled.
            return
          }

          if (typeof WeakSet !== 'function') {
            return
          }

          if (failedBoundaries === null) {
            failedBoundaries = new WeakSet()
          }

          failedBoundaries.add(fiber)
        }
      }
      var scheduleRefresh = function (root, update) {
        {
          if (resolveFamily === null) {
            // Hot reloading is disabled.
            return
          }

          var staleFamilies = update.staleFamilies,
            updatedFamilies = update.updatedFamilies
          flushPassiveEffects()
          flushSync(function () {
            scheduleFibersWithFamiliesRecursively(
              root.current,
              updatedFamilies,
              staleFamilies
            )
          })
        }
      }
      var scheduleRoot = function (root, element) {
        {
          if (root.context !== emptyContextObject) {
            // Super edge case: root has a legacy _renderSubtree context
            // but we don't know the parentComponent so we can't pass it.
            // Just ignore. We'll delete this with _renderSubtree code path later.
            return
          }

          flushPassiveEffects()
          flushSync(function () {
            updateContainer(element, root, null, null)
          })
        }
      }

      function scheduleFibersWithFamiliesRecursively(
        fiber,
        updatedFamilies,
        staleFamilies
      ) {
        {
          var alternate = fiber.alternate,
            child = fiber.child,
            sibling = fiber.sibling,
            tag = fiber.tag,
            type = fiber.type
          var candidateType = null

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type
              break

            case ForwardRef:
              candidateType = type.render
              break
          }

          if (resolveFamily === null) {
            throw new Error(
              'Expected resolveFamily to be set during hot reload.'
            )
          }

          var needsRender = false
          var needsRemount = false

          if (candidateType !== null) {
            var family = resolveFamily(candidateType)

            if (family !== undefined) {
              if (staleFamilies.has(family)) {
                needsRemount = true
              } else if (updatedFamilies.has(family)) {
                if (tag === ClassComponent) {
                  needsRemount = true
                } else {
                  needsRender = true
                }
              }
            }
          }

          if (failedBoundaries !== null) {
            if (
              failedBoundaries.has(fiber) ||
              (alternate !== null && failedBoundaries.has(alternate))
            ) {
              needsRemount = true
            }
          }

          if (needsRemount) {
            fiber._debugNeedsRemount = true
          }

          if (needsRemount || needsRender) {
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
          }

          if (child !== null && !needsRemount) {
            scheduleFibersWithFamiliesRecursively(
              child,
              updatedFamilies,
              staleFamilies
            )
          }

          if (sibling !== null) {
            scheduleFibersWithFamiliesRecursively(
              sibling,
              updatedFamilies,
              staleFamilies
            )
          }
        }
      }

      var findHostInstancesForRefresh = function (root, families) {
        {
          var hostInstances = new Set()
          var types = new Set(
            families.map(function (family) {
              return family.current
            })
          )
          findHostInstancesForMatchingFibersRecursively(
            root.current,
            types,
            hostInstances
          )
          return hostInstances
        }
      }

      function findHostInstancesForMatchingFibersRecursively(
        fiber,
        types,
        hostInstances
      ) {
        {
          var child = fiber.child,
            sibling = fiber.sibling,
            tag = fiber.tag,
            type = fiber.type
          var candidateType = null

          switch (tag) {
            case FunctionComponent:
            case SimpleMemoComponent:
            case ClassComponent:
              candidateType = type
              break

            case ForwardRef:
              candidateType = type.render
              break
          }

          var didMatch = false

          if (candidateType !== null) {
            if (types.has(candidateType)) {
              didMatch = true
            }
          }

          if (didMatch) {
            // We have a match. This only drills down to the closest host components.
            // There's no need to search deeper because for the purpose of giving
            // visual feedback, "flashing" outermost parent rectangles is sufficient.
            findHostInstancesForFiberShallowly(fiber, hostInstances)
          } else {
            // If there's no match, maybe there will be one further down in the child tree.
            if (child !== null) {
              findHostInstancesForMatchingFibersRecursively(
                child,
                types,
                hostInstances
              )
            }
          }

          if (sibling !== null) {
            findHostInstancesForMatchingFibersRecursively(
              sibling,
              types,
              hostInstances
            )
          }
        }
      }

      function findHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var foundHostInstances = findChildHostInstancesForFiberShallowly(
            fiber,
            hostInstances
          )

          if (foundHostInstances) {
            return
          } // If we didn't find any host children, fallback to closest host parent.

          var node = fiber

          while (true) {
            switch (node.tag) {
              case HostComponent:
                hostInstances.add(node.stateNode)
                return

              case HostPortal:
                hostInstances.add(node.stateNode.containerInfo)
                return

              case HostRoot:
                hostInstances.add(node.stateNode.containerInfo)
                return
            }

            if (node.return === null) {
              throw new Error('Expected to reach root first.')
            }

            node = node.return
          }
        }
      }

      function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
        {
          var node = fiber
          var foundHostInstances = false

          while (true) {
            if (node.tag === HostComponent) {
              // We got a match.
              foundHostInstances = true
              hostInstances.add(node.stateNode) // There may still be more, so keep searching.
            } else if (node.child !== null) {
              node.child.return = node
              node = node.child
              continue
            }

            if (node === fiber) {
              return foundHostInstances
            }

            while (node.sibling === null) {
              if (node.return === null || node.return === fiber) {
                return foundHostInstances
              }

              node = node.return
            }

            node.sibling.return = node.return
            node = node.sibling
          }
        }

        return false
      }

      var hasBadMapPolyfill

      {
        hasBadMapPolyfill = false

        try {
          var nonExtensibleObject = Object.preventExtensions({})
          /* eslint-disable no-new */

          new Map([[nonExtensibleObject, null]])
          new Set([nonExtensibleObject])
          /* eslint-enable no-new */
        } catch (e) {
          // TODO: Consider warning about bad polyfills
          hasBadMapPolyfill = true
        }
      }

      var debugCounter = 1

      function FiberNode(tag, pendingProps, key, mode) {
        // Instance
        this.tag = tag
        this.key = key
        this.elementType = null
        this.type = null
        this.stateNode = null // Fiber

        this.return = null
        this.child = null
        this.sibling = null
        this.index = 0
        this.ref = null
        this.pendingProps = pendingProps
        this.memoizedProps = null
        this.updateQueue = null
        this.memoizedState = null
        this.dependencies = null
        this.mode = mode // Effects

        this.flags = NoFlags
        this.nextEffect = null
        this.firstEffect = null
        this.lastEffect = null
        this.lanes = NoLanes
        this.childLanes = NoLanes
        this.alternate = null

        {
          // Note: The following is done to avoid a v8 performance cliff.
          //
          // Initializing the fields below to smis and later updating them with
          // double values will cause Fibers to end up having separate shapes.
          // This behavior/bug has something to do with Object.preventExtension().
          // Fortunately this only impacts DEV builds.
          // Unfortunately it makes React unusably slow for some applications.
          // To work around this, initialize the fields below with doubles.
          //
          // Learn more about this here:
          // https://github.com/facebook/react/issues/14365
          // https://bugs.chromium.org/p/v8/issues/detail?id=8538
          this.actualDuration = Number.NaN
          this.actualStartTime = Number.NaN
          this.selfBaseDuration = Number.NaN
          this.treeBaseDuration = Number.NaN // It's okay to replace the initial doubles with smis after initialization.
          // This won't trigger the performance cliff mentioned above,
          // and it simplifies other profiler code (including DevTools).

          this.actualDuration = 0
          this.actualStartTime = -1
          this.selfBaseDuration = 0
          this.treeBaseDuration = 0
        }

        {
          // This isn't directly used but is handy for debugging internals:
          this._debugID = debugCounter++
          this._debugSource = null
          this._debugOwner = null
          this._debugNeedsRemount = false
          this._debugHookTypes = null

          if (
            !hasBadMapPolyfill &&
            typeof Object.preventExtensions === 'function'
          ) {
            Object.preventExtensions(this)
          }
        }
      } // This is a constructor function, rather than a POJO constructor, still
      // please ensure we do the following:
      // 1) Nobody should add any instance methods on this. Instance methods can be
      //    more difficult to predict when they get optimized and they are almost
      //    never inlined properly in static compilers.
      // 2) Nobody should rely on `instanceof Fiber` for type testing. We should
      //    always know when it is a fiber.
      // 3) We might want to experiment with using numeric keys since they are easier
      //    to optimize in a non-JIT environment.
      // 4) We can easily go from a constructor to a createFiber object literal if that
      //    is faster.
      // 5) It should be easy to port this to a C struct and keep a C implementation
      //    compatible.

      var createFiber = function (tag, pendingProps, key, mode) {
        // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
        return new FiberNode(tag, pendingProps, key, mode)
      }

      function shouldConstruct$1(Component) {
        var prototype = Component.prototype
        return !!(prototype && prototype.isReactComponent)
      }

      function isSimpleFunctionComponent(type) {
        return (
          typeof type === 'function' &&
          !shouldConstruct$1(type) &&
          type.defaultProps === undefined
        )
      }
      function resolveLazyComponentTag(Component) {
        if (typeof Component === 'function') {
          return shouldConstruct$1(Component)
            ? ClassComponent
            : FunctionComponent
        } else if (Component !== undefined && Component !== null) {
          var $$typeof = Component.$$typeof

          if ($$typeof === REACT_FORWARD_REF_TYPE) {
            return ForwardRef
          }

          if ($$typeof === REACT_MEMO_TYPE) {
            return MemoComponent
          }
        }

        return IndeterminateComponent
      } // This is used to create an alternate fiber to do work on.

      function createWorkInProgress(current, pendingProps) {
        var workInProgress = current.alternate

        if (workInProgress === null) {
          // We use a double buffering pooling technique because we know that we'll
          // only ever need at most two versions of a tree. We pool the "other" unused
          // node that we're free to reuse. This is lazily created to avoid allocating
          // extra objects for things that are never updated. It also allow us to
          // reclaim the extra memory if needed.
          workInProgress = createFiber(
            current.tag,
            pendingProps,
            current.key,
            current.mode
          )
          workInProgress.elementType = current.elementType
          workInProgress.type = current.type
          workInProgress.stateNode = current.stateNode

          {
            // DEV-only fields
            workInProgress._debugID = current._debugID
            workInProgress._debugSource = current._debugSource
            workInProgress._debugOwner = current._debugOwner
            workInProgress._debugHookTypes = current._debugHookTypes
          }

          workInProgress.alternate = current
          current.alternate = workInProgress
        } else {
          workInProgress.pendingProps = pendingProps // Needed because Blocks store data on type.

          workInProgress.type = current.type // We already have an alternate.
          // Reset the effect tag.

          workInProgress.flags = NoFlags // The effect list is no longer valid.

          workInProgress.nextEffect = null
          workInProgress.firstEffect = null
          workInProgress.lastEffect = null

          {
            // We intentionally reset, rather than copy, actualDuration & actualStartTime.
            // This prevents time from endlessly accumulating in new commits.
            // This has the downside of resetting values for different priority renders,
            // But works for yielding (the common case) and should support resuming.
            workInProgress.actualDuration = 0
            workInProgress.actualStartTime = -1
          }
        }

        workInProgress.childLanes = current.childLanes
        workInProgress.lanes = current.lanes
        workInProgress.child = current.child
        workInProgress.memoizedProps = current.memoizedProps
        workInProgress.memoizedState = current.memoizedState
        workInProgress.updateQueue = current.updateQueue // Clone the dependencies object. This is mutated during the render phase, so
        // it cannot be shared with the current fiber.

        var currentDependencies = current.dependencies
        workInProgress.dependencies =
          currentDependencies === null
            ? null
            : {
                lanes: currentDependencies.lanes,
                firstContext: currentDependencies.firstContext,
              } // These will be overridden during the parent's reconciliation

        workInProgress.sibling = current.sibling
        workInProgress.index = current.index
        workInProgress.ref = current.ref

        {
          workInProgress.selfBaseDuration = current.selfBaseDuration
          workInProgress.treeBaseDuration = current.treeBaseDuration
        }

        {
          workInProgress._debugNeedsRemount = current._debugNeedsRemount

          switch (workInProgress.tag) {
            case IndeterminateComponent:
            case FunctionComponent:
            case SimpleMemoComponent:
              workInProgress.type = resolveFunctionForHotReloading(current.type)
              break

            case ClassComponent:
              workInProgress.type = resolveClassForHotReloading(current.type)
              break

            case ForwardRef:
              workInProgress.type = resolveForwardRefForHotReloading(
                current.type
              )
              break
          }
        }

        return workInProgress
      } // Used to reuse a Fiber for a second pass.

      function resetWorkInProgress(workInProgress, renderLanes) {
        // This resets the Fiber to what createFiber or createWorkInProgress would
        // have set the values to before during the first pass. Ideally this wouldn't
        // be necessary but unfortunately many code paths reads from the workInProgress
        // when they should be reading from current and writing to workInProgress.
        // We assume pendingProps, index, key, ref, return are still untouched to
        // avoid doing another reconciliation.
        // Reset the effect tag but keep any Placement tags, since that's something
        // that child fiber is setting, not the reconciliation.
        workInProgress.flags &= Placement // The effect list is no longer valid.

        workInProgress.nextEffect = null
        workInProgress.firstEffect = null
        workInProgress.lastEffect = null
        var current = workInProgress.alternate

        if (current === null) {
          // Reset to createFiber's initial values.
          workInProgress.childLanes = NoLanes
          workInProgress.lanes = renderLanes
          workInProgress.child = null
          workInProgress.memoizedProps = null
          workInProgress.memoizedState = null
          workInProgress.updateQueue = null
          workInProgress.dependencies = null
          workInProgress.stateNode = null

          {
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = 0
            workInProgress.treeBaseDuration = 0
          }
        } else {
          // Reset to the cloned values that createWorkInProgress would've.
          workInProgress.childLanes = current.childLanes
          workInProgress.lanes = current.lanes
          workInProgress.child = current.child
          workInProgress.memoizedProps = current.memoizedProps
          workInProgress.memoizedState = current.memoizedState
          workInProgress.updateQueue = current.updateQueue // Needed because Blocks store data on type.

          workInProgress.type = current.type // Clone the dependencies object. This is mutated during the render phase, so
          // it cannot be shared with the current fiber.

          var currentDependencies = current.dependencies
          workInProgress.dependencies =
            currentDependencies === null
              ? null
              : {
                  lanes: currentDependencies.lanes,
                  firstContext: currentDependencies.firstContext,
                }

          {
            // Note: We don't reset the actualTime counts. It's useful to accumulate
            // actual time across multiple render passes.
            workInProgress.selfBaseDuration = current.selfBaseDuration
            workInProgress.treeBaseDuration = current.treeBaseDuration
          }
        }

        return workInProgress
      }
      function createHostRootFiber(tag) {
        var mode

        if (tag === ConcurrentRoot) {
          mode = ConcurrentMode | BlockingMode | StrictMode
        } else if (tag === BlockingRoot) {
          mode = BlockingMode | StrictMode
        } else {
          mode = NoMode
        }

        if (isDevToolsPresent) {
          // Always collect profile timings when DevTools are present.
          // This enables DevTools to start capturing timing at any point–
          // Without some nodes in the tree having empty base times.
          mode |= ProfileMode
        }

        return createFiber(HostRoot, null, null, mode)
      }
      function createFiberFromTypeAndProps(
        type, // React$ElementType
        key,
        pendingProps,
        owner,
        mode,
        lanes
      ) {
        var fiberTag = IndeterminateComponent // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

        var resolvedType = type

        if (typeof type === 'function') {
          if (shouldConstruct$1(type)) {
            fiberTag = ClassComponent

            {
              resolvedType = resolveClassForHotReloading(resolvedType)
            }
          } else {
            {
              resolvedType = resolveFunctionForHotReloading(resolvedType)
            }
          }
        } else if (typeof type === 'string') {
          fiberTag = HostComponent
        } else {
          getTag: switch (type) {
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(
                pendingProps.children,
                mode,
                lanes,
                key
              )

            case REACT_DEBUG_TRACING_MODE_TYPE:
              fiberTag = Mode
              mode |= DebugTracingMode
              break

            case REACT_STRICT_MODE_TYPE:
              fiberTag = Mode
              mode |= StrictMode
              break

            case REACT_PROFILER_TYPE:
              return createFiberFromProfiler(pendingProps, mode, lanes, key)

            case REACT_SUSPENSE_TYPE:
              return createFiberFromSuspense(pendingProps, mode, lanes, key)

            case REACT_SUSPENSE_LIST_TYPE:
              return createFiberFromSuspenseList(pendingProps, mode, lanes, key)

            case REACT_OFFSCREEN_TYPE:
              return createFiberFromOffscreen(pendingProps, mode, lanes, key)

            case REACT_LEGACY_HIDDEN_TYPE:
              return createFiberFromLegacyHidden(pendingProps, mode, lanes, key)

            case REACT_SCOPE_TYPE:

            // eslint-disable-next-line no-fallthrough

            default: {
              if (typeof type === 'object' && type !== null) {
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                    fiberTag = ContextProvider
                    break getTag

                  case REACT_CONTEXT_TYPE:
                    // This is a consumer
                    fiberTag = ContextConsumer
                    break getTag

                  case REACT_FORWARD_REF_TYPE:
                    fiberTag = ForwardRef

                    {
                      resolvedType =
                        resolveForwardRefForHotReloading(resolvedType)
                    }

                    break getTag

                  case REACT_MEMO_TYPE:
                    fiberTag = MemoComponent
                    break getTag

                  case REACT_LAZY_TYPE:
                    fiberTag = LazyComponent
                    resolvedType = null
                    break getTag

                  case REACT_BLOCK_TYPE:
                    fiberTag = Block
                    break getTag
                }
              }

              var info = ''

              {
                if (
                  type === undefined ||
                  (typeof type === 'object' &&
                    type !== null &&
                    Object.keys(type).length === 0)
                ) {
                  info +=
                    ' You likely forgot to export your component from the file ' +
                    "it's defined in, or you might have mixed up default and " +
                    'named imports.'
                }

                var ownerName = owner ? getComponentName(owner.type) : null

                if (ownerName) {
                  info += '\n\nCheck the render method of `' + ownerName + '`.'
                }
              }

              {
                {
                  throw Error(
                    'Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: ' +
                      (type == null ? type : typeof type) +
                      '.' +
                      info
                  )
                }
              }
            }
          }
        }

        var fiber = createFiber(fiberTag, pendingProps, key, mode)
        fiber.elementType = type
        fiber.type = resolvedType
        fiber.lanes = lanes

        {
          fiber._debugOwner = owner
        }

        return fiber
      }
      function createFiberFromElement(element, mode, lanes) {
        var owner = null

        {
          owner = element._owner
        }

        var type = element.type
        var key = element.key
        var pendingProps = element.props
        var fiber = createFiberFromTypeAndProps(
          type,
          key,
          pendingProps,
          owner,
          mode,
          lanes
        )

        {
          fiber._debugSource = element._source
          fiber._debugOwner = element._owner
        }

        return fiber
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        var fiber = createFiber(Fragment, elements, key, mode)
        fiber.lanes = lanes
        return fiber
      }

      function createFiberFromProfiler(pendingProps, mode, lanes, key) {
        {
          if (typeof pendingProps.id !== 'string') {
            error('Profiler must specify an "id" as a prop')
          }
        }

        var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode) // TODO: The Profiler fiber shouldn't have a type. It has a tag.

        fiber.elementType = REACT_PROFILER_TYPE
        fiber.type = REACT_PROFILER_TYPE
        fiber.lanes = lanes

        {
          fiber.stateNode = {
            effectDuration: 0,
            passiveEffectDuration: 0,
          }
        }

        return fiber
      }

      function createFiberFromSuspense(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseComponent, pendingProps, key, mode) // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.

        fiber.type = REACT_SUSPENSE_TYPE
        fiber.elementType = REACT_SUSPENSE_TYPE
        fiber.lanes = lanes
        return fiber
      }
      function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
        var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode)

        {
          // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
          // This needs to be fixed in getComponentName so that it relies on the tag
          // instead.
          fiber.type = REACT_SUSPENSE_LIST_TYPE
        }

        fiber.elementType = REACT_SUSPENSE_LIST_TYPE
        fiber.lanes = lanes
        return fiber
      }
      function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
        var fiber = createFiber(OffscreenComponent, pendingProps, key, mode) // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.

        {
          fiber.type = REACT_OFFSCREEN_TYPE
        }

        fiber.elementType = REACT_OFFSCREEN_TYPE
        fiber.lanes = lanes
        return fiber
      }
      function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
        var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode) // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
        // This needs to be fixed in getComponentName so that it relies on the tag
        // instead.

        {
          fiber.type = REACT_LEGACY_HIDDEN_TYPE
        }

        fiber.elementType = REACT_LEGACY_HIDDEN_TYPE
        fiber.lanes = lanes
        return fiber
      }
      function createFiberFromText(content, mode, lanes) {
        var fiber = createFiber(HostText, content, null, mode)
        fiber.lanes = lanes
        return fiber
      }
      function createFiberFromHostInstanceForDeletion() {
        var fiber = createFiber(HostComponent, null, null, NoMode) // TODO: These should not need a type.

        fiber.elementType = 'DELETED'
        fiber.type = 'DELETED'
        return fiber
      }
      function createFiberFromPortal(portal, mode, lanes) {
        var pendingProps = portal.children !== null ? portal.children : []
        var fiber = createFiber(HostPortal, pendingProps, portal.key, mode)
        fiber.lanes = lanes
        fiber.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          // Used by persistent updates
          implementation: portal.implementation,
        }
        return fiber
      } // Used for stashing WIP properties to replay failed work in DEV.

      function assignFiberPropertiesInDEV(target, source) {
        if (target === null) {
          // This Fiber's initial properties will always be overwritten.
          // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
          target = createFiber(IndeterminateComponent, null, null, NoMode)
        } // This is intentionally written as a list of all properties.
        // We tried to use Object.assign() instead but this is called in
        // the hottest path, and Object.assign() was too slow:
        // https://github.com/facebook/react/issues/12502
        // This code is DEV-only so size is not a concern.

        target.tag = source.tag
        target.key = source.key
        target.elementType = source.elementType
        target.type = source.type
        target.stateNode = source.stateNode
        target.return = source.return
        target.child = source.child
        target.sibling = source.sibling
        target.index = source.index
        target.ref = source.ref
        target.pendingProps = source.pendingProps
        target.memoizedProps = source.memoizedProps
        target.updateQueue = source.updateQueue
        target.memoizedState = source.memoizedState
        target.dependencies = source.dependencies
        target.mode = source.mode
        target.flags = source.flags
        target.nextEffect = source.nextEffect
        target.firstEffect = source.firstEffect
        target.lastEffect = source.lastEffect
        target.lanes = source.lanes
        target.childLanes = source.childLanes
        target.alternate = source.alternate

        {
          target.actualDuration = source.actualDuration
          target.actualStartTime = source.actualStartTime
          target.selfBaseDuration = source.selfBaseDuration
          target.treeBaseDuration = source.treeBaseDuration
        }

        target._debugID = source._debugID
        target._debugSource = source._debugSource
        target._debugOwner = source._debugOwner
        target._debugNeedsRemount = source._debugNeedsRemount
        target._debugHookTypes = source._debugHookTypes
        return target
      }

      function FiberRootNode(containerInfo, tag, hydrate) {
        this.tag = tag
        this.containerInfo = containerInfo
        this.pendingChildren = null
        this.current = null
        this.pingCache = null
        this.finishedWork = null
        this.timeoutHandle = noTimeout
        this.context = null
        this.pendingContext = null
        this.hydrate = hydrate
        this.callbackNode = null
        this.callbackPriority = NoLanePriority
        this.eventTimes = createLaneMap(NoLanes)
        this.expirationTimes = createLaneMap(NoTimestamp)
        this.pendingLanes = NoLanes
        this.suspendedLanes = NoLanes
        this.pingedLanes = NoLanes
        this.expiredLanes = NoLanes
        this.mutableReadLanes = NoLanes
        this.finishedLanes = NoLanes
        this.entangledLanes = NoLanes
        this.entanglements = createLaneMap(NoLanes)

        {
          this.mutableSourceEagerHydrationData = null
        }

        {
          this.interactionThreadID = tracing.unstable_getThreadID()
          this.memoizedInteractions = new Set()
          this.pendingInteractionMap = new Map()
        }

        {
          switch (tag) {
            case BlockingRoot:
              this._debugRootType = 'createBlockingRoot()'
              break

            case ConcurrentRoot:
              this._debugRootType = 'createRoot()'
              break

            case LegacyRoot:
              this._debugRootType = 'createLegacyRoot()'
              break
          }
        }
      }

      function createFiberRoot(
        containerInfo,
        tag,
        hydrate,
        hydrationCallbacks
      ) {
        var root = new FiberRootNode(containerInfo, tag, hydrate)
        // stateNode is any.

        var uninitializedFiber = createHostRootFiber(tag)
        root.current = uninitializedFiber
        uninitializedFiber.stateNode = root
        initializeUpdateQueue(uninitializedFiber)
        return root
      }

      // This ensures that the version used for server rendering matches the one
      // that is eventually read during hydration.
      // If they don't match there's a potential tear and a full deopt render is required.

      function registerMutableSourceForHydration(root, mutableSource) {
        var getVersion = mutableSource._getVersion
        var version = getVersion(mutableSource._source) // TODO Clear this data once all pending hydration work is finished.
        // Retaining it forever may interfere with GC.

        if (root.mutableSourceEagerHydrationData == null) {
          root.mutableSourceEagerHydrationData = [mutableSource, version]
        } else {
          root.mutableSourceEagerHydrationData.push(mutableSource, version)
        }
      }

      function createPortal(
        children,
        containerInfo, // TODO: figure out the API for cross-renderer implementation.
        implementation
      ) {
        var key =
          arguments.length > 3 && arguments[3] !== undefined
            ? arguments[3]
            : null
        return {
          // This tag allow us to uniquely identify this as a React Portal
          $$typeof: REACT_PORTAL_TYPE,
          key: key == null ? null : '' + key,
          children: children,
          containerInfo: containerInfo,
          implementation: implementation,
        }
      }

      var didWarnAboutNestedUpdates
      var didWarnAboutFindNodeInStrictMode

      {
        didWarnAboutNestedUpdates = false
        didWarnAboutFindNodeInStrictMode = {}
      }

      function getContextForSubtree(parentComponent) {
        if (!parentComponent) {
          return emptyContextObject
        }

        var fiber = get(parentComponent)
        var parentContext = findCurrentUnmaskedContext(fiber)

        if (fiber.tag === ClassComponent) {
          var Component = fiber.type

          if (isContextProvider(Component)) {
            return processChildContext(fiber, Component, parentContext)
          }
        }

        return parentContext
      }

      function findHostInstanceWithWarning(component, methodName) {
        {
          var fiber = get(component)

          if (fiber === undefined) {
            if (typeof component.render === 'function') {
              {
                {
                  throw Error('Unable to find node on an unmounted component.')
                }
              }
            } else {
              {
                {
                  throw Error(
                    'Argument appears to not be a ReactComponent. Keys: ' +
                      Object.keys(component)
                  )
                }
              }
            }
          }

          var hostFiber = findCurrentHostFiber(fiber)

          if (hostFiber === null) {
            return null
          }

          if (hostFiber.mode & StrictMode) {
            var componentName = getComponentName(fiber.type) || 'Component'

            if (!didWarnAboutFindNodeInStrictMode[componentName]) {
              didWarnAboutFindNodeInStrictMode[componentName] = true
              var previousFiber = current

              try {
                setCurrentFiber(hostFiber)

                if (fiber.mode & StrictMode) {
                  error(
                    '%s is deprecated in StrictMode. ' +
                      '%s was passed an instance of %s which is inside StrictMode. ' +
                      'Instead, add a ref directly to the element you want to reference. ' +
                      'Learn more about using refs safely here: ' +
                      'https://reactjs.org/link/strict-mode-find-node',
                    methodName,
                    methodName,
                    componentName
                  )
                } else {
                  error(
                    '%s is deprecated in StrictMode. ' +
                      '%s was passed an instance of %s which renders StrictMode children. ' +
                      'Instead, add a ref directly to the element you want to reference. ' +
                      'Learn more about using refs safely here: ' +
                      'https://reactjs.org/link/strict-mode-find-node',
                    methodName,
                    methodName,
                    componentName
                  )
                }
              } finally {
                // Ideally this should reset to previous but this shouldn't be called in
                // render and there's another warning for that anyway.
                if (previousFiber) {
                  setCurrentFiber(previousFiber)
                } else {
                  resetCurrentFiber()
                }
              }
            }
          }

          return hostFiber.stateNode
        }
      }

      function createContainer(
        containerInfo,
        tag,
        hydrate,
        hydrationCallbacks
      ) {
        return createFiberRoot(containerInfo, tag, hydrate)
      }
      function updateContainer(element, container, parentComponent, callback) {
        {
          onScheduleRoot(container, element)
        }

        var current$1 = container.current
        var eventTime = requestEventTime()

        {
          // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
          if ('undefined' !== typeof jest) {
            warnIfUnmockedScheduler(current$1)
            warnIfNotScopedWithMatchingAct(current$1)
          }
        }

        var lane = requestUpdateLane(current$1)

        var context = getContextForSubtree(parentComponent)

        if (container.context === null) {
          container.context = context
        } else {
          container.pendingContext = context
        }

        {
          if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
            didWarnAboutNestedUpdates = true

            error(
              'Render methods should be a pure function of props and state; ' +
                'triggering nested component updates from render is not allowed. ' +
                'If necessary, trigger nested updates in componentDidUpdate.\n\n' +
                'Check the render method of %s.',
              getComponentName(current.type) || 'Unknown'
            )
          }
        }

        var update = createUpdate(eventTime, lane) // Caution: React DevTools currently depends on this property
        // being called "element".

        update.payload = {
          element: element,
        }
        callback = callback === undefined ? null : callback

        if (callback !== null) {
          {
            if (typeof callback !== 'function') {
              error(
                'render(...): Expected the last optional `callback` argument to be a ' +
                  'function. Instead received: %s.',
                callback
              )
            }
          }

          update.callback = callback
        }

        enqueueUpdate(current$1, update)
        scheduleUpdateOnFiber(current$1, lane, eventTime)
        return lane
      }
      function getPublicRootInstance(container) {
        var containerFiber = container.current

        if (!containerFiber.child) {
          return null
        }

        switch (containerFiber.child.tag) {
          case HostComponent:
            return getPublicInstance(containerFiber.child.stateNode)

          default:
            return containerFiber.child.stateNode
        }
      }

      function markRetryLaneImpl(fiber, retryLane) {
        var suspenseState = fiber.memoizedState

        if (suspenseState !== null && suspenseState.dehydrated !== null) {
          suspenseState.retryLane = higherPriorityLane(
            suspenseState.retryLane,
            retryLane
          )
        }
      } // Increases the priority of thennables when they resolve within this boundary.

      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane)
        var alternate = fiber.alternate

        if (alternate) {
          markRetryLaneImpl(alternate, retryLane)
        }
      }

      function attemptUserBlockingHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          // We ignore HostRoots here because we can't increase
          // their priority and they should not suspend on I/O,
          // since you have to wrap anything that might suspend in
          // Suspense.
          return
        }

        var eventTime = requestEventTime()
        var lane = InputDiscreteHydrationLane
        scheduleUpdateOnFiber(fiber, lane, eventTime)
        markRetryLaneIfNotHydrated(fiber, lane)
      }
      function attemptContinuousHydration$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          // We ignore HostRoots here because we can't increase
          // their priority and they should not suspend on I/O,
          // since you have to wrap anything that might suspend in
          // Suspense.
          return
        }

        var eventTime = requestEventTime()
        var lane = SelectiveHydrationLane
        scheduleUpdateOnFiber(fiber, lane, eventTime)
        markRetryLaneIfNotHydrated(fiber, lane)
      }
      function attemptHydrationAtCurrentPriority$1(fiber) {
        if (fiber.tag !== SuspenseComponent) {
          // We ignore HostRoots here because we can't increase
          // their priority other than synchronously flush it.
          return
        }

        var eventTime = requestEventTime()
        var lane = requestUpdateLane(fiber)
        scheduleUpdateOnFiber(fiber, lane, eventTime)
        markRetryLaneIfNotHydrated(fiber, lane)
      }
      function runWithPriority$2(priority, fn) {
        try {
          setCurrentUpdateLanePriority(priority)
          return fn()
        } finally {
        }
      }
      function findHostInstanceWithNoPortals(fiber) {
        var hostFiber = findCurrentHostFiberWithNoPortals(fiber)

        if (hostFiber === null) {
          return null
        }

        if (hostFiber.tag === FundamentalComponent) {
          return hostFiber.stateNode.instance
        }

        return hostFiber.stateNode
      }

      var shouldSuspendImpl = function (fiber) {
        return false
      }

      function shouldSuspend(fiber) {
        return shouldSuspendImpl(fiber)
      }
      var overrideHookState = null
      var overrideHookStateDeletePath = null
      var overrideHookStateRenamePath = null
      var overrideProps = null
      var overridePropsDeletePath = null
      var overridePropsRenamePath = null
      var scheduleUpdate = null
      var setSuspenseHandler = null

      {
        var copyWithDeleteImpl = function (obj, path, index) {
          var key = path[index]
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj)

          if (index + 1 === path.length) {
            if (Array.isArray(updated)) {
              updated.splice(key, 1)
            } else {
              delete updated[key]
            }

            return updated
          } // $FlowFixMe number or string is fine here

          updated[key] = copyWithDeleteImpl(obj[key], path, index + 1)
          return updated
        }

        var copyWithDelete = function (obj, path) {
          return copyWithDeleteImpl(obj, path, 0)
        }

        var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
          var oldKey = oldPath[index]
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj)

          if (index + 1 === oldPath.length) {
            var newKey = newPath[index] // $FlowFixMe number or string is fine here

            updated[newKey] = updated[oldKey]

            if (Array.isArray(updated)) {
              updated.splice(oldKey, 1)
            } else {
              delete updated[oldKey]
            }
          } else {
            // $FlowFixMe number or string is fine here
            updated[oldKey] = copyWithRenameImpl(
              // $FlowFixMe number or string is fine here
              obj[oldKey],
              oldPath,
              newPath,
              index + 1
            )
          }

          return updated
        }

        var copyWithRename = function (obj, oldPath, newPath) {
          if (oldPath.length !== newPath.length) {
            warn('copyWithRename() expects paths of the same length')

            return
          } else {
            for (var i = 0; i < newPath.length - 1; i++) {
              if (oldPath[i] !== newPath[i]) {
                warn(
                  'copyWithRename() expects paths to be the same except for the deepest key'
                )

                return
              }
            }
          }

          return copyWithRenameImpl(obj, oldPath, newPath, 0)
        }

        var copyWithSetImpl = function (obj, path, index, value) {
          if (index >= path.length) {
            return value
          }

          var key = path[index]
          var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj) // $FlowFixMe number or string is fine here

          updated[key] = copyWithSetImpl(obj[key], path, index + 1, value)
          return updated
        }

        var copyWithSet = function (obj, path, value) {
          return copyWithSetImpl(obj, path, 0, value)
        }

        var findHook = function (fiber, id) {
          // For now, the "id" of stateful hooks is just the stateful hook index.
          // This may change in the future with e.g. nested hooks.
          var currentHook = fiber.memoizedState

          while (currentHook !== null && id > 0) {
            currentHook = currentHook.next
            id--
          }

          return currentHook
        } // Support DevTools editable values for useState and useReducer.

        overrideHookState = function (fiber, id, path, value) {
          var hook = findHook(fiber, id)

          if (hook !== null) {
            var newState = copyWithSet(hook.memoizedState, path, value)
            hook.memoizedState = newState
            hook.baseState = newState // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.

            fiber.memoizedProps = _assign({}, fiber.memoizedProps)
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
          }
        }

        overrideHookStateDeletePath = function (fiber, id, path) {
          var hook = findHook(fiber, id)

          if (hook !== null) {
            var newState = copyWithDelete(hook.memoizedState, path)
            hook.memoizedState = newState
            hook.baseState = newState // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.

            fiber.memoizedProps = _assign({}, fiber.memoizedProps)
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
          }
        }

        overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
          var hook = findHook(fiber, id)

          if (hook !== null) {
            var newState = copyWithRename(hook.memoizedState, oldPath, newPath)
            hook.memoizedState = newState
            hook.baseState = newState // We aren't actually adding an update to the queue,
            // because there is no update we can add for useReducer hooks that won't trigger an error.
            // (There's no appropriate action type for DevTools overrides.)
            // As a result though, React will see the scheduled update as a noop and bailout.
            // Shallow cloning props works as a workaround for now to bypass the bailout check.

            fiber.memoizedProps = _assign({}, fiber.memoizedProps)
            scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
          }
        } // Support DevTools props for function components, forwardRef, memo, host components, etc.

        overrideProps = function (fiber, path, value) {
          fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value)

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps
          }

          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
        }

        overridePropsDeletePath = function (fiber, path) {
          fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path)

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps
          }

          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
        }

        overridePropsRenamePath = function (fiber, oldPath, newPath) {
          fiber.pendingProps = copyWithRename(
            fiber.memoizedProps,
            oldPath,
            newPath
          )

          if (fiber.alternate) {
            fiber.alternate.pendingProps = fiber.pendingProps
          }

          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
        }

        scheduleUpdate = function (fiber) {
          scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp)
        }

        setSuspenseHandler = function (newShouldSuspendImpl) {
          shouldSuspendImpl = newShouldSuspendImpl
        }
      }

      function findHostInstanceByFiber(fiber) {
        var hostFiber = findCurrentHostFiber(fiber)

        if (hostFiber === null) {
          return null
        }

        return hostFiber.stateNode
      }

      function emptyFindFiberByHostInstance(instance) {
        return null
      }

      function getCurrentFiberForDevTools() {
        return current
      }

      function injectIntoDevTools(devToolsConfig) {
        var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher
        return injectInternals({
          bundleType: devToolsConfig.bundleType,
          version: devToolsConfig.version,
          rendererPackageName: devToolsConfig.rendererPackageName,
          rendererConfig: devToolsConfig.rendererConfig,
          overrideHookState: overrideHookState,
          overrideHookStateDeletePath: overrideHookStateDeletePath,
          overrideHookStateRenamePath: overrideHookStateRenamePath,
          overrideProps: overrideProps,
          overridePropsDeletePath: overridePropsDeletePath,
          overridePropsRenamePath: overridePropsRenamePath,
          setSuspenseHandler: setSuspenseHandler,
          scheduleUpdate: scheduleUpdate,
          currentDispatcherRef: ReactCurrentDispatcher,
          findHostInstanceByFiber: findHostInstanceByFiber,
          findFiberByHostInstance:
            findFiberByHostInstance || emptyFindFiberByHostInstance,
          // React Refresh
          findHostInstancesForRefresh: findHostInstancesForRefresh,
          scheduleRefresh: scheduleRefresh,
          scheduleRoot: scheduleRoot,
          setRefreshHandler: setRefreshHandler,
          // Enables DevTools to append owner stacks to error messages in DEV mode.
          getCurrentFiber: getCurrentFiberForDevTools,
        })
      }

      function ReactDOMBlockingRoot(container, tag, options) {
        this._internalRoot = createRootImpl(container, tag, options)
      }

      ReactDOMBlockingRoot.prototype.render = function (children) {
        var root = this._internalRoot

        {
          if (typeof arguments[1] === 'function') {
            error(
              'render(...): does not support the second callback argument. ' +
                'To execute a side effect after rendering, declare it in a component body with useEffect().'
            )
          }

          var container = root.containerInfo

          if (container.nodeType !== COMMENT_NODE) {
            var hostInstance = findHostInstanceWithNoPortals(root.current)

            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error(
                  'render(...): It looks like the React-rendered content of the ' +
                    'root container was removed without using React. This is not ' +
                    'supported and will cause errors. Instead, call ' +
                    "root.unmount() to empty a root's container."
                )
              }
            }
          }
        }

        updateContainer(children, root, null, null)
      }

      ReactDOMBlockingRoot.prototype.unmount = function () {
        {
          if (typeof arguments[0] === 'function') {
            error(
              'unmount(...): does not support a callback argument. ' +
                'To execute a side effect after rendering, declare it in a component body with useEffect().'
            )
          }
        }

        var root = this._internalRoot
        var container = root.containerInfo
        updateContainer(null, root, null, function () {
          unmarkContainerAsRoot(container)
        })
      }

      function createRootImpl(container, tag, options) {
        // Tag is either LegacyRoot or Concurrent Root
        var hydrate = options != null && options.hydrate === true
        ;(options != null && options.hydrationOptions) || null
        var mutableSources =
          (options != null &&
            options.hydrationOptions != null &&
            options.hydrationOptions.mutableSources) ||
          null
        var root = createContainer(container, tag, hydrate)
        markContainerAsRoot(root.current, container)
        container.nodeType

        {
          var rootContainerElement =
            container.nodeType === COMMENT_NODE
              ? container.parentNode
              : container
          listenToAllSupportedEvents(rootContainerElement)
        }

        if (mutableSources) {
          for (var i = 0; i < mutableSources.length; i++) {
            var mutableSource = mutableSources[i]
            registerMutableSourceForHydration(root, mutableSource)
          }
        }

        return root
      }
      function createLegacyRoot(container, options) {
        return new ReactDOMBlockingRoot(container, LegacyRoot, options)
      }
      function isValidContainer(node) {
        return !!(
          node &&
          (node.nodeType === ELEMENT_NODE ||
            node.nodeType === DOCUMENT_NODE ||
            node.nodeType === DOCUMENT_FRAGMENT_NODE ||
            (node.nodeType === COMMENT_NODE &&
              node.nodeValue === ' react-mount-point-unstable '))
        )
      }

      var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner
      var topLevelUpdateWarnings
      var warnedAboutHydrateAPI = false

      {
        topLevelUpdateWarnings = function (container) {
          if (
            container._reactRootContainer &&
            container.nodeType !== COMMENT_NODE
          ) {
            var hostInstance = findHostInstanceWithNoPortals(
              container._reactRootContainer._internalRoot.current
            )

            if (hostInstance) {
              if (hostInstance.parentNode !== container) {
                error(
                  'render(...): It looks like the React-rendered content of this ' +
                    'container was removed without using React. This is not ' +
                    'supported and will cause errors. Instead, call ' +
                    'ReactDOM.unmountComponentAtNode to empty a container.'
                )
              }
            }
          }

          var isRootRenderedBySomeReact = !!container._reactRootContainer
          var rootEl = getReactRootElementInContainer(container)
          var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl))

          if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
            error(
              'render(...): Replacing React-rendered children with a new root ' +
                'component. If you intended to update the children of this node, ' +
                'you should instead have the existing children update their state ' +
                'and render the new components instead of calling ReactDOM.render.'
            )
          }

          if (
            container.nodeType === ELEMENT_NODE &&
            container.tagName &&
            container.tagName.toUpperCase() === 'BODY'
          ) {
            error(
              'render(): Rendering components directly into document.body is ' +
                'discouraged, since its children are often manipulated by third-party ' +
                'scripts and browser extensions. This may lead to subtle ' +
                'reconciliation issues. Try rendering into a container element created ' +
                'for your app.'
            )
          }
        }
      }

      function getReactRootElementInContainer(container) {
        if (!container) {
          return null
        }

        if (container.nodeType === DOCUMENT_NODE) {
          return container.documentElement
        } else {
          return container.firstChild
        }
      }

      function shouldHydrateDueToLegacyHeuristic(container) {
        var rootElement = getReactRootElementInContainer(container)
        return !!(
          rootElement &&
          rootElement.nodeType === ELEMENT_NODE &&
          rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME)
        )
      }

      function legacyCreateRootFromDOMContainer(container, forceHydrate) {
        var shouldHydrate =
          forceHydrate || shouldHydrateDueToLegacyHeuristic(container) // First clear any existing content.

        if (!shouldHydrate) {
          var warned = false
          var rootSibling

          while ((rootSibling = container.lastChild)) {
            {
              if (
                !warned &&
                rootSibling.nodeType === ELEMENT_NODE &&
                rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)
              ) {
                warned = true

                error(
                  'render(): Target node has markup rendered by React, but there ' +
                    'are unrelated nodes as well. This is most commonly caused by ' +
                    'white-space inserted around server-rendered markup.'
                )
              }
            }

            container.removeChild(rootSibling)
          }
        }

        {
          if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
            warnedAboutHydrateAPI = true

            warn(
              'render(): Calling ReactDOM.render() to hydrate server-rendered markup ' +
                'will stop working in React v18. Replace the ReactDOM.render() call ' +
                'with ReactDOM.hydrate() if you want React to attach to the server HTML.'
            )
          }
        }

        return createLegacyRoot(
          container,
          shouldHydrate
            ? {
                hydrate: true,
              }
            : undefined
        )
      }

      function warnOnInvalidCallback$1(callback, callerName) {
        {
          if (callback !== null && typeof callback !== 'function') {
            error(
              '%s(...): Expected the last optional `callback` argument to be a ' +
                'function. Instead received: %s.',
              callerName,
              callback
            )
          }
        }
      }

      function legacyRenderSubtreeIntoContainer(
        parentComponent,
        children,
        container,
        forceHydrate,
        callback
      ) {
        {
          topLevelUpdateWarnings(container)
          warnOnInvalidCallback$1(
            callback === undefined ? null : callback,
            'render'
          )
        } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
        // member of intersection type." Whyyyyyy.

        var root = container._reactRootContainer
        var fiberRoot

        if (!root) {
          // Initial mount
          root = container._reactRootContainer =
            legacyCreateRootFromDOMContainer(container, forceHydrate)
          fiberRoot = root._internalRoot

          if (typeof callback === 'function') {
            var originalCallback = callback

            callback = function () {
              var instance = getPublicRootInstance(fiberRoot)
              originalCallback.call(instance)
            }
          } // Initial mount should not be batched.

          unbatchedUpdates(function () {
            updateContainer(children, fiberRoot, parentComponent, callback)
          })
        } else {
          fiberRoot = root._internalRoot

          if (typeof callback === 'function') {
            var _originalCallback = callback

            callback = function () {
              var instance = getPublicRootInstance(fiberRoot)

              _originalCallback.call(instance)
            }
          } // Update

          updateContainer(children, fiberRoot, parentComponent, callback)
        }

        return getPublicRootInstance(fiberRoot)
      }

      function findDOMNode(componentOrElement) {
        {
          var owner = ReactCurrentOwner$3.current

          if (owner !== null && owner.stateNode !== null) {
            var warnedAboutRefsInRender =
              owner.stateNode._warnedAboutRefsInRender

            if (!warnedAboutRefsInRender) {
              error(
                '%s is accessing findDOMNode inside its render(). ' +
                  'render() should be a pure function of props and state. It should ' +
                  'never access something that requires stale data from the previous ' +
                  'render, such as refs. Move this logic to componentDidMount and ' +
                  'componentDidUpdate instead.',
                getComponentName(owner.type) || 'A component'
              )
            }

            owner.stateNode._warnedAboutRefsInRender = true
          }
        }

        if (componentOrElement == null) {
          return null
        }

        if (componentOrElement.nodeType === ELEMENT_NODE) {
          return componentOrElement
        }

        {
          return findHostInstanceWithWarning(componentOrElement, 'findDOMNode')
        }
      }
      function hydrate(element, container, callback) {
        if (!isValidContainer(container)) {
          {
            throw Error('Target container is not a DOM element.')
          }
        }

        {
          var isModernRoot =
            isContainerMarkedAsRoot(container) &&
            container._reactRootContainer === undefined

          if (isModernRoot) {
            error(
              'You are calling ReactDOM.hydrate() on a container that was previously ' +
                'passed to ReactDOM.createRoot(). This is not supported. ' +
                'Did you mean to call createRoot(container, {hydrate: true}).render(element)?'
            )
          }
        } // TODO: throw or warn if we couldn't hydrate?

        return legacyRenderSubtreeIntoContainer(
          null,
          element,
          container,
          true,
          callback
        )
      }
      function render(element, container, callback) {
        if (!isValidContainer(container)) {
          {
            throw Error('Target container is not a DOM element.')
          }
        }

        {
          var isModernRoot =
            isContainerMarkedAsRoot(container) &&
            container._reactRootContainer === undefined

          if (isModernRoot) {
            error(
              'You are calling ReactDOM.render() on a container that was previously ' +
                'passed to ReactDOM.createRoot(). This is not supported. ' +
                'Did you mean to call root.render(element)?'
            )
          }
        }

        return legacyRenderSubtreeIntoContainer(
          null,
          element,
          container,
          false,
          callback
        )
      }
      function unstable_renderSubtreeIntoContainer(
        parentComponent,
        element,
        containerNode,
        callback
      ) {
        if (!isValidContainer(containerNode)) {
          {
            throw Error('Target container is not a DOM element.')
          }
        }

        if (!(parentComponent != null && has(parentComponent))) {
          {
            throw Error('parentComponent must be a valid React Component')
          }
        }

        return legacyRenderSubtreeIntoContainer(
          parentComponent,
          element,
          containerNode,
          false,
          callback
        )
      }
      function unmountComponentAtNode(container) {
        if (!isValidContainer(container)) {
          {
            throw Error(
              'unmountComponentAtNode(...): Target container is not a DOM element.'
            )
          }
        }

        {
          var isModernRoot =
            isContainerMarkedAsRoot(container) &&
            container._reactRootContainer === undefined

          if (isModernRoot) {
            error(
              'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' +
                'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?'
            )
          }
        }

        if (container._reactRootContainer) {
          {
            var rootEl = getReactRootElementInContainer(container)
            var renderedByDifferentReact =
              rootEl && !getInstanceFromNode(rootEl)

            if (renderedByDifferentReact) {
              error(
                "unmountComponentAtNode(): The node you're attempting to unmount " +
                  'was rendered by another copy of React.'
              )
            }
          } // Unmount should not be batched.

          unbatchedUpdates(function () {
            legacyRenderSubtreeIntoContainer(
              null,
              null,
              container,
              false,
              function () {
                // $FlowFixMe This should probably use `delete container._reactRootContainer`
                container._reactRootContainer = null
                unmarkContainerAsRoot(container)
              }
            )
          }) // If you call unmountComponentAtNode twice in quick succession, you'll
          // get `true` twice. That's probably fine?

          return true
        } else {
          {
            var _rootEl = getReactRootElementInContainer(container)

            var hasNonRootReactChild = !!(
              _rootEl && getInstanceFromNode(_rootEl)
            ) // Check if the container itself is a React root node.

            var isContainerReactRoot =
              container.nodeType === ELEMENT_NODE &&
              isValidContainer(container.parentNode) &&
              !!container.parentNode._reactRootContainer

            if (hasNonRootReactChild) {
              error(
                "unmountComponentAtNode(): The node you're attempting to unmount " +
                  'was rendered by React and is not a top-level container. %s',
                isContainerReactRoot
                  ? 'You may have accidentally passed in a React root node instead ' +
                      'of its container.'
                  : 'Instead, have the parent component update its state and ' +
                      'rerender in order to remove this component.'
              )
            }
          }

          return false
        }
      }

      setAttemptUserBlockingHydration(attemptUserBlockingHydration$1)
      setAttemptContinuousHydration(attemptContinuousHydration$1)
      setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1)
      setAttemptHydrationAtPriority(runWithPriority$2)
      var didWarnAboutUnstableCreatePortal = false

      {
        if (
          typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null ||
          typeof Map.prototype.forEach !== 'function' ||
          typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null ||
          typeof Set.prototype.clear !== 'function' ||
          typeof Set.prototype.forEach !== 'function'
        ) {
          error(
            'React depends on Map and Set built-in types. Make sure that you load a ' +
              'polyfill in older browsers. https://reactjs.org/link/react-polyfills'
          )
        }
      }

      setRestoreImplementation(restoreControlledState$3)
      setBatchingImplementation(
        batchedUpdates$1,
        discreteUpdates$1,
        flushDiscreteUpdates,
        batchedEventUpdates$1
      )

      function createPortal$1(children, container) {
        var key =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : null

        if (!isValidContainer(container)) {
          {
            throw Error('Target container is not a DOM element.')
          }
        } // TODO: pass ReactDOM portal implementation as third argument
        // $FlowFixMe The Flow type is opaque but there's no way to actually create it.

        return createPortal(children, container, null, key)
      }

      function renderSubtreeIntoContainer(
        parentComponent,
        element,
        containerNode,
        callback
      ) {
        return unstable_renderSubtreeIntoContainer(
          parentComponent,
          element,
          containerNode,
          callback
        )
      }

      function unstable_createPortal(children, container) {
        var key =
          arguments.length > 2 && arguments[2] !== undefined
            ? arguments[2]
            : null

        {
          if (!didWarnAboutUnstableCreatePortal) {
            didWarnAboutUnstableCreatePortal = true

            warn(
              'The ReactDOM.unstable_createPortal() alias has been deprecated, ' +
                'and will be removed in React 18+. Update your code to use ' +
                'ReactDOM.createPortal() instead. It has the exact same API, ' +
                'but without the "unstable_" prefix.'
            )
          }
        }

        return createPortal$1(children, container, key)
      }

      var Internals = {
        // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
        // This is an array for better minification.
        Events: [
          getInstanceFromNode,
          getNodeFromInstance,
          getFiberCurrentPropsFromNode,
          enqueueStateRestore,
          restoreStateIfNeeded,
          flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
          IsThisRendererActing,
        ],
      }
      var foundDevTools = injectIntoDevTools({
        findFiberByHostInstance: getClosestInstanceFromNode,
        bundleType: 1,
        version: ReactVersion,
        rendererPackageName: 'react-dom',
      })

      {
        if (!foundDevTools && canUseDOM && window.top === window.self) {
          // If we're in Chrome or Firefox, provide a download link if not installed.
          if (
            (navigator.userAgent.indexOf('Chrome') > -1 &&
              navigator.userAgent.indexOf('Edge') === -1) ||
            navigator.userAgent.indexOf('Firefox') > -1
          ) {
            var protocol = window.location.protocol // Don't warn in exotic cases like chrome-extension://.

            if (/^(https?|file):$/.test(protocol)) {
              // eslint-disable-next-line react-internal/no-production-logging
              console.info(
                '%cDownload the React DevTools ' +
                  'for a better development experience: ' +
                  'https://reactjs.org/link/react-devtools' +
                  (protocol === 'file:'
                    ? '\nYou might need to use a local HTTP server (instead of file://): ' +
                      'https://reactjs.org/link/react-devtools-faq'
                    : ''),
                'font-weight:bold'
              )
            }
          }
        }
      }

      reactDom_development.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED =
        Internals
      reactDom_development.createPortal = createPortal$1
      reactDom_development.findDOMNode = findDOMNode
      reactDom_development.flushSync = flushSync
      reactDom_development.hydrate = hydrate
      reactDom_development.render = render
      reactDom_development.unmountComponentAtNode = unmountComponentAtNode
      reactDom_development.unstable_batchedUpdates = batchedUpdates$1
      reactDom_development.unstable_createPortal = unstable_createPortal
      reactDom_development.unstable_renderSubtreeIntoContainer =
        renderSubtreeIntoContainer
      reactDom_development.version = ReactVersion
    })()
  }

  ;(function (module) {
    {
      module.exports = reactDom_development
    }
  })(reactDom)

  var ReactDOM = /*@__PURE__*/ getDefaultExportFromCjs(reactDomExports)

  function safeFindDOMNode(componentOrElement) {
    if (componentOrElement && 'setState' in componentOrElement) {
      return ReactDOM.findDOMNode(componentOrElement)
    }

    return componentOrElement != null ? componentOrElement : null
  }

  var ownerDocument = function (componentOrElement) {
    return ownerDocument$1(safeFindDOMNode(componentOrElement))
  }

  var escapeKeyCode = 27

  var noop = function noop() {}

  function isLeftClickEvent(event) {
    return event.button === 0
  }

  function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey)
  }

  var getRefTarget = function getRefTarget(ref) {
    return ref && ('current' in ref ? ref.current : ref)
  }

  /**
   * The `useRootClose` hook registers your callback on the document
   * when rendered. Powers the `<Overlay/>` component. This is used achieve modal
   * style behavior where your callback is triggered when the user tries to
   * interact with the rest of the document or hits the `esc` key.
   *
   * @param {Ref<HTMLElement>| HTMLElement} ref  The element boundary
   * @param {function} onRootClose
   * @param {object=}  options
   * @param {boolean=} options.disabled
   * @param {string=}  options.clickTrigger The DOM event name (click, mousedown, etc) to attach listeners on
   */
  function useRootClose(ref, onRootClose, _temp) {
    var _ref = _temp === void 0 ? {} : _temp,
      disabled = _ref.disabled,
      _ref$clickTrigger = _ref.clickTrigger,
      clickTrigger = _ref$clickTrigger === void 0 ? 'click' : _ref$clickTrigger

    var preventMouseRootCloseRef = reactExports.useRef(false)
    var onClose = onRootClose || noop
    var handleMouseCapture = reactExports.useCallback(
      function (e) {
        var _e$composedPath$

        var currentTarget = getRefTarget(ref)
        warning_1(
          !!currentTarget,
          'RootClose captured a close event but does not have a ref to compare it to. ' +
            'useRootClose(), should be passed a ref that resolves to a DOM node'
        )
        preventMouseRootCloseRef.current =
          !currentTarget ||
          isModifiedEvent(e) ||
          !isLeftClickEvent(e) ||
          !!contains$1(
            currentTarget,
            (_e$composedPath$ =
              e.composedPath == null ? void 0 : e.composedPath()[0]) != null
              ? _e$composedPath$
              : e.target
          )
      },
      [ref]
    )
    var handleMouse = useEventCallback(function (e) {
      if (!preventMouseRootCloseRef.current) {
        onClose(e)
      }
    })
    var handleKeyUp = useEventCallback(function (e) {
      if (e.keyCode === escapeKeyCode) {
        onClose(e)
      }
    })
    reactExports.useEffect(
      function () {
        if (disabled || ref == null) return undefined // Store the current event to avoid triggering handlers immediately
        // https://github.com/facebook/react/issues/20074

        var currentEvent = window.event
        var doc = ownerDocument(getRefTarget(ref)) // Use capture for this listener so it fires before React's listener, to
        // avoid false positives in the contains() check below if the target DOM
        // element is removed in the React mouse callback.

        var removeMouseCaptureListener = listen(
          doc,
          clickTrigger,
          handleMouseCapture,
          true
        )
        var removeMouseListener = listen(doc, clickTrigger, function (e) {
          // skip if this event is the same as the one running when we added the handlers
          if (e === currentEvent) {
            currentEvent = undefined
            return
          }

          handleMouse(e)
        })
        var removeKeyupListener = listen(doc, 'keyup', function (e) {
          // skip if this event is the same as the one running when we added the handlers
          if (e === currentEvent) {
            currentEvent = undefined
            return
          }

          handleKeyUp(e)
        })
        var mobileSafariHackListeners = []

        if ('ontouchstart' in doc.documentElement) {
          mobileSafariHackListeners = [].slice
            .call(doc.body.children)
            .map(function (el) {
              return listen(el, 'mousemove', noop)
            })
        }

        return function () {
          removeMouseCaptureListener()
          removeMouseListener()
          removeKeyupListener()
          mobileSafariHackListeners.forEach(function (remove) {
            return remove()
          })
        }
      },
      [
        ref,
        disabled,
        clickTrigger,
        handleMouseCapture,
        handleMouse,
        handleKeyUp,
      ]
    )
  }

  function toModifierMap(modifiers) {
    var result = {}

    if (!Array.isArray(modifiers)) {
      return modifiers || result
    } // eslint-disable-next-line no-unused-expressions

    modifiers == null
      ? void 0
      : modifiers.forEach(function (m) {
          result[m.name] = m
        })
    return result
  }
  function toModifierArray(map) {
    if (map === void 0) {
      map = {}
    }

    if (Array.isArray(map)) return map
    return Object.keys(map).map(function (k) {
      map[k].name = k
      return map[k]
    })
  }
  function mergeOptionsWithPopperConfig(_ref) {
    var _modifiers$preventOve,
      _modifiers$preventOve2,
      _modifiers$offset,
      _modifiers$arrow

    var enabled = _ref.enabled,
      enableEvents = _ref.enableEvents,
      placement = _ref.placement,
      flip = _ref.flip,
      offset = _ref.offset,
      fixed = _ref.fixed,
      containerPadding = _ref.containerPadding,
      arrowElement = _ref.arrowElement,
      _ref$popperConfig = _ref.popperConfig,
      popperConfig = _ref$popperConfig === void 0 ? {} : _ref$popperConfig
    var modifiers = toModifierMap(popperConfig.modifiers)
    return _extends({}, popperConfig, {
      placement: placement,
      enabled: enabled,
      strategy: fixed ? 'fixed' : popperConfig.strategy,
      modifiers: toModifierArray(
        _extends({}, modifiers, {
          eventListeners: {
            enabled: enableEvents,
          },
          preventOverflow: _extends({}, modifiers.preventOverflow, {
            options: containerPadding
              ? _extends(
                  {
                    padding: containerPadding,
                  },
                  (_modifiers$preventOve = modifiers.preventOverflow) == null
                    ? void 0
                    : _modifiers$preventOve.options
                )
              : (_modifiers$preventOve2 = modifiers.preventOverflow) == null
              ? void 0
              : _modifiers$preventOve2.options,
          }),
          offset: {
            options: _extends(
              {
                offset: offset,
              },
              (_modifiers$offset = modifiers.offset) == null
                ? void 0
                : _modifiers$offset.options
            ),
          },
          arrow: _extends({}, modifiers.arrow, {
            enabled: !!arrowElement,
            options: _extends(
              {},
              (_modifiers$arrow = modifiers.arrow) == null
                ? void 0
                : _modifiers$arrow.options,
              {
                element: arrowElement,
              }
            ),
          }),
          flip: _extends(
            {
              enabled: !!flip,
            },
            modifiers.flip
          ),
        })
      ),
    })
  }

  /**
   * Checks if a given element has a CSS class.
   *
   * @param element the element
   * @param className the CSS class name
   */
  function hasClass(element, className) {
    if (element.classList)
      return !!className && element.classList.contains(className)
    return (
      (' ' + (element.className.baseVal || element.className) + ' ').indexOf(
        ' ' + className + ' '
      ) !== -1
    )
  }

  /**
   * Adds a CSS class to a given element.
   *
   * @param element the element
   * @param className the CSS class name
   */

  function addClass(element, className) {
    if (element.classList) element.classList.add(className)
    else if (!hasClass(element, className))
      if (typeof element.className === 'string')
        element.className = element.className + ' ' + className
      else
        element.setAttribute(
          'class',
          ((element.className && element.className.baseVal) || '') +
            ' ' +
            className
        )
  }

  function replaceClassName(origClass, classToRemove) {
    return origClass
      .replace(new RegExp('(^|\\s)' + classToRemove + '(?:\\s|$)', 'g'), '$1')
      .replace(/\s+/g, ' ')
      .replace(/^\s*|\s*$/g, '')
  }
  /**
   * Removes a CSS class from a given element.
   *
   * @param element the element
   * @param className the CSS class name
   */

  function removeClass(element, className) {
    if (element.classList) {
      element.classList.remove(className)
    } else if (typeof element.className === 'string') {
      element.className = replaceClassName(element.className, className)
    } else {
      element.setAttribute(
        'class',
        replaceClassName(
          (element.className && element.className.baseVal) || '',
          className
        )
      )
    }
  }

  var size
  function scrollbarSize(recalc) {
    if ((!size && size !== 0) || recalc) {
      if (canUseDOM) {
        var scrollDiv = document.createElement('div')
        scrollDiv.style.position = 'absolute'
        scrollDiv.style.top = '-9999px'
        scrollDiv.style.width = '50px'
        scrollDiv.style.height = '50px'
        scrollDiv.style.overflow = 'scroll'
        document.body.appendChild(scrollDiv)
        size = scrollDiv.offsetWidth - scrollDiv.clientWidth
        document.body.removeChild(scrollDiv)
      }
    }

    return size
  }

  var resolveContainerRef = function resolveContainerRef(ref) {
    var _ref

    if (typeof document === 'undefined') return null
    if (ref == null) return ownerDocument$1().body
    if (typeof ref === 'function') ref = ref()
    if (ref && 'current' in ref) ref = ref.current
    if ((_ref = ref) != null && _ref.nodeType) return ref || null
    return null
  }
  function useWaitForDOMRef(ref, onResolved) {
    var _useState = reactExports.useState(function () {
        return resolveContainerRef(ref)
      }),
      resolvedRef = _useState[0],
      setRef = _useState[1]

    if (!resolvedRef) {
      var earlyRef = resolveContainerRef(ref)
      if (earlyRef) setRef(earlyRef)
    }

    reactExports.useEffect(
      function () {
        if (onResolved && resolvedRef) {
          onResolved(resolvedRef)
        }
      },
      [onResolved, resolvedRef]
    )
    reactExports.useEffect(
      function () {
        var nextRef = resolveContainerRef(ref)

        if (nextRef !== resolvedRef) {
          setRef(nextRef)
        }
      },
      [ref, resolvedRef]
    )
    return resolvedRef
  }

  var toFnRef = function toFnRef(ref) {
    return !ref || typeof ref === 'function'
      ? ref
      : function (value) {
          ref.current = value
        }
  }

  function mergeRefs(refA, refB) {
    var a = toFnRef(refA)
    var b = toFnRef(refB)
    return function (value) {
      if (a) a(value)
      if (b) b(value)
    }
  }
  /**
   * Create and returns a single callback ref composed from two other Refs.
   *
   * ```tsx
   * const Button = React.forwardRef((props, ref) => {
   *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();
   *   const mergedRef = useMergedRefs(ref, attachRef);
   *
   *   return <button ref={mergedRef} {...props}/>
   * })
   * ```
   *
   * @param refA A Callback or mutable Ref
   * @param refB A Callback or mutable Ref
   * @category refs
   */

  function useMergedRefs(refA, refB) {
    return reactExports.useMemo(
      function () {
        return mergeRefs(refA, refB)
      },
      [refA, refB]
    )
  }

  /**
   * Built on top of `Popper.js`, the overlay component is
   * great for custom tooltip overlays.
   */
  var Overlay = /*#__PURE__*/ React.forwardRef(function (props, outerRef) {
    var flip = props.flip,
      offset = props.offset,
      placement = props.placement,
      _props$containerPaddi = props.containerPadding,
      containerPadding =
        _props$containerPaddi === void 0 ? 5 : _props$containerPaddi,
      _props$popperConfig = props.popperConfig,
      popperConfig = _props$popperConfig === void 0 ? {} : _props$popperConfig,
      Transition = props.transition

    var _useCallbackRef = useCallbackRef(),
      rootElement = _useCallbackRef[0],
      attachRef = _useCallbackRef[1]

    var _useCallbackRef2 = useCallbackRef(),
      arrowElement = _useCallbackRef2[0],
      attachArrowRef = _useCallbackRef2[1]

    var mergedRef = useMergedRefs(attachRef, outerRef)
    var container = useWaitForDOMRef(props.container)
    var target = useWaitForDOMRef(props.target)

    var _useState = reactExports.useState(!props.show),
      exited = _useState[0],
      setExited = _useState[1]

    var _usePopper = usePopper(
        target,
        rootElement,
        mergeOptionsWithPopperConfig({
          placement: placement,
          enableEvents: !!props.show,
          containerPadding: containerPadding || 5,
          flip: flip,
          offset: offset,
          arrowElement: arrowElement,
          popperConfig: popperConfig,
        })
      ),
      styles = _usePopper.styles,
      attributes = _usePopper.attributes,
      popper = _objectWithoutPropertiesLoose(_usePopper, [
        'styles',
        'attributes',
      ])

    if (props.show) {
      if (exited) setExited(false)
    } else if (!props.transition && !exited) {
      setExited(true)
    }

    var handleHidden = function handleHidden() {
      setExited(true)

      if (props.onExited) {
        props.onExited.apply(props, arguments)
      }
    } // Don't un-render the overlay while it's transitioning out.

    var mountOverlay = props.show || (Transition && !exited)
    useRootClose(rootElement, props.onHide, {
      disabled: !props.rootClose || props.rootCloseDisabled,
      clickTrigger: props.rootCloseEvent,
    })

    if (!mountOverlay) {
      // Don't bother showing anything if we don't have to.
      return null
    }

    var child = props.children(
      _extends({}, popper, {
        show: !!props.show,
        props: _extends({}, attributes.popper, {
          style: styles.popper,
          ref: mergedRef,
        }),
        arrowProps: _extends({}, attributes.arrow, {
          style: styles.arrow,
          ref: attachArrowRef,
        }),
      })
    )

    if (Transition) {
      var onExit = props.onExit,
        onExiting = props.onExiting,
        onEnter = props.onEnter,
        onEntering = props.onEntering,
        onEntered = props.onEntered
      child = /*#__PURE__*/ React.createElement(
        Transition,
        {
          in: props.show,
          appear: true,
          onExit: onExit,
          onExiting: onExiting,
          onExited: handleHidden,
          onEnter: onEnter,
          onEntering: onEntering,
          onEntered: onEntered,
        },
        child
      )
    }

    return container
      ? /*#__PURE__*/ ReactDOM.createPortal(child, container)
      : null
  })
  Overlay.displayName = 'Overlay'
  Overlay.propTypes = {
    /**
     * Set the visibility of the Overlay
     */
    show: propTypesExports.bool,

    /** Specify where the overlay element is positioned in relation to the target element */
    placement: propTypesExports.oneOf(placements),

    /**
     * A DOM Element, Ref to an element, or function that returns either. The `target` element is where
     * the overlay is positioned relative to.
     */
    target: propTypesExports.any,

    /**
     * A DOM Element, Ref to an element, or function that returns either. The `container` will have the Portal children
     * appended to it.
     */
    container: propTypesExports.any,

    /**
     * Enables the Popper.js `flip` modifier, allowing the Overlay to
     * automatically adjust it's placement in case of overlap with the viewport or toggle.
     * Refer to the [flip docs](https://popper.js.org/popper-documentation.html#modifiers..flip.enabled) for more info
     */
    flip: propTypesExports.bool,

    /**
     * A render prop that returns an element to overlay and position. See
     * the [react-popper documentation](https://github.com/FezVrasta/react-popper#children) for more info.
     *
     * @type {Function ({
     *   show: boolean,
     *   placement: Placement,
     *   update: () => void,
     *   forceUpdate: () => void,
     *   props: {
     *     ref: (?HTMLElement) => void,
     *     style: { [string]: string | number },
     *     aria-labelledby: ?string
     *     [string]: string | number,
     *   },
     *   arrowProps: {
     *     ref: (?HTMLElement) => void,
     *     style: { [string]: string | number },
     *     [string]: string | number,
     *   },
     * }) => React.Element}
     */
    children: propTypesExports.func.isRequired,

    /**
     * Control how much space there is between the edge of the boundary element and overlay.
     * A convenience shortcut to setting `popperConfig.modfiers.preventOverflow.padding`
     */
    containerPadding: propTypesExports.number,

    /**
     * A set of popper options and props passed directly to react-popper's Popper component.
     */
    popperConfig: propTypesExports.object,

    /**
     * Specify whether the overlay should trigger `onHide` when the user clicks outside the overlay
     */
    rootClose: propTypesExports.bool,

    /**
     * Specify event for toggling overlay
     */
    rootCloseEvent: propTypesExports.oneOf(['click', 'mousedown']),

    /**
     * Specify disabled for disable RootCloseWrapper
     */
    rootCloseDisabled: propTypesExports.bool,

    /**
     * A Callback fired by the Overlay when it wishes to be hidden.
     *
     * __required__ when `rootClose` is `true`.
     *
     * @type func
     */
    onHide: function onHide(props) {
      for (
        var _len = arguments.length,
          args = new Array(_len > 1 ? _len - 1 : 0),
          _key = 1;
        _key < _len;
        _key++
      ) {
        args[_key - 1] = arguments[_key]
      }

      if (props.rootClose) {
        var _PropTypes$func

        return (_PropTypes$func = propTypesExports.func).isRequired.apply(
          _PropTypes$func,
          [props].concat(args)
        )
      }

      return propTypesExports.func.apply(propTypesExports, [props].concat(args))
    },

    /**
     * A `react-transition-group@2.0.0` `<Transition/>` component
     * used to animate the overlay as it changes visibility.
     */
    // @ts-ignore
    transition: propTypesExports.elementType,

    /**
     * Callback fired before the Overlay transitions in
     */
    onEnter: propTypesExports.func,

    /**
     * Callback fired as the Overlay begins to transition in
     */
    onEntering: propTypesExports.func,

    /**
     * Callback fired after the Overlay finishes transitioning in
     */
    onEntered: propTypesExports.func,

    /**
     * Callback fired right before the Overlay transitions out
     */
    onExit: propTypesExports.func,

    /**
     * Callback fired as the Overlay begins to transition out
     */
    onExiting: propTypesExports.func,

    /**
     * Callback fired after the Overlay finishes transitioning out
     */
    onExited: propTypesExports.func,
  }
  var Overlay$1 = Overlay

  function useClickOutside(_ref) {
    var ref = _ref.ref,
      callback = _ref.callback
    reactExports.useEffect(
      function () {
        var handleClickOutside = function handleClickOutside(e) {
          if (ref.current && !ref.current.contains(e.target)) {
            callback()
          }
        }
        document.addEventListener('mousedown', handleClickOutside)
        return function () {
          document.removeEventListener('mousedown', handleClickOutside)
        }
      },
      [ref, callback]
    )
  }

  var _excluded$7 = [
    'style',
    'className',
    'event',
    'selected',
    'isAllDay',
    'onSelect',
    'onDoubleClick',
    'onKeyPress',
    'localizer',
    'continuesPrior',
    'continuesAfter',
    'accessors',
    'getters',
    'children',
    'components',
    'slotStart',
    'slotEnd',
  ]
  var EventCell = /*#__PURE__*/ (function (_React$Component) {
    _inherits(EventCell, _React$Component)
    var _super = _createSuper(EventCell)
    function EventCell() {
      _classCallCheck(this, EventCell)
      return _super.apply(this, arguments)
    }
    _createClass(EventCell, [
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            style = _this$props.style,
            className = _this$props.className,
            event = _this$props.event,
            selected = _this$props.selected,
            isAllDay = _this$props.isAllDay,
            onSelect = _this$props.onSelect,
            _onDoubleClick = _this$props.onDoubleClick,
            _onKeyPress = _this$props.onKeyPress,
            localizer = _this$props.localizer,
            continuesPrior = _this$props.continuesPrior,
            continuesAfter = _this$props.continuesAfter,
            accessors = _this$props.accessors,
            getters = _this$props.getters,
            children = _this$props.children,
            _this$props$component = _this$props.components,
            Event = _this$props$component.event,
            EventWrapper = _this$props$component.eventWrapper,
            slotStart = _this$props.slotStart,
            slotEnd = _this$props.slotEnd,
            props = _objectWithoutProperties(_this$props, _excluded$7)
          delete props.resizable
          var title = accessors.title(event)
          var tooltip = accessors.tooltip(event)
          var end = accessors.end(event)
          var start = accessors.start(event)
          var allDay = accessors.allDay(event)
          var showAsAllDay =
            isAllDay ||
            allDay ||
            localizer.diff(start, localizer.ceil(end, 'day'), 'day') > 1
          var userProps = getters.eventProp(event, start, end, selected)
          var content = /*#__PURE__*/ React.createElement(
            'div',
            {
              className: 'rbc-event-content',
              title: tooltip || undefined,
            },
            Event
              ? /*#__PURE__*/ React.createElement(Event, {
                  event: event,
                  continuesPrior: continuesPrior,
                  continuesAfter: continuesAfter,
                  title: title,
                  isAllDay: allDay,
                  localizer: localizer,
                  slotStart: slotStart,
                  slotEnd: slotEnd,
                })
              : title
          )
          return /*#__PURE__*/ React.createElement(
            EventWrapper,
            Object.assign({}, this.props, {
              type: 'date',
            }),
            /*#__PURE__*/ React.createElement(
              'div',
              Object.assign({}, props, {
                tabIndex: 0,
                style: _objectSpread2(
                  _objectSpread2({}, userProps.style),
                  style
                ),
                className: clsx('rbc-event', className, userProps.className, {
                  'rbc-selected': selected,
                  'rbc-event-allday': showAsAllDay,
                  'rbc-event-continues-prior': continuesPrior,
                  'rbc-event-continues-after': continuesAfter,
                }),
                onClick: function onClick(e) {
                  return onSelect && onSelect(event, e)
                },
                onDoubleClick: function onDoubleClick(e) {
                  return _onDoubleClick && _onDoubleClick(event, e)
                },
                onKeyPress: function onKeyPress(e) {
                  return _onKeyPress && _onKeyPress(event, e)
                },
              }),
              typeof children === 'function' ? children(content) : content
            )
          )
        },
      },
    ])
    return EventCell
  })(React.Component)

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */

  function listCacheClear$1() {
    this.__data__ = []
    this.size = 0
  }

  var _listCacheClear = listCacheClear$1

  var eq$3 = eq_1

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf$4(array, key) {
    var length = array.length
    while (length--) {
      if (eq$3(array[length][0], key)) {
        return length
      }
    }
    return -1
  }

  var _assocIndexOf = assocIndexOf$4

  var assocIndexOf$3 = _assocIndexOf

  /** Used for built-in method references. */
  var arrayProto = Array.prototype

  /** Built-in value references. */
  var splice = arrayProto.splice

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete$1(key) {
    var data = this.__data__,
      index = assocIndexOf$3(data, key)

    if (index < 0) {
      return false
    }
    var lastIndex = data.length - 1
    if (index == lastIndex) {
      data.pop()
    } else {
      splice.call(data, index, 1)
    }
    --this.size
    return true
  }

  var _listCacheDelete = listCacheDelete$1

  var assocIndexOf$2 = _assocIndexOf

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet$1(key) {
    var data = this.__data__,
      index = assocIndexOf$2(data, key)

    return index < 0 ? undefined : data[index][1]
  }

  var _listCacheGet = listCacheGet$1

  var assocIndexOf$1 = _assocIndexOf

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas$1(key) {
    return assocIndexOf$1(this.__data__, key) > -1
  }

  var _listCacheHas = listCacheHas$1

  var assocIndexOf = _assocIndexOf

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet$1(key, value) {
    var data = this.__data__,
      index = assocIndexOf(data, key)

    if (index < 0) {
      ++this.size
      data.push([key, value])
    } else {
      data[index][1] = value
    }
    return this
  }

  var _listCacheSet = listCacheSet$1

  var listCacheClear = _listCacheClear,
    listCacheDelete = _listCacheDelete,
    listCacheGet = _listCacheGet,
    listCacheHas = _listCacheHas,
    listCacheSet = _listCacheSet

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache$4(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length

    this.clear()
    while (++index < length) {
      var entry = entries[index]
      this.set(entry[0], entry[1])
    }
  }

  // Add methods to `ListCache`.
  ListCache$4.prototype.clear = listCacheClear
  ListCache$4.prototype['delete'] = listCacheDelete
  ListCache$4.prototype.get = listCacheGet
  ListCache$4.prototype.has = listCacheHas
  ListCache$4.prototype.set = listCacheSet

  var _ListCache = ListCache$4

  var ListCache$3 = _ListCache

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear$1() {
    this.__data__ = new ListCache$3()
    this.size = 0
  }

  var _stackClear = stackClear$1

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function stackDelete$1(key) {
    var data = this.__data__,
      result = data['delete'](key)

    this.size = data.size
    return result
  }

  var _stackDelete = stackDelete$1

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */

  function stackGet$1(key) {
    return this.__data__.get(key)
  }

  var _stackGet = stackGet$1

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function stackHas$1(key) {
    return this.__data__.has(key)
  }

  var _stackHas = stackHas$1

  var root$6 = _root

  /** Used to detect overreaching core-js shims. */
  var coreJsData$1 = root$6['__core-js_shared__']

  var _coreJsData = coreJsData$1

  var coreJsData = _coreJsData

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function () {
    var uid = /[^.]+$/.exec(
      (coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO) || ''
    )
    return uid ? 'Symbol(src)_1.' + uid : ''
  })()

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked$1(func) {
    return !!maskSrcKey && maskSrcKey in func
  }

  var _isMasked = isMasked$1

  /** Used for built-in method references. */

  var funcProto$2 = Function.prototype

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource$2(func) {
    if (func != null) {
      try {
        return funcToString$2.call(func)
      } catch (e) {}
      try {
        return func + ''
      } catch (e) {}
    }
    return ''
  }

  var _toSource = toSource$2

  var isFunction$2 = isFunction_1,
    isMasked = _isMasked,
    isObject$5 = isObject_1,
    toSource$1 = _toSource

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
    objectProto$e = Object.prototype

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$e.hasOwnProperty

  /** Used to detect if a method is native. */
  var reIsNative = RegExp(
    '^' +
      funcToString$1
        .call(hasOwnProperty$c)
        .replace(reRegExpChar, '\\$&')
        .replace(
          /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
          '$1.*?'
        ) +
      '$'
  )

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative$1(value) {
    if (!isObject$5(value) || isMasked(value)) {
      return false
    }
    var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor
    return pattern.test(toSource$1(value))
  }

  var _baseIsNative = baseIsNative$1

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */

  function getValue$1(object, key) {
    return object == null ? undefined : object[key]
  }

  var _getValue = getValue$1

  var baseIsNative = _baseIsNative,
    getValue = _getValue

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative$7(object, key) {
    var value = getValue(object, key)
    return baseIsNative(value) ? value : undefined
  }

  var _getNative = getNative$7

  var getNative$6 = _getNative,
    root$5 = _root

  /* Built-in method references that are verified to be native. */
  var Map$4 = getNative$6(root$5, 'Map')

  var _Map = Map$4

  var getNative$5 = _getNative

  /* Built-in method references that are verified to be native. */
  var nativeCreate$4 = getNative$5(Object, 'create')

  var _nativeCreate = nativeCreate$4

  var nativeCreate$3 = _nativeCreate

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear$1() {
    this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {}
    this.size = 0
  }

  var _hashClear = hashClear$1

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */

  function hashDelete$1(key) {
    var result = this.has(key) && delete this.__data__[key]
    this.size -= result ? 1 : 0
    return result
  }

  var _hashDelete = hashDelete$1

  var nativeCreate$2 = _nativeCreate

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__'

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$d.hasOwnProperty

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet$1(key) {
    var data = this.__data__
    if (nativeCreate$2) {
      var result = data[key]
      return result === HASH_UNDEFINED$2 ? undefined : result
    }
    return hasOwnProperty$b.call(data, key) ? data[key] : undefined
  }

  var _hashGet = hashGet$1

  var nativeCreate$1 = _nativeCreate

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$c.hasOwnProperty

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas$1(key) {
    var data = this.__data__
    return nativeCreate$1
      ? data[key] !== undefined
      : hasOwnProperty$a.call(data, key)
  }

  var _hashHas = hashHas$1

  var nativeCreate = _nativeCreate

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__'

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet$1(key, value) {
    var data = this.__data__
    this.size += this.has(key) ? 0 : 1
    data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value
    return this
  }

  var _hashSet = hashSet$1

  var hashClear = _hashClear,
    hashDelete = _hashDelete,
    hashGet = _hashGet,
    hashHas = _hashHas,
    hashSet = _hashSet

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash$1(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length

    this.clear()
    while (++index < length) {
      var entry = entries[index]
      this.set(entry[0], entry[1])
    }
  }

  // Add methods to `Hash`.
  Hash$1.prototype.clear = hashClear
  Hash$1.prototype['delete'] = hashDelete
  Hash$1.prototype.get = hashGet
  Hash$1.prototype.has = hashHas
  Hash$1.prototype.set = hashSet

  var _Hash = Hash$1

  var Hash = _Hash,
    ListCache$2 = _ListCache,
    Map$3 = _Map

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear$1() {
    this.size = 0
    this.__data__ = {
      hash: new Hash(),
      map: new (Map$3 || ListCache$2)(),
      string: new Hash(),
    }
  }

  var _mapCacheClear = mapCacheClear$1

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */

  function isKeyable$1(value) {
    var type = typeof value
    return type == 'string' ||
      type == 'number' ||
      type == 'symbol' ||
      type == 'boolean'
      ? value !== '__proto__'
      : value === null
  }

  var _isKeyable = isKeyable$1

  var isKeyable = _isKeyable

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData$4(map, key) {
    var data = map.__data__
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map
  }

  var _getMapData = getMapData$4

  var getMapData$3 = _getMapData

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete$1(key) {
    var result = getMapData$3(this, key)['delete'](key)
    this.size -= result ? 1 : 0
    return result
  }

  var _mapCacheDelete = mapCacheDelete$1

  var getMapData$2 = _getMapData

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet$1(key) {
    return getMapData$2(this, key).get(key)
  }

  var _mapCacheGet = mapCacheGet$1

  var getMapData$1 = _getMapData

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas$1(key) {
    return getMapData$1(this, key).has(key)
  }

  var _mapCacheHas = mapCacheHas$1

  var getMapData = _getMapData

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet$1(key, value) {
    var data = getMapData(this, key),
      size = data.size

    data.set(key, value)
    this.size += data.size == size ? 0 : 1
    return this
  }

  var _mapCacheSet = mapCacheSet$1

  var mapCacheClear = _mapCacheClear,
    mapCacheDelete = _mapCacheDelete,
    mapCacheGet = _mapCacheGet,
    mapCacheHas = _mapCacheHas,
    mapCacheSet = _mapCacheSet

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache$3(entries) {
    var index = -1,
      length = entries == null ? 0 : entries.length

    this.clear()
    while (++index < length) {
      var entry = entries[index]
      this.set(entry[0], entry[1])
    }
  }

  // Add methods to `MapCache`.
  MapCache$3.prototype.clear = mapCacheClear
  MapCache$3.prototype['delete'] = mapCacheDelete
  MapCache$3.prototype.get = mapCacheGet
  MapCache$3.prototype.has = mapCacheHas
  MapCache$3.prototype.set = mapCacheSet

  var _MapCache = MapCache$3

  var ListCache$1 = _ListCache,
    Map$2 = _Map,
    MapCache$2 = _MapCache

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet$1(key, value) {
    var data = this.__data__
    if (data instanceof ListCache$1) {
      var pairs = data.__data__
      if (!Map$2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
        pairs.push([key, value])
        this.size = ++data.size
        return this
      }
      data = this.__data__ = new MapCache$2(pairs)
    }
    data.set(key, value)
    this.size = data.size
    return this
  }

  var _stackSet = stackSet$1

  var ListCache = _ListCache,
    stackClear = _stackClear,
    stackDelete = _stackDelete,
    stackGet = _stackGet,
    stackHas = _stackHas,
    stackSet = _stackSet

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack$3(entries) {
    var data = (this.__data__ = new ListCache(entries))
    this.size = data.size
  }

  // Add methods to `Stack`.
  Stack$3.prototype.clear = stackClear
  Stack$3.prototype['delete'] = stackDelete
  Stack$3.prototype.get = stackGet
  Stack$3.prototype.has = stackHas
  Stack$3.prototype.set = stackSet

  var _Stack = Stack$3

  /** Used to stand-in for `undefined` hash values. */

  var HASH_UNDEFINED = '__lodash_hash_undefined__'

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd$1(value) {
    this.__data__.set(value, HASH_UNDEFINED)
    return this
  }

  var _setCacheAdd = setCacheAdd$1

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */

  function setCacheHas$1(value) {
    return this.__data__.has(value)
  }

  var _setCacheHas = setCacheHas$1

  var MapCache$1 = _MapCache,
    setCacheAdd = _setCacheAdd,
    setCacheHas = _setCacheHas

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache$1(values) {
    var index = -1,
      length = values == null ? 0 : values.length

    this.__data__ = new MapCache$1()
    while (++index < length) {
      this.add(values[index])
    }
  }

  // Add methods to `SetCache`.
  SetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd
  SetCache$1.prototype.has = setCacheHas

  var _SetCache = SetCache$1

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */

  function arraySome$1(array, predicate) {
    var index = -1,
      length = array == null ? 0 : array.length

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true
      }
    }
    return false
  }

  var _arraySome = arraySome$1

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */

  function cacheHas$1(cache, key) {
    return cache.has(key)
  }

  var _cacheHas = cacheHas$1

  var SetCache = _SetCache,
    arraySome = _arraySome,
    cacheHas = _cacheHas

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$5 = 1,
    COMPARE_UNORDERED_FLAG$3 = 2

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
      arrLength = array.length,
      othLength = other.length

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false
    }
    // Check that cyclic values are equal.
    var arrStacked = stack.get(array)
    var othStacked = stack.get(other)
    if (arrStacked && othStacked) {
      return arrStacked == other && othStacked == array
    }
    var index = -1,
      result = true,
      seen = bitmask & COMPARE_UNORDERED_FLAG$3 ? new SetCache() : undefined

    stack.set(array, other)
    stack.set(other, array)

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
        othValue = other[index]

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack)
      }
      if (compared !== undefined) {
        if (compared) {
          continue
        }
        result = false
        break
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (
          !arraySome(other, function (othValue, othIndex) {
            if (
              !cacheHas(seen, othIndex) &&
              (arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack))
            ) {
              return seen.push(othIndex)
            }
          })
        ) {
          result = false
          break
        }
      } else if (
        !(
          arrValue === othValue ||
          equalFunc(arrValue, othValue, bitmask, customizer, stack)
        )
      ) {
        result = false
        break
      }
    }
    stack['delete'](array)
    stack['delete'](other)
    return result
  }

  var _equalArrays = equalArrays$2

  var root$4 = _root

  /** Built-in value references. */
  var Uint8Array$2 = root$4.Uint8Array

  var _Uint8Array = Uint8Array$2

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */

  function mapToArray$1(map) {
    var index = -1,
      result = Array(map.size)

    map.forEach(function (value, key) {
      result[++index] = [key, value]
    })
    return result
  }

  var _mapToArray = mapToArray$1

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */

  function setToArray$1(set) {
    var index = -1,
      result = Array(set.size)

    set.forEach(function (value) {
      result[++index] = value
    })
    return result
  }

  var _setToArray = setToArray$1

  var Symbol$4 = _Symbol,
    Uint8Array$1 = _Uint8Array,
    eq$2 = eq_1,
    equalArrays$1 = _equalArrays,
    mapToArray = _mapToArray,
    setToArray = _setToArray

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$4 = 1,
    COMPARE_UNORDERED_FLAG$2 = 2

  /** `Object#toString` result references. */
  var boolTag$3 = '[object Boolean]',
    dateTag$3 = '[object Date]',
    errorTag$2 = '[object Error]',
    mapTag$5 = '[object Map]',
    numberTag$3 = '[object Number]',
    regexpTag$3 = '[object RegExp]',
    setTag$5 = '[object Set]',
    stringTag$3 = '[object String]',
    symbolTag$2 = '[object Symbol]'

  var arrayBufferTag$3 = '[object ArrayBuffer]',
    dataViewTag$4 = '[object DataView]'

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : undefined,
    symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag$1(
    object,
    other,
    tag,
    bitmask,
    customizer,
    equalFunc,
    stack
  ) {
    switch (tag) {
      case dataViewTag$4:
        if (
          object.byteLength != other.byteLength ||
          object.byteOffset != other.byteOffset
        ) {
          return false
        }
        object = object.buffer
        other = other.buffer

      case arrayBufferTag$3:
        if (
          object.byteLength != other.byteLength ||
          !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))
        ) {
          return false
        }
        return true

      case boolTag$3:
      case dateTag$3:
      case numberTag$3:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq$2(+object, +other)

      case errorTag$2:
        return object.name == other.name && object.message == other.message

      case regexpTag$3:
      case stringTag$3:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == other + ''

      case mapTag$5:
        var convert = mapToArray

      case setTag$5:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4
        convert || (convert = setToArray)

        if (object.size != other.size && !isPartial) {
          return false
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object)
        if (stacked) {
          return stacked == other
        }
        bitmask |= COMPARE_UNORDERED_FLAG$2

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other)
        var result = equalArrays$1(
          convert(object),
          convert(other),
          bitmask,
          customizer,
          equalFunc,
          stack
        )
        stack['delete'](object)
        return result

      case symbolTag$2:
        if (symbolValueOf$1) {
          return symbolValueOf$1.call(object) == symbolValueOf$1.call(other)
        }
    }
    return false
  }

  var _equalByTag = equalByTag$1

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */

  function arrayPush$3(array, values) {
    var index = -1,
      length = values.length,
      offset = array.length

    while (++index < length) {
      array[offset + index] = values[index]
    }
    return array
  }

  var _arrayPush = arrayPush$3

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */

  var isArray$c = Array.isArray

  var isArray_1 = isArray$c

  var arrayPush$2 = _arrayPush,
    isArray$b = isArray_1

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object)
    return isArray$b(object) ? result : arrayPush$2(result, symbolsFunc(object))
  }

  var _baseGetAllKeys = baseGetAllKeys$2

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */

  function arrayFilter$1(array, predicate) {
    var index = -1,
      length = array == null ? 0 : array.length,
      resIndex = 0,
      result = []

    while (++index < length) {
      var value = array[index]
      if (predicate(value, index, array)) {
        result[resIndex++] = value
      }
    }
    return result
  }

  var _arrayFilter = arrayFilter$1

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */

  function stubArray$2() {
    return []
  }

  var stubArray_1 = stubArray$2

  var arrayFilter = _arrayFilter,
    stubArray$1 = stubArray_1

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$b.propertyIsEnumerable

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols$1 = Object.getOwnPropertySymbols

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols$3 = !nativeGetSymbols$1
    ? stubArray$1
    : function (object) {
        if (object == null) {
          return []
        }
        object = Object(object)
        return arrayFilter(nativeGetSymbols$1(object), function (symbol) {
          return propertyIsEnumerable$1.call(object, symbol)
        })
      }

  var _getSymbols = getSymbols$3

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */

  function baseTimes$1(n, iteratee) {
    var index = -1,
      result = Array(n)

    while (++index < n) {
      result[index] = iteratee(index)
    }
    return result
  }

  var _baseTimes = baseTimes$1

  var baseGetTag$3 = _baseGetTag,
    isObjectLike$6 = isObjectLike_1

  /** `Object#toString` result references. */
  var argsTag$3 = '[object Arguments]'

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments$1(value) {
    return isObjectLike$6(value) && baseGetTag$3(value) == argsTag$3
  }

  var _baseIsArguments = baseIsArguments$1

  var baseIsArguments = _baseIsArguments,
    isObjectLike$5 = isObjectLike_1

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$a.hasOwnProperty

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$a.propertyIsEnumerable

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments$3 = baseIsArguments(
    (function () {
      return arguments
    })()
  )
    ? baseIsArguments
    : function (value) {
        return (
          isObjectLike$5(value) &&
          hasOwnProperty$9.call(value, 'callee') &&
          !propertyIsEnumerable.call(value, 'callee')
        )
      }

  var isArguments_1 = isArguments$3

  var isBufferExports = {}
  var isBuffer$4 = {
    get exports() {
      return isBufferExports
    },
    set exports(v) {
      isBufferExports = v
    },
  }

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */

  function stubFalse() {
    return false
  }

  var stubFalse_1 = stubFalse

  ;(function (module, exports) {
    var root = _root,
      stubFalse = stubFalse_1

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports

    /** Detect free variable `module`. */
    var freeModule =
      freeExports &&
      'object' == 'object' &&
      module &&
      !module.nodeType &&
      module

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse

    module.exports = isBuffer
  })(isBuffer$4, isBufferExports)

  var baseGetTag$2 = _baseGetTag,
    isLength$1 = isLength_1,
    isObjectLike$4 = isObjectLike_1

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
    arrayTag$2 = '[object Array]',
    boolTag$2 = '[object Boolean]',
    dateTag$2 = '[object Date]',
    errorTag$1 = '[object Error]',
    funcTag$1 = '[object Function]',
    mapTag$4 = '[object Map]',
    numberTag$2 = '[object Number]',
    objectTag$4 = '[object Object]',
    regexpTag$2 = '[object RegExp]',
    setTag$4 = '[object Set]',
    stringTag$2 = '[object String]',
    weakMapTag$2 = '[object WeakMap]'

  var arrayBufferTag$2 = '[object ArrayBuffer]',
    dataViewTag$3 = '[object DataView]',
    float32Tag$2 = '[object Float32Array]',
    float64Tag$2 = '[object Float64Array]',
    int8Tag$2 = '[object Int8Array]',
    int16Tag$2 = '[object Int16Array]',
    int32Tag$2 = '[object Int32Array]',
    uint8Tag$2 = '[object Uint8Array]',
    uint8ClampedTag$2 = '[object Uint8ClampedArray]',
    uint16Tag$2 = '[object Uint16Array]',
    uint32Tag$2 = '[object Uint32Array]'

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {}
  typedArrayTags[float32Tag$2] =
    typedArrayTags[float64Tag$2] =
    typedArrayTags[int8Tag$2] =
    typedArrayTags[int16Tag$2] =
    typedArrayTags[int32Tag$2] =
    typedArrayTags[uint8Tag$2] =
    typedArrayTags[uint8ClampedTag$2] =
    typedArrayTags[uint16Tag$2] =
    typedArrayTags[uint32Tag$2] =
      true
  typedArrayTags[argsTag$2] =
    typedArrayTags[arrayTag$2] =
    typedArrayTags[arrayBufferTag$2] =
    typedArrayTags[boolTag$2] =
    typedArrayTags[dataViewTag$3] =
    typedArrayTags[dateTag$2] =
    typedArrayTags[errorTag$1] =
    typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag$4] =
    typedArrayTags[numberTag$2] =
    typedArrayTags[objectTag$4] =
    typedArrayTags[regexpTag$2] =
    typedArrayTags[setTag$4] =
    typedArrayTags[stringTag$2] =
    typedArrayTags[weakMapTag$2] =
      false

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray$1(value) {
    return (
      isObjectLike$4(value) &&
      isLength$1(value.length) &&
      !!typedArrayTags[baseGetTag$2(value)]
    )
  }

  var _baseIsTypedArray = baseIsTypedArray$1

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */

  function baseUnary$4(func) {
    return function (value) {
      return func(value)
    }
  }

  var _baseUnary = baseUnary$4

  var _nodeUtilExports = {}
  var _nodeUtil = {
    get exports() {
      return _nodeUtilExports
    },
    set exports(v) {
      _nodeUtilExports = v
    },
  }

  ;(function (module, exports) {
    var freeGlobal = _freeGlobal

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports

    /** Detect free variable `module`. */
    var freeModule =
      freeExports &&
      'object' == 'object' &&
      module &&
      !module.nodeType &&
      module

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function () {
      try {
        // Use `util.types` for Node.js 10+.
        var types =
          freeModule && freeModule.require && freeModule.require('util').types

        if (types) {
          return types
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util')
      } catch (e) {}
    })()

    module.exports = nodeUtil
  })(_nodeUtil, _nodeUtilExports)

  var baseIsTypedArray = _baseIsTypedArray,
    baseUnary$3 = _baseUnary,
    nodeUtil$2 = _nodeUtilExports

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray$3 = nodeIsTypedArray
    ? baseUnary$3(nodeIsTypedArray)
    : baseIsTypedArray

  var isTypedArray_1 = isTypedArray$3

  var baseTimes = _baseTimes,
    isArguments$2 = isArguments_1,
    isArray$a = isArray_1,
    isBuffer$3 = isBufferExports,
    isIndex$1 = _isIndex,
    isTypedArray$2 = isTypedArray_1

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$9.hasOwnProperty

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys$2(value, inherited) {
    var isArr = isArray$a(value),
      isArg = !isArr && isArguments$2(value),
      isBuff = !isArr && !isArg && isBuffer$3(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray$2(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length

    for (var key in value) {
      if (
        (inherited || hasOwnProperty$8.call(value, key)) &&
        !(
          skipIndexes &&
          // Safari 9 has enumerable `arguments.length` in strict mode.
          (key == 'length' ||
            // Node.js 0.10 has enumerable non-index properties on buffers.
            (isBuff && (key == 'offset' || key == 'parent')) ||
            // PhantomJS 2 has enumerable non-index properties on typed arrays.
            (isType &&
              (key == 'buffer' ||
                key == 'byteLength' ||
                key == 'byteOffset')) ||
            // Skip index properties.
            isIndex$1(key, length))
        )
      ) {
        result.push(key)
      }
    }
    return result
  }

  var _arrayLikeKeys = arrayLikeKeys$2

  /** Used for built-in method references. */

  var objectProto$8 = Object.prototype

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype$3(value) {
    var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$8

    return value === proto
  }

  var _isPrototype = isPrototype$3

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */

  function overArg$2(func, transform) {
    return function (arg) {
      return func(transform(arg))
    }
  }

  var _overArg = overArg$2

  var overArg$1 = _overArg

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys$1 = overArg$1(Object.keys, Object)

  var _nativeKeys = nativeKeys$1

  var isPrototype$2 = _isPrototype,
    nativeKeys = _nativeKeys

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$7.hasOwnProperty

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys$1(object) {
    if (!isPrototype$2(object)) {
      return nativeKeys(object)
    }
    var result = []
    for (var key in Object(object)) {
      if (hasOwnProperty$7.call(object, key) && key != 'constructor') {
        result.push(key)
      }
    }
    return result
  }

  var _baseKeys = baseKeys$1

  var arrayLikeKeys$1 = _arrayLikeKeys,
    baseKeys = _baseKeys,
    isArrayLike$3 = isArrayLike_1

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys$5(object) {
    return isArrayLike$3(object) ? arrayLikeKeys$1(object) : baseKeys(object)
  }

  var keys_1 = keys$5

  var baseGetAllKeys$1 = _baseGetAllKeys,
    getSymbols$2 = _getSymbols,
    keys$4 = keys_1

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys$2(object) {
    return baseGetAllKeys$1(object, keys$4, getSymbols$2)
  }

  var _getAllKeys = getAllKeys$2

  var getAllKeys$1 = _getAllKeys

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$6.hasOwnProperty

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects$1(
    object,
    other,
    bitmask,
    customizer,
    equalFunc,
    stack
  ) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
      objProps = getAllKeys$1(object),
      objLength = objProps.length,
      othProps = getAllKeys$1(other),
      othLength = othProps.length

    if (objLength != othLength && !isPartial) {
      return false
    }
    var index = objLength
    while (index--) {
      var key = objProps[index]
      if (!(isPartial ? key in other : hasOwnProperty$6.call(other, key))) {
        return false
      }
    }
    // Check that cyclic values are equal.
    var objStacked = stack.get(object)
    var othStacked = stack.get(other)
    if (objStacked && othStacked) {
      return objStacked == other && othStacked == object
    }
    var result = true
    stack.set(object, other)
    stack.set(other, object)

    var skipCtor = isPartial
    while (++index < objLength) {
      key = objProps[index]
      var objValue = object[key],
        othValue = other[key]

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack)
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (
        !(compared === undefined
          ? objValue === othValue ||
            equalFunc(objValue, othValue, bitmask, customizer, stack)
          : compared)
      ) {
        result = false
        break
      }
      skipCtor || (skipCtor = key == 'constructor')
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
        othCtor = other.constructor

      // Non `Object` object instances with different constructors are not equal.
      if (
        objCtor != othCtor &&
        'constructor' in object &&
        'constructor' in other &&
        !(
          typeof objCtor == 'function' &&
          objCtor instanceof objCtor &&
          typeof othCtor == 'function' &&
          othCtor instanceof othCtor
        )
      ) {
        result = false
      }
    }
    stack['delete'](object)
    stack['delete'](other)
    return result
  }

  var _equalObjects = equalObjects$1

  var getNative$4 = _getNative,
    root$3 = _root

  /* Built-in method references that are verified to be native. */
  var DataView$1 = getNative$4(root$3, 'DataView')

  var _DataView = DataView$1

  var getNative$3 = _getNative,
    root$2 = _root

  /* Built-in method references that are verified to be native. */
  var Promise$2 = getNative$3(root$2, 'Promise')

  var _Promise = Promise$2

  var getNative$2 = _getNative,
    root$1 = _root

  /* Built-in method references that are verified to be native. */
  var Set$2 = getNative$2(root$1, 'Set')

  var _Set = Set$2

  var getNative$1 = _getNative,
    root = _root

  /* Built-in method references that are verified to be native. */
  var WeakMap$2 = getNative$1(root, 'WeakMap')

  var _WeakMap = WeakMap$2

  var DataView = _DataView,
    Map$1 = _Map,
    Promise$1 = _Promise,
    Set$1 = _Set,
    WeakMap$1 = _WeakMap,
    baseGetTag$1 = _baseGetTag,
    toSource = _toSource

  /** `Object#toString` result references. */
  var mapTag$3 = '[object Map]',
    objectTag$3 = '[object Object]',
    promiseTag = '[object Promise]',
    setTag$3 = '[object Set]',
    weakMapTag$1 = '[object WeakMap]'

  var dataViewTag$2 = '[object DataView]'

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
    mapCtorString = toSource(Map$1),
    promiseCtorString = toSource(Promise$1),
    setCtorString = toSource(Set$1),
    weakMapCtorString = toSource(WeakMap$1)

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag$4 = baseGetTag$1

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if (
    (DataView && getTag$4(new DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
    (Map$1 && getTag$4(new Map$1()) != mapTag$3) ||
    (Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag) ||
    (Set$1 && getTag$4(new Set$1()) != setTag$3) ||
    (WeakMap$1 && getTag$4(new WeakMap$1()) != weakMapTag$1)
  ) {
    getTag$4 = function (value) {
      var result = baseGetTag$1(value),
        Ctor = result == objectTag$3 ? value.constructor : undefined,
        ctorString = Ctor ? toSource(Ctor) : ''

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString:
            return dataViewTag$2
          case mapCtorString:
            return mapTag$3
          case promiseCtorString:
            return promiseTag
          case setCtorString:
            return setTag$3
          case weakMapCtorString:
            return weakMapTag$1
        }
      }
      return result
    }
  }

  var _getTag = getTag$4

  var Stack$2 = _Stack,
    equalArrays = _equalArrays,
    equalByTag = _equalByTag,
    equalObjects = _equalObjects,
    getTag$3 = _getTag,
    isArray$9 = isArray_1,
    isBuffer$2 = isBufferExports,
    isTypedArray$1 = isTypedArray_1

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
    arrayTag$1 = '[object Array]',
    objectTag$2 = '[object Object]'

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$5.hasOwnProperty

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep$1(
    object,
    other,
    bitmask,
    customizer,
    equalFunc,
    stack
  ) {
    var objIsArr = isArray$9(object),
      othIsArr = isArray$9(other),
      objTag = objIsArr ? arrayTag$1 : getTag$3(object),
      othTag = othIsArr ? arrayTag$1 : getTag$3(other)

    objTag = objTag == argsTag$1 ? objectTag$2 : objTag
    othTag = othTag == argsTag$1 ? objectTag$2 : othTag

    var objIsObj = objTag == objectTag$2,
      othIsObj = othTag == objectTag$2,
      isSameTag = objTag == othTag

    if (isSameTag && isBuffer$2(object)) {
      if (!isBuffer$2(other)) {
        return false
      }
      objIsArr = true
      objIsObj = false
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack$2())
      return objIsArr || isTypedArray$1(object)
        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : equalByTag(
            object,
            other,
            objTag,
            bitmask,
            customizer,
            equalFunc,
            stack
          )
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
      var objIsWrapped =
          objIsObj && hasOwnProperty$5.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty$5.call(other, '__wrapped__')

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
          othUnwrapped = othIsWrapped ? other.value() : other

        stack || (stack = new Stack$2())
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack)
      }
    }
    if (!isSameTag) {
      return false
    }
    stack || (stack = new Stack$2())
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack)
  }

  var _baseIsEqualDeep = baseIsEqualDeep$1

  var baseIsEqualDeep = _baseIsEqualDeep,
    isObjectLike$3 = isObjectLike_1

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual$3(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true
    }
    if (
      value == null ||
      other == null ||
      (!isObjectLike$3(value) && !isObjectLike$3(other))
    ) {
      return value !== value && other !== other
    }
    return baseIsEqualDeep(
      value,
      other,
      bitmask,
      customizer,
      baseIsEqual$3,
      stack
    )
  }

  var _baseIsEqual = baseIsEqual$3

  var baseIsEqual$2 = _baseIsEqual

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are compared by strict equality, i.e. `===`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual$2(value, other) {
    return baseIsEqual$2(value, other)
  }

  var isEqual_1 = isEqual$2

  function isSelected(event, selected) {
    if (!event || selected == null) return false
    return isEqual_1(event, selected)
  }
  function slotWidth(rowBox, slots) {
    var rowWidth = rowBox.right - rowBox.left
    var cellWidth = rowWidth / slots
    return cellWidth
  }
  function getSlotAtX(rowBox, x, rtl, slots) {
    var cellWidth = slotWidth(rowBox, slots)
    return rtl
      ? slots - 1 - Math.floor((x - rowBox.left) / cellWidth)
      : Math.floor((x - rowBox.left) / cellWidth)
  }
  function pointInBox(box, _ref) {
    var x = _ref.x,
      y = _ref.y
    return y >= box.top && y <= box.bottom && x >= box.left && x <= box.right
  }
  function dateCellSelection(start, rowBox, box, slots, rtl) {
    var startIdx = -1
    var endIdx = -1
    var lastSlotIdx = slots - 1
    var cellWidth = slotWidth(rowBox, slots)

    // cell under the mouse
    var currentSlot = getSlotAtX(rowBox, box.x, rtl, slots)

    // Identify row as either the initial row
    // or the row under the current mouse point
    var isCurrentRow = rowBox.top < box.y && rowBox.bottom > box.y
    var isStartRow = rowBox.top < start.y && rowBox.bottom > start.y

    // this row's position relative to the start point
    var isAboveStart = start.y > rowBox.bottom
    var isBelowStart = rowBox.top > start.y
    var isBetween = box.top < rowBox.top && box.bottom > rowBox.bottom

    // this row is between the current and start rows, so entirely selected
    if (isBetween) {
      startIdx = 0
      endIdx = lastSlotIdx
    }
    if (isCurrentRow) {
      if (isBelowStart) {
        startIdx = 0
        endIdx = currentSlot
      } else if (isAboveStart) {
        startIdx = currentSlot
        endIdx = lastSlotIdx
      }
    }
    if (isStartRow) {
      // select the cell under the initial point
      startIdx = endIdx = rtl
        ? lastSlotIdx - Math.floor((start.x - rowBox.left) / cellWidth)
        : Math.floor((start.x - rowBox.left) / cellWidth)
      if (isCurrentRow) {
        if (currentSlot < startIdx) startIdx = currentSlot
        else endIdx = currentSlot //select current range
      } else if (start.y < box.y) {
        // the current row is below start row
        // select cells to the right of the start cell
        endIdx = lastSlotIdx
      } else {
        // select cells to the left of the start cell
        startIdx = 0
      }
    }
    return {
      startIdx: startIdx,
      endIdx: endIdx,
    }
  }

  /**
   * Changes to react-overlays cause issue with auto positioning,
   * so we need to manually calculate the position of the popper,
   * and constrain it to the Month container.
   */
  function getPosition(_ref) {
    var target = _ref.target,
      offset = _ref.offset,
      container = _ref.container,
      box = _ref.box
    var _getOffset = offset$2(target),
      top = _getOffset.top,
      left = _getOffset.left,
      width = _getOffset.width,
      height = _getOffset.height
    var _getOffset2 = offset$2(container),
      cTop = _getOffset2.top,
      cLeft = _getOffset2.left,
      cWidth = _getOffset2.width,
      cHeight = _getOffset2.height
    var _getOffset3 = offset$2(box),
      bWidth = _getOffset3.width,
      bHeight = _getOffset3.height
    var viewBottom = cTop + cHeight
    var viewRight = cLeft + cWidth
    var bottom = top + bHeight
    var right = left + bWidth
    var x = offset.x,
      y = offset.y
    var topOffset = bottom > viewBottom ? top - bHeight - y : top + y + height
    var leftOffset = right > viewRight ? left + x - bWidth + width : left + x
    return {
      topOffset: topOffset,
      leftOffset: leftOffset,
    }
  }
  function Pop(_ref2) {
    var containerRef = _ref2.containerRef,
      accessors = _ref2.accessors,
      getters = _ref2.getters,
      selected = _ref2.selected,
      components = _ref2.components,
      localizer = _ref2.localizer,
      position = _ref2.position,
      show = _ref2.show,
      events = _ref2.events,
      slotStart = _ref2.slotStart,
      slotEnd = _ref2.slotEnd,
      onSelect = _ref2.onSelect,
      onDoubleClick = _ref2.onDoubleClick,
      onKeyPress = _ref2.onKeyPress,
      handleDragStart = _ref2.handleDragStart,
      popperRef = _ref2.popperRef,
      target = _ref2.target,
      offset = _ref2.offset
    useClickOutside({
      ref: popperRef,
      callback: show,
    })
    reactExports.useLayoutEffect(
      function () {
        var _getPosition = getPosition({
            target: target,
            offset: offset,
            container: containerRef.current,
            box: popperRef.current,
          }),
          topOffset = _getPosition.topOffset,
          leftOffset = _getPosition.leftOffset
        popperRef.current.style.top = ''.concat(topOffset, 'px')
        popperRef.current.style.left = ''.concat(leftOffset, 'px')
        // eslint-disable-next-line react-hooks/exhaustive-deps
      },
      [offset.x, offset.y, target]
    )
    var width = position.width
    var style = {
      minWidth: width + width / 2,
    }
    return /*#__PURE__*/ React.createElement(
      'div',
      {
        style: style,
        className: 'rbc-overlay',
        ref: popperRef,
      },
      /*#__PURE__*/ React.createElement(
        'div',
        {
          className: 'rbc-overlay-header',
        },
        localizer.format(slotStart, 'dayHeaderFormat')
      ),
      events.map(function (event, idx) {
        return /*#__PURE__*/ React.createElement(EventCell, {
          key: idx,
          type: 'popup',
          localizer: localizer,
          event: event,
          getters: getters,
          onSelect: onSelect,
          accessors: accessors,
          components: components,
          onDoubleClick: onDoubleClick,
          onKeyPress: onKeyPress,
          continuesPrior: localizer.lt(accessors.end(event), slotStart, 'day'),
          continuesAfter: localizer.gte(accessors.start(event), slotEnd, 'day'),
          slotStart: slotStart,
          slotEnd: slotEnd,
          selected: isSelected(event, selected),
          draggable: true,
          onDragStart: function onDragStart() {
            return handleDragStart(event)
          },
          onDragEnd: function onDragEnd() {
            return show()
          },
        })
      })
    )
  }
  var Popup = /*#__PURE__*/ React.forwardRef(function (props, ref) {
    return /*#__PURE__*/ React.createElement(
      Pop,
      Object.assign({}, props, {
        popperRef: ref,
      })
    )
  })
  Popup.propTypes = {
    accessors: propTypesExports.object.isRequired,
    getters: propTypesExports.object.isRequired,
    selected: propTypesExports.object,
    components: propTypesExports.object.isRequired,
    localizer: propTypesExports.object.isRequired,
    position: propTypesExports.object.isRequired,
    show: propTypesExports.func.isRequired,
    events: propTypesExports.array.isRequired,
    slotStart: propTypesExports.instanceOf(Date).isRequired,
    slotEnd: propTypesExports.instanceOf(Date),
    onSelect: propTypesExports.func,
    onDoubleClick: propTypesExports.func,
    onKeyPress: propTypesExports.func,
    handleDragStart: propTypesExports.func,
    style: propTypesExports.object,
    offset: propTypesExports.shape({
      x: propTypesExports.number,
      y: propTypesExports.number,
    }),
  }

  function CalOverlay(_ref) {
    var containerRef = _ref.containerRef,
      _ref$popupOffset = _ref.popupOffset,
      popupOffset = _ref$popupOffset === void 0 ? 5 : _ref$popupOffset,
      overlay = _ref.overlay,
      accessors = _ref.accessors,
      localizer = _ref.localizer,
      components = _ref.components,
      getters = _ref.getters,
      selected = _ref.selected,
      handleSelectEvent = _ref.handleSelectEvent,
      handleDoubleClickEvent = _ref.handleDoubleClickEvent,
      handleKeyPressEvent = _ref.handleKeyPressEvent,
      handleDragStart = _ref.handleDragStart,
      onHide = _ref.onHide,
      overlayDisplay = _ref.overlayDisplay
    var popperRef = reactExports.useRef(null)
    if (!overlay.position) return null
    var offset = popupOffset
    if (!isNaN(popupOffset)) {
      offset = {
        x: popupOffset,
        y: popupOffset,
      }
    }
    var position = overlay.position,
      events = overlay.events,
      date = overlay.date,
      end = overlay.end
    return /*#__PURE__*/ React.createElement(
      Overlay$1,
      {
        rootClose: true,
        flip: true,
        show: true,
        placement: 'bottom',
        onHide: onHide,
        target: overlay.target,
      },
      function (_ref2) {
        var props = _ref2.props
        return /*#__PURE__*/ React.createElement(
          Popup,
          Object.assign({}, props, {
            containerRef: containerRef,
            ref: popperRef,
            target: overlay.target,
            offset: offset,
            accessors: accessors,
            getters: getters,
            selected: selected,
            components: components,
            localizer: localizer,
            position: position,
            show: overlayDisplay,
            events: events,
            slotStart: date,
            slotEnd: end,
            onSelect: handleSelectEvent,
            onDoubleClick: handleDoubleClickEvent,
            onKeyPress: handleKeyPressEvent,
            handleDragStart: handleDragStart,
          })
        )
      }
    )
  }
  var PopOverlay = /*#__PURE__*/ React.forwardRef(function (props, ref) {
    return /*#__PURE__*/ React.createElement(
      CalOverlay,
      Object.assign({}, props, {
        containerRef: ref,
      })
    )
  })
  PopOverlay.propTypes = {
    popupOffset: propTypesExports.oneOfType([
      propTypesExports.number,
      propTypesExports.shape({
        x: propTypesExports.number,
        y: propTypesExports.number,
      }),
    ]),
    overlay: propTypesExports.shape({
      position: propTypesExports.object,
      events: propTypesExports.array,
      date: propTypesExports.instanceOf(Date),
      end: propTypesExports.instanceOf(Date),
    }),
    accessors: propTypesExports.object.isRequired,
    localizer: propTypesExports.object.isRequired,
    components: propTypesExports.object.isRequired,
    getters: propTypesExports.object.isRequired,
    selected: propTypesExports.object,
    handleSelectEvent: propTypesExports.func,
    handleDoubleClickEvent: propTypesExports.func,
    handleKeyPressEvent: propTypesExports.func,
    handleDragStart: propTypesExports.func,
    onHide: propTypesExports.func,
    overlayDisplay: propTypesExports.func,
  }

  /**
   * Returns the height of a given element.
   *
   * @param node the element
   * @param client whether to use `clientHeight` if possible
   */

  function height(node, client) {
    var win = isWindow(node)
    return win
      ? win.innerHeight
      : client
      ? node.clientHeight
      : offset$2(node).height
  }

  /**
   * Returns the closest parent element that matches a given selector.
   *
   * @param node the reference element
   * @param selector the selector to match
   * @param stopAt stop traversing when this element is found
   */

  function closest(node, selector, stopAt) {
    if (node.closest && !stopAt) node.closest(selector)
    var nextNode = node

    do {
      if (matches(nextNode, selector)) return nextNode
      nextNode = nextNode.parentElement
    } while (nextNode && nextNode !== stopAt && nextNode.nodeType === document.ELEMENT_NODE)

    return null
  }

  var RH_PORTAL_SELECTOR = '[data-rh-content-portal]'

  /**
   * get parent rh content portal shadow root
   * we're not using the closest method as it doesn't work with shadow roots
   * @param {HTMLElement | null | undefined} node
   * @returns {ShadowRoot | null}
   */
  function getParentShadowRoot(node) {
    var _node$parentNode
    if (!node) {
      return null
    }
    if (
      (node === null || node === void 0 ? void 0 : node.parentNode) instanceof
        ShadowRoot &&
      node !== null &&
      node !== void 0 &&
      (_node$parentNode = node.parentNode) !== null &&
      _node$parentNode !== void 0 &&
      _node$parentNode.host.matches(RH_PORTAL_SELECTOR)
    ) {
      return node.parentNode
    }
    return getParentShadowRoot(node.parentElement)
  }

  /**
   * if the node is a html element, query for the closest shadowRoot
   * @param {HTMLElement | Window} node
   * @returns {HTMLElement | Window}
   */
  var getTargetHost = function getTargetHost(node) {
    if (!node || node instanceof Window) return node
    var closestRHPortal = getParentShadowRoot(node)
    if (closestRHPortal === null) {
      return document
    }
    return closestRHPortal
  }
  function addEventListener(type, handler, target) {
    return listen(target, type, handler, {
      passive: false,
    })
  }
  function isOverContainer(container, x, y) {
    return (
      !container ||
      contains$1(container, getTargetHost(container).elementFromPoint(x, y))
    )
  }
  function getEventNodeFromPoint(node, _ref) {
    var clientX = _ref.clientX,
      clientY = _ref.clientY
    var target = getTargetHost(node).elementFromPoint(clientX, clientY)
    return closest(target, '.rbc-event', node)
  }
  function getShowMoreNodeFromPoint(node, _ref2) {
    var clientX = _ref2.clientX,
      clientY = _ref2.clientY
    var target = getTargetHost(node).elementFromPoint(clientX, clientY)
    return closest(target, '.rbc-show-more', node)
  }
  function isEvent(node, bounds) {
    return !!getEventNodeFromPoint(node, bounds)
  }
  function isShowMore(node, bounds) {
    return !!getShowMoreNodeFromPoint(node, bounds)
  }
  function getEventCoordinates(e) {
    var target = e
    if (e.touches && e.touches.length) {
      target = e.touches[0]
    }
    return {
      clientX: target.clientX,
      clientY: target.clientY,
      pageX: target.pageX,
      pageY: target.pageY,
    }
  }
  var clickTolerance = 5
  var clickInterval = 250
  var Selection = /*#__PURE__*/ (function () {
    function Selection(node) {
      var _ref3 =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : {},
        _ref3$global = _ref3.global,
        global = _ref3$global === void 0 ? false : _ref3$global,
        _ref3$longPressThresh = _ref3.longPressThreshold,
        longPressThreshold =
          _ref3$longPressThresh === void 0 ? 250 : _ref3$longPressThresh,
        _ref3$validContainers = _ref3.validContainers,
        validContainers =
          _ref3$validContainers === void 0 ? [] : _ref3$validContainers,
        _ref3$targetHostMarke = _ref3.targetHostMarker,
        targetHostMarker =
          _ref3$targetHostMarke === void 0 ? null : _ref3$targetHostMarke
      _classCallCheck(this, Selection)
      this.isDetached = false
      this.container = node
      this.globalMouse = !node || global
      this.longPressThreshold = longPressThreshold
      this.validContainers = validContainers
      this._listeners = Object.create(null)

      /**
       * !Note
       * event listener target for container
       * we need this to make the calendar work inside shadow roots
       */
      this._targetHost = getTargetHost(targetHostMarker || this.container())
      this._handleInitialEvent = this._handleInitialEvent.bind(this)
      this._handleMoveEvent = this._handleMoveEvent.bind(this)
      this._handleTerminatingEvent = this._handleTerminatingEvent.bind(this)
      this._keyListener = this._keyListener.bind(this)
      this._dropFromOutsideListener = this._dropFromOutsideListener.bind(this)
      this._dragOverFromOutsideListener =
        this._dragOverFromOutsideListener.bind(this)

      // Fixes an iOS 10 bug where scrolling could not be prevented on the window.
      // https://github.com/metafizzy/flickity/issues/457#issuecomment-254501356
      this._removeTouchMoveWindowListener = addEventListener(
        'touchmove',
        function () {},
        window
      )
      this._removeKeyDownListener = addEventListener(
        'keydown',
        this._keyListener,
        this._targetHost
      )
      this._removeKeyUpListener = addEventListener(
        'keyup',
        this._keyListener,
        this._targetHost
      )
      this._removeDropFromOutsideListener = addEventListener(
        'drop',
        this._dropFromOutsideListener,
        this._targetHost
      )
      this._removeDragOverFromOutsideListener = addEventListener(
        'dragover',
        this._dragOverFromOutsideListener,
        this._targetHost
      )
      this._addInitialEventListener()
    }
    _createClass(Selection, [
      {
        key: 'on',
        value: function on(type, handler) {
          var handlers = this._listeners[type] || (this._listeners[type] = [])
          handlers.push(handler)
          return {
            remove: function remove() {
              var idx = handlers.indexOf(handler)
              if (idx !== -1) handlers.splice(idx, 1)
            },
          }
        },
      },
      {
        key: 'emit',
        value: function emit(type) {
          for (
            var _len = arguments.length,
              args = new Array(_len > 1 ? _len - 1 : 0),
              _key = 1;
            _key < _len;
            _key++
          ) {
            args[_key - 1] = arguments[_key]
          }
          var result
          var handlers = this._listeners[type] || []
          handlers.forEach(function (fn) {
            if (result === undefined) result = fn.apply(void 0, args)
          })
          return result
        },
      },
      {
        key: 'teardown',
        value: function teardown() {
          this.isDetached = true
          this._listeners = Object.create(null)
          this._removeTouchMoveWindowListener &&
            this._removeTouchMoveWindowListener()
          this._removeInitialEventListener && this._removeInitialEventListener()
          this._removeEndListener && this._removeEndListener()
          this._onEscListener && this._onEscListener()
          this._removeMoveListener && this._removeMoveListener()
          this._removeKeyUpListener && this._removeKeyUpListener()
          this._removeKeyDownListener && this._removeKeyDownListener()
          this._removeDropFromOutsideListener &&
            this._removeDropFromOutsideListener()
          this._removeDragOverFromOutsideListener &&
            this._removeDragOverFromOutsideListener()
        },
      },
      {
        key: 'isSelected',
        value: function isSelected(node) {
          var box = this._selectRect
          if (!box || !this.selecting) return false
          return objectsCollide(box, getBoundsForNode(node))
        },
      },
      {
        key: 'filter',
        value: function filter(items) {
          var box = this._selectRect

          //not selecting
          if (!box || !this.selecting) return []
          return items.filter(this.isSelected, this)
        },

        // Adds a listener that will call the handler only after the user has pressed on the screen
        // without moving their finger for 250ms.
      },
      {
        key: '_addLongPressListener',
        value: function _addLongPressListener(handler, initialEvent) {
          var _this = this
          var timer = null
          var removeTouchMoveListener = null
          var removeTouchEndListener = null
          var handleTouchStart = function handleTouchStart(initialEvent) {
            timer = setTimeout(function () {
              cleanup()
              handler(initialEvent)
            }, _this.longPressThreshold)
            removeTouchMoveListener = addEventListener(
              'touchmove',
              function () {
                return cleanup()
              },
              _this._targetHost
            )
            removeTouchEndListener = addEventListener(
              'touchend',
              function () {
                return cleanup()
              },
              _this._targetHost
            )
          }
          var removeTouchStartListener = addEventListener(
            'touchstart',
            handleTouchStart,
            this._targetHost
          )
          var cleanup = function cleanup() {
            if (timer) {
              clearTimeout(timer)
            }
            if (removeTouchMoveListener) {
              removeTouchMoveListener()
            }
            if (removeTouchEndListener) {
              removeTouchEndListener()
            }
            timer = null
            removeTouchMoveListener = null
            removeTouchEndListener = null
          }
          if (initialEvent) {
            handleTouchStart(initialEvent)
          }
          return function () {
            cleanup()
            removeTouchStartListener()
          }
        },

        // Listen for mousedown and touchstart events. When one is received, disable the other and setup
        // future event handling based on the type of event.
      },
      {
        key: '_addInitialEventListener',
        value: function _addInitialEventListener() {
          var _this2 = this
          var removeMouseDownListener = addEventListener(
            'mousedown',
            function (e) {
              _this2._removeInitialEventListener()
              _this2._handleInitialEvent(e)
              _this2._removeInitialEventListener = addEventListener(
                'mousedown',
                _this2._handleInitialEvent,
                _this2._targetHost
              )
            },
            this._targetHost
          )
          var removeTouchStartListener = addEventListener(
            'touchstart',
            function (e) {
              _this2._removeInitialEventListener()
              _this2._removeInitialEventListener = _this2._addLongPressListener(
                _this2._handleInitialEvent,
                e
              )
            },
            this._targetHost
          )
          this._removeInitialEventListener = function () {
            removeMouseDownListener()
            removeTouchStartListener()
          }
        },
      },
      {
        key: '_dropFromOutsideListener',
        value: function _dropFromOutsideListener(e) {
          var _getEventCoordinates = getEventCoordinates(e),
            pageX = _getEventCoordinates.pageX,
            pageY = _getEventCoordinates.pageY,
            clientX = _getEventCoordinates.clientX,
            clientY = _getEventCoordinates.clientY
          this.emit('dropFromOutside', {
            x: pageX,
            y: pageY,
            clientX: clientX,
            clientY: clientY,
          })
          e.preventDefault()
        },
      },
      {
        key: '_dragOverFromOutsideListener',
        value: function _dragOverFromOutsideListener(e) {
          var _getEventCoordinates2 = getEventCoordinates(e),
            pageX = _getEventCoordinates2.pageX,
            pageY = _getEventCoordinates2.pageY,
            clientX = _getEventCoordinates2.clientX,
            clientY = _getEventCoordinates2.clientY
          this.emit('dragOverFromOutside', {
            x: pageX,
            y: pageY,
            clientX: clientX,
            clientY: clientY,
          })
          e.preventDefault()
        },
      },
      {
        key: '_handleInitialEvent',
        value: function _handleInitialEvent(e) {
          if (this.isDetached) {
            return
          }
          var _getEventCoordinates3 = getEventCoordinates(e),
            clientX = _getEventCoordinates3.clientX,
            clientY = _getEventCoordinates3.clientY,
            pageX = _getEventCoordinates3.pageX,
            pageY = _getEventCoordinates3.pageY
          var node = this.container(),
            collides,
            offsetData

          // Right clicks
          if (
            e.which === 3 ||
            e.button === 2 ||
            !isOverContainer(node, clientX, clientY)
          )
            return
          if (!this.globalMouse && node && !contains$1(node, e.target)) {
            var _normalizeDistance = normalizeDistance(0),
              top = _normalizeDistance.top,
              left = _normalizeDistance.left,
              bottom = _normalizeDistance.bottom,
              right = _normalizeDistance.right
            offsetData = getBoundsForNode(node)
            collides = objectsCollide(
              {
                top: offsetData.top - top,
                left: offsetData.left - left,
                bottom: offsetData.bottom + bottom,
                right: offsetData.right + right,
              },
              {
                top: pageY,
                left: pageX,
              }
            )
            if (!collides) return
          }
          var result = this.emit(
            'beforeSelect',
            (this._initialEventData = {
              isTouch: /^touch/.test(e.type),
              x: pageX,
              y: pageY,
              clientX: clientX,
              clientY: clientY,
            })
          )
          if (result === false) return
          switch (e.type) {
            case 'mousedown':
              this._removeEndListener = addEventListener(
                'mouseup',
                this._handleTerminatingEvent,
                this._targetHost
              )
              this._onEscListener = addEventListener(
                'keydown',
                this._handleTerminatingEvent,
                this._targetHost
              )
              this._removeMoveListener = addEventListener(
                'mousemove',
                this._handleMoveEvent,
                this._targetHost
              )
              break
            case 'touchstart':
              this._handleMoveEvent(e)
              this._removeEndListener = addEventListener(
                'touchend',
                this._handleTerminatingEvent,
                this._targetHost
              )
              this._removeMoveListener = addEventListener(
                'touchmove',
                this._handleMoveEvent,
                this._targetHost
              )
              break
          }
        },

        // Check whether provided event target element
        // - is contained within a valid container
      },
      {
        key: '_isWithinValidContainer',
        value: function _isWithinValidContainer(e) {
          var eventTarget = e.target
          var containers = this.validContainers
          if (!containers || !containers.length || !eventTarget) {
            return true
          }
          return containers.some(function (target) {
            return !!eventTarget.closest(target)
          })
        },
      },
      {
        key: '_handleTerminatingEvent',
        value: function _handleTerminatingEvent(e) {
          var _getEventCoordinates4 = getEventCoordinates(e),
            pageX = _getEventCoordinates4.pageX,
            pageY = _getEventCoordinates4.pageY
          this.selecting = false
          this._removeEndListener && this._removeEndListener()
          this._removeMoveListener && this._removeMoveListener()
          if (!this._initialEventData) return
          var inRoot = !this.container || contains$1(this.container(), e.target)
          var isWithinValidContainer = this._isWithinValidContainer(e)
          var bounds = this._selectRect
          var click = this.isClick(pageX, pageY)
          this._initialEventData = null
          if (e.key === 'Escape' || !isWithinValidContainer) {
            return this.emit('reset')
          }
          if (click && inRoot) {
            return this._handleClickEvent(e)
          }

          // User drag-clicked in the Selectable area
          if (!click) return this.emit('select', bounds)
          return this.emit('reset')
        },
      },
      {
        key: '_handleClickEvent',
        value: function _handleClickEvent(e) {
          var _getEventCoordinates5 = getEventCoordinates(e),
            pageX = _getEventCoordinates5.pageX,
            pageY = _getEventCoordinates5.pageY,
            clientX = _getEventCoordinates5.clientX,
            clientY = _getEventCoordinates5.clientY
          var now = new Date().getTime()
          if (
            this._lastClickData &&
            now - this._lastClickData.timestamp < clickInterval
          ) {
            // Double click event
            this._lastClickData = null
            return this.emit('doubleClick', {
              x: pageX,
              y: pageY,
              clientX: clientX,
              clientY: clientY,
            })
          }

          // Click event
          this._lastClickData = {
            timestamp: now,
          }
          return this.emit('click', {
            x: pageX,
            y: pageY,
            clientX: clientX,
            clientY: clientY,
          })
        },
      },
      {
        key: '_handleMoveEvent',
        value: function _handleMoveEvent(e) {
          if (this._initialEventData === null || this.isDetached) {
            return
          }
          var _this$_initialEventDa = this._initialEventData,
            x = _this$_initialEventDa.x,
            y = _this$_initialEventDa.y
          var _getEventCoordinates6 = getEventCoordinates(e),
            pageX = _getEventCoordinates6.pageX,
            pageY = _getEventCoordinates6.pageY
          var w = Math.abs(x - pageX)
          var h = Math.abs(y - pageY)
          var left = Math.min(pageX, x),
            top = Math.min(pageY, y),
            old = this.selecting

          // Prevent emitting selectStart event until mouse is moved.
          // in Chrome on Windows, mouseMove event may be fired just after mouseDown event.
          if (this.isClick(pageX, pageY) && !old && !(w || h)) {
            return
          }
          this.selecting = true
          this._selectRect = {
            top: top,
            left: left,
            x: pageX,
            y: pageY,
            right: left + w,
            bottom: top + h,
          }
          if (!old) {
            this.emit('selectStart', this._initialEventData)
          }
          if (!this.isClick(pageX, pageY))
            this.emit('selecting', this._selectRect)
          e.preventDefault()
        },
      },
      {
        key: '_keyListener',
        value: function _keyListener(e) {
          this.ctrl = e.metaKey || e.ctrlKey
        },
      },
      {
        key: 'isClick',
        value: function isClick(pageX, pageY) {
          var _this$_initialEventDa2 = this._initialEventData,
            x = _this$_initialEventDa2.x,
            y = _this$_initialEventDa2.y,
            isTouch = _this$_initialEventDa2.isTouch
          return (
            !isTouch &&
            Math.abs(pageX - x) <= clickTolerance &&
            Math.abs(pageY - y) <= clickTolerance
          )
        },
      },
    ])
    return Selection
  })()
  /**
   * Resolve the disance prop from either an Int or an Object
   * @return {Object}
   */
  function normalizeDistance() {
    var distance =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0
    if (_typeof(distance) !== 'object')
      distance = {
        top: distance,
        left: distance,
        right: distance,
        bottom: distance,
      }
    return distance
  }

  /**
   * Given two objects containing "top", "left", "offsetWidth" and "offsetHeight"
   * properties, determine if they collide.
   * @param  {Object|HTMLElement} a
   * @param  {Object|HTMLElement} b
   * @return {bool}
   */
  function objectsCollide(nodeA, nodeB) {
    var tolerance =
      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0
    var _getBoundsForNode = getBoundsForNode(nodeA),
      aTop = _getBoundsForNode.top,
      aLeft = _getBoundsForNode.left,
      _getBoundsForNode$rig = _getBoundsForNode.right,
      aRight = _getBoundsForNode$rig === void 0 ? aLeft : _getBoundsForNode$rig,
      _getBoundsForNode$bot = _getBoundsForNode.bottom,
      aBottom = _getBoundsForNode$bot === void 0 ? aTop : _getBoundsForNode$bot
    var _getBoundsForNode2 = getBoundsForNode(nodeB),
      bTop = _getBoundsForNode2.top,
      bLeft = _getBoundsForNode2.left,
      _getBoundsForNode2$ri = _getBoundsForNode2.right,
      bRight = _getBoundsForNode2$ri === void 0 ? bLeft : _getBoundsForNode2$ri,
      _getBoundsForNode2$bo = _getBoundsForNode2.bottom,
      bBottom = _getBoundsForNode2$bo === void 0 ? bTop : _getBoundsForNode2$bo
    return !(
      // 'a' bottom doesn't touch 'b' top

      (
        aBottom - tolerance < bTop ||
        // 'a' top doesn't touch 'b' bottom
        aTop + tolerance > bBottom ||
        // 'a' right doesn't touch 'b' left
        aRight - tolerance < bLeft ||
        // 'a' left doesn't touch 'b' right
        aLeft + tolerance > bRight
      )
    )
  }

  /**
   * Given a node, get everything needed to calculate its boundaries
   * @param  {HTMLElement} node
   * @return {Object}
   */
  function getBoundsForNode(node) {
    if (!node.getBoundingClientRect) return node
    var rect = node.getBoundingClientRect(),
      left = rect.left + pageOffset('left'),
      top = rect.top + pageOffset('top')
    return {
      top: top,
      left: left,
      right: (node.offsetWidth || 0) + left,
      bottom: (node.offsetHeight || 0) + top,
    }
  }
  function pageOffset(dir) {
    if (dir === 'left')
      return window.pageXOffset || document.body.scrollLeft || 0
    if (dir === 'top') return window.pageYOffset || document.body.scrollTop || 0
  }

  var BackgroundCells = /*#__PURE__*/ (function (_React$Component) {
    _inherits(BackgroundCells, _React$Component)
    var _super = _createSuper(BackgroundCells)
    function BackgroundCells(props, context) {
      var _this
      _classCallCheck(this, BackgroundCells)
      _this = _super.call(this, props, context)
      _this.state = {
        selecting: false,
      }
      _this.containerRef = /*#__PURE__*/ reactExports.createRef()
      return _this
    }
    _createClass(BackgroundCells, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.props.selectable && this._selectable()
        },
      },
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this._teardownSelectable()
        },
      },
      {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps) {
          if (!prevProps.selectable && this.props.selectable) this._selectable()
          if (prevProps.selectable && !this.props.selectable)
            this._teardownSelectable()
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            range = _this$props.range,
            getNow = _this$props.getNow,
            getters = _this$props.getters,
            currentDate = _this$props.date,
            Wrapper = _this$props.components.dateCellWrapper,
            localizer = _this$props.localizer
          var _this$state = this.state,
            selecting = _this$state.selecting,
            startIdx = _this$state.startIdx,
            endIdx = _this$state.endIdx
          var current = getNow()
          return /*#__PURE__*/ React.createElement(
            'div',
            {
              className: 'rbc-row-bg',
              ref: this.containerRef,
            },
            range.map(function (date, index) {
              var selected = selecting && index >= startIdx && index <= endIdx
              var _getters$dayProp = getters.dayProp(date),
                className = _getters$dayProp.className,
                style = _getters$dayProp.style
              return /*#__PURE__*/ React.createElement(
                Wrapper,
                {
                  key: index,
                  value: date,
                  range: range,
                },
                /*#__PURE__*/ React.createElement('div', {
                  style: style,
                  className: clsx(
                    'rbc-day-bg',
                    className,
                    selected && 'rbc-selected-cell',
                    localizer.isSameDate(date, current) && 'rbc-today',
                    currentDate &&
                      localizer.neq(currentDate, date, 'month') &&
                      'rbc-off-range-bg'
                  ),
                })
              )
            })
          )
        },
      },
      {
        key: '_selectable',
        value: function _selectable() {
          var _this2 = this
          var node = this.containerRef.current
          var selector = (this._selector = new Selection(this.props.container, {
            longPressThreshold: this.props.longPressThreshold,
            targetHostMarker: this.containerRef.current,
          }))
          var selectorClicksHandler = function selectorClicksHandler(
            point,
            actionType
          ) {
            if (!isEvent(node, point) && !isShowMore(node, point)) {
              var rowBox = getBoundsForNode(node)
              var _this2$props = _this2.props,
                range = _this2$props.range,
                rtl = _this2$props.rtl
              if (pointInBox(rowBox, point)) {
                var currentCell = getSlotAtX(rowBox, point.x, rtl, range.length)
                _this2._selectSlot({
                  startIdx: currentCell,
                  endIdx: currentCell,
                  action: actionType,
                  box: point,
                })
              }
            }
            _this2._initial = {}
            _this2.setState({
              selecting: false,
            })
          }
          selector.on('selecting', function (box) {
            var _this2$props2 = _this2.props,
              range = _this2$props2.range,
              rtl = _this2$props2.rtl
            var startIdx = -1
            var endIdx = -1
            if (!_this2.state.selecting) {
              notify(_this2.props.onSelectStart, [box])
              _this2._initial = {
                x: box.x,
                y: box.y,
              }
            }
            if (selector.isSelected(node)) {
              var nodeBox = getBoundsForNode(node)
              var _dateCellSelection = dateCellSelection(
                _this2._initial,
                nodeBox,
                box,
                range.length,
                rtl
              )
              startIdx = _dateCellSelection.startIdx
              endIdx = _dateCellSelection.endIdx
            }
            _this2.setState({
              selecting: true,
              startIdx: startIdx,
              endIdx: endIdx,
            })
          })
          selector.on('beforeSelect', function (box) {
            if (_this2.props.selectable !== 'ignoreEvents') return
            return !isEvent(_this2.containerRef.current, box)
          })
          selector.on('click', function (point) {
            return selectorClicksHandler(point, 'click')
          })
          selector.on('doubleClick', function (point) {
            return selectorClicksHandler(point, 'doubleClick')
          })
          selector.on('select', function (bounds) {
            _this2._selectSlot(
              _objectSpread2(
                _objectSpread2({}, _this2.state),
                {},
                {
                  action: 'select',
                  bounds: bounds,
                }
              )
            )
            _this2._initial = {}
            _this2.setState({
              selecting: false,
            })
            notify(_this2.props.onSelectEnd, [_this2.state])
          })
        },
      },
      {
        key: '_teardownSelectable',
        value: function _teardownSelectable() {
          if (!this._selector) return
          this._selector.teardown()
          this._selector = null
        },
      },
      {
        key: '_selectSlot',
        value: function _selectSlot(_ref) {
          var endIdx = _ref.endIdx,
            startIdx = _ref.startIdx,
            action = _ref.action,
            bounds = _ref.bounds,
            box = _ref.box
          if (endIdx !== -1 && startIdx !== -1)
            this.props.onSelectSlot &&
              this.props.onSelectSlot({
                start: startIdx,
                end: endIdx,
                action: action,
                bounds: bounds,
                box: box,
                resourceId: this.props.resourceId,
              })
        },
      },
    ])
    return BackgroundCells
  })(React.Component)

  /* eslint-disable react/prop-types */
  var EventRowMixin = {
    propTypes: {
      slotMetrics: propTypesExports.object.isRequired,
      selected: propTypesExports.object,
      isAllDay: propTypesExports.bool,
      accessors: propTypesExports.object.isRequired,
      localizer: propTypesExports.object.isRequired,
      components: propTypesExports.object.isRequired,
      getters: propTypesExports.object.isRequired,
      onSelect: propTypesExports.func,
      onDoubleClick: propTypesExports.func,
      onKeyPress: propTypesExports.func,
    },
    defaultProps: {
      segments: [],
      selected: {},
    },
    renderEvent: function renderEvent(props, event) {
      var selected = props.selected
      props.isAllDay
      var accessors = props.accessors,
        getters = props.getters,
        onSelect = props.onSelect,
        onDoubleClick = props.onDoubleClick,
        onKeyPress = props.onKeyPress,
        localizer = props.localizer,
        slotMetrics = props.slotMetrics,
        components = props.components,
        resizable = props.resizable
      var continuesPrior = slotMetrics.continuesPrior(event)
      var continuesAfter = slotMetrics.continuesAfter(event)
      return /*#__PURE__*/ React.createElement(EventCell, {
        event: event,
        getters: getters,
        localizer: localizer,
        accessors: accessors,
        components: components,
        onSelect: onSelect,
        onDoubleClick: onDoubleClick,
        onKeyPress: onKeyPress,
        continuesPrior: continuesPrior,
        continuesAfter: continuesAfter,
        slotStart: slotMetrics.first,
        slotEnd: slotMetrics.last,
        selected: isSelected(event, selected),
        resizable: resizable,
      })
    },
    renderSpan: function renderSpan(slots, len, key) {
      var content =
        arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ' '
      var per = (Math.abs(len) / slots) * 100 + '%'
      return /*#__PURE__*/ React.createElement(
        'div',
        {
          key: key,
          className: 'rbc-row-segment',
          // IE10/11 need max-width. flex-basis doesn't respect box-sizing
          style: {
            WebkitFlexBasis: per,
            flexBasis: per,
            maxWidth: per,
          },
        },
        content
      )
    },
  }

  var EventRow = /*#__PURE__*/ (function (_React$Component) {
    _inherits(EventRow, _React$Component)
    var _super = _createSuper(EventRow)
    function EventRow() {
      _classCallCheck(this, EventRow)
      return _super.apply(this, arguments)
    }
    _createClass(EventRow, [
      {
        key: 'render',
        value: function render() {
          var _this = this
          var _this$props = this.props,
            segments = _this$props.segments,
            slots = _this$props.slotMetrics.slots,
            className = _this$props.className
          var lastEnd = 1
          return /*#__PURE__*/ React.createElement(
            'div',
            {
              className: clsx(className, 'rbc-row'),
            },
            segments.reduce(function (row, _ref, li) {
              var event = _ref.event,
                left = _ref.left,
                right = _ref.right,
                span = _ref.span
              var key = '_lvl_' + li
              var gap = left - lastEnd
              var content = EventRowMixin.renderEvent(_this.props, event)
              if (gap)
                row.push(
                  EventRowMixin.renderSpan(slots, gap, ''.concat(key, '_gap'))
                )
              row.push(EventRowMixin.renderSpan(slots, span, key, content))
              lastEnd = right + 1
              return row
            }, [])
          )
        },
      },
    ])
    return EventRow
  })(React.Component)
  EventRow.defaultProps = _objectSpread2({}, EventRowMixin.defaultProps)

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */

  function baseFindIndex$1(array, predicate, fromIndex, fromRight) {
    var length = array.length,
      index = fromIndex + (fromRight ? 1 : -1)

    while (fromRight ? index-- : ++index < length) {
      if (predicate(array[index], index, array)) {
        return index
      }
    }
    return -1
  }

  var _baseFindIndex = baseFindIndex$1

  var Stack$1 = _Stack,
    baseIsEqual$1 = _baseIsEqual

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
    COMPARE_UNORDERED_FLAG$1 = 2

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch$1(object, source, matchData, customizer) {
    var index = matchData.length,
      length = index,
      noCustomizer = !customizer

    if (object == null) {
      return !length
    }
    object = Object(object)
    while (index--) {
      var data = matchData[index]
      if (
        noCustomizer && data[2]
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
      ) {
        return false
      }
    }
    while (++index < length) {
      data = matchData[index]
      var key = data[0],
        objValue = object[key],
        srcValue = data[1]

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false
        }
      } else {
        var stack = new Stack$1()
        if (customizer) {
          var result = customizer(
            objValue,
            srcValue,
            key,
            object,
            source,
            stack
          )
        }
        if (
          !(result === undefined
            ? baseIsEqual$1(
                srcValue,
                objValue,
                COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1,
                customizer,
                stack
              )
            : result)
        ) {
          return false
        }
      }
    }
    return true
  }

  var _baseIsMatch = baseIsMatch$1

  var isObject$4 = isObject_1

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable$2(value) {
    return value === value && !isObject$4(value)
  }

  var _isStrictComparable = isStrictComparable$2

  var isStrictComparable$1 = _isStrictComparable,
    keys$3 = keys_1

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData$1(object) {
    var result = keys$3(object),
      length = result.length

    while (length--) {
      var key = result[length],
        value = object[key]

      result[length] = [key, value, isStrictComparable$1(value)]
    }
    return result
  }

  var _getMatchData = getMatchData$1

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */

  function matchesStrictComparable$2(key, srcValue) {
    return function (object) {
      if (object == null) {
        return false
      }
      return (
        object[key] === srcValue &&
        (srcValue !== undefined || key in Object(object))
      )
    }
  }

  var _matchesStrictComparable = matchesStrictComparable$2

  var baseIsMatch = _baseIsMatch,
    getMatchData = _getMatchData,
    matchesStrictComparable$1 = _matchesStrictComparable

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches$1(source) {
    var matchData = getMatchData(source)
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable$1(matchData[0][0], matchData[0][1])
    }
    return function (object) {
      return object === source || baseIsMatch(object, source, matchData)
    }
  }

  var _baseMatches = baseMatches$1

  var isArray$8 = isArray_1,
    isSymbol$3 = isSymbol_1

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey$3(value, object) {
    if (isArray$8(value)) {
      return false
    }
    var type = typeof value
    if (
      type == 'number' ||
      type == 'symbol' ||
      type == 'boolean' ||
      value == null ||
      isSymbol$3(value)
    ) {
      return true
    }
    return (
      reIsPlainProp.test(value) ||
      !reIsDeepProp.test(value) ||
      (object != null && value in Object(object))
    )
  }

  var _isKey = isKey$3

  var MapCache = _MapCache

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function'

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize$1(func, resolver) {
    if (
      typeof func != 'function' ||
      (resolver != null && typeof resolver != 'function')
    ) {
      throw new TypeError(FUNC_ERROR_TEXT)
    }
    var memoized = function () {
      var args = arguments,
        key = resolver ? resolver.apply(this, args) : args[0],
        cache = memoized.cache

      if (cache.has(key)) {
        return cache.get(key)
      }
      var result = func.apply(this, args)
      memoized.cache = cache.set(key, result) || cache
      return result
    }
    memoized.cache = new (memoize$1.Cache || MapCache)()
    return memoized
  }

  // Expose `MapCache`.
  memoize$1.Cache = MapCache

  var memoize_1 = memoize$1

  var memoize = memoize_1

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped$1(func) {
    var result = memoize(func, function (key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear()
      }
      return key
    })

    var cache = result.cache
    return result
  }

  var _memoizeCapped = memoizeCapped$1

  var memoizeCapped = _memoizeCapped

  /** Used to match property names within property paths. */
  var rePropName =
    /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath$1 = memoizeCapped(function (string) {
    var result = []
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('')
    }
    string.replace(rePropName, function (match, number, quote, subString) {
      result.push(
        quote ? subString.replace(reEscapeChar, '$1') : number || match
      )
    })
    return result
  })

  var _stringToPath = stringToPath$1

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */

  function arrayMap$3(array, iteratee) {
    var index = -1,
      length = array == null ? 0 : array.length,
      result = Array(length)

    while (++index < length) {
      result[index] = iteratee(array[index], index, array)
    }
    return result
  }

  var _arrayMap = arrayMap$3

  var Symbol$3 = _Symbol,
    arrayMap$2 = _arrayMap,
    isArray$7 = isArray_1,
    isSymbol$2 = isSymbol_1

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : undefined,
    symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString$1(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value
    }
    if (isArray$7(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap$2(value, baseToString$1) + ''
    }
    if (isSymbol$2(value)) {
      return symbolToString ? symbolToString.call(value) : ''
    }
    var result = value + ''
    return result == '0' && 1 / value == -INFINITY$1 ? '-0' : result
  }

  var _baseToString = baseToString$1

  var baseToString = _baseToString

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString$1(value) {
    return value == null ? '' : baseToString(value)
  }

  var toString_1 = toString$1

  var isArray$6 = isArray_1,
    isKey$2 = _isKey,
    stringToPath = _stringToPath,
    toString = toString_1

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath$4(value, object) {
    if (isArray$6(value)) {
      return value
    }
    return isKey$2(value, object) ? [value] : stringToPath(toString(value))
  }

  var _castPath = castPath$4

  var isSymbol$1 = isSymbol_1

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey$5(value) {
    if (typeof value == 'string' || isSymbol$1(value)) {
      return value
    }
    var result = value + ''
    return result == '0' && 1 / value == -INFINITY ? '-0' : result
  }

  var _toKey = toKey$5

  var castPath$3 = _castPath,
    toKey$4 = _toKey

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet$4(object, path) {
    path = castPath$3(path, object)

    var index = 0,
      length = path.length

    while (object != null && index < length) {
      object = object[toKey$4(path[index++])]
    }
    return index && index == length ? object : undefined
  }

  var _baseGet = baseGet$4

  var baseGet$3 = _baseGet

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get$1(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet$3(object, path)
    return result === undefined ? defaultValue : result
  }

  var get_1 = get$1

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */

  function baseHasIn$1(object, key) {
    return object != null && key in Object(object)
  }

  var _baseHasIn = baseHasIn$1

  var castPath$2 = _castPath,
    isArguments$1 = isArguments_1,
    isArray$5 = isArray_1,
    isIndex = _isIndex,
    isLength = isLength_1,
    toKey$3 = _toKey

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath$1(object, path, hasFunc) {
    path = castPath$2(path, object)

    var index = -1,
      length = path.length,
      result = false

    while (++index < length) {
      var key = toKey$3(path[index])
      if (!(result = object != null && hasFunc(object, key))) {
        break
      }
      object = object[key]
    }
    if (result || ++index != length) {
      return result
    }
    length = object == null ? 0 : object.length
    return (
      !!length &&
      isLength(length) &&
      isIndex(key, length) &&
      (isArray$5(object) || isArguments$1(object))
    )
  }

  var _hasPath = hasPath$1

  var baseHasIn = _baseHasIn,
    hasPath = _hasPath

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn$1(object, path) {
    return object != null && hasPath(object, path, baseHasIn)
  }

  var hasIn_1 = hasIn$1

  var baseIsEqual = _baseIsEqual,
    get = get_1,
    hasIn = hasIn_1,
    isKey$1 = _isKey,
    isStrictComparable = _isStrictComparable,
    matchesStrictComparable = _matchesStrictComparable,
    toKey$2 = _toKey

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
    COMPARE_UNORDERED_FLAG = 2

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty$1(path, srcValue) {
    if (isKey$1(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey$2(path), srcValue)
    }
    return function (object) {
      var objValue = get(object, path)
      return objValue === undefined && objValue === srcValue
        ? hasIn(object, path)
        : baseIsEqual(
            srcValue,
            objValue,
            COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG
          )
    }
  }

  var _baseMatchesProperty = baseMatchesProperty$1

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */

  function identity$4(value) {
    return value
  }

  var identity_1 = identity$4

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */

  function baseProperty$1(key) {
    return function (object) {
      return object == null ? undefined : object[key]
    }
  }

  var _baseProperty = baseProperty$1

  var baseGet$2 = _baseGet

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep$1(path) {
    return function (object) {
      return baseGet$2(object, path)
    }
  }

  var _basePropertyDeep = basePropertyDeep$1

  var baseProperty = _baseProperty,
    basePropertyDeep = _basePropertyDeep,
    isKey = _isKey,
    toKey$1 = _toKey

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property$1(path) {
    return isKey(path) ? baseProperty(toKey$1(path)) : basePropertyDeep(path)
  }

  var property_1 = property$1

  var baseMatches = _baseMatches,
    baseMatchesProperty = _baseMatchesProperty,
    identity$3 = identity_1,
    isArray$4 = isArray_1,
    property = property_1

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee$4(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value
    }
    if (value == null) {
      return identity$3
    }
    if (typeof value == 'object') {
      return isArray$4(value)
        ? baseMatchesProperty(value[0], value[1])
        : baseMatches(value)
    }
    return property(value)
  }

  var _baseIteratee = baseIteratee$4

  var baseFindIndex = _baseFindIndex,
    baseIteratee$3 = _baseIteratee,
    toInteger = toInteger_1

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax$2 = Math.max

  /**
   * This method is like `_.find` except that it returns the index of the first
   * element `predicate` returns truthy for instead of the element itself.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [predicate=_.identity] The function invoked per iteration.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the found element, else `-1`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'active': false },
   *   { 'user': 'fred',    'active': false },
   *   { 'user': 'pebbles', 'active': true }
   * ];
   *
   * _.findIndex(users, function(o) { return o.user == 'barney'; });
   * // => 0
   *
   * // The `_.matches` iteratee shorthand.
   * _.findIndex(users, { 'user': 'fred', 'active': false });
   * // => 1
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.findIndex(users, ['active', false]);
   * // => 0
   *
   * // The `_.property` iteratee shorthand.
   * _.findIndex(users, 'active');
   * // => 2
   */
  function findIndex(array, predicate, fromIndex) {
    var length = array == null ? 0 : array.length
    if (!length) {
      return -1
    }
    var index = fromIndex == null ? 0 : toInteger(fromIndex)
    if (index < 0) {
      index = nativeMax$2(length + index, 0)
    }
    return baseFindIndex(array, baseIteratee$3(predicate), index)
  }

  var findIndex_1 = findIndex

  function endOfRange(_ref) {
    var dateRange = _ref.dateRange,
      _ref$unit = _ref.unit,
      unit = _ref$unit === void 0 ? 'day' : _ref$unit,
      localizer = _ref.localizer
    return {
      first: dateRange[0],
      last: localizer.add(dateRange[dateRange.length - 1], 1, unit),
    }
  }

  // properly calculating segments requires working with dates in
  // the timezone we're working with, so we use the localizer
  function eventSegments(event, range, accessors, localizer) {
    var _endOfRange = endOfRange({
        dateRange: range,
        localizer: localizer,
      }),
      first = _endOfRange.first,
      last = _endOfRange.last
    var slots = localizer.diff(first, last, 'day')
    var start = localizer.max(
      localizer.startOf(accessors.start(event), 'day'),
      first
    )
    var end = localizer.min(localizer.ceil(accessors.end(event), 'day'), last)
    var padding = findIndex_1(range, function (x) {
      return localizer.isSameDate(x, start)
    })
    var span = localizer.diff(start, end, 'day')
    span = Math.min(span, slots)
    // The segmentOffset is necessary when adjusting for timezones
    // ahead of the browser timezone
    span = Math.max(span - localizer.segmentOffset, 1)
    return {
      event: event,
      span: span,
      left: padding + 1,
      right: Math.max(padding + span, 1),
    }
  }
  function eventLevels(rowSegments) {
    var limit =
      arguments.length > 1 && arguments[1] !== undefined
        ? arguments[1]
        : Infinity
    var i,
      j,
      seg,
      levels = [],
      extra = []
    for (i = 0; i < rowSegments.length; i++) {
      seg = rowSegments[i]
      for (j = 0; j < levels.length; j++)
        if (!segsOverlap(seg, levels[j])) break
      if (j >= limit) {
        extra.push(seg)
      } else {
        ;(levels[j] || (levels[j] = [])).push(seg)
      }
    }
    for (i = 0; i < levels.length; i++) {
      levels[i].sort(function (a, b) {
        return a.left - b.left
      }) //eslint-disable-line
    }

    return {
      levels: levels,
      extra: extra,
    }
  }
  function inRange(e, start, end, accessors, localizer) {
    var event = {
      start: accessors.start(e),
      end: accessors.end(e),
    }
    var range = {
      start: start,
      end: end,
    }
    return localizer.inEventRange({
      event: event,
      range: range,
    })
  }
  function segsOverlap(seg, otherSegs) {
    return otherSegs.some(function (otherSeg) {
      return otherSeg.left <= seg.right && otherSeg.right >= seg.left
    })
  }
  function sortEvents(eventA, eventB, accessors, localizer) {
    var evtA = {
      start: accessors.start(eventA),
      end: accessors.end(eventA),
      allDay: accessors.allDay(eventA),
    }
    var evtB = {
      start: accessors.start(eventB),
      end: accessors.end(eventB),
      allDay: accessors.allDay(eventB),
    }
    return localizer.sortEvents({
      evtA: evtA,
      evtB: evtB,
    })
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */

  var nativeCeil = Math.ceil,
    nativeMax$1 = Math.max

  /**
   * The base implementation of `_.range` and `_.rangeRight` which doesn't
   * coerce arguments.
   *
   * @private
   * @param {number} start The start of the range.
   * @param {number} end The end of the range.
   * @param {number} step The value to increment or decrement by.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Array} Returns the range of numbers.
   */
  function baseRange$1(start, end, step, fromRight) {
    var index = -1,
      length = nativeMax$1(nativeCeil((end - start) / (step || 1)), 0),
      result = Array(length)

    while (length--) {
      result[fromRight ? length : ++index] = start
      start += step
    }
    return result
  }

  var _baseRange = baseRange$1

  var baseRange = _baseRange,
    isIterateeCall$2 = _isIterateeCall,
    toFinite = toFinite_1

  /**
   * Creates a `_.range` or `_.rangeRight` function.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new range function.
   */
  function createRange$1(fromRight) {
    return function (start, end, step) {
      if (
        step &&
        typeof step != 'number' &&
        isIterateeCall$2(start, end, step)
      ) {
        end = step = undefined
      }
      // Ensure the sign of `-0` is preserved.
      start = toFinite(start)
      if (end === undefined) {
        end = start
        start = 0
      } else {
        end = toFinite(end)
      }
      step = step === undefined ? (start < end ? 1 : -1) : toFinite(step)
      return baseRange(start, end, step, fromRight)
    }
  }

  var _createRange = createRange$1

  var createRange = _createRange

  /**
   * Creates an array of numbers (positive and/or negative) progressing from
   * `start` up to, but not including, `end`. A step of `-1` is used if a negative
   * `start` is specified without an `end` or `step`. If `end` is not specified,
   * it's set to `start` with `start` then set to `0`.
   *
   * **Note:** JavaScript follows the IEEE-754 standard for resolving
   * floating-point values which can produce unexpected results.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {number} [start=0] The start of the range.
   * @param {number} end The end of the range.
   * @param {number} [step=1] The value to increment or decrement by.
   * @returns {Array} Returns the range of numbers.
   * @see _.inRange, _.rangeRight
   * @example
   *
   * _.range(4);
   * // => [0, 1, 2, 3]
   *
   * _.range(-4);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 5);
   * // => [1, 2, 3, 4]
   *
   * _.range(0, 20, 5);
   * // => [0, 5, 10, 15]
   *
   * _.range(0, -4, -1);
   * // => [0, -1, -2, -3]
   *
   * _.range(1, 4, 0);
   * // => [1, 1, 1]
   *
   * _.range(0);
   * // => []
   */
  var range = createRange()

  var range_1 = range

  var isSegmentInSlot$1 = function isSegmentInSlot(seg, slot) {
    return seg.left <= slot && seg.right >= slot
  }
  var eventsInSlot = function eventsInSlot(segments, slot) {
    return segments.filter(function (seg) {
      return isSegmentInSlot$1(seg, slot)
    }).length
  }
  var EventEndingRow = /*#__PURE__*/ (function (_React$Component) {
    _inherits(EventEndingRow, _React$Component)
    var _super = _createSuper(EventEndingRow)
    function EventEndingRow() {
      _classCallCheck(this, EventEndingRow)
      return _super.apply(this, arguments)
    }
    _createClass(EventEndingRow, [
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            segments = _this$props.segments,
            slots = _this$props.slotMetrics.slots
          var rowSegments = eventLevels(segments).levels[0]
          var current = 1,
            lastEnd = 1,
            row = []
          while (current <= slots) {
            var key = '_lvl_' + current
            var _ref =
                rowSegments.filter(function (seg) {
                  return isSegmentInSlot$1(seg, current)
                })[0] || {},
              event = _ref.event,
              left = _ref.left,
              right = _ref.right,
              span = _ref.span //eslint-disable-line

            if (!event) {
              current++
              continue
            }
            var gap = Math.max(0, left - lastEnd)
            if (this.canRenderSlotEvent(left, span)) {
              var content = EventRowMixin.renderEvent(this.props, event)
              if (gap) {
                row.push(EventRowMixin.renderSpan(slots, gap, key + '_gap'))
              }
              row.push(EventRowMixin.renderSpan(slots, span, key, content))
              lastEnd = current = right + 1
            } else {
              if (gap) {
                row.push(EventRowMixin.renderSpan(slots, gap, key + '_gap'))
              }
              row.push(
                EventRowMixin.renderSpan(
                  slots,
                  1,
                  key,
                  this.renderShowMore(segments, current)
                )
              )
              lastEnd = current = current + 1
            }
          }
          return /*#__PURE__*/ React.createElement(
            'div',
            {
              className: 'rbc-row',
            },
            row
          )
        },
      },
      {
        key: 'canRenderSlotEvent',
        value: function canRenderSlotEvent(slot, span) {
          var segments = this.props.segments
          return range_1(slot, slot + span).every(function (s) {
            var count = eventsInSlot(segments, s)
            return count === 1
          })
        },
      },
      {
        key: 'renderShowMore',
        value: function renderShowMore(segments, slot) {
          var _this = this
          var localizer = this.props.localizer
          var count = eventsInSlot(segments, slot)
          return count
            ? /*#__PURE__*/ React.createElement(
                'button',
                {
                  type: 'button',
                  key: 'sm_' + slot,
                  className: clsx('rbc-button-link', 'rbc-show-more'),
                  onClick: function onClick(e) {
                    return _this.showMore(slot, e)
                  },
                },
                localizer.messages.showMore(count)
              )
            : false
        },
      },
      {
        key: 'showMore',
        value: function showMore(slot, e) {
          e.preventDefault()
          e.stopPropagation()
          this.props.onShowMore(slot, e.target)
        },
      },
    ])
    return EventEndingRow
  })(React.Component)
  EventEndingRow.defaultProps = _objectSpread2({}, EventRowMixin.defaultProps)

  var ScrollableWeekWrapper = function ScrollableWeekWrapper(_ref) {
    var children = _ref.children
    return /*#__PURE__*/ React.createElement(
      'div',
      {
        className: 'rbc-row-content-scroll-container',
      },
      children
    )
  }

  var safeIsNaN =
    Number.isNaN ||
    function ponyfill(value) {
      return typeof value === 'number' && value !== value
    }
  function isEqual$1(first, second) {
    if (first === second) {
      return true
    }
    if (safeIsNaN(first) && safeIsNaN(second)) {
      return true
    }
    return false
  }
  function areInputsEqual(newInputs, lastInputs) {
    if (newInputs.length !== lastInputs.length) {
      return false
    }
    for (var i = 0; i < newInputs.length; i++) {
      if (!isEqual$1(newInputs[i], lastInputs[i])) {
        return false
      }
    }
    return true
  }

  function memoizeOne(resultFn, isEqual) {
    if (isEqual === void 0) {
      isEqual = areInputsEqual
    }
    var cache = null
    function memoized() {
      var newArgs = []
      for (var _i = 0; _i < arguments.length; _i++) {
        newArgs[_i] = arguments[_i]
      }
      if (
        cache &&
        cache.lastThis === this &&
        isEqual(newArgs, cache.lastArgs)
      ) {
        return cache.lastResult
      }
      var lastResult = resultFn.apply(this, newArgs)
      cache = {
        lastResult: lastResult,
        lastArgs: newArgs,
        lastThis: this,
      }
      return lastResult
    }
    memoized.clear = function clear() {
      cache = null
    }
    return memoized
  }

  var isSegmentInSlot = function isSegmentInSlot(seg, slot) {
    return seg.left <= slot && seg.right >= slot
  }
  var isEqual = function isEqual(a, b) {
    return a[0].range === b[0].range && a[0].events === b[0].events
  }
  function getSlotMetrics$1() {
    return memoizeOne(function (options) {
      var range = options.range,
        events = options.events,
        maxRows = options.maxRows,
        minRows = options.minRows,
        accessors = options.accessors,
        localizer = options.localizer
      var _endOfRange = endOfRange({
          dateRange: range,
          localizer: localizer,
        }),
        first = _endOfRange.first,
        last = _endOfRange.last
      var segments = events.map(function (evt) {
        return eventSegments(evt, range, accessors, localizer)
      })
      var _eventLevels = eventLevels(segments, Math.max(maxRows - 1, 1)),
        levels = _eventLevels.levels,
        extra = _eventLevels.extra
      // Subtract 1 from minRows to not include showMore button row when
      // it would be rendered
      var minEventRows = extra.length > 0 ? minRows - 1 : minRows
      while (levels.length < minEventRows) levels.push([])
      return {
        first: first,
        last: last,
        levels: levels,
        extra: extra,
        range: range,
        slots: range.length,
        clone: function clone(args) {
          var metrics = getSlotMetrics$1()
          return metrics(_objectSpread2(_objectSpread2({}, options), args))
        },
        getDateForSlot: function getDateForSlot(slotNumber) {
          return range[slotNumber]
        },
        getSlotForDate: function getSlotForDate(date) {
          return range.find(function (r) {
            return localizer.isSameDate(r, date)
          })
        },
        getEventsForSlot: function getEventsForSlot(slot) {
          return segments
            .filter(function (seg) {
              return isSegmentInSlot(seg, slot)
            })
            .map(function (seg) {
              return seg.event
            })
        },
        continuesPrior: function continuesPrior(event) {
          return localizer.continuesPrior(accessors.start(event), first)
        },
        continuesAfter: function continuesAfter(event) {
          var start = accessors.start(event)
          var end = accessors.end(event)
          return localizer.continuesAfter(start, end, last)
        },
      }
    }, isEqual)
  }

  var DateContentRow = /*#__PURE__*/ (function (_React$Component) {
    _inherits(DateContentRow, _React$Component)
    var _super = _createSuper(DateContentRow)
    function DateContentRow() {
      var _this
      _classCallCheck(this, DateContentRow)
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key]
      }
      _this = _super.call.apply(_super, [this].concat(args))
      _this.handleSelectSlot = function (slot) {
        var _this$props = _this.props,
          range = _this$props.range,
          onSelectSlot = _this$props.onSelectSlot
        onSelectSlot(range.slice(slot.start, slot.end + 1), slot)
      }
      _this.handleShowMore = function (slot, target) {
        var _this$props2 = _this.props,
          range = _this$props2.range,
          onShowMore = _this$props2.onShowMore
        var metrics = _this.slotMetrics(_this.props)
        var row = qsa(_this.containerRef.current, '.rbc-row-bg')[0]
        var cell
        if (row) cell = row.children[slot - 1]
        var events = metrics.getEventsForSlot(slot)
        onShowMore(events, range[slot - 1], cell, slot, target)
      }
      _this.getContainer = function () {
        var container = _this.props.container
        return container ? container() : _this.containerRef.current
      }
      _this.renderHeadingCell = function (date, index) {
        var _this$props3 = _this.props,
          renderHeader = _this$props3.renderHeader,
          getNow = _this$props3.getNow,
          localizer = _this$props3.localizer
        return renderHeader({
          date: date,
          key: 'header_'.concat(index),
          className: clsx(
            'rbc-date-cell',
            localizer.isSameDate(date, getNow()) && 'rbc-now'
          ),
        })
      }
      _this.renderDummy = function () {
        var _this$props4 = _this.props,
          className = _this$props4.className,
          range = _this$props4.range,
          renderHeader = _this$props4.renderHeader,
          showAllEvents = _this$props4.showAllEvents
        return /*#__PURE__*/ React.createElement(
          'div',
          {
            className: className,
            ref: _this.containerRef,
          },
          /*#__PURE__*/ React.createElement(
            'div',
            {
              className: clsx(
                'rbc-row-content',
                showAllEvents && 'rbc-row-content-scrollable'
              ),
            },
            renderHeader &&
              /*#__PURE__*/ React.createElement(
                'div',
                {
                  className: 'rbc-row',
                  ref: _this.headingRowRef,
                },
                range.map(_this.renderHeadingCell)
              ),
            /*#__PURE__*/ React.createElement(
              'div',
              {
                className: 'rbc-row',
                ref: _this.eventRowRef,
              },
              /*#__PURE__*/ React.createElement(
                'div',
                {
                  className: 'rbc-row-segment',
                },
                /*#__PURE__*/ React.createElement(
                  'div',
                  {
                    className: 'rbc-event',
                  },
                  /*#__PURE__*/ React.createElement(
                    'div',
                    {
                      className: 'rbc-event-content',
                    },
                    '\xA0'
                  )
                )
              )
            )
          )
        )
      }
      _this.containerRef = /*#__PURE__*/ reactExports.createRef()
      _this.headingRowRef = /*#__PURE__*/ reactExports.createRef()
      _this.eventRowRef = /*#__PURE__*/ reactExports.createRef()
      _this.slotMetrics = getSlotMetrics$1()
      return _this
    }
    _createClass(DateContentRow, [
      {
        key: 'getRowLimit',
        value: function getRowLimit() {
          var _this$headingRowRef
          /* Guessing this only gets called on the dummyRow */
          var eventHeight = height(this.eventRowRef.current)
          var headingHeight =
            (_this$headingRowRef = this.headingRowRef) !== null &&
            _this$headingRowRef !== void 0 &&
            _this$headingRowRef.current
              ? height(this.headingRowRef.current)
              : 0
          var eventSpace = height(this.containerRef.current) - headingHeight
          return Math.max(Math.floor(eventSpace / eventHeight), 1)
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props5 = this.props,
            date = _this$props5.date,
            rtl = _this$props5.rtl,
            range = _this$props5.range,
            className = _this$props5.className,
            selected = _this$props5.selected,
            selectable = _this$props5.selectable,
            renderForMeasure = _this$props5.renderForMeasure,
            accessors = _this$props5.accessors,
            getters = _this$props5.getters,
            components = _this$props5.components,
            getNow = _this$props5.getNow,
            renderHeader = _this$props5.renderHeader,
            onSelect = _this$props5.onSelect,
            localizer = _this$props5.localizer,
            onSelectStart = _this$props5.onSelectStart,
            onSelectEnd = _this$props5.onSelectEnd,
            onDoubleClick = _this$props5.onDoubleClick,
            onKeyPress = _this$props5.onKeyPress,
            resourceId = _this$props5.resourceId,
            longPressThreshold = _this$props5.longPressThreshold,
            isAllDay = _this$props5.isAllDay,
            resizable = _this$props5.resizable,
            showAllEvents = _this$props5.showAllEvents
          if (renderForMeasure) return this.renderDummy()
          var metrics = this.slotMetrics(this.props)
          var levels = metrics.levels,
            extra = metrics.extra
          var ScrollableWeekComponent = showAllEvents
            ? ScrollableWeekWrapper
            : NoopWrapper
          var WeekWrapper = components.weekWrapper
          var eventRowProps = {
            selected: selected,
            accessors: accessors,
            getters: getters,
            localizer: localizer,
            components: components,
            onSelect: onSelect,
            onDoubleClick: onDoubleClick,
            onKeyPress: onKeyPress,
            resourceId: resourceId,
            slotMetrics: metrics,
            resizable: resizable,
          }
          return /*#__PURE__*/ React.createElement(
            'div',
            {
              className: className,
              role: 'rowgroup',
              ref: this.containerRef,
            },
            /*#__PURE__*/ React.createElement(BackgroundCells, {
              localizer: localizer,
              date: date,
              getNow: getNow,
              rtl: rtl,
              range: range,
              selectable: selectable,
              container: this.getContainer,
              getters: getters,
              onSelectStart: onSelectStart,
              onSelectEnd: onSelectEnd,
              onSelectSlot: this.handleSelectSlot,
              components: components,
              longPressThreshold: longPressThreshold,
              resourceId: resourceId,
            }),
            /*#__PURE__*/ React.createElement(
              'div',
              {
                className: clsx(
                  'rbc-row-content',
                  showAllEvents && 'rbc-row-content-scrollable'
                ),
                role: 'row',
              },
              renderHeader &&
                /*#__PURE__*/ React.createElement(
                  'div',
                  {
                    className: 'rbc-row ',
                    ref: this.headingRowRef,
                  },
                  range.map(this.renderHeadingCell)
                ),
              /*#__PURE__*/ React.createElement(
                ScrollableWeekComponent,
                null,
                /*#__PURE__*/ React.createElement(
                  WeekWrapper,
                  Object.assign(
                    {
                      isAllDay: isAllDay,
                    },
                    eventRowProps,
                    {
                      rtl: this.props.rtl,
                    }
                  ),
                  levels.map(function (segs, idx) {
                    return /*#__PURE__*/ React.createElement(
                      EventRow,
                      Object.assign(
                        {
                          key: idx,
                          segments: segs,
                        },
                        eventRowProps
                      )
                    )
                  }),
                  !!extra.length &&
                    /*#__PURE__*/ React.createElement(
                      EventEndingRow,
                      Object.assign(
                        {
                          segments: extra,
                          onShowMore: this.handleShowMore,
                        },
                        eventRowProps
                      )
                    )
                )
              )
            )
          )
        },
      },
    ])
    return DateContentRow
  })(React.Component)
  DateContentRow.defaultProps = {
    minRows: 0,
    maxRows: Infinity,
  }

  var Header = function Header(_ref) {
    var label = _ref.label
    return /*#__PURE__*/ React.createElement(
      'span',
      {
        role: 'columnheader',
        'aria-sort': 'none',
      },
      label
    )
  }

  var DateHeader = function DateHeader(_ref) {
    var label = _ref.label,
      drilldownView = _ref.drilldownView,
      onDrillDown = _ref.onDrillDown
    if (!drilldownView) {
      return /*#__PURE__*/ React.createElement('span', null, label)
    }
    return /*#__PURE__*/ React.createElement(
      'button',
      {
        type: 'button',
        className: 'rbc-button-link',
        onClick: onDrillDown,
        role: 'cell',
      },
      label
    )
  }

  var _excluded$6 = ['date', 'className']
  var eventsForWeek = function eventsForWeek(
    evts,
    start,
    end,
    accessors,
    localizer
  ) {
    return evts.filter(function (e) {
      return inRange(e, start, end, accessors, localizer)
    })
  }
  var MonthView = /*#__PURE__*/ (function (_React$Component) {
    _inherits(MonthView, _React$Component)
    var _super = _createSuper(MonthView)
    function MonthView() {
      var _this
      _classCallCheck(this, MonthView)
      for (
        var _len = arguments.length, _args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        _args[_key] = arguments[_key]
      }
      _this = _super.call.apply(_super, [this].concat(_args))
      _this.getContainer = function () {
        return _this.containerRef.current
      }
      _this.renderWeek = function (week, weekIdx) {
        var _this$props = _this.props,
          events = _this$props.events,
          components = _this$props.components,
          selectable = _this$props.selectable,
          getNow = _this$props.getNow,
          selected = _this$props.selected,
          date = _this$props.date,
          localizer = _this$props.localizer,
          longPressThreshold = _this$props.longPressThreshold,
          accessors = _this$props.accessors,
          getters = _this$props.getters,
          showAllEvents = _this$props.showAllEvents
        var _this$state = _this.state,
          needLimitMeasure = _this$state.needLimitMeasure,
          rowLimit = _this$state.rowLimit

        // let's not mutate props
        var weeksEvents = eventsForWeek(
          _toConsumableArray(events),
          week[0],
          week[week.length - 1],
          accessors,
          localizer
        )
        weeksEvents.sort(function (a, b) {
          return sortEvents(a, b, accessors, localizer)
        })
        return /*#__PURE__*/ React.createElement(DateContentRow, {
          key: weekIdx,
          ref: weekIdx === 0 ? _this.slotRowRef : undefined,
          container: _this.getContainer,
          className: 'rbc-month-row',
          getNow: getNow,
          date: date,
          range: week,
          events: weeksEvents,
          maxRows: showAllEvents ? Infinity : rowLimit,
          selected: selected,
          selectable: selectable,
          components: components,
          accessors: accessors,
          getters: getters,
          localizer: localizer,
          renderHeader: _this.readerDateHeading,
          renderForMeasure: needLimitMeasure,
          onShowMore: _this.handleShowMore,
          onSelect: _this.handleSelectEvent,
          onDoubleClick: _this.handleDoubleClickEvent,
          onKeyPress: _this.handleKeyPressEvent,
          onSelectSlot: _this.handleSelectSlot,
          longPressThreshold: longPressThreshold,
          rtl: _this.props.rtl,
          resizable: _this.props.resizable,
          showAllEvents: showAllEvents,
        })
      }
      _this.readerDateHeading = function (_ref) {
        var date = _ref.date,
          className = _ref.className,
          props = _objectWithoutProperties(_ref, _excluded$6)
        var _this$props2 = _this.props,
          currentDate = _this$props2.date,
          getDrilldownView = _this$props2.getDrilldownView,
          localizer = _this$props2.localizer
        var isOffRange = localizer.neq(date, currentDate, 'month')
        var isCurrent = localizer.isSameDate(date, currentDate)
        var drilldownView = getDrilldownView(date)
        var label = localizer.format(date, 'dateFormat')
        var DateHeaderComponent =
          _this.props.components.dateHeader || DateHeader
        return /*#__PURE__*/ React.createElement(
          'div',
          Object.assign({}, props, {
            className: clsx(
              className,
              isOffRange && 'rbc-off-range',
              isCurrent && 'rbc-current'
            ),
            role: 'cell',
          }),
          /*#__PURE__*/ React.createElement(DateHeaderComponent, {
            label: label,
            date: date,
            drilldownView: drilldownView,
            isOffRange: isOffRange,
            onDrillDown: function onDrillDown(e) {
              return _this.handleHeadingClick(date, drilldownView, e)
            },
          })
        )
      }
      _this.handleSelectSlot = function (range, slotInfo) {
        _this._pendingSelection = _this._pendingSelection.concat(range)
        clearTimeout(_this._selectTimer)
        _this._selectTimer = setTimeout(function () {
          return _this.selectDates(slotInfo)
        })
      }
      _this.handleHeadingClick = function (date, view, e) {
        e.preventDefault()
        _this.clearSelection()
        notify(_this.props.onDrillDown, [date, view])
      }
      _this.handleSelectEvent = function () {
        _this.clearSelection()
        for (
          var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2] = arguments[_key2]
        }
        notify(_this.props.onSelectEvent, args)
      }
      _this.handleDoubleClickEvent = function () {
        _this.clearSelection()
        for (
          var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3] = arguments[_key3]
        }
        notify(_this.props.onDoubleClickEvent, args)
      }
      _this.handleKeyPressEvent = function () {
        _this.clearSelection()
        for (
          var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
          _key4 < _len4;
          _key4++
        ) {
          args[_key4] = arguments[_key4]
        }
        notify(_this.props.onKeyPressEvent, args)
      }
      _this.handleShowMore = function (events, date, cell, slot, target) {
        var _this$props3 = _this.props,
          popup = _this$props3.popup,
          onDrillDown = _this$props3.onDrillDown,
          onShowMore = _this$props3.onShowMore,
          getDrilldownView = _this$props3.getDrilldownView,
          doShowMoreDrillDown = _this$props3.doShowMoreDrillDown
        //cancel any pending selections so only the event click goes through.
        _this.clearSelection()
        if (popup) {
          var position$1 = position(cell, _this.containerRef.current)
          _this.setState({
            overlay: {
              date: date,
              events: events,
              position: position$1,
              target: target,
            },
          })
        } else if (doShowMoreDrillDown) {
          notify(onDrillDown, [date, getDrilldownView(date) || views.DAY])
        }
        notify(onShowMore, [events, date, slot])
      }
      _this.overlayDisplay = function () {
        _this.setState({
          overlay: null,
        })
      }
      _this.state = {
        rowLimit: 5,
        needLimitMeasure: true,
        date: null,
      }
      _this.containerRef = /*#__PURE__*/ reactExports.createRef()
      _this.slotRowRef = /*#__PURE__*/ reactExports.createRef()
      _this._bgRows = []
      _this._pendingSelection = []
      return _this
    }
    _createClass(
      MonthView,
      [
        {
          key: 'componentDidMount',
          value: function componentDidMount() {
            var _this2 = this
            var running
            if (this.state.needLimitMeasure) this.measureRowLimit(this.props)
            window.addEventListener(
              'resize',
              (this._resizeListener = function () {
                if (!running) {
                  request(function () {
                    running = false
                    _this2.setState({
                      needLimitMeasure: true,
                    }) //eslint-disable-line
                  })
                }
              }),
              false
            )
          },
        },
        {
          key: 'componentDidUpdate',
          value: function componentDidUpdate() {
            if (this.state.needLimitMeasure) this.measureRowLimit(this.props)
          },
        },
        {
          key: 'componentWillUnmount',
          value: function componentWillUnmount() {
            window.removeEventListener('resize', this._resizeListener, false)
          },
        },
        {
          key: 'render',
          value: function render() {
            var _this$props4 = this.props,
              date = _this$props4.date,
              localizer = _this$props4.localizer,
              className = _this$props4.className,
              month = localizer.visibleDays(date, localizer),
              weeks = chunk_1(month, 7)
            this._weekCount = weeks.length
            return /*#__PURE__*/ React.createElement(
              'div',
              {
                className: clsx('rbc-month-view', className),
                role: 'table',
                'aria-label': 'Month View',
                ref: this.containerRef,
              },
              /*#__PURE__*/ React.createElement(
                'div',
                {
                  className: 'rbc-row rbc-month-header',
                  role: 'row',
                },
                this.renderHeaders(weeks[0])
              ),
              weeks.map(this.renderWeek),
              this.props.popup && this.renderOverlay()
            )
          },
        },
        {
          key: 'renderHeaders',
          value: function renderHeaders(row) {
            var _this$props5 = this.props,
              localizer = _this$props5.localizer,
              components = _this$props5.components
            var first = row[0]
            var last = row[row.length - 1]
            var HeaderComponent = components.header || Header
            return localizer.range(first, last, 'day').map(function (day, idx) {
              return /*#__PURE__*/ React.createElement(
                'div',
                {
                  key: 'header_' + idx,
                  className: 'rbc-header',
                },
                /*#__PURE__*/ React.createElement(HeaderComponent, {
                  date: day,
                  localizer: localizer,
                  label: localizer.format(day, 'weekdayFormat'),
                })
              )
            })
          },
        },
        {
          key: 'renderOverlay',
          value: function renderOverlay() {
            var _this$state$overlay,
              _this$state2,
              _this3 = this
            var overlay =
              (_this$state$overlay =
                (_this$state2 = this.state) === null || _this$state2 === void 0
                  ? void 0
                  : _this$state2.overlay) !== null &&
              _this$state$overlay !== void 0
                ? _this$state$overlay
                : {}
            var _this$props6 = this.props,
              accessors = _this$props6.accessors,
              localizer = _this$props6.localizer,
              components = _this$props6.components,
              getters = _this$props6.getters,
              selected = _this$props6.selected,
              popupOffset = _this$props6.popupOffset,
              handleDragStart = _this$props6.handleDragStart
            var onHide = function onHide() {
              return _this3.setState({
                overlay: null,
              })
            }
            return /*#__PURE__*/ React.createElement(PopOverlay, {
              overlay: overlay,
              accessors: accessors,
              localizer: localizer,
              components: components,
              getters: getters,
              selected: selected,
              popupOffset: popupOffset,
              ref: this.containerRef,
              handleKeyPressEvent: this.handleKeyPressEvent,
              handleSelectEvent: this.handleSelectEvent,
              handleDoubleClickEvent: this.handleDoubleClickEvent,
              handleDragStart: handleDragStart,
              show: !!overlay.position,
              overlayDisplay: this.overlayDisplay,
              onHide: onHide,
            })

            /* return (
          <Overlay
            rootClose
            placement="bottom"
            show={!!overlay.position}
            onHide={() => this.setState({ overlay: null })}
            target={() => overlay.target}
          >
            {({ props }) => (
              <Popup
                {...props}
                popupOffset={popupOffset}
                accessors={accessors}
                getters={getters}
                selected={selected}
                components={components}
                localizer={localizer}
                position={overlay.position}
                show={this.overlayDisplay}
                events={overlay.events}
                slotStart={overlay.date}
                slotEnd={overlay.end}
                onSelect={this.handleSelectEvent}
                onDoubleClick={this.handleDoubleClickEvent}
                onKeyPress={this.handleKeyPressEvent}
                handleDragStart={this.props.handleDragStart}
              />
            )}
          </Overlay>
        ) */
          },
        },
        {
          key: 'measureRowLimit',
          value: function measureRowLimit() {
            this.setState({
              needLimitMeasure: false,
              rowLimit: this.slotRowRef.current.getRowLimit(),
            })
          },
        },
        {
          key: 'selectDates',
          value: function selectDates(slotInfo) {
            var slots = this._pendingSelection.slice()
            this._pendingSelection = []
            slots.sort(function (a, b) {
              return +a - +b
            })
            var start = new Date(slots[0])
            var end = new Date(slots[slots.length - 1])
            end.setDate(slots[slots.length - 1].getDate() + 1)
            notify(this.props.onSelectSlot, {
              slots: slots,
              start: start,
              end: end,
              action: slotInfo.action,
              bounds: slotInfo.bounds,
              box: slotInfo.box,
            })
          },
        },
        {
          key: 'clearSelection',
          value: function clearSelection() {
            clearTimeout(this._selectTimer)
            this._pendingSelection = []
          },
        },
      ],
      [
        {
          key: 'getDerivedStateFromProps',
          value: function getDerivedStateFromProps(_ref2, state) {
            var date = _ref2.date,
              localizer = _ref2.localizer
            return {
              date: date,
              needLimitMeasure: localizer.neq(date, state.date, 'month'),
            }
          },
        },
      ]
    )
    return MonthView
  })(React.Component)
  MonthView.range = function (date, _ref3) {
    var localizer = _ref3.localizer
    var start = localizer.firstVisibleDay(date, localizer)
    var end = localizer.lastVisibleDay(date, localizer)
    return {
      start: start,
      end: end,
    }
  }
  MonthView.navigate = function (date, action, _ref4) {
    var localizer = _ref4.localizer
    switch (action) {
      case navigate.PREVIOUS:
        return localizer.add(date, -1, 'month')
      case navigate.NEXT:
        return localizer.add(date, 1, 'month')
      default:
        return date
    }
  }
  MonthView.title = function (date, _ref5) {
    var localizer = _ref5.localizer
    return localizer.format(date, 'monthHeaderFormat')
  }

  var getKey = function getKey(_ref) {
    var min = _ref.min,
      max = _ref.max,
      step = _ref.step,
      slots = _ref.slots,
      localizer = _ref.localizer
    return (
      ''.concat(+localizer.startOf(min, 'minutes')) +
      ''.concat(+localizer.startOf(max, 'minutes')) +
      ''.concat(step, '-').concat(slots)
    )
  }
  function getSlotMetrics(_ref2) {
    var start = _ref2.min,
      end = _ref2.max,
      step = _ref2.step,
      timeslots = _ref2.timeslots,
      localizer = _ref2.localizer
    var key = getKey({
      start: start,
      end: end,
      step: step,
      timeslots: timeslots,
      localizer: localizer,
    })

    // DST differences are handled inside the localizer
    var totalMin = 1 + localizer.getTotalMin(start, end)
    var minutesFromMidnight = localizer.getMinutesFromMidnight(start)
    var numGroups = Math.ceil((totalMin - 1) / (step * timeslots))
    var numSlots = numGroups * timeslots
    var groups = new Array(numGroups)
    var slots = new Array(numSlots)
    // Each slot date is created from "zero", instead of adding `step` to
    // the previous one, in order to avoid DST oddities
    for (var grp = 0; grp < numGroups; grp++) {
      groups[grp] = new Array(timeslots)
      for (var slot = 0; slot < timeslots; slot++) {
        var slotIdx = grp * timeslots + slot
        var minFromStart = slotIdx * step
        // A date with total minutes calculated from the start of the day
        slots[slotIdx] = groups[grp][slot] = localizer.getSlotDate(
          start,
          minutesFromMidnight,
          minFromStart
        )
      }
    }

    // Necessary to be able to select up until the last timeslot in a day
    var lastSlotMinFromStart = slots.length * step
    slots.push(
      localizer.getSlotDate(start, minutesFromMidnight, lastSlotMinFromStart)
    )
    function positionFromDate(date) {
      var diff =
        localizer.diff(start, date, 'minutes') +
        localizer.getDstOffset(start, date)
      return Math.min(diff, totalMin)
    }
    return {
      groups: groups,
      update: function update(args) {
        if (getKey(args) !== key) return getSlotMetrics(args)
        return this
      },
      dateIsInGroup: function dateIsInGroup(date, groupIndex) {
        var nextGroup = groups[groupIndex + 1]
        return localizer.inRange(
          date,
          groups[groupIndex][0],
          nextGroup ? nextGroup[0] : end,
          'minutes'
        )
      },
      nextSlot: function nextSlot(slot) {
        var next = slots[Math.min(slots.indexOf(slot) + 1, slots.length - 1)]
        // in the case of the last slot we won't a long enough range so manually get it
        if (next === slot) next = localizer.add(slot, step, 'minutes')
        return next
      },
      closestSlotToPosition: function closestSlotToPosition(percent) {
        var slot = Math.min(
          slots.length - 1,
          Math.max(0, Math.floor(percent * numSlots))
        )
        return slots[slot]
      },
      closestSlotFromPoint: function closestSlotFromPoint(point, boundaryRect) {
        var range = Math.abs(boundaryRect.top - boundaryRect.bottom)
        return this.closestSlotToPosition((point.y - boundaryRect.top) / range)
      },
      closestSlotFromDate: function closestSlotFromDate(date) {
        var offset =
          arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0
        if (localizer.lt(date, start, 'minutes')) return slots[0]
        if (localizer.gt(date, end, 'minutes')) return slots[slots.length - 1]
        var diffMins = localizer.diff(start, date, 'minutes')
        return slots[(diffMins - (diffMins % step)) / step + offset]
      },
      startsBeforeDay: function startsBeforeDay(date) {
        return localizer.lt(date, start, 'day')
      },
      startsAfterDay: function startsAfterDay(date) {
        return localizer.gt(date, end, 'day')
      },
      startsBefore: function startsBefore(date) {
        return localizer.lt(localizer.merge(start, date), start, 'minutes')
      },
      startsAfter: function startsAfter(date) {
        return localizer.gt(localizer.merge(end, date), end, 'minutes')
      },
      getRange: function getRange(rangeStart, rangeEnd, ignoreMin, ignoreMax) {
        if (!ignoreMin)
          rangeStart = localizer.min(end, localizer.max(start, rangeStart))
        if (!ignoreMax)
          rangeEnd = localizer.min(end, localizer.max(start, rangeEnd))
        var rangeStartMin = positionFromDate(rangeStart)
        var rangeEndMin = positionFromDate(rangeEnd)
        var top =
          rangeEndMin > step * numSlots && !localizer.eq(end, rangeEnd)
            ? ((rangeStartMin - step) / (step * numSlots)) * 100
            : (rangeStartMin / (step * numSlots)) * 100
        return {
          top: top,
          height: (rangeEndMin / (step * numSlots)) * 100 - top,
          start: positionFromDate(rangeStart),
          startDate: rangeStart,
          end: positionFromDate(rangeEnd),
          endDate: rangeEnd,
        }
      },
      getCurrentTimePosition: function getCurrentTimePosition(rangeStart) {
        var rangeStartMin = positionFromDate(rangeStart)
        var top = (rangeStartMin / (step * numSlots)) * 100
        return top
      },
    }
  }

  function stringifyPercent(v) {
    return typeof v === 'string' ? v : v + '%'
  }

  /* eslint-disable react/prop-types */
  function TimeGridEvent(props) {
    var style = props.style,
      className = props.className,
      event = props.event,
      accessors = props.accessors,
      rtl = props.rtl,
      selected = props.selected,
      label = props.label,
      continuesPrior = props.continuesPrior,
      continuesAfter = props.continuesAfter,
      getters = props.getters,
      onClick = props.onClick,
      onDoubleClick = props.onDoubleClick,
      isBackgroundEvent = props.isBackgroundEvent,
      onKeyPress = props.onKeyPress,
      _props$components = props.components,
      Event = _props$components.event,
      EventWrapper = _props$components.eventWrapper
    var title = accessors.title(event)
    var tooltip = accessors.tooltip(event)
    var end = accessors.end(event)
    var start = accessors.start(event)
    var userProps = getters.eventProp(event, start, end, selected)
    var height = style.height,
      top = style.top,
      width = style.width,
      xOffset = style.xOffset
    var inner = [
      /*#__PURE__*/ React.createElement(
        'div',
        {
          key: '1',
          className: 'rbc-event-label',
        },
        label
      ),
      /*#__PURE__*/ React.createElement(
        'div',
        {
          key: '2',
          className: 'rbc-event-content',
        },
        Event
          ? /*#__PURE__*/ React.createElement(Event, {
              event: event,
              title: title,
            })
          : title
      ),
    ]
    var eventStyle = isBackgroundEvent
      ? _objectSpread2(
          _objectSpread2({}, userProps.style),
          {},
          _defineProperty$1(
            {
              top: stringifyPercent(top),
              height: stringifyPercent(height),
              // Adding 10px to take events container right margin into account
              width: 'calc('.concat(width, ' + 10px)'),
            },
            rtl ? 'right' : 'left',
            stringifyPercent(Math.max(0, xOffset))
          )
        )
      : _objectSpread2(
          _objectSpread2({}, userProps.style),
          {},
          _defineProperty$1(
            {
              top: stringifyPercent(top),
              width: stringifyPercent(width),
              height: stringifyPercent(height),
            },
            rtl ? 'right' : 'left',
            stringifyPercent(xOffset)
          )
        )
    return /*#__PURE__*/ React.createElement(
      EventWrapper,
      Object.assign(
        {
          type: 'time',
        },
        props
      ),
      /*#__PURE__*/ React.createElement(
        'div',
        {
          role: 'button',
          tabIndex: 0,
          onClick: onClick,
          onDoubleClick: onDoubleClick,
          style: eventStyle,
          onKeyPress: onKeyPress,
          title: tooltip
            ? (typeof label === 'string' ? label + ': ' : '') + tooltip
            : undefined,
          className: clsx(
            isBackgroundEvent ? 'rbc-background-event' : 'rbc-event',
            className,
            userProps.className,
            {
              'rbc-selected': selected,
              'rbc-event-continues-earlier': continuesPrior,
              'rbc-event-continues-later': continuesAfter,
            }
          ),
        },
        inner
      )
    )
  }

  var TimeSlotGroup = /*#__PURE__*/ (function (_Component) {
    _inherits(TimeSlotGroup, _Component)
    var _super = _createSuper(TimeSlotGroup)
    function TimeSlotGroup() {
      _classCallCheck(this, TimeSlotGroup)
      return _super.apply(this, arguments)
    }
    _createClass(TimeSlotGroup, [
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            renderSlot = _this$props.renderSlot,
            resource = _this$props.resource,
            group = _this$props.group,
            getters = _this$props.getters,
            _this$props$component = _this$props.components,
            _this$props$component2 =
              _this$props$component === void 0 ? {} : _this$props$component,
            _this$props$component3 = _this$props$component2.timeSlotWrapper,
            Wrapper =
              _this$props$component3 === void 0
                ? NoopWrapper
                : _this$props$component3,
            slotChildrenWrapper = _this$props$component2.slotChildrenWrapper
          var groupProps = getters ? getters.slotGroupProp(group) : {}
          return /*#__PURE__*/ React.createElement(
            'div',
            Object.assign(
              {
                className: 'rbc-timeslot-group',
              },
              groupProps
            ),
            group.map(function (value, idx) {
              var slotProps = getters ? getters.slotProp(value, resource) : {}
              return /*#__PURE__*/ React.createElement(
                Wrapper,
                {
                  key: idx,
                  value: value,
                  resource: resource,
                },
                /*#__PURE__*/ React.createElement(
                  'div',
                  Object.assign({}, slotProps, {
                    className: clsx('rbc-time-slot', slotProps.className),
                  }),
                  renderSlot
                    ? renderSlot(value, idx)
                    : slotChildrenWrapper === null ||
                      slotChildrenWrapper === void 0
                    ? void 0
                    : slotChildrenWrapper(slotProps)
                )
              )
            })
          )
        },
      },
    ])
    return TimeSlotGroup
  })(reactExports.Component)

  var Symbol$2 = _Symbol,
    isArguments = isArguments_1,
    isArray$3 = isArray_1

  /** Built-in value references. */
  var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined

  /**
   * Checks if `value` is a flattenable `arguments` object or array.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
   */
  function isFlattenable$1(value) {
    return (
      isArray$3(value) ||
      isArguments(value) ||
      !!(spreadableSymbol && value && value[spreadableSymbol])
    )
  }

  var _isFlattenable = isFlattenable$1

  var arrayPush$1 = _arrayPush,
    isFlattenable = _isFlattenable

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
   * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten$2(array, depth, predicate, isStrict, result) {
    var index = -1,
      length = array.length

    predicate || (predicate = isFlattenable)
    result || (result = [])

    while (++index < length) {
      var value = array[index]
      if (depth > 0 && predicate(value)) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten$2(value, depth - 1, predicate, isStrict, result)
        } else {
          arrayPush$1(result, value)
        }
      } else if (!isStrict) {
        result[result.length] = value
      }
    }
    return result
  }

  var _baseFlatten = baseFlatten$2

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */

  function createBaseFor$1(fromRight) {
    return function (object, iteratee, keysFunc) {
      var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length

      while (length--) {
        var key = props[fromRight ? length : ++index]
        if (iteratee(iterable[key], key, iterable) === false) {
          break
        }
      }
      return object
    }
  }

  var _createBaseFor = createBaseFor$1

  var createBaseFor = _createBaseFor

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor$1 = createBaseFor()

  var _baseFor = baseFor$1

  var baseFor = _baseFor,
    keys$2 = keys_1

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn$3(object, iteratee) {
    return object && baseFor(object, iteratee, keys$2)
  }

  var _baseForOwn = baseForOwn$3

  var isArrayLike$2 = isArrayLike_1

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach$1(eachFunc, fromRight) {
    return function (collection, iteratee) {
      if (collection == null) {
        return collection
      }
      if (!isArrayLike$2(collection)) {
        return eachFunc(collection, iteratee)
      }
      var length = collection.length,
        index = fromRight ? length : -1,
        iterable = Object(collection)

      while (fromRight ? index-- : ++index < length) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break
        }
      }
      return collection
    }
  }

  var _createBaseEach = createBaseEach$1

  var baseForOwn$2 = _baseForOwn,
    createBaseEach = _createBaseEach

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach$1 = createBaseEach(baseForOwn$2)

  var _baseEach = baseEach$1

  var baseEach = _baseEach,
    isArrayLike$1 = isArrayLike_1

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap$1(collection, iteratee) {
    var index = -1,
      result = isArrayLike$1(collection) ? Array(collection.length) : []

    baseEach(collection, function (value, key, collection) {
      result[++index] = iteratee(value, key, collection)
    })
    return result
  }

  var _baseMap = baseMap$1

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */

  function baseSortBy$1(array, comparer) {
    var length = array.length

    array.sort(comparer)
    while (length--) {
      array[length] = array[length].value
    }
    return array
  }

  var _baseSortBy = baseSortBy$1

  var isSymbol = isSymbol_1

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending$1(value, other) {
    if (value !== other) {
      var valIsDefined = value !== undefined,
        valIsNull = value === null,
        valIsReflexive = value === value,
        valIsSymbol = isSymbol(value)

      var othIsDefined = other !== undefined,
        othIsNull = other === null,
        othIsReflexive = other === other,
        othIsSymbol = isSymbol(other)

      if (
        (!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
        (valIsSymbol &&
          othIsDefined &&
          othIsReflexive &&
          !othIsNull &&
          !othIsSymbol) ||
        (valIsNull && othIsDefined && othIsReflexive) ||
        (!valIsDefined && othIsReflexive) ||
        !valIsReflexive
      ) {
        return 1
      }
      if (
        (!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
        (othIsSymbol &&
          valIsDefined &&
          valIsReflexive &&
          !valIsNull &&
          !valIsSymbol) ||
        (othIsNull && valIsDefined && valIsReflexive) ||
        (!othIsDefined && valIsReflexive) ||
        !othIsReflexive
      ) {
        return -1
      }
    }
    return 0
  }

  var _compareAscending = compareAscending$1

  var compareAscending = _compareAscending

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple$1(object, other, orders) {
    var index = -1,
      objCriteria = object.criteria,
      othCriteria = other.criteria,
      length = objCriteria.length,
      ordersLength = orders.length

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index])
      if (result) {
        if (index >= ordersLength) {
          return result
        }
        var order = orders[index]
        return result * (order == 'desc' ? -1 : 1)
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index
  }

  var _compareMultiple = compareMultiple$1

  var arrayMap$1 = _arrayMap,
    baseGet$1 = _baseGet,
    baseIteratee$2 = _baseIteratee,
    baseMap = _baseMap,
    baseSortBy = _baseSortBy,
    baseUnary$2 = _baseUnary,
    compareMultiple = _compareMultiple,
    identity$2 = identity_1,
    isArray$2 = isArray_1

  /**
   * The base implementation of `_.orderBy` without param guards.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
   * @param {string[]} orders The sort orders of `iteratees`.
   * @returns {Array} Returns the new sorted array.
   */
  function baseOrderBy$1(collection, iteratees, orders) {
    if (iteratees.length) {
      iteratees = arrayMap$1(iteratees, function (iteratee) {
        if (isArray$2(iteratee)) {
          return function (value) {
            return baseGet$1(
              value,
              iteratee.length === 1 ? iteratee[0] : iteratee
            )
          }
        }
        return iteratee
      })
    } else {
      iteratees = [identity$2]
    }

    var index = -1
    iteratees = arrayMap$1(iteratees, baseUnary$2(baseIteratee$2))

    var result = baseMap(collection, function (value, key, collection) {
      var criteria = arrayMap$1(iteratees, function (iteratee) {
        return iteratee(value)
      })
      return { criteria: criteria, index: ++index, value: value }
    })

    return baseSortBy(result, function (object, other) {
      return compareMultiple(object, other, orders)
    })
  }

  var _baseOrderBy = baseOrderBy$1

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */

  function apply$1(func, thisArg, args) {
    switch (args.length) {
      case 0:
        return func.call(thisArg)
      case 1:
        return func.call(thisArg, args[0])
      case 2:
        return func.call(thisArg, args[0], args[1])
      case 3:
        return func.call(thisArg, args[0], args[1], args[2])
    }
    return func.apply(thisArg, args)
  }

  var _apply = apply$1

  var apply = _apply

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest$2(func, start, transform) {
    start = nativeMax(start === undefined ? func.length - 1 : start, 0)
    return function () {
      var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length)

      while (++index < length) {
        array[index] = args[start + index]
      }
      index = -1
      var otherArgs = Array(start + 1)
      while (++index < start) {
        otherArgs[index] = args[index]
      }
      otherArgs[start] = transform(array)
      return apply(func, this, otherArgs)
    }
  }

  var _overRest = overRest$2

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */

  function constant$1(value) {
    return function () {
      return value
    }
  }

  var constant_1 = constant$1

  var getNative = _getNative

  var defineProperty$2 = (function () {
    try {
      var func = getNative(Object, 'defineProperty')
      func({}, '', {})
      return func
    } catch (e) {}
  })()

  var _defineProperty = defineProperty$2

  var constant = constant_1,
    defineProperty$1 = _defineProperty,
    identity$1 = identity_1

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString$1 = !defineProperty$1
    ? identity$1
    : function (func, string) {
        return defineProperty$1(func, 'toString', {
          configurable: true,
          enumerable: false,
          value: constant(string),
          writable: true,
        })
      }

  var _baseSetToString = baseSetToString$1

  /** Used to detect hot functions by number of calls within a span of milliseconds. */

  var HOT_COUNT = 800,
    HOT_SPAN = 16

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut$1(func) {
    var count = 0,
      lastCalled = 0

    return function () {
      var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled)

      lastCalled = stamp
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0]
        }
      } else {
        count = 0
      }
      return func.apply(undefined, arguments)
    }
  }

  var _shortOut = shortOut$1

  var baseSetToString = _baseSetToString,
    shortOut = _shortOut

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString$2 = shortOut(baseSetToString)

  var _setToString = setToString$2

  var identity = identity_1,
    overRest$1 = _overRest,
    setToString$1 = _setToString

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest$2(func, start) {
    return setToString$1(overRest$1(func, start, identity), func + '')
  }

  var _baseRest = baseRest$2

  var baseFlatten$1 = _baseFlatten,
    baseOrderBy = _baseOrderBy,
    baseRest$1 = _baseRest,
    isIterateeCall$1 = _isIterateeCall

  /**
   * Creates an array of elements, sorted in ascending order by the results of
   * running each element in a collection thru each iteratee. This method
   * performs a stable sort, that is, it preserves the original sort order of
   * equal elements. The iteratees are invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {...(Function|Function[])} [iteratees=[_.identity]]
   *  The iteratees to sort by.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 30 },
   *   { 'user': 'barney', 'age': 34 }
   * ];
   *
   * _.sortBy(users, [function(o) { return o.user; }]);
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
   *
   * _.sortBy(users, ['user', 'age']);
   * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
   */
  var sortBy = baseRest$1(function (collection, iteratees) {
    if (collection == null) {
      return []
    }
    var length = iteratees.length
    if (
      length > 1 &&
      isIterateeCall$1(collection, iteratees[0], iteratees[1])
    ) {
      iteratees = []
    } else if (
      length > 2 &&
      isIterateeCall$1(iteratees[0], iteratees[1], iteratees[2])
    ) {
      iteratees = [iteratees[0]]
    }
    return baseOrderBy(collection, baseFlatten$1(iteratees, 1), [])
  })

  var sortBy_1 = sortBy

  var Event = /*#__PURE__*/ (function () {
    function Event(data, _ref) {
      var accessors = _ref.accessors,
        slotMetrics = _ref.slotMetrics
      _classCallCheck(this, Event)
      var _slotMetrics$getRange = slotMetrics.getRange(
          accessors.start(data),
          accessors.end(data)
        ),
        start = _slotMetrics$getRange.start,
        startDate = _slotMetrics$getRange.startDate,
        end = _slotMetrics$getRange.end,
        endDate = _slotMetrics$getRange.endDate,
        top = _slotMetrics$getRange.top,
        height = _slotMetrics$getRange.height
      this.start = start
      this.end = end
      this.startMs = +startDate
      this.endMs = +endDate
      this.top = top
      this.height = height
      this.data = data
    }

    /**
     * The event's width without any overlap.
     */
    _createClass(Event, [
      {
        key: '_width',
        get: function get() {
          // The container event's width is determined by the maximum number of
          // events in any of its rows.
          if (this.rows) {
            var columns =
              this.rows.reduce(
                function (max, row) {
                  return Math.max(max, row.leaves.length + 1)
                },
                // add itself
                0
              ) + 1 // add the container

            return 100 / columns
          }

          // The row event's width is the space left by the container, divided
          // among itself and its leaves.
          if (this.leaves) {
            var availableWidth = 100 - this.container._width
            return availableWidth / (this.leaves.length + 1)
          }

          // The leaf event's width is determined by its row's width
          return this.row._width
        },

        /**
         * The event's calculated width, possibly with extra width added for
         * overlapping effect.
         */
      },
      {
        key: 'width',
        get: function get() {
          var noOverlap = this._width
          var overlap = Math.min(100, this._width * 1.7)

          // Containers can always grow.
          if (this.rows) {
            return overlap
          }

          // Rows can grow if they have leaves.
          if (this.leaves) {
            return this.leaves.length > 0 ? overlap : noOverlap
          }

          // Leaves can grow unless they're the last item in a row.
          var leaves = this.row.leaves
          var index = leaves.indexOf(this)
          return index === leaves.length - 1 ? noOverlap : overlap
        },
      },
      {
        key: 'xOffset',
        get: function get() {
          // Containers have no offset.
          if (this.rows) return 0

          // Rows always start where their container ends.
          if (this.leaves) return this.container._width

          // Leaves are spread out evenly on the space left by its row.
          var _this$row = this.row,
            leaves = _this$row.leaves,
            xOffset = _this$row.xOffset,
            _width = _this$row._width
          var index = leaves.indexOf(this) + 1
          return xOffset + index * _width
        },
      },
    ])
    return Event
  })()
  /**
   * Return true if event a and b is considered to be on the same row.
   */
  function onSameRow(a, b, minimumStartDifference) {
    return (
      // Occupies the same start slot.
      Math.abs(b.start - a.start) < minimumStartDifference ||
      // A's start slot overlaps with b's end slot.
      (b.start > a.start && b.start < a.end)
    )
  }
  function sortByRender(events) {
    var sortedByTime = sortBy_1(events, [
      'startMs',
      function (e) {
        return -e.endMs
      },
    ])
    var sorted = []
    while (sortedByTime.length > 0) {
      var event = sortedByTime.shift()
      sorted.push(event)
      for (var i = 0; i < sortedByTime.length; i++) {
        var test = sortedByTime[i]

        // Still inside this event, look for next.
        if (event.endMs > test.startMs) continue

        // We've found the first event of the next event group.
        // If that event is not right next to our current event, we have to
        // move it here.
        if (i > 0) {
          var _event = sortedByTime.splice(i, 1)[0]
          sorted.push(_event)
        }

        // We've already found the next event group, so stop looking.
        break
      }
    }
    return sorted
  }
  function getStyledEvents$1(_ref2) {
    var events = _ref2.events,
      minimumStartDifference = _ref2.minimumStartDifference,
      slotMetrics = _ref2.slotMetrics,
      accessors = _ref2.accessors
    // Create proxy events and order them so that we don't have
    // to fiddle with z-indexes.
    var proxies = events.map(function (event) {
      return new Event(event, {
        slotMetrics: slotMetrics,
        accessors: accessors,
      })
    })
    var eventsInRenderOrder = sortByRender(proxies)

    // Group overlapping events, while keeping order.
    // Every event is always one of: container, row or leaf.
    // Containers can contain rows, and rows can contain leaves.
    var containerEvents = []
    var _loop = function _loop() {
      var event = eventsInRenderOrder[i]

      // Check if this event can go into a container event.
      var container = containerEvents.find(function (c) {
        return (
          c.end > event.start ||
          Math.abs(event.start - c.start) < minimumStartDifference
        )
      })

      // Couldn't find a container — that means this event is a container.
      if (!container) {
        event.rows = []
        containerEvents.push(event)
        return 'continue'
      }

      // Found a container for the event.
      event.container = container

      // Check if the event can be placed in an existing row.
      // Start looking from behind.
      var row = null
      for (var j = container.rows.length - 1; !row && j >= 0; j--) {
        if (onSameRow(container.rows[j], event, minimumStartDifference)) {
          row = container.rows[j]
        }
      }
      if (row) {
        // Found a row, so add it.
        row.leaves.push(event)
        event.row = row
      } else {
        // Couldn't find a row – that means this event is a row.
        event.leaves = []
        container.rows.push(event)
      }
    }
    for (var i = 0; i < eventsInRenderOrder.length; i++) {
      var _ret = _loop()
      if (_ret === 'continue') continue
    }

    // Return the original events, along with their styles.
    return eventsInRenderOrder.map(function (event) {
      return {
        event: event.data,
        style: {
          top: event.top,
          height: event.height,
          width: event.width,
          xOffset: Math.max(0, event.xOffset),
        },
      }
    })
  }

  function getMaxIdxDFS(node, maxIdx, visited) {
    for (var i = 0; i < node.friends.length; ++i) {
      if (visited.indexOf(node.friends[i]) > -1) continue
      maxIdx = maxIdx > node.friends[i].idx ? maxIdx : node.friends[i].idx
      // TODO : trace it by not object but kinda index or something for performance
      visited.push(node.friends[i])
      var newIdx = getMaxIdxDFS(node.friends[i], maxIdx, visited)
      maxIdx = maxIdx > newIdx ? maxIdx : newIdx
    }
    return maxIdx
  }
  function noOverlap(_ref) {
    var events = _ref.events,
      minimumStartDifference = _ref.minimumStartDifference,
      slotMetrics = _ref.slotMetrics,
      accessors = _ref.accessors
    var styledEvents = getStyledEvents$1({
      events: events,
      minimumStartDifference: minimumStartDifference,
      slotMetrics: slotMetrics,
      accessors: accessors,
    })
    styledEvents.sort(function (a, b) {
      a = a.style
      b = b.style
      if (a.top !== b.top) return a.top > b.top ? 1 : -1
      else return a.top + a.height < b.top + b.height ? 1 : -1
    })
    for (var i = 0; i < styledEvents.length; ++i) {
      styledEvents[i].friends = []
      delete styledEvents[i].style.left
      delete styledEvents[i].style.left
      delete styledEvents[i].idx
      delete styledEvents[i].size
    }
    for (var _i2 = 0; _i2 < styledEvents.length - 1; ++_i2) {
      var se1 = styledEvents[_i2]
      var y1 = se1.style.top
      var y2 = se1.style.top + se1.style.height
      for (var j = _i2 + 1; j < styledEvents.length; ++j) {
        var se2 = styledEvents[j]
        var y3 = se2.style.top
        var y4 = se2.style.top + se2.style.height
        if (
          (y3 >= y1 && y4 <= y2) ||
          (y4 > y1 && y4 <= y2) ||
          (y3 >= y1 && y3 < y2)
        ) {
          // TODO : hashmap would be effective for performance
          se1.friends.push(se2)
          se2.friends.push(se1)
        }
      }
    }
    for (var _i4 = 0; _i4 < styledEvents.length; ++_i4) {
      var se = styledEvents[_i4]
      var bitmap = []
      for (var _j2 = 0; _j2 < 100; ++_j2) bitmap.push(1) // 1 means available

      for (var _j4 = 0; _j4 < se.friends.length; ++_j4)
        if (se.friends[_j4].idx !== undefined) bitmap[se.friends[_j4].idx] = 0 // 0 means reserved

      se.idx = bitmap.indexOf(1)
    }
    for (var _i6 = 0; _i6 < styledEvents.length; ++_i6) {
      var size = 0
      if (styledEvents[_i6].size) continue
      var allFriends = []
      var maxIdx = getMaxIdxDFS(styledEvents[_i6], 0, allFriends)
      size = 100 / (maxIdx + 1)
      styledEvents[_i6].size = size
      for (var _j6 = 0; _j6 < allFriends.length; ++_j6)
        allFriends[_j6].size = size
    }
    for (var _i8 = 0; _i8 < styledEvents.length; ++_i8) {
      var e = styledEvents[_i8]
      e.style.left = e.idx * e.size

      // stretch to maximum
      var _maxIdx = 0
      for (var _j8 = 0; _j8 < e.friends.length; ++_j8) {
        var idx = e.friends[_j8].idx
        _maxIdx = _maxIdx > idx ? _maxIdx : idx
      }
      if (_maxIdx <= e.idx) e.size = 100 - e.idx * e.size

      // padding between events
      // for this feature, `width` is not percentage based unit anymore
      // it will be used with calc()
      var padding = e.idx === 0 ? 0 : 3
      e.style.width = 'calc('.concat(e.size, '% - ').concat(padding, 'px)')
      e.style.height = 'calc('.concat(e.style.height, '% - 2px)')
      e.style.xOffset = 'calc('
        .concat(e.style.left, '% + ')
        .concat(padding, 'px)')
    }
    return styledEvents
  }

  /*eslint no-unused-vars: "off"*/
  var DefaultAlgorithms = {
    overlap: getStyledEvents$1,
    'no-overlap': noOverlap,
  }
  function isFunction$1(a) {
    return !!(a && a.constructor && a.call && a.apply)
  }

  //
  function getStyledEvents(_ref) {
    _ref.events
    _ref.minimumStartDifference
    _ref.slotMetrics
    _ref.accessors
    var dayLayoutAlgorithm = _ref.dayLayoutAlgorithm
    var algorithm = dayLayoutAlgorithm
    if (dayLayoutAlgorithm in DefaultAlgorithms)
      algorithm = DefaultAlgorithms[dayLayoutAlgorithm]
    if (!isFunction$1(algorithm)) {
      // invalid algorithm
      return []
    }
    return algorithm.apply(this, arguments)
  }

  var DayColumnWrapper = function DayColumnWrapper(_ref) {
    var children = _ref.children,
      className = _ref.className,
      style = _ref.style,
      innerRef = _ref.innerRef
    return /*#__PURE__*/ React.createElement(
      'div',
      {
        className: className,
        style: style,
        ref: innerRef,
      },
      children
    )
  }
  var DayColumnWrapper$1 = /*#__PURE__*/ React.forwardRef(function (
    props,
    ref
  ) {
    return /*#__PURE__*/ React.createElement(
      DayColumnWrapper,
      Object.assign({}, props, {
        innerRef: ref,
      })
    )
  })

  var _excluded$5 = ['dayProp'],
    _excluded2$1 = ['eventContainerWrapper']
  var DayColumn = /*#__PURE__*/ (function (_React$Component) {
    _inherits(DayColumn, _React$Component)
    var _super = _createSuper(DayColumn)
    function DayColumn() {
      var _this
      _classCallCheck(this, DayColumn)
      for (
        var _len = arguments.length, _args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        _args[_key] = arguments[_key]
      }
      _this = _super.call.apply(_super, [this].concat(_args))
      _this.state = {
        selecting: false,
        timeIndicatorPosition: null,
      }
      _this.intervalTriggered = false
      _this.renderEvents = function (_ref) {
        var events = _ref.events,
          isBackgroundEvent = _ref.isBackgroundEvent
        var _this$props = _this.props,
          rtl = _this$props.rtl,
          selected = _this$props.selected,
          accessors = _this$props.accessors,
          localizer = _this$props.localizer,
          getters = _this$props.getters,
          components = _this$props.components,
          step = _this$props.step,
          timeslots = _this$props.timeslots,
          dayLayoutAlgorithm = _this$props.dayLayoutAlgorithm,
          resizable = _this$props.resizable
        var _assertThisInitialize = _assertThisInitialized(_this),
          slotMetrics = _assertThisInitialize.slotMetrics
        var messages = localizer.messages
        var styledEvents = getStyledEvents({
          events: events,
          accessors: accessors,
          slotMetrics: slotMetrics,
          minimumStartDifference: Math.ceil((step * timeslots) / 2),
          dayLayoutAlgorithm: dayLayoutAlgorithm,
        })
        return styledEvents.map(function (_ref2, idx) {
          var event = _ref2.event,
            style = _ref2.style
          var end = accessors.end(event)
          var start = accessors.start(event)
          var format = 'eventTimeRangeFormat'
          var label
          var startsBeforeDay = slotMetrics.startsBeforeDay(start)
          var startsAfterDay = slotMetrics.startsAfterDay(end)
          if (startsBeforeDay) format = 'eventTimeRangeEndFormat'
          else if (startsAfterDay) format = 'eventTimeRangeStartFormat'
          if (startsBeforeDay && startsAfterDay) label = messages.allDay
          else
            label = localizer.format(
              {
                start: start,
                end: end,
              },
              format
            )
          var continuesPrior =
            startsBeforeDay || slotMetrics.startsBefore(start)
          var continuesAfter = startsAfterDay || slotMetrics.startsAfter(end)
          return /*#__PURE__*/ React.createElement(TimeGridEvent, {
            style: style,
            event: event,
            label: label,
            key: 'evt_' + idx,
            getters: getters,
            rtl: rtl,
            components: components,
            continuesPrior: continuesPrior,
            continuesAfter: continuesAfter,
            accessors: accessors,
            resource: _this.props.resource,
            selected: isSelected(event, selected),
            onClick: function onClick(e) {
              return _this._select(
                _objectSpread2(
                  _objectSpread2({}, event),
                  {},
                  {
                    sourceResource: _this.props.resource,
                  }
                ),
                e
              )
            },
            onDoubleClick: function onDoubleClick(e) {
              return _this._doubleClick(event, e)
            },
            isBackgroundEvent: isBackgroundEvent,
            onKeyPress: function onKeyPress(e) {
              return _this._keyPress(event, e)
            },
            resizable: resizable,
          })
        })
      }
      _this._selectable = function () {
        var node = _this.containerRef.current
        var _this$props2 = _this.props,
          longPressThreshold = _this$props2.longPressThreshold,
          localizer = _this$props2.localizer
        var selector = (_this._selector = new Selection(
          function () {
            return node
          },
          {
            longPressThreshold: longPressThreshold,
            targetHostMarker: _this.containerRef.current,
          }
        ))
        var maybeSelect = function maybeSelect(box) {
          var onSelecting = _this.props.onSelecting
          var current = _this.state || {}
          var state = selectionState(box)
          var start = state.startDate,
            end = state.endDate
          if (onSelecting) {
            if (
              (localizer.eq(current.startDate, start, 'minutes') &&
                localizer.eq(current.endDate, end, 'minutes')) ||
              onSelecting({
                start: start,
                end: end,
                resourceId: _this.props.resource,
              }) === false
            )
              return
          }
          if (
            _this.state.start !== state.start ||
            _this.state.end !== state.end ||
            _this.state.selecting !== state.selecting
          ) {
            _this.setState(state)
          }
        }
        var selectionState = function selectionState(point) {
          var currentSlot = _this.slotMetrics.closestSlotFromPoint(
            point,
            getBoundsForNode(node)
          )
          if (!_this.state.selecting) {
            _this._initialSlot = currentSlot
          }
          var initialSlot = _this._initialSlot
          if (localizer.lte(initialSlot, currentSlot)) {
            currentSlot = _this.slotMetrics.nextSlot(currentSlot)
          } else if (localizer.gt(initialSlot, currentSlot)) {
            initialSlot = _this.slotMetrics.nextSlot(initialSlot)
          }
          var selectRange = _this.slotMetrics.getRange(
            localizer.min(initialSlot, currentSlot),
            localizer.max(initialSlot, currentSlot)
          )
          return _objectSpread2(
            _objectSpread2({}, selectRange),
            {},
            {
              selecting: true,
              top: ''.concat(selectRange.top, '%'),
              height: ''.concat(selectRange.height, '%'),
            }
          )
        }
        var selectorClicksHandler = function selectorClicksHandler(
          box,
          actionType
        ) {
          if (!isEvent(_this.containerRef.current, box)) {
            var _selectionState = selectionState(box),
              startDate = _selectionState.startDate,
              endDate = _selectionState.endDate
            _this._selectSlot({
              startDate: startDate,
              endDate: endDate,
              action: actionType,
              box: box,
            })
          }
          _this.setState({
            selecting: false,
          })
        }
        selector.on('selecting', maybeSelect)
        selector.on('selectStart', maybeSelect)
        selector.on('beforeSelect', function (box) {
          if (_this.props.selectable !== 'ignoreEvents') return
          return !isEvent(_this.containerRef.current, box)
        })
        selector.on('click', function (box) {
          return selectorClicksHandler(box, 'click')
        })
        selector.on('doubleClick', function (box) {
          return selectorClicksHandler(box, 'doubleClick')
        })
        selector.on('select', function (bounds) {
          if (_this.state.selecting) {
            _this._selectSlot(
              _objectSpread2(
                _objectSpread2({}, _this.state),
                {},
                {
                  action: 'select',
                  bounds: bounds,
                }
              )
            )
            _this.setState({
              selecting: false,
            })
          }
        })
        selector.on('reset', function () {
          if (_this.state.selecting) {
            _this.setState({
              selecting: false,
            })
          }
        })
      }
      _this._teardownSelectable = function () {
        if (!_this._selector) return
        _this._selector.teardown()
        _this._selector = null
      }
      _this._selectSlot = function (_ref3) {
        var startDate = _ref3.startDate,
          endDate = _ref3.endDate,
          action = _ref3.action,
          bounds = _ref3.bounds,
          box = _ref3.box
        var current = startDate,
          slots = []
        while (_this.props.localizer.lte(current, endDate)) {
          slots.push(current)
          current = new Date(+current + _this.props.step * 60 * 1000) // using Date ensures not to create an endless loop the day DST begins
        }

        notify(_this.props.onSelectSlot, {
          slots: slots,
          start: startDate,
          end: endDate,
          resourceId: _this.props.resource,
          action: action,
          bounds: bounds,
          box: box,
        })
      }
      _this._select = function () {
        for (
          var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2] = arguments[_key2]
        }
        notify(_this.props.onSelectEvent, args)
      }
      _this._doubleClick = function () {
        for (
          var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3] = arguments[_key3]
        }
        notify(_this.props.onDoubleClickEvent, args)
      }
      _this._keyPress = function () {
        for (
          var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
          _key4 < _len4;
          _key4++
        ) {
          args[_key4] = arguments[_key4]
        }
        notify(_this.props.onKeyPressEvent, args)
      }
      _this.slotMetrics = getSlotMetrics(_this.props)
      _this.containerRef = /*#__PURE__*/ reactExports.createRef()
      return _this
    }
    _createClass(DayColumn, [
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          this.props.selectable && this._selectable()
          if (this.props.isNow) {
            this.setTimeIndicatorPositionUpdateInterval()
          }
        },
      },
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          this._teardownSelectable()
          this.clearTimeIndicatorInterval()
        },
      },
      {
        key: 'UNSAFE_componentWillReceiveProps',
        value: function UNSAFE_componentWillReceiveProps(nextProps) {
          if (nextProps.selectable && !this.props.selectable) this._selectable()
          if (!nextProps.selectable && this.props.selectable)
            this._teardownSelectable()
          this.slotMetrics = this.slotMetrics.update(nextProps)
        },
      },
      {
        key: 'componentDidUpdate',
        value: function componentDidUpdate(prevProps, prevState) {
          var _this$props3 = this.props,
            getNow = _this$props3.getNow,
            isNow = _this$props3.isNow,
            localizer = _this$props3.localizer,
            date = _this$props3.date,
            min = _this$props3.min,
            max = _this$props3.max
          var getNowChanged = localizer.neq(
            prevProps.getNow(),
            getNow(),
            'minutes'
          )
          if (prevProps.isNow !== isNow || getNowChanged) {
            this.clearTimeIndicatorInterval()
            if (isNow) {
              var tail =
                !getNowChanged &&
                localizer.eq(prevProps.date, date, 'minutes') &&
                prevState.timeIndicatorPosition ===
                  this.state.timeIndicatorPosition
              this.setTimeIndicatorPositionUpdateInterval(tail)
            }
          } else if (
            isNow &&
            (localizer.neq(prevProps.min, min, 'minutes') ||
              localizer.neq(prevProps.max, max, 'minutes'))
          ) {
            this.positionTimeIndicator()
          }
        },

        /**
         * @param tail {Boolean} - whether `positionTimeIndicator` call should be
         *   deferred or called upon setting interval (`true` - if deferred);
         */
      },
      {
        key: 'setTimeIndicatorPositionUpdateInterval',
        value: function setTimeIndicatorPositionUpdateInterval() {
          var _this2 = this
          var tail =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : false
          if (!this.intervalTriggered && !tail) {
            this.positionTimeIndicator()
          }
          this._timeIndicatorTimeout = window.setTimeout(function () {
            _this2.intervalTriggered = true
            _this2.positionTimeIndicator()
            _this2.setTimeIndicatorPositionUpdateInterval()
          }, 60000)
        },
      },
      {
        key: 'clearTimeIndicatorInterval',
        value: function clearTimeIndicatorInterval() {
          this.intervalTriggered = false
          window.clearTimeout(this._timeIndicatorTimeout)
        },
      },
      {
        key: 'positionTimeIndicator',
        value: function positionTimeIndicator() {
          var _this$props4 = this.props,
            min = _this$props4.min,
            max = _this$props4.max,
            getNow = _this$props4.getNow
          var current = getNow()
          if (current >= min && current <= max) {
            var top = this.slotMetrics.getCurrentTimePosition(current)
            this.intervalTriggered = true
            this.setState({
              timeIndicatorPosition: top,
            })
          } else {
            this.clearTimeIndicatorInterval()
          }
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props5 = this.props,
            date = _this$props5.date,
            max = _this$props5.max,
            rtl = _this$props5.rtl,
            isNow = _this$props5.isNow,
            resource = _this$props5.resource,
            accessors = _this$props5.accessors,
            localizer = _this$props5.localizer,
            _this$props5$getters = _this$props5.getters,
            dayProp = _this$props5$getters.dayProp,
            getters = _objectWithoutProperties(
              _this$props5$getters,
              _excluded$5
            ),
            _this$props5$componen = _this$props5.components,
            EventContainer = _this$props5$componen.eventContainerWrapper,
            components = _objectWithoutProperties(
              _this$props5$componen,
              _excluded2$1
            )
          var slotMetrics = this.slotMetrics
          var _this$state = this.state,
            selecting = _this$state.selecting,
            top = _this$state.top,
            height = _this$state.height,
            startDate = _this$state.startDate,
            endDate = _this$state.endDate
          var selectDates = {
            start: startDate,
            end: endDate,
          }
          var _dayProp = dayProp(max),
            className = _dayProp.className,
            style = _dayProp.style
          var DayColumnWrapperComponent =
            components.dayColumnWrapper || DayColumnWrapper$1
          return /*#__PURE__*/ React.createElement(
            DayColumnWrapperComponent,
            {
              ref: this.containerRef,
              date: date,
              style: style,
              className: clsx(
                className,
                'rbc-day-slot',
                'rbc-time-column',
                isNow && 'rbc-now',
                isNow && 'rbc-today',
                // WHY
                selecting && 'rbc-slot-selecting'
              ),
              slotMetrics: slotMetrics,
            },
            slotMetrics.groups.map(function (grp, idx) {
              return /*#__PURE__*/ React.createElement(TimeSlotGroup, {
                key: idx,
                group: grp,
                resource: resource,
                getters: getters,
                components: components,
              })
            }),
            /*#__PURE__*/ React.createElement(
              EventContainer,
              {
                localizer: localizer,
                resource: resource,
                accessors: accessors,
                getters: getters,
                components: components,
                slotMetrics: slotMetrics,
              },
              /*#__PURE__*/ React.createElement(
                'div',
                {
                  className: clsx('rbc-events-container', rtl && 'rtl'),
                },
                this.renderEvents({
                  events: this.props.backgroundEvents,
                  isBackgroundEvent: true,
                }),
                this.renderEvents({
                  events: this.props.events,
                })
              )
            ),
            selecting &&
              /*#__PURE__*/ React.createElement(
                'div',
                {
                  className: 'rbc-slot-selection',
                  style: {
                    top: top,
                    height: height,
                  },
                },
                /*#__PURE__*/ React.createElement(
                  'span',
                  null,
                  localizer.format(selectDates, 'selectRangeFormat')
                )
              ),
            isNow &&
              this.intervalTriggered &&
              /*#__PURE__*/ React.createElement('div', {
                className: 'rbc-current-time-indicator',
                style: {
                  top: ''.concat(this.state.timeIndicatorPosition, '%'),
                },
              })
          )
        },
      },
    ])
    return DayColumn
  })(React.Component)
  DayColumn.defaultProps = {
    dragThroughEvents: true,
    timeslots: 2,
  }

  /**
   * Since the TimeGutter only displays the 'times' of slots in a day, and is separate
   * from the Day Columns themselves, we check to see if the range contains an offset difference
   * and, if so, change the beginning and end 'date' by a day to properly display the slots times
   * used.
   */
  function adjustForDST(_ref) {
    var min = _ref.min,
      max = _ref.max,
      localizer = _ref.localizer
    if (localizer.getTimezoneOffset(min) !== localizer.getTimezoneOffset(max)) {
      return {
        start: localizer.add(min, -1, 'day'),
        end: localizer.add(max, -1, 'day'),
      }
    }
    return {
      start: min,
      end: max,
    }
  }
  var TimeGutter = function TimeGutter(_ref2) {
    var min = _ref2.min,
      max = _ref2.max,
      timeslots = _ref2.timeslots,
      step = _ref2.step,
      localizer = _ref2.localizer,
      getNow = _ref2.getNow,
      resource = _ref2.resource,
      components = _ref2.components,
      getters = _ref2.getters,
      gutterRef = _ref2.gutterRef
    var TimeGutterWrapper = components.timeGutterWrapper
    var _useMemo = reactExports.useMemo(
        function () {
          return adjustForDST({
            min: min,
            max: max,
            localizer: localizer,
          })
        },
        // eslint-disable-next-line react-hooks/exhaustive-deps
        [
          min === null || min === void 0 ? void 0 : min.toISOString(),
          max === null || max === void 0 ? void 0 : max.toISOString(),
          localizer,
        ]
      ),
      start = _useMemo.start,
      end = _useMemo.end
    var _useState = reactExports.useState(
        getSlotMetrics({
          min: start,
          max: end,
          timeslots: timeslots,
          step: step,
          localizer: localizer,
        })
      ),
      _useState2 = _slicedToArray(_useState, 2),
      slotMetrics = _useState2[0],
      setSlotMetrics = _useState2[1]
    reactExports.useEffect(
      function () {
        if (slotMetrics) {
          setSlotMetrics(
            slotMetrics.update({
              min: start,
              max: end,
              timeslots: timeslots,
              step: step,
              localizer: localizer,
            })
          )
        }
        /**
         * We don't want this to fire when slotMetrics is updated as it would recursively bomb
         */
        // eslint-disable-next-line react-hooks/exhaustive-deps
      },
      [
        start === null || start === void 0 ? void 0 : start.toISOString(),
        end === null || end === void 0 ? void 0 : end.toISOString(),
        timeslots,
        step,
      ]
    )
    var renderSlot = reactExports.useCallback(
      function (value, idx) {
        if (idx) return null // don't return the first (0) idx

        var isNow = slotMetrics.dateIsInGroup(getNow(), idx)
        return /*#__PURE__*/ React.createElement(
          'span',
          {
            className: clsx('rbc-label', isNow && 'rbc-now'),
          },
          localizer.format(value, 'timeGutterFormat')
        )
      },
      [slotMetrics, localizer, getNow]
    )
    return /*#__PURE__*/ React.createElement(
      TimeGutterWrapper,
      {
        slotMetrics: slotMetrics,
      },
      /*#__PURE__*/ React.createElement(
        'div',
        {
          className: 'rbc-time-gutter rbc-time-column',
          ref: gutterRef,
        },
        slotMetrics.groups.map(function (grp, idx) {
          return /*#__PURE__*/ React.createElement(TimeSlotGroup, {
            key: idx,
            group: grp,
            resource: resource,
            components: components,
            renderSlot: renderSlot,
            getters: getters,
          })
        })
      )
    )
  }
  var TimeGutter$1 = /*#__PURE__*/ React.forwardRef(function (props, ref) {
    return /*#__PURE__*/ React.createElement(
      TimeGutter,
      Object.assign(
        {
          gutterRef: ref,
        },
        props
      )
    )
  })

  var ResourceHeader = function ResourceHeader(_ref) {
    var label = _ref.label
    return /*#__PURE__*/ React.createElement(React.Fragment, null, label)
  }
  ResourceHeader.propTypes =
    'development' !== 'production'
      ? {
          label: propTypesExports.node,
          index: propTypesExports.number,
          resource: propTypesExports.object,
        }
      : {}

  var TimeGridHeader = /*#__PURE__*/ (function (_React$Component) {
    _inherits(TimeGridHeader, _React$Component)
    var _super = _createSuper(TimeGridHeader)
    function TimeGridHeader() {
      var _this
      _classCallCheck(this, TimeGridHeader)
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key]
      }
      _this = _super.call.apply(_super, [this].concat(args))
      _this.handleHeaderClick = function (date, view, e) {
        e.preventDefault()
        notify(_this.props.onDrillDown, [date, view])
      }
      _this.renderRow = function (resource) {
        var _this$props = _this.props,
          events = _this$props.events,
          rtl = _this$props.rtl,
          selectable = _this$props.selectable,
          getNow = _this$props.getNow,
          range = _this$props.range,
          getters = _this$props.getters,
          localizer = _this$props.localizer,
          accessors = _this$props.accessors,
          components = _this$props.components,
          resizable = _this$props.resizable
        var resourceId = accessors.resourceId(resource)
        var eventsToDisplay = resource
          ? events.filter(function (event) {
              return accessors.resource(event) === resourceId
            })
          : events
        return /*#__PURE__*/ React.createElement(DateContentRow, {
          isAllDay: true,
          rtl: rtl,
          getNow: getNow,
          minRows: 2,
          // Add +1 to include showMore button row in the row limit
          maxRows: _this.props.allDayMaxRows + 1,
          range: range,
          events: eventsToDisplay,
          resourceId: resourceId,
          className: 'rbc-allday-cell',
          selectable: selectable,
          selected: _this.props.selected,
          components: components,
          accessors: accessors,
          getters: getters,
          localizer: localizer,
          onSelect: _this.props.onSelectEvent,
          onShowMore: _this.props.onShowMore,
          onDoubleClick: _this.props.onDoubleClickEvent,
          onKeyPress: _this.props.onKeyPressEvent,
          onSelectSlot: _this.props.onSelectSlot,
          longPressThreshold: _this.props.longPressThreshold,
          resizable: resizable,
        })
      }
      return _this
    }
    _createClass(TimeGridHeader, [
      {
        key: 'renderHeaderCells',
        value: function renderHeaderCells(range) {
          var _this2 = this
          var _this$props2 = this.props,
            localizer = _this$props2.localizer,
            getDrilldownView = _this$props2.getDrilldownView,
            getNow = _this$props2.getNow,
            dayProp = _this$props2.getters.dayProp,
            _this$props2$componen = _this$props2.components.header,
            HeaderComponent =
              _this$props2$componen === void 0 ? Header : _this$props2$componen
          var today = getNow()
          return range.map(function (date, i) {
            var drilldownView = getDrilldownView(date)
            var label = localizer.format(date, 'dayFormat')
            var _dayProp = dayProp(date),
              className = _dayProp.className,
              style = _dayProp.style
            var header = /*#__PURE__*/ React.createElement(HeaderComponent, {
              date: date,
              label: label,
              localizer: localizer,
            })
            return /*#__PURE__*/ React.createElement(
              'div',
              {
                key: i,
                style: style,
                className: clsx(
                  'rbc-header',
                  className,
                  localizer.isSameDate(date, today) && 'rbc-today'
                ),
              },
              drilldownView
                ? /*#__PURE__*/ React.createElement(
                    'button',
                    {
                      type: 'button',
                      className: 'rbc-button-link',
                      onClick: function onClick(e) {
                        return _this2.handleHeaderClick(date, drilldownView, e)
                      },
                    },
                    header
                  )
                : /*#__PURE__*/ React.createElement('span', null, header)
            )
          })
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this3 = this
          var _this$props3 = this.props,
            width = _this$props3.width,
            rtl = _this$props3.rtl,
            resources = _this$props3.resources,
            range = _this$props3.range,
            events = _this$props3.events,
            getNow = _this$props3.getNow,
            accessors = _this$props3.accessors,
            selectable = _this$props3.selectable,
            components = _this$props3.components,
            getters = _this$props3.getters,
            scrollRef = _this$props3.scrollRef,
            localizer = _this$props3.localizer,
            isOverflowing = _this$props3.isOverflowing,
            _this$props3$componen = _this$props3.components,
            TimeGutterHeader = _this$props3$componen.timeGutterHeader,
            _this$props3$componen2 = _this$props3$componen.resourceHeader,
            ResourceHeaderComponent =
              _this$props3$componen2 === void 0
                ? ResourceHeader
                : _this$props3$componen2,
            resizable = _this$props3.resizable
          var style = {}
          if (isOverflowing) {
            style[rtl ? 'marginLeft' : 'marginRight'] = ''.concat(
              scrollbarSize() - 1,
              'px'
            )
          }
          var groupedEvents = resources.groupEvents(events)
          return /*#__PURE__*/ React.createElement(
            'div',
            {
              style: style,
              ref: scrollRef,
              className: clsx(
                'rbc-time-header',
                isOverflowing && 'rbc-overflowing'
              ),
            },
            /*#__PURE__*/ React.createElement(
              'div',
              {
                className: 'rbc-label rbc-time-header-gutter',
                style: {
                  width: width,
                  minWidth: width,
                  maxWidth: width,
                },
              },
              TimeGutterHeader &&
                /*#__PURE__*/ React.createElement(TimeGutterHeader, null)
            ),
            resources.map(function (_ref, idx) {
              var _ref2 = _slicedToArray(_ref, 2),
                id = _ref2[0],
                resource = _ref2[1]
              return /*#__PURE__*/ React.createElement(
                'div',
                {
                  className: 'rbc-time-header-content',
                  key: id || idx,
                },
                resource &&
                  /*#__PURE__*/ React.createElement(
                    'div',
                    {
                      className: 'rbc-row rbc-row-resource',
                      key: 'resource_'.concat(idx),
                    },
                    /*#__PURE__*/ React.createElement(
                      'div',
                      {
                        className: 'rbc-header',
                      },
                      /*#__PURE__*/ React.createElement(
                        ResourceHeaderComponent,
                        {
                          index: idx,
                          label: accessors.resourceTitle(resource),
                          resource: resource,
                        }
                      )
                    )
                  ),
                /*#__PURE__*/ React.createElement(
                  'div',
                  {
                    className: 'rbc-row rbc-time-header-cell'.concat(
                      range.length <= 1
                        ? ' rbc-time-header-cell-single-day'
                        : ''
                    ),
                  },
                  _this3.renderHeaderCells(range)
                ),
                /*#__PURE__*/ React.createElement(DateContentRow, {
                  isAllDay: true,
                  rtl: rtl,
                  getNow: getNow,
                  minRows: 2,
                  // Add +1 to include showMore button row in the row limit
                  maxRows: _this3.props.allDayMaxRows + 1,
                  range: range,
                  events: groupedEvents.get(id) || [],
                  resourceId: resource && id,
                  className: 'rbc-allday-cell',
                  selectable: selectable,
                  selected: _this3.props.selected,
                  components: components,
                  accessors: accessors,
                  getters: getters,
                  localizer: localizer,
                  onSelect: _this3.props.onSelectEvent,
                  onShowMore: _this3.props.onShowMore,
                  onDoubleClick: _this3.props.onDoubleClickEvent,
                  onKeyPress: _this3.props.onKeyPressEvent,
                  onSelectSlot: _this3.props.onSelectSlot,
                  longPressThreshold: _this3.props.longPressThreshold,
                  resizable: resizable,
                })
              )
            })
          )
        },
      },
    ])
    return TimeGridHeader
  })(React.Component)

  /**
   * Returns the width of a given element.
   *
   * @param node the element
   * @param client whether to use `clientWidth` if possible
   */

  function getWidth(node, client) {
    var win = isWindow(node)
    return win
      ? win.innerWidth
      : client
      ? node.clientWidth
      : offset$2(node).width
  }

  var NONE = {}
  function Resources(resources, accessors) {
    return {
      map: function map(fn) {
        if (!resources) return [fn([NONE, null], 0)]
        return resources.map(function (resource, idx) {
          return fn([accessors.resourceId(resource), resource], idx)
        })
      },
      groupEvents: function groupEvents(events) {
        var eventsByResource = new Map()
        if (!resources) {
          // Return all events if resources are not provided
          eventsByResource.set(NONE, events)
          return eventsByResource
        }
        events.forEach(function (event) {
          var id = accessors.resource(event) || NONE
          if (Array.isArray(id)) {
            id.forEach(function (item) {
              var resourceEvents = eventsByResource.get(item) || []
              resourceEvents.push(event)
              eventsByResource.set(item, resourceEvents)
            })
          } else {
            var resourceEvents = eventsByResource.get(id) || []
            resourceEvents.push(event)
            eventsByResource.set(id, resourceEvents)
          }
        })
        return eventsByResource
      },
    }
  }

  var TimeGrid = /*#__PURE__*/ (function (_Component) {
    _inherits(TimeGrid, _Component)
    var _super = _createSuper(TimeGrid)
    function TimeGrid(props) {
      var _this
      _classCallCheck(this, TimeGrid)
      _this = _super.call(this, props)
      _this.handleScroll = function (e) {
        if (_this.scrollRef.current) {
          _this.scrollRef.current.scrollLeft = e.target.scrollLeft
        }
      }
      _this.handleResize = function () {
        cancel(_this.rafHandle)
        _this.rafHandle = request(_this.checkOverflow)
      }
      _this.handleKeyPressEvent = function () {
        _this.clearSelection()
        for (
          var _len = arguments.length, args = new Array(_len), _key = 0;
          _key < _len;
          _key++
        ) {
          args[_key] = arguments[_key]
        }
        notify(_this.props.onKeyPressEvent, args)
      }
      _this.handleSelectEvent = function () {
        //cancel any pending selections so only the event click goes through.
        _this.clearSelection()
        for (
          var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2] = arguments[_key2]
        }
        notify(_this.props.onSelectEvent, args)
      }
      _this.handleDoubleClickEvent = function () {
        _this.clearSelection()
        for (
          var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3] = arguments[_key3]
        }
        notify(_this.props.onDoubleClickEvent, args)
      }
      _this.handleShowMore = function (events, date, cell, slot, target) {
        var _this$props = _this.props,
          popup = _this$props.popup,
          onDrillDown = _this$props.onDrillDown,
          onShowMore = _this$props.onShowMore,
          getDrilldownView = _this$props.getDrilldownView,
          doShowMoreDrillDown = _this$props.doShowMoreDrillDown
        _this.clearSelection()
        if (popup) {
          var position$1 = position(cell, _this.containerRef.current)
          _this.setState({
            overlay: {
              date: date,
              events: events,
              position: _objectSpread2(
                _objectSpread2({}, position$1),
                {},
                {
                  width: '200px',
                }
              ),
              target: target,
            },
          })
        } else if (doShowMoreDrillDown) {
          notify(onDrillDown, [date, getDrilldownView(date) || views.DAY])
        }
        notify(onShowMore, [events, date, slot])
      }
      _this.handleSelectAllDaySlot = function (slots, slotInfo) {
        var onSelectSlot = _this.props.onSelectSlot
        var start = new Date(slots[0])
        var end = new Date(slots[slots.length - 1])
        end.setDate(slots[slots.length - 1].getDate() + 1)
        notify(onSelectSlot, {
          slots: slots,
          start: start,
          end: end,
          action: slotInfo.action,
          resourceId: slotInfo.resourceId,
        })
      }
      _this.overlayDisplay = function () {
        _this.setState({
          overlay: null,
        })
      }
      _this.checkOverflow = function () {
        if (_this._updatingOverflow) return
        var content = _this.contentRef.current
        if (!(content !== null && content !== void 0 && content.scrollHeight))
          return
        var isOverflowing = content.scrollHeight > content.clientHeight
        if (_this.state.isOverflowing !== isOverflowing) {
          _this._updatingOverflow = true
          _this.setState(
            {
              isOverflowing: isOverflowing,
            },
            function () {
              _this._updatingOverflow = false
            }
          )
        }
      }
      _this.memoizedResources = memoizeOne(function (resources, accessors) {
        return Resources(resources, accessors)
      })
      _this.state = {
        gutterWidth: undefined,
        isOverflowing: null,
      }
      _this.scrollRef = /*#__PURE__*/ React.createRef()
      _this.contentRef = /*#__PURE__*/ React.createRef()
      _this.containerRef = /*#__PURE__*/ React.createRef()
      _this._scrollRatio = null
      _this.gutterRef = /*#__PURE__*/ reactExports.createRef()
      return _this
    }
    _createClass(TimeGrid, [
      {
        key: 'getSnapshotBeforeUpdate',
        value: function getSnapshotBeforeUpdate() {
          this.checkOverflow()
          return null
        },
      },
      {
        key: 'componentDidMount',
        value: function componentDidMount() {
          if (this.props.width == null) {
            this.measureGutter()
          }
          this.calculateScroll()
          this.applyScroll()
          window.addEventListener('resize', this.handleResize)
        },
      },
      {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          window.removeEventListener('resize', this.handleResize)
          cancel(this.rafHandle)
          if (this.measureGutterAnimationFrameRequest) {
            window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest)
          }
        },
      },
      {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
          this.applyScroll()
        },
      },
      {
        key: 'renderEvents',
        value: function renderEvents(range, events, backgroundEvents, now) {
          var _this2 = this
          var _this$props2 = this.props,
            min = _this$props2.min,
            max = _this$props2.max,
            components = _this$props2.components,
            accessors = _this$props2.accessors,
            localizer = _this$props2.localizer,
            dayLayoutAlgorithm = _this$props2.dayLayoutAlgorithm
          var resources = this.memoizedResources(
            this.props.resources,
            accessors
          )
          var groupedEvents = resources.groupEvents(events)
          var groupedBackgroundEvents = resources.groupEvents(backgroundEvents)
          return resources.map(function (_ref, i) {
            var _ref2 = _slicedToArray(_ref, 2),
              id = _ref2[0],
              resource = _ref2[1]
            return range.map(function (date, jj) {
              var daysEvents = (groupedEvents.get(id) || []).filter(function (
                event
              ) {
                return localizer.inRange(
                  date,
                  accessors.start(event),
                  accessors.end(event),
                  'day'
                )
              })
              var daysBackgroundEvents = (
                groupedBackgroundEvents.get(id) || []
              ).filter(function (event) {
                return localizer.inRange(
                  date,
                  accessors.start(event),
                  accessors.end(event),
                  'day'
                )
              })
              return /*#__PURE__*/ React.createElement(
                DayColumn,
                Object.assign({}, _this2.props, {
                  localizer: localizer,
                  min: localizer.merge(date, min),
                  max: localizer.merge(date, max),
                  resource: resource && id,
                  components: components,
                  isNow: localizer.isSameDate(date, now),
                  key: i + '-' + jj,
                  date: date,
                  events: daysEvents,
                  backgroundEvents: daysBackgroundEvents,
                  dayLayoutAlgorithm: dayLayoutAlgorithm,
                })
              )
            })
          })
        },
      },
      {
        key: 'render',
        value: function render() {
          var _this$props$allDayMax
          var _this$props3 = this.props,
            events = _this$props3.events,
            backgroundEvents = _this$props3.backgroundEvents,
            range = _this$props3.range,
            width = _this$props3.width,
            rtl = _this$props3.rtl,
            selected = _this$props3.selected,
            getNow = _this$props3.getNow,
            resources = _this$props3.resources,
            components = _this$props3.components,
            accessors = _this$props3.accessors,
            getters = _this$props3.getters,
            localizer = _this$props3.localizer,
            min = _this$props3.min,
            max = _this$props3.max,
            showMultiDayTimes = _this$props3.showMultiDayTimes,
            longPressThreshold = _this$props3.longPressThreshold,
            resizable = _this$props3.resizable
          width = width || this.state.gutterWidth
          var start = range[0],
            end = range[range.length - 1]
          this.slots = range.length
          var allDayEvents = [],
            rangeEvents = [],
            rangeBackgroundEvents = []
          events.forEach(function (event) {
            if (inRange(event, start, end, accessors, localizer)) {
              var eStart = accessors.start(event),
                eEnd = accessors.end(event)
              if (
                accessors.allDay(event) ||
                localizer.startAndEndAreDateOnly(eStart, eEnd) ||
                (!showMultiDayTimes && !localizer.isSameDate(eStart, eEnd))
              ) {
                allDayEvents.push(event)
              } else {
                rangeEvents.push(event)
              }
            }
          })
          backgroundEvents.forEach(function (event) {
            if (inRange(event, start, end, accessors, localizer)) {
              rangeBackgroundEvents.push(event)
            }
          })
          allDayEvents.sort(function (a, b) {
            return sortEvents(a, b, accessors, localizer)
          })
          return /*#__PURE__*/ React.createElement(
            'div',
            {
              className: clsx(
                'rbc-time-view',
                resources && 'rbc-time-view-resources'
              ),
              ref: this.containerRef,
            },
            /*#__PURE__*/ React.createElement(TimeGridHeader, {
              range: range,
              events: allDayEvents,
              width: width,
              rtl: rtl,
              getNow: getNow,
              localizer: localizer,
              selected: selected,
              allDayMaxRows: this.props.showAllEvents
                ? Infinity
                : (_this$props$allDayMax = this.props.allDayMaxRows) !== null &&
                  _this$props$allDayMax !== void 0
                ? _this$props$allDayMax
                : Infinity,
              resources: this.memoizedResources(resources, accessors),
              selectable: this.props.selectable,
              accessors: accessors,
              getters: getters,
              components: components,
              scrollRef: this.scrollRef,
              isOverflowing: this.state.isOverflowing,
              longPressThreshold: longPressThreshold,
              onSelectSlot: this.handleSelectAllDaySlot,
              onSelectEvent: this.handleSelectEvent,
              onShowMore: this.handleShowMore,
              onDoubleClickEvent: this.props.onDoubleClickEvent,
              onKeyPressEvent: this.props.onKeyPressEvent,
              onDrillDown: this.props.onDrillDown,
              getDrilldownView: this.props.getDrilldownView,
              resizable: resizable,
            }),
            this.props.popup && this.renderOverlay(),
            /*#__PURE__*/ React.createElement(
              'div',
              {
                ref: this.contentRef,
                className: 'rbc-time-content',
                onScroll: this.handleScroll,
              },
              /*#__PURE__*/ React.createElement(TimeGutter$1, {
                date: start,
                ref: this.gutterRef,
                localizer: localizer,
                min: localizer.merge(start, min),
                max: localizer.merge(start, max),
                step: this.props.step,
                getNow: this.props.getNow,
                timeslots: this.props.timeslots,
                components: components,
                className: 'rbc-time-gutter',
                getters: getters,
              }),
              this.renderEvents(
                range,
                rangeEvents,
                rangeBackgroundEvents,
                getNow()
              )
            )
          )
        },
      },
      {
        key: 'renderOverlay',
        value: function renderOverlay() {
          var _this$state$overlay,
            _this$state,
            _this3 = this
          var overlay =
            (_this$state$overlay =
              (_this$state = this.state) === null || _this$state === void 0
                ? void 0
                : _this$state.overlay) !== null &&
            _this$state$overlay !== void 0
              ? _this$state$overlay
              : {}
          var _this$props4 = this.props,
            accessors = _this$props4.accessors,
            localizer = _this$props4.localizer,
            components = _this$props4.components,
            getters = _this$props4.getters,
            selected = _this$props4.selected,
            popupOffset = _this$props4.popupOffset,
            handleDragStart = _this$props4.handleDragStart
          var onHide = function onHide() {
            return _this3.setState({
              overlay: null,
            })
          }
          return /*#__PURE__*/ React.createElement(PopOverlay, {
            overlay: overlay,
            accessors: accessors,
            localizer: localizer,
            components: components,
            getters: getters,
            selected: selected,
            popupOffset: popupOffset,
            ref: this.containerRef,
            handleKeyPressEvent: this.handleKeyPressEvent,
            handleSelectEvent: this.handleSelectEvent,
            handleDoubleClickEvent: this.handleDoubleClickEvent,
            handleDragStart: handleDragStart,
            show: !!overlay.position,
            overlayDisplay: this.overlayDisplay,
            onHide: onHide,
          })
        },
      },
      {
        key: 'clearSelection',
        value: function clearSelection() {
          clearTimeout(this._selectTimer)
          this._pendingSelection = []
        },
      },
      {
        key: 'measureGutter',
        value: function measureGutter() {
          var _this4 = this
          if (this.measureGutterAnimationFrameRequest) {
            window.cancelAnimationFrame(this.measureGutterAnimationFrameRequest)
          }
          this.measureGutterAnimationFrameRequest =
            window.requestAnimationFrame(function () {
              var _this4$gutterRef
              var width =
                (_this4$gutterRef = _this4.gutterRef) !== null &&
                _this4$gutterRef !== void 0 &&
                _this4$gutterRef.current
                  ? getWidth(_this4.gutterRef.current)
                  : undefined
              if (width && _this4.state.gutterWidth !== width) {
                _this4.setState({
                  gutterWidth: width,
                })
              }
            })
        },
      },
      {
        key: 'applyScroll',
        value: function applyScroll() {
          // If auto-scroll is disabled, we don't actually apply the scroll
          if (
            this._scrollRatio != null &&
            this.props.enableAutoScroll === true
          ) {
            var content = this.contentRef.current
            content.scrollTop = content.scrollHeight * this._scrollRatio
            // Only do this once
            this._scrollRatio = null
          }
        },
      },
      {
        key: 'calculateScroll',
        value: function calculateScroll() {
          var props =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : this.props
          var min = props.min,
            max = props.max,
            scrollToTime = props.scrollToTime,
            localizer = props.localizer
          var diffMillis = localizer.diff(
            localizer.merge(scrollToTime, min),
            scrollToTime,
            'milliseconds'
          )
          var totalMillis = localizer.diff(min, max, 'milliseconds')
          this._scrollRatio = diffMillis / totalMillis
        },
      },
    ])
    return TimeGrid
  })(reactExports.Component)
  TimeGrid.defaultProps = {
    step: 30,
    timeslots: 2,
  }

  var _excluded$4 = [
    'date',
    'localizer',
    'min',
    'max',
    'scrollToTime',
    'enableAutoScroll',
  ]
  var Day = /*#__PURE__*/ (function (_React$Component) {
    _inherits(Day, _React$Component)
    var _super = _createSuper(Day)
    function Day() {
      _classCallCheck(this, Day)
      return _super.apply(this, arguments)
    }
    _createClass(Day, [
      {
        key: 'render',
        value: function render() {
          /**
           * This allows us to default min, max, and scrollToTime
           * using our localizer. This is necessary until such time
           * as TODO: TimeGrid is converted to a functional component.
           */
          var _this$props = this.props,
            date = _this$props.date,
            localizer = _this$props.localizer,
            _this$props$min = _this$props.min,
            min =
              _this$props$min === void 0
                ? localizer.startOf(new Date(), 'day')
                : _this$props$min,
            _this$props$max = _this$props.max,
            max =
              _this$props$max === void 0
                ? localizer.endOf(new Date(), 'day')
                : _this$props$max,
            _this$props$scrollToT = _this$props.scrollToTime,
            scrollToTime =
              _this$props$scrollToT === void 0
                ? localizer.startOf(new Date(), 'day')
                : _this$props$scrollToT,
            _this$props$enableAut = _this$props.enableAutoScroll,
            enableAutoScroll =
              _this$props$enableAut === void 0 ? true : _this$props$enableAut,
            props = _objectWithoutProperties(_this$props, _excluded$4)
          var range = Day.range(date, {
            localizer: localizer,
          })
          return /*#__PURE__*/ React.createElement(
            TimeGrid,
            Object.assign({}, props, {
              range: range,
              eventOffset: 10,
              localizer: localizer,
              min: min,
              max: max,
              scrollToTime: scrollToTime,
              enableAutoScroll: enableAutoScroll,
            })
          )
        },
      },
    ])
    return Day
  })(React.Component)
  Day.range = function (date, _ref) {
    var localizer = _ref.localizer
    return [localizer.startOf(date, 'day')]
  }
  Day.navigate = function (date, action, _ref2) {
    var localizer = _ref2.localizer
    switch (action) {
      case navigate.PREVIOUS:
        return localizer.add(date, -1, 'day')
      case navigate.NEXT:
        return localizer.add(date, 1, 'day')
      default:
        return date
    }
  }
  Day.title = function (date, _ref3) {
    var localizer = _ref3.localizer
    return localizer.format(date, 'dayHeaderFormat')
  }

  function _toArray(arr) {
    return (
      _arrayWithHoles(arr) ||
      _iterableToArray(arr) ||
      _unsupportedIterableToArray(arr) ||
      _nonIterableRest()
    )
  }

  var _excluded$3 = [
    'date',
    'localizer',
    'min',
    'max',
    'scrollToTime',
    'enableAutoScroll',
  ]
  var Week = /*#__PURE__*/ (function (_React$Component) {
    _inherits(Week, _React$Component)
    var _super = _createSuper(Week)
    function Week() {
      _classCallCheck(this, Week)
      return _super.apply(this, arguments)
    }
    _createClass(Week, [
      {
        key: 'render',
        value: function render() {
          /**
           * This allows us to default min, max, and scrollToTime
           * using our localizer. This is necessary until such time
           * as TimeGrid is converted to a functional component.
           */
          var _this$props = this.props,
            date = _this$props.date,
            localizer = _this$props.localizer,
            _this$props$min = _this$props.min,
            min =
              _this$props$min === void 0
                ? localizer.startOf(new Date(), 'day')
                : _this$props$min,
            _this$props$max = _this$props.max,
            max =
              _this$props$max === void 0
                ? localizer.endOf(new Date(), 'day')
                : _this$props$max,
            _this$props$scrollToT = _this$props.scrollToTime,
            scrollToTime =
              _this$props$scrollToT === void 0
                ? localizer.startOf(new Date(), 'day')
                : _this$props$scrollToT,
            _this$props$enableAut = _this$props.enableAutoScroll,
            enableAutoScroll =
              _this$props$enableAut === void 0 ? true : _this$props$enableAut,
            props = _objectWithoutProperties(_this$props, _excluded$3)
          var range = Week.range(date, this.props)
          return /*#__PURE__*/ React.createElement(
            TimeGrid,
            Object.assign({}, props, {
              range: range,
              eventOffset: 15,
              localizer: localizer,
              min: min,
              max: max,
              scrollToTime: scrollToTime,
              enableAutoScroll: enableAutoScroll,
            })
          )
        },
      },
    ])
    return Week
  })(React.Component)
  Week.defaultProps = TimeGrid.defaultProps
  Week.navigate = function (date, action, _ref) {
    var localizer = _ref.localizer
    switch (action) {
      case navigate.PREVIOUS:
        return localizer.add(date, -1, 'week')
      case navigate.NEXT:
        return localizer.add(date, 1, 'week')
      default:
        return date
    }
  }
  Week.range = function (date, _ref2) {
    var localizer = _ref2.localizer
    var firstOfWeek = localizer.startOfWeek()
    var start = localizer.startOf(date, 'week', firstOfWeek)
    var end = localizer.endOf(date, 'week', firstOfWeek)
    return localizer.range(start, end)
  }
  Week.title = function (date, _ref3) {
    var localizer = _ref3.localizer
    var _Week$range = Week.range(date, {
        localizer: localizer,
      }),
      _Week$range2 = _toArray(_Week$range),
      start = _Week$range2[0],
      rest = _Week$range2.slice(1)
    return localizer.format(
      {
        start: start,
        end: rest.pop(),
      },
      'dayRangeHeaderFormat'
    )
  }

  var _excluded$2 = [
    'date',
    'localizer',
    'min',
    'max',
    'scrollToTime',
    'enableAutoScroll',
  ]
  function workWeekRange(date, options) {
    return Week.range(date, options).filter(function (d) {
      return [6, 0].indexOf(d.getDay()) === -1
    })
  }
  var WorkWeek = /*#__PURE__*/ (function (_React$Component) {
    _inherits(WorkWeek, _React$Component)
    var _super = _createSuper(WorkWeek)
    function WorkWeek() {
      _classCallCheck(this, WorkWeek)
      return _super.apply(this, arguments)
    }
    _createClass(WorkWeek, [
      {
        key: 'render',
        value: function render() {
          /**
           * This allows us to default min, max, and scrollToTime
           * using our localizer. This is necessary until such time
           * as TimeGrid is converted to a functional component.
           */
          var _this$props = this.props,
            date = _this$props.date,
            localizer = _this$props.localizer,
            _this$props$min = _this$props.min,
            min =
              _this$props$min === void 0
                ? localizer.startOf(new Date(), 'day')
                : _this$props$min,
            _this$props$max = _this$props.max,
            max =
              _this$props$max === void 0
                ? localizer.endOf(new Date(), 'day')
                : _this$props$max,
            _this$props$scrollToT = _this$props.scrollToTime,
            scrollToTime =
              _this$props$scrollToT === void 0
                ? localizer.startOf(new Date(), 'day')
                : _this$props$scrollToT,
            _this$props$enableAut = _this$props.enableAutoScroll,
            enableAutoScroll =
              _this$props$enableAut === void 0 ? true : _this$props$enableAut,
            props = _objectWithoutProperties(_this$props, _excluded$2)
          var range = workWeekRange(date, this.props)
          return /*#__PURE__*/ React.createElement(
            TimeGrid,
            Object.assign({}, props, {
              range: range,
              eventOffset: 15,
              localizer: localizer,
              min: min,
              max: max,
              scrollToTime: scrollToTime,
              enableAutoScroll: enableAutoScroll,
            })
          )
        },
      },
    ])
    return WorkWeek
  })(React.Component)
  WorkWeek.defaultProps = TimeGrid.defaultProps
  WorkWeek.range = workWeekRange
  WorkWeek.navigate = Week.navigate
  WorkWeek.title = function (date, _ref) {
    var localizer = _ref.localizer
    var _workWeekRange = workWeekRange(date, {
        localizer: localizer,
      }),
      _workWeekRange2 = _toArray(_workWeekRange),
      start = _workWeekRange2[0],
      rest = _workWeekRange2.slice(1)
    return localizer.format(
      {
        start: start,
        end: rest.pop(),
      },
      'dayRangeHeaderFormat'
    )
  }

  function Agenda(_ref) {
    var accessors = _ref.accessors,
      components = _ref.components,
      date = _ref.date,
      events = _ref.events,
      getters = _ref.getters,
      length = _ref.length,
      localizer = _ref.localizer,
      onDoubleClickEvent = _ref.onDoubleClickEvent,
      onSelectEvent = _ref.onSelectEvent,
      selected = _ref.selected
    var headerRef = reactExports.useRef(null)
    var dateColRef = reactExports.useRef(null)
    var timeColRef = reactExports.useRef(null)
    var contentRef = reactExports.useRef(null)
    var tbodyRef = reactExports.useRef(null)
    reactExports.useEffect(function () {
      _adjustHeader()
    })
    var renderDay = function renderDay(day, events, dayKey) {
      var Event = components.event,
        AgendaDate = components.date
      events = events.filter(function (e) {
        return inRange(
          e,
          localizer.startOf(day, 'day'),
          localizer.endOf(day, 'day'),
          accessors,
          localizer
        )
      })
      return events.map(function (event, idx) {
        var title = accessors.title(event)
        var end = accessors.end(event)
        var start = accessors.start(event)
        var userProps = getters.eventProp(
          event,
          start,
          end,
          isSelected(event, selected)
        )
        var dateLabel = idx === 0 && localizer.format(day, 'agendaDateFormat')
        var first =
          idx === 0
            ? /*#__PURE__*/ React.createElement(
                'td',
                {
                  rowSpan: events.length,
                  className: 'rbc-agenda-date-cell',
                },
                AgendaDate
                  ? /*#__PURE__*/ React.createElement(AgendaDate, {
                      day: day,
                      label: dateLabel,
                    })
                  : dateLabel
              )
            : false
        return /*#__PURE__*/ React.createElement(
          'tr',
          {
            key: dayKey + '_' + idx,
            className: userProps.className,
            style: userProps.style,
          },
          first,
          /*#__PURE__*/ React.createElement(
            'td',
            {
              className: 'rbc-agenda-time-cell',
            },
            timeRangeLabel(day, event)
          ),
          /*#__PURE__*/ React.createElement(
            'td',
            {
              className: 'rbc-agenda-event-cell',
              onClick: function onClick(e) {
                return onSelectEvent && onSelectEvent(event, e)
              },
              onDoubleClick: function onDoubleClick(e) {
                return onDoubleClickEvent && onDoubleClickEvent(event, e)
              },
            },
            Event
              ? /*#__PURE__*/ React.createElement(Event, {
                  event: event,
                  title: title,
                })
              : title
          )
        )
      }, [])
    }
    var timeRangeLabel = function timeRangeLabel(day, event) {
      var labelClass = '',
        TimeComponent = components.time,
        label = localizer.messages.allDay
      var end = accessors.end(event)
      var start = accessors.start(event)
      if (!accessors.allDay(event)) {
        if (localizer.eq(start, end)) {
          label = localizer.format(start, 'agendaTimeFormat')
        } else if (localizer.isSameDate(start, end)) {
          label = localizer.format(
            {
              start: start,
              end: end,
            },
            'agendaTimeRangeFormat'
          )
        } else if (localizer.isSameDate(day, start)) {
          label = localizer.format(start, 'agendaTimeFormat')
        } else if (localizer.isSameDate(day, end)) {
          label = localizer.format(end, 'agendaTimeFormat')
        }
      }
      if (localizer.gt(day, start, 'day')) labelClass = 'rbc-continues-prior'
      if (localizer.lt(day, end, 'day')) labelClass += ' rbc-continues-after'
      return /*#__PURE__*/ React.createElement(
        'span',
        {
          className: labelClass.trim(),
        },
        TimeComponent
          ? /*#__PURE__*/ React.createElement(TimeComponent, {
              event: event,
              day: day,
              label: label,
            })
          : label
      )
    }
    var _adjustHeader = function _adjustHeader() {
      if (!tbodyRef.current) return
      var header = headerRef.current
      var firstRow = tbodyRef.current.firstChild
      if (!firstRow) return
      var isOverflowing =
        contentRef.current.scrollHeight > contentRef.current.clientHeight
      var _widths = []
      var widths = _widths
      _widths = [getWidth(firstRow.children[0]), getWidth(firstRow.children[1])]
      if (widths[0] !== _widths[0] || widths[1] !== _widths[1]) {
        dateColRef.current.style.width = _widths[0] + 'px'
        timeColRef.current.style.width = _widths[1] + 'px'
      }
      if (isOverflowing) {
        addClass(header, 'rbc-header-overflowing')
        header.style.marginRight = scrollbarSize() + 'px'
      } else {
        removeClass(header, 'rbc-header-overflowing')
      }
    }
    var messages = localizer.messages
    var end = localizer.add(date, length, 'day')
    var range = localizer.range(date, end, 'day')
    events = events.filter(function (event) {
      return inRange(
        event,
        localizer.startOf(date, 'day'),
        localizer.endOf(end, 'day'),
        accessors,
        localizer
      )
    })
    events.sort(function (a, b) {
      return +accessors.start(a) - +accessors.start(b)
    })
    return /*#__PURE__*/ React.createElement(
      'div',
      {
        className: 'rbc-agenda-view',
      },
      events.length !== 0
        ? /*#__PURE__*/ React.createElement(
            React.Fragment,
            null,
            /*#__PURE__*/ React.createElement(
              'table',
              {
                ref: headerRef,
                className: 'rbc-agenda-table',
              },
              /*#__PURE__*/ React.createElement(
                'thead',
                null,
                /*#__PURE__*/ React.createElement(
                  'tr',
                  null,
                  /*#__PURE__*/ React.createElement(
                    'th',
                    {
                      className: 'rbc-header',
                      ref: dateColRef,
                    },
                    messages.date
                  ),
                  /*#__PURE__*/ React.createElement(
                    'th',
                    {
                      className: 'rbc-header',
                      ref: timeColRef,
                    },
                    messages.time
                  ),
                  /*#__PURE__*/ React.createElement(
                    'th',
                    {
                      className: 'rbc-header',
                    },
                    messages.event
                  )
                )
              )
            ),
            /*#__PURE__*/ React.createElement(
              'div',
              {
                className: 'rbc-agenda-content',
                ref: contentRef,
              },
              /*#__PURE__*/ React.createElement(
                'table',
                {
                  className: 'rbc-agenda-table',
                },
                /*#__PURE__*/ React.createElement(
                  'tbody',
                  {
                    ref: tbodyRef,
                  },
                  range.map(function (day, idx) {
                    return renderDay(day, events, idx)
                  })
                )
              )
            )
          )
        : /*#__PURE__*/ React.createElement(
            'span',
            {
              className: 'rbc-agenda-empty',
            },
            messages.noEventsInRange
          )
    )
  }
  Agenda.defaultProps = {
    length: 30,
  }
  Agenda.range = function (start, _ref2) {
    var _ref2$length = _ref2.length,
      length =
        _ref2$length === void 0 ? Agenda.defaultProps.length : _ref2$length,
      localizer = _ref2.localizer
    var end = localizer.add(start, length, 'day')
    return {
      start: start,
      end: end,
    }
  }
  Agenda.navigate = function (date, action, _ref3) {
    var _ref3$length = _ref3.length,
      length =
        _ref3$length === void 0 ? Agenda.defaultProps.length : _ref3$length,
      localizer = _ref3.localizer
    switch (action) {
      case navigate.PREVIOUS:
        return localizer.add(date, -length, 'day')
      case navigate.NEXT:
        return localizer.add(date, length, 'day')
      default:
        return date
    }
  }
  Agenda.title = function (start, _ref4) {
    var _ref4$length = _ref4.length,
      length =
        _ref4$length === void 0 ? Agenda.defaultProps.length : _ref4$length,
      localizer = _ref4.localizer
    var end = localizer.add(start, length, 'day')
    return localizer.format(
      {
        start: start,
        end: end,
      },
      'agendaHeaderFormat'
    )
  }

  var _VIEWS
  var VIEWS =
    ((_VIEWS = {}),
    _defineProperty$1(_VIEWS, views.MONTH, MonthView),
    _defineProperty$1(_VIEWS, views.WEEK, Week),
    _defineProperty$1(_VIEWS, views.WORK_WEEK, WorkWeek),
    _defineProperty$1(_VIEWS, views.DAY, Day),
    _defineProperty$1(_VIEWS, views.AGENDA, Agenda),
    _VIEWS)

  var _excluded$1 = ['action', 'date', 'today']
  function moveDate(View, _ref) {
    var action = _ref.action,
      date = _ref.date,
      today = _ref.today,
      props = _objectWithoutProperties(_ref, _excluded$1)
    View = typeof View === 'string' ? VIEWS[View] : View
    switch (action) {
      case navigate.TODAY:
        date = today || new Date()
        break
      case navigate.DATE:
        break
      default:
        invariant_1(
          View && typeof View.navigate === 'function',
          'Calendar View components must implement a static `.navigate(date, action)` method.s'
        )
        date = View.navigate(date, action, props)
    }
    return date
  }

  var Toolbar = /*#__PURE__*/ (function (_React$Component) {
    _inherits(Toolbar, _React$Component)
    var _super = _createSuper(Toolbar)
    function Toolbar() {
      var _this
      _classCallCheck(this, Toolbar)
      for (
        var _len = arguments.length, args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        args[_key] = arguments[_key]
      }
      _this = _super.call.apply(_super, [this].concat(args))
      _this.navigate = function (action) {
        _this.props.onNavigate(action)
      }
      _this.view = function (view) {
        _this.props.onView(view)
      }
      return _this
    }
    _createClass(Toolbar, [
      {
        key: 'render',
        value: function render() {
          var _this$props = this.props,
            messages = _this$props.localizer.messages,
            label = _this$props.label
          return /*#__PURE__*/ React.createElement(
            'div',
            {
              className: 'rbc-toolbar',
            },
            /*#__PURE__*/ React.createElement(
              'span',
              {
                className: 'rbc-btn-group',
              },
              /*#__PURE__*/ React.createElement(
                'button',
                {
                  type: 'button',
                  onClick: this.navigate.bind(null, navigate.TODAY),
                },
                messages.today
              ),
              /*#__PURE__*/ React.createElement(
                'button',
                {
                  type: 'button',
                  onClick: this.navigate.bind(null, navigate.PREVIOUS),
                },
                messages.previous
              ),
              /*#__PURE__*/ React.createElement(
                'button',
                {
                  type: 'button',
                  onClick: this.navigate.bind(null, navigate.NEXT),
                },
                messages.next
              )
            ),
            /*#__PURE__*/ React.createElement(
              'span',
              {
                className: 'rbc-toolbar-label',
              },
              label
            ),
            /*#__PURE__*/ React.createElement(
              'span',
              {
                className: 'rbc-btn-group',
              },
              this.viewNamesGroup(messages)
            )
          )
        },
      },
      {
        key: 'viewNamesGroup',
        value: function viewNamesGroup(messages) {
          var _this2 = this
          var viewNames = this.props.views
          var view = this.props.view
          if (viewNames.length > 1) {
            return viewNames.map(function (name) {
              return /*#__PURE__*/ React.createElement(
                'button',
                {
                  type: 'button',
                  key: name,
                  className: clsx({
                    'rbc-active': view === name,
                  }),
                  onClick: _this2.view.bind(null, name),
                },
                messages[name]
              )
            })
          }
        },
      },
    ])
    return Toolbar
  })(React.Component)

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */

  function arrayEach$2(array, iteratee) {
    var index = -1,
      length = array == null ? 0 : array.length

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break
      }
    }
    return array
  }

  var _arrayEach = arrayEach$2

  var defineProperty = _defineProperty

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue$3(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        configurable: true,
        enumerable: true,
        value: value,
        writable: true,
      })
    } else {
      object[key] = value
    }
  }

  var _baseAssignValue = baseAssignValue$3

  var baseAssignValue$2 = _baseAssignValue,
    eq$1 = eq_1

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$4.hasOwnProperty

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue$2(object, key, value) {
    var objValue = object[key]
    if (
      !(hasOwnProperty$4.call(object, key) && eq$1(objValue, value)) ||
      (value === undefined && !(key in object))
    ) {
      baseAssignValue$2(object, key, value)
    }
  }

  var _assignValue = assignValue$2

  var assignValue$1 = _assignValue,
    baseAssignValue$1 = _baseAssignValue

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject$5(source, props, object, customizer) {
    var isNew = !object
    object || (object = {})

    var index = -1,
      length = props.length

    while (++index < length) {
      var key = props[index]

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined

      if (newValue === undefined) {
        newValue = source[key]
      }
      if (isNew) {
        baseAssignValue$1(object, key, newValue)
      } else {
        assignValue$1(object, key, newValue)
      }
    }
    return object
  }

  var _copyObject = copyObject$5

  var copyObject$4 = _copyObject,
    keys$1 = keys_1

  /**
   * The base implementation of `_.assign` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssign$1(object, source) {
    return object && copyObject$4(source, keys$1(source), object)
  }

  var _baseAssign = baseAssign$1

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */

  function nativeKeysIn$1(object) {
    var result = []
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key)
      }
    }
    return result
  }

  var _nativeKeysIn = nativeKeysIn$1

  var isObject$3 = isObject_1,
    isPrototype$1 = _isPrototype,
    nativeKeysIn = _nativeKeysIn

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$3.hasOwnProperty

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn$1(object) {
    if (!isObject$3(object)) {
      return nativeKeysIn(object)
    }
    var isProto = isPrototype$1(object),
      result = []

    for (var key in object) {
      if (
        !(
          key == 'constructor' &&
          (isProto || !hasOwnProperty$3.call(object, key))
        )
      ) {
        result.push(key)
      }
    }
    return result
  }

  var _baseKeysIn = baseKeysIn$1

  var arrayLikeKeys = _arrayLikeKeys,
    baseKeysIn = _baseKeysIn,
    isArrayLike = isArrayLike_1

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn$4(object) {
    return isArrayLike(object)
      ? arrayLikeKeys(object, true)
      : baseKeysIn(object)
  }

  var keysIn_1 = keysIn$4

  var copyObject$3 = _copyObject,
    keysIn$3 = keysIn_1

  /**
   * The base implementation of `_.assignIn` without support for multiple sources
   * or `customizer` functions.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @returns {Object} Returns `object`.
   */
  function baseAssignIn$1(object, source) {
    return object && copyObject$3(source, keysIn$3(source), object)
  }

  var _baseAssignIn = baseAssignIn$1

  var _cloneBufferExports = {}
  var _cloneBuffer = {
    get exports() {
      return _cloneBufferExports
    },
    set exports(v) {
      _cloneBufferExports = v
    },
  }

  ;(function (module, exports) {
    var root = _root

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports

    /** Detect free variable `module`. */
    var freeModule =
      freeExports &&
      'object' == 'object' &&
      module &&
      !module.nodeType &&
      module

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
      allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice()
      }
      var length = buffer.length,
        result = allocUnsafe
          ? allocUnsafe(length)
          : new buffer.constructor(length)

      buffer.copy(result)
      return result
    }

    module.exports = cloneBuffer
  })(_cloneBuffer, _cloneBufferExports)

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */

  function copyArray$1(source, array) {
    var index = -1,
      length = source.length

    array || (array = Array(length))
    while (++index < length) {
      array[index] = source[index]
    }
    return array
  }

  var _copyArray = copyArray$1

  var copyObject$2 = _copyObject,
    getSymbols$1 = _getSymbols

  /**
   * Copies own symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbols$1(source, object) {
    return copyObject$2(source, getSymbols$1(source), object)
  }

  var _copySymbols = copySymbols$1

  var overArg = _overArg

  /** Built-in value references. */
  var getPrototype$4 = overArg(Object.getPrototypeOf, Object)

  var _getPrototype = getPrototype$4

  var arrayPush = _arrayPush,
    getPrototype$3 = _getPrototype,
    getSymbols = _getSymbols,
    stubArray = stubArray_1

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols

  /**
   * Creates an array of the own and inherited enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbolsIn$2 = !nativeGetSymbols
    ? stubArray
    : function (object) {
        var result = []
        while (object) {
          arrayPush(result, getSymbols(object))
          object = getPrototype$3(object)
        }
        return result
      }

  var _getSymbolsIn = getSymbolsIn$2

  var copyObject$1 = _copyObject,
    getSymbolsIn$1 = _getSymbolsIn

  /**
   * Copies own and inherited symbols of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy symbols from.
   * @param {Object} [object={}] The object to copy symbols to.
   * @returns {Object} Returns `object`.
   */
  function copySymbolsIn$1(source, object) {
    return copyObject$1(source, getSymbolsIn$1(source), object)
  }

  var _copySymbolsIn = copySymbolsIn$1

  var baseGetAllKeys = _baseGetAllKeys,
    getSymbolsIn = _getSymbolsIn,
    keysIn$2 = keysIn_1

  /**
   * Creates an array of own and inherited enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeysIn$2(object) {
    return baseGetAllKeys(object, keysIn$2, getSymbolsIn)
  }

  var _getAllKeysIn = getAllKeysIn$2

  /** Used for built-in method references. */

  var objectProto$2 = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$2.hasOwnProperty

  /**
   * Initializes an array clone.
   *
   * @private
   * @param {Array} array The array to clone.
   * @returns {Array} Returns the initialized clone.
   */
  function initCloneArray$1(array) {
    var length = array.length,
      result = new array.constructor(length)

    // Add properties assigned by `RegExp#exec`.
    if (
      length &&
      typeof array[0] == 'string' &&
      hasOwnProperty$2.call(array, 'index')
    ) {
      result.index = array.index
      result.input = array.input
    }
    return result
  }

  var _initCloneArray = initCloneArray$1

  var Uint8Array = _Uint8Array

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer$3(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength)
    new Uint8Array(result).set(new Uint8Array(arrayBuffer))
    return result
  }

  var _cloneArrayBuffer = cloneArrayBuffer$3

  var cloneArrayBuffer$2 = _cloneArrayBuffer

  /**
   * Creates a clone of `dataView`.
   *
   * @private
   * @param {Object} dataView The data view to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned data view.
   */
  function cloneDataView$1(dataView, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer
    return new dataView.constructor(
      buffer,
      dataView.byteOffset,
      dataView.byteLength
    )
  }

  var _cloneDataView = cloneDataView$1

  /** Used to match `RegExp` flags from their coerced string values. */

  var reFlags = /\w*$/

  /**
   * Creates a clone of `regexp`.
   *
   * @private
   * @param {Object} regexp The regexp to clone.
   * @returns {Object} Returns the cloned regexp.
   */
  function cloneRegExp$1(regexp) {
    var result = new regexp.constructor(regexp.source, reFlags.exec(regexp))
    result.lastIndex = regexp.lastIndex
    return result
  }

  var _cloneRegExp = cloneRegExp$1

  var Symbol$1 = _Symbol

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined

  /**
   * Creates a clone of the `symbol` object.
   *
   * @private
   * @param {Object} symbol The symbol object to clone.
   * @returns {Object} Returns the cloned symbol object.
   */
  function cloneSymbol$1(symbol) {
    return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {}
  }

  var _cloneSymbol = cloneSymbol$1

  var cloneArrayBuffer$1 = _cloneArrayBuffer

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray$1(typedArray, isDeep) {
    var buffer = isDeep
      ? cloneArrayBuffer$1(typedArray.buffer)
      : typedArray.buffer
    return new typedArray.constructor(
      buffer,
      typedArray.byteOffset,
      typedArray.length
    )
  }

  var _cloneTypedArray = cloneTypedArray$1

  var cloneArrayBuffer = _cloneArrayBuffer,
    cloneDataView = _cloneDataView,
    cloneRegExp = _cloneRegExp,
    cloneSymbol = _cloneSymbol,
    cloneTypedArray = _cloneTypedArray

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
    dateTag$1 = '[object Date]',
    mapTag$2 = '[object Map]',
    numberTag$1 = '[object Number]',
    regexpTag$1 = '[object RegExp]',
    setTag$2 = '[object Set]',
    stringTag$1 = '[object String]',
    symbolTag$1 = '[object Symbol]'

  var arrayBufferTag$1 = '[object ArrayBuffer]',
    dataViewTag$1 = '[object DataView]',
    float32Tag$1 = '[object Float32Array]',
    float64Tag$1 = '[object Float64Array]',
    int8Tag$1 = '[object Int8Array]',
    int16Tag$1 = '[object Int16Array]',
    int32Tag$1 = '[object Int32Array]',
    uint8Tag$1 = '[object Uint8Array]',
    uint8ClampedTag$1 = '[object Uint8ClampedArray]',
    uint16Tag$1 = '[object Uint16Array]',
    uint32Tag$1 = '[object Uint32Array]'

  /**
   * Initializes an object clone based on its `toStringTag`.
   *
   * **Note:** This function only supports cloning values with tags of
   * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
   *
   * @private
   * @param {Object} object The object to clone.
   * @param {string} tag The `toStringTag` of the object to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneByTag$1(object, tag, isDeep) {
    var Ctor = object.constructor
    switch (tag) {
      case arrayBufferTag$1:
        return cloneArrayBuffer(object)

      case boolTag$1:
      case dateTag$1:
        return new Ctor(+object)

      case dataViewTag$1:
        return cloneDataView(object, isDeep)

      case float32Tag$1:
      case float64Tag$1:
      case int8Tag$1:
      case int16Tag$1:
      case int32Tag$1:
      case uint8Tag$1:
      case uint8ClampedTag$1:
      case uint16Tag$1:
      case uint32Tag$1:
        return cloneTypedArray(object, isDeep)

      case mapTag$2:
        return new Ctor()

      case numberTag$1:
      case stringTag$1:
        return new Ctor(object)

      case regexpTag$1:
        return cloneRegExp(object)

      case setTag$2:
        return new Ctor()

      case symbolTag$1:
        return cloneSymbol(object)
    }
  }

  var _initCloneByTag = initCloneByTag$1

  var isObject$2 = isObject_1

  /** Built-in value references. */
  var objectCreate = Object.create

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate$2 = (function () {
    function object() {}
    return function (proto) {
      if (!isObject$2(proto)) {
        return {}
      }
      if (objectCreate) {
        return objectCreate(proto)
      }
      object.prototype = proto
      var result = new object()
      object.prototype = undefined
      return result
    }
  })()

  var _baseCreate = baseCreate$2

  var baseCreate$1 = _baseCreate,
    getPrototype$2 = _getPrototype,
    isPrototype = _isPrototype

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject$1(object) {
    return typeof object.constructor == 'function' && !isPrototype(object)
      ? baseCreate$1(getPrototype$2(object))
      : {}
  }

  var _initCloneObject = initCloneObject$1

  var getTag$2 = _getTag,
    isObjectLike$2 = isObjectLike_1

  /** `Object#toString` result references. */
  var mapTag$1 = '[object Map]'

  /**
   * The base implementation of `_.isMap` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   */
  function baseIsMap$1(value) {
    return isObjectLike$2(value) && getTag$2(value) == mapTag$1
  }

  var _baseIsMap = baseIsMap$1

  var baseIsMap = _baseIsMap,
    baseUnary$1 = _baseUnary,
    nodeUtil$1 = _nodeUtilExports

  /* Node.js helper references. */
  var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap

  /**
   * Checks if `value` is classified as a `Map` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a map, else `false`.
   * @example
   *
   * _.isMap(new Map);
   * // => true
   *
   * _.isMap(new WeakMap);
   * // => false
   */
  var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap

  var isMap_1 = isMap$1

  var getTag$1 = _getTag,
    isObjectLike$1 = isObjectLike_1

  /** `Object#toString` result references. */
  var setTag$1 = '[object Set]'

  /**
   * The base implementation of `_.isSet` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   */
  function baseIsSet$1(value) {
    return isObjectLike$1(value) && getTag$1(value) == setTag$1
  }

  var _baseIsSet = baseIsSet$1

  var baseIsSet = _baseIsSet,
    baseUnary = _baseUnary,
    nodeUtil = _nodeUtilExports

  /* Node.js helper references. */
  var nodeIsSet = nodeUtil && nodeUtil.isSet

  /**
   * Checks if `value` is classified as a `Set` object.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a set, else `false`.
   * @example
   *
   * _.isSet(new Set);
   * // => true
   *
   * _.isSet(new WeakSet);
   * // => false
   */
  var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet

  var isSet_1 = isSet$1

  var Stack = _Stack,
    arrayEach$1 = _arrayEach,
    assignValue = _assignValue,
    baseAssign = _baseAssign,
    baseAssignIn = _baseAssignIn,
    cloneBuffer = _cloneBufferExports,
    copyArray = _copyArray,
    copySymbols = _copySymbols,
    copySymbolsIn = _copySymbolsIn,
    getAllKeys = _getAllKeys,
    getAllKeysIn$1 = _getAllKeysIn,
    getTag = _getTag,
    initCloneArray = _initCloneArray,
    initCloneByTag = _initCloneByTag,
    initCloneObject = _initCloneObject,
    isArray$1 = isArray_1,
    isBuffer$1 = isBufferExports,
    isMap = isMap_1,
    isObject$1 = isObject_1,
    isSet = isSet_1,
    keys = keys_1,
    keysIn$1 = keysIn_1

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG$1 = 1,
    CLONE_FLAT_FLAG$1 = 2,
    CLONE_SYMBOLS_FLAG$1 = 4

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    genTag = '[object GeneratorFunction]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag$1 = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    symbolTag = '[object Symbol]',
    weakMapTag = '[object WeakMap]'

  var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]'

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {}
  cloneableTags[argsTag] =
    cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] =
    cloneableTags[dataViewTag] =
    cloneableTags[boolTag] =
    cloneableTags[dateTag] =
    cloneableTags[float32Tag] =
    cloneableTags[float64Tag] =
    cloneableTags[int8Tag] =
    cloneableTags[int16Tag] =
    cloneableTags[int32Tag] =
    cloneableTags[mapTag] =
    cloneableTags[numberTag] =
    cloneableTags[objectTag$1] =
    cloneableTags[regexpTag] =
    cloneableTags[setTag] =
    cloneableTags[stringTag] =
    cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] =
    cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] =
    cloneableTags[uint32Tag] =
      true
  cloneableTags[errorTag] =
    cloneableTags[funcTag] =
    cloneableTags[weakMapTag] =
      false

  /**
   * The base implementation of `_.clone` and `_.cloneDeep` which tracks
   * traversed objects.
   *
   * @private
   * @param {*} value The value to clone.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Deep clone
   *  2 - Flatten inherited properties
   *  4 - Clone symbols
   * @param {Function} [customizer] The function to customize cloning.
   * @param {string} [key] The key of `value`.
   * @param {Object} [object] The parent object of `value`.
   * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
   * @returns {*} Returns the cloned value.
   */
  function baseClone$1(value, bitmask, customizer, key, object, stack) {
    var result,
      isDeep = bitmask & CLONE_DEEP_FLAG$1,
      isFlat = bitmask & CLONE_FLAT_FLAG$1,
      isFull = bitmask & CLONE_SYMBOLS_FLAG$1

    if (customizer) {
      result = object
        ? customizer(value, key, object, stack)
        : customizer(value)
    }
    if (result !== undefined) {
      return result
    }
    if (!isObject$1(value)) {
      return value
    }
    var isArr = isArray$1(value)
    if (isArr) {
      result = initCloneArray(value)
      if (!isDeep) {
        return copyArray(value, result)
      }
    } else {
      var tag = getTag(value),
        isFunc = tag == funcTag || tag == genTag

      if (isBuffer$1(value)) {
        return cloneBuffer(value, isDeep)
      }
      if (tag == objectTag$1 || tag == argsTag || (isFunc && !object)) {
        result = isFlat || isFunc ? {} : initCloneObject(value)
        if (!isDeep) {
          return isFlat
            ? copySymbolsIn(value, baseAssignIn(result, value))
            : copySymbols(value, baseAssign(result, value))
        }
      } else {
        if (!cloneableTags[tag]) {
          return object ? value : {}
        }
        result = initCloneByTag(value, tag, isDeep)
      }
    }
    // Check for circular references and return its corresponding clone.
    stack || (stack = new Stack())
    var stacked = stack.get(value)
    if (stacked) {
      return stacked
    }
    stack.set(value, result)

    if (isSet(value)) {
      value.forEach(function (subValue) {
        result.add(
          baseClone$1(subValue, bitmask, customizer, subValue, value, stack)
        )
      })
    } else if (isMap(value)) {
      value.forEach(function (subValue, key) {
        result.set(
          key,
          baseClone$1(subValue, bitmask, customizer, key, value, stack)
        )
      })
    }

    var keysFunc = isFull
      ? isFlat
        ? getAllKeysIn$1
        : getAllKeys
      : isFlat
      ? keysIn$1
      : keys

    var props = isArr ? undefined : keysFunc(value)
    arrayEach$1(props || value, function (subValue, key) {
      if (props) {
        key = subValue
        subValue = value[key]
      }
      // Recursively populate clone (susceptible to call stack limits).
      assignValue(
        result,
        key,
        baseClone$1(subValue, bitmask, customizer, key, value, stack)
      )
    })
    return result
  }

  var _baseClone = baseClone$1

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */

  function last$1(array) {
    var length = array == null ? 0 : array.length
    return length ? array[length - 1] : undefined
  }

  var last_1 = last$1

  var baseGet = _baseGet,
    baseSlice = _baseSlice

  /**
   * Gets the parent value at `path` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} path The path to get the parent value of.
   * @returns {*} Returns the parent value.
   */
  function parent$1(object, path) {
    return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1))
  }

  var _parent = parent$1

  var castPath$1 = _castPath,
    last = last_1,
    parent = _parent,
    toKey = _toKey

  /**
   * The base implementation of `_.unset`.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {Array|string} path The property path to unset.
   * @returns {boolean} Returns `true` if the property is deleted, else `false`.
   */
  function baseUnset$1(object, path) {
    path = castPath$1(path, object)
    object = parent(object, path)
    return object == null || delete object[toKey(last(path))]
  }

  var _baseUnset = baseUnset$1

  var baseGetTag = _baseGetTag,
    getPrototype$1 = _getPrototype,
    isObjectLike = isObjectLike_1

  /** `Object#toString` result references. */
  var objectTag = '[object Object]'

  /** Used for built-in method references. */
  var funcProto = Function.prototype,
    objectProto$1 = Object.prototype

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto$1.hasOwnProperty

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString.call(Object)

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject$1(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
      return false
    }
    var proto = getPrototype$1(value)
    if (proto === null) {
      return true
    }
    var Ctor = hasOwnProperty$1.call(proto, 'constructor') && proto.constructor
    return (
      typeof Ctor == 'function' &&
      Ctor instanceof Ctor &&
      funcToString.call(Ctor) == objectCtorString
    )
  }

  var isPlainObject_1 = isPlainObject$1

  var isPlainObject = isPlainObject_1

  /**
   * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
   * objects.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {string} key The key of the property to inspect.
   * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
   */
  function customOmitClone$1(value) {
    return isPlainObject(value) ? undefined : value
  }

  var _customOmitClone = customOmitClone$1

  var baseFlatten = _baseFlatten

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten$1(array) {
    var length = array == null ? 0 : array.length
    return length ? baseFlatten(array, 1) : []
  }

  var flatten_1 = flatten$1

  var flatten = flatten_1,
    overRest = _overRest,
    setToString = _setToString

  /**
   * A specialized version of `baseRest` which flattens the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @returns {Function} Returns the new function.
   */
  function flatRest$1(func) {
    return setToString(overRest(func, undefined, flatten), func + '')
  }

  var _flatRest = flatRest$1

  var arrayMap = _arrayMap,
    baseClone = _baseClone,
    baseUnset = _baseUnset,
    castPath = _castPath,
    copyObject = _copyObject,
    customOmitClone = _customOmitClone,
    flatRest = _flatRest,
    getAllKeysIn = _getAllKeysIn

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
    CLONE_FLAT_FLAG = 2,
    CLONE_SYMBOLS_FLAG = 4

  /**
   * The opposite of `_.pick`; this method creates an object composed of the
   * own and inherited enumerable property paths of `object` that are not omitted.
   *
   * **Note:** This method is considerably slower than `_.pick`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [paths] The property paths to omit.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.omit(object, ['a', 'c']);
   * // => { 'b': '2' }
   */
  var omit = flatRest(function (object, paths) {
    var result = {}
    if (object == null) {
      return result
    }
    var isDeep = false
    paths = arrayMap(paths, function (path) {
      path = castPath(path, object)
      isDeep || (isDeep = path.length > 1)
      return path
    })
    copyObject(object, getAllKeysIn(object), result)
    if (isDeep) {
      result = baseClone(
        result,
        CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG,
        customOmitClone
      )
    }
    var length = paths.length
    while (length--) {
      baseUnset(result, paths[length])
    }
    return result
  })

  var omit_1 = omit

  var baseRest = _baseRest,
    eq = eq_1,
    isIterateeCall = _isIterateeCall,
    keysIn = keysIn_1

  /** Used for built-in method references. */
  var objectProto = Object.prototype

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty

  /**
   * Assigns own and inherited enumerable string keyed properties of source
   * objects to the destination object for all destination properties that
   * resolve to `undefined`. Source objects are applied from left to right.
   * Once a property is set, additional values of the same property are ignored.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @see _.defaultsDeep
   * @example
   *
   * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var defaults = baseRest(function (object, sources) {
    object = Object(object)

    var index = -1
    var length = sources.length
    var guard = length > 2 ? sources[2] : undefined

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      length = 1
    }

    while (++index < length) {
      var source = sources[index]
      var props = keysIn(source)
      var propsIndex = -1
      var propsLength = props.length

      while (++propsIndex < propsLength) {
        var key = props[propsIndex]
        var value = object[key]

        if (
          value === undefined ||
          (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))
        ) {
          object[key] = source[key]
        }
      }
    }

    return object
  })

  var defaults_1 = defaults

  var arrayEach = _arrayEach,
    baseCreate = _baseCreate,
    baseForOwn$1 = _baseForOwn,
    baseIteratee$1 = _baseIteratee,
    getPrototype = _getPrototype,
    isArray = isArray_1,
    isBuffer = isBufferExports,
    isFunction = isFunction_1,
    isObject = isObject_1,
    isTypedArray = isTypedArray_1

  /**
   * An alternative to `_.reduce`; this method transforms `object` to a new
   * `accumulator` object which is the result of running each of its own
   * enumerable string keyed properties thru `iteratee`, with each invocation
   * potentially mutating the `accumulator` object. If `accumulator` is not
   * provided, a new object with the same `[[Prototype]]` will be used. The
   * iteratee is invoked with four arguments: (accumulator, value, key, object).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @static
   * @memberOf _
   * @since 1.3.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The custom accumulator value.
   * @returns {*} Returns the accumulated value.
   * @example
   *
   * _.transform([2, 3, 4], function(result, n) {
   *   result.push(n *= n);
   *   return n % 2 == 0;
   * }, []);
   * // => [4, 9]
   *
   * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
   *   (result[value] || (result[value] = [])).push(key);
   * }, {});
   * // => { '1': ['a', 'c'], '2': ['b'] }
   */
  function transform(object, iteratee, accumulator) {
    var isArr = isArray(object),
      isArrLike = isArr || isBuffer(object) || isTypedArray(object)

    iteratee = baseIteratee$1(iteratee)
    if (accumulator == null) {
      var Ctor = object && object.constructor
      if (isArrLike) {
        accumulator = isArr ? new Ctor() : []
      } else if (isObject(object)) {
        accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {}
      } else {
        accumulator = {}
      }
    }
    ;(isArrLike
      ? arrayEach
      : baseForOwn$1)(object, function (value, index, object) {
      return iteratee(accumulator, value, index, object)
    })
    return accumulator
  }

  var transform_1 = transform

  var baseAssignValue = _baseAssignValue,
    baseForOwn = _baseForOwn,
    baseIteratee = _baseIteratee

  /**
   * Creates an object with the same keys as `object` and values generated
   * by running each own enumerable string keyed property of `object` thru
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, key, object).
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Object
   * @param {Object} object The object to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Object} Returns the new mapped object.
   * @see _.mapKeys
   * @example
   *
   * var users = {
   *   'fred':    { 'user': 'fred',    'age': 40 },
   *   'pebbles': { 'user': 'pebbles', 'age': 1 }
   * };
   *
   * _.mapValues(users, function(o) { return o.age; });
   * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
   *
   * // The `_.property` iteratee shorthand.
   * _.mapValues(users, 'age');
   * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
   */
  function mapValues(object, iteratee) {
    var result = {}
    iteratee = baseIteratee(iteratee)

    baseForOwn(object, function (value, key, object) {
      baseAssignValue(result, key, iteratee(value, key, object))
    })
    return result
  }

  var mapValues_1 = mapValues

  /**
   * Retrieve via an accessor-like property
   *
   *    accessor(obj, 'name')   // => retrieves obj['name']
   *    accessor(data, func)    // => retrieves func(data)
   *    ... otherwise null
   */
  function accessor(data, field) {
    var value = null
    if (typeof field === 'function') value = field(data)
    else if (
      typeof field === 'string' &&
      _typeof(data) === 'object' &&
      data != null &&
      field in data
    )
      value = data[field]
    return value
  }
  var wrapAccessor = function wrapAccessor(acc) {
    return function (data) {
      return accessor(data, acc)
    }
  }

  var _excluded = ['view', 'date', 'getNow', 'onNavigate'],
    _excluded2 = [
      'view',
      'toolbar',
      'events',
      'backgroundEvents',
      'style',
      'className',
      'elementProps',
      'date',
      'getNow',
      'length',
      'showMultiDayTimes',
      'onShowMore',
      'doShowMoreDrillDown',
      'components',
      'formats',
      'messages',
      'culture',
    ]
  function viewNames(_views) {
    if (Array.isArray(_views)) {
      return _views
    }
    var views = []
    for (
      var _i = 0, _Object$entries = Object.entries(_views);
      _i < _Object$entries.length;
      _i++
    ) {
      var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),
        key = _Object$entries$_i[0],
        value = _Object$entries$_i[1]
      if (value) {
        views.push(key)
      }
    }
    return views
  }
  function isValidView(view, _ref) {
    var _views = _ref.views
    var names = viewNames(_views)
    return names.indexOf(view) !== -1
  }
  var Calendar = /*#__PURE__*/ (function (_React$Component) {
    _inherits(Calendar, _React$Component)
    var _super = _createSuper(Calendar)
    function Calendar() {
      var _this
      _classCallCheck(this, Calendar)
      for (
        var _len = arguments.length, _args = new Array(_len), _key = 0;
        _key < _len;
        _key++
      ) {
        _args[_key] = arguments[_key]
      }
      _this = _super.call.apply(_super, [this].concat(_args))
      _this.getViews = function () {
        var views = _this.props.views
        if (Array.isArray(views)) {
          return transform_1(
            views,
            function (obj, name) {
              return (obj[name] = VIEWS[name])
            },
            {}
          )
        }
        if (_typeof(views) === 'object') {
          return mapValues_1(views, function (value, key) {
            if (value === true) {
              return VIEWS[key]
            }
            return value
          })
        }
        return VIEWS
      }
      _this.getView = function () {
        var views = _this.getViews()
        return views[_this.props.view]
      }
      _this.getDrilldownView = function (date) {
        var _this$props = _this.props,
          view = _this$props.view,
          drilldownView = _this$props.drilldownView,
          getDrilldownView = _this$props.getDrilldownView
        if (!getDrilldownView) return drilldownView
        return getDrilldownView(date, view, Object.keys(_this.getViews()))
      }
      _this.handleRangeChange = function (date, viewComponent, view) {
        var _this$props2 = _this.props,
          onRangeChange = _this$props2.onRangeChange,
          localizer = _this$props2.localizer
        if (onRangeChange) {
          if (viewComponent.range) {
            onRangeChange(
              viewComponent.range(date, {
                localizer: localizer,
              }),
              view
            )
          } else {
            {
              console.error('onRangeChange prop not supported for this view')
            }
          }
        }
      }
      _this.handleNavigate = function (action, newDate) {
        var _this$props3 = _this.props,
          view = _this$props3.view,
          date = _this$props3.date,
          getNow = _this$props3.getNow,
          onNavigate = _this$props3.onNavigate,
          props = _objectWithoutProperties(_this$props3, _excluded)
        var ViewComponent = _this.getView()
        var today = getNow()
        date = moveDate(
          ViewComponent,
          _objectSpread2(
            _objectSpread2({}, props),
            {},
            {
              action: action,
              date: newDate || date || today,
              today: today,
            }
          )
        )
        onNavigate(date, view, action)
        _this.handleRangeChange(date, ViewComponent)
      }
      _this.handleViewChange = function (view) {
        if (view !== _this.props.view && isValidView(view, _this.props)) {
          _this.props.onView(view)
        }
        var views = _this.getViews()
        _this.handleRangeChange(
          _this.props.date || _this.props.getNow(),
          views[view],
          view
        )
      }
      _this.handleSelectEvent = function () {
        for (
          var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
          _key2 < _len2;
          _key2++
        ) {
          args[_key2] = arguments[_key2]
        }
        notify(_this.props.onSelectEvent, args)
      }
      _this.handleDoubleClickEvent = function () {
        for (
          var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
          _key3 < _len3;
          _key3++
        ) {
          args[_key3] = arguments[_key3]
        }
        notify(_this.props.onDoubleClickEvent, args)
      }
      _this.handleKeyPressEvent = function () {
        for (
          var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
          _key4 < _len4;
          _key4++
        ) {
          args[_key4] = arguments[_key4]
        }
        notify(_this.props.onKeyPressEvent, args)
      }
      _this.handleSelectSlot = function (slotInfo) {
        notify(_this.props.onSelectSlot, slotInfo)
      }
      _this.handleDrillDown = function (date, view) {
        var onDrillDown = _this.props.onDrillDown
        if (onDrillDown) {
          onDrillDown(date, view, _this.drilldownView)
          return
        }
        if (view) _this.handleViewChange(view)
        _this.handleNavigate(navigate.DATE, date)
      }
      _this.state = {
        context: Calendar.getContext(_this.props),
      }
      return _this
    }
    _createClass(
      Calendar,
      [
        {
          key: 'render',
          value: function render() {
            var _this$props4 = this.props,
              view = _this$props4.view,
              toolbar = _this$props4.toolbar,
              events = _this$props4.events,
              backgroundEvents = _this$props4.backgroundEvents,
              style = _this$props4.style,
              className = _this$props4.className,
              elementProps = _this$props4.elementProps,
              current = _this$props4.date,
              getNow = _this$props4.getNow,
              length = _this$props4.length,
              showMultiDayTimes = _this$props4.showMultiDayTimes,
              onShowMore = _this$props4.onShowMore,
              doShowMoreDrillDown = _this$props4.doShowMoreDrillDown
            _this$props4.components
            _this$props4.formats
            _this$props4.messages
            _this$props4.culture
            var props = _objectWithoutProperties(_this$props4, _excluded2)
            current = current || getNow()
            var View = this.getView()
            var _this$state$context = this.state.context,
              accessors = _this$state$context.accessors,
              components = _this$state$context.components,
              getters = _this$state$context.getters,
              localizer = _this$state$context.localizer,
              viewNames = _this$state$context.viewNames
            var CalToolbar = components.toolbar || Toolbar
            var label = View.title(current, {
              localizer: localizer,
              length: length,
            })
            return /*#__PURE__*/ React.createElement(
              'div',
              Object.assign({}, elementProps, {
                className: clsx(
                  className,
                  'rbc-calendar',
                  props.rtl && 'rbc-rtl'
                ),
                style: style,
              }),
              toolbar &&
                /*#__PURE__*/ React.createElement(CalToolbar, {
                  date: current,
                  view: view,
                  views: viewNames,
                  label: label,
                  onView: this.handleViewChange,
                  onNavigate: this.handleNavigate,
                  localizer: localizer,
                }),
              /*#__PURE__*/ React.createElement(
                View,
                Object.assign({}, props, {
                  events: events,
                  backgroundEvents: backgroundEvents,
                  date: current,
                  getNow: getNow,
                  length: length,
                  localizer: localizer,
                  getters: getters,
                  components: components,
                  accessors: accessors,
                  showMultiDayTimes: showMultiDayTimes,
                  getDrilldownView: this.getDrilldownView,
                  onNavigate: this.handleNavigate,
                  onDrillDown: this.handleDrillDown,
                  onSelectEvent: this.handleSelectEvent,
                  onDoubleClickEvent: this.handleDoubleClickEvent,
                  onKeyPressEvent: this.handleKeyPressEvent,
                  onSelectSlot: this.handleSelectSlot,
                  onShowMore: onShowMore,
                  doShowMoreDrillDown: doShowMoreDrillDown,
                })
              )
            )
          },

          /**
           *
           * @param date
           * @param viewComponent
           * @param {'month'|'week'|'work_week'|'day'|'agenda'} [view] - optional
           * parameter. It appears when range change on view changing. It could be handy
           * when you need to have both: range and view type at once, i.e. for manage rbc
           * state via url
           */
        },
      ],
      [
        {
          key: 'getDerivedStateFromProps',
          value: function getDerivedStateFromProps(nextProps) {
            return {
              context: Calendar.getContext(nextProps),
            }
          },
        },
        {
          key: 'getContext',
          value: function getContext(_ref2) {
            var startAccessor = _ref2.startAccessor,
              endAccessor = _ref2.endAccessor,
              allDayAccessor = _ref2.allDayAccessor,
              tooltipAccessor = _ref2.tooltipAccessor,
              titleAccessor = _ref2.titleAccessor,
              resourceAccessor = _ref2.resourceAccessor,
              resourceIdAccessor = _ref2.resourceIdAccessor,
              resourceTitleAccessor = _ref2.resourceTitleAccessor,
              eventPropGetter = _ref2.eventPropGetter,
              backgroundEventPropGetter = _ref2.backgroundEventPropGetter,
              slotPropGetter = _ref2.slotPropGetter,
              slotGroupPropGetter = _ref2.slotGroupPropGetter,
              dayPropGetter = _ref2.dayPropGetter,
              view = _ref2.view,
              views = _ref2.views,
              localizer = _ref2.localizer,
              culture = _ref2.culture,
              _ref2$messages = _ref2.messages,
              messages$1 = _ref2$messages === void 0 ? {} : _ref2$messages,
              _ref2$components = _ref2.components,
              components = _ref2$components === void 0 ? {} : _ref2$components,
              _ref2$formats = _ref2.formats,
              formats = _ref2$formats === void 0 ? {} : _ref2$formats
            var names = viewNames(views)
            var msgs = messages(messages$1)
            return {
              viewNames: names,
              localizer: mergeWithDefaults(localizer, culture, formats, msgs),
              getters: {
                eventProp: function eventProp() {
                  return (
                    (eventPropGetter &&
                      eventPropGetter.apply(void 0, arguments)) ||
                    {}
                  )
                },
                backgroundEventProp: function backgroundEventProp() {
                  return (
                    (backgroundEventPropGetter &&
                      backgroundEventPropGetter.apply(void 0, arguments)) ||
                    {}
                  )
                },
                slotProp: function slotProp() {
                  return (
                    (slotPropGetter &&
                      slotPropGetter.apply(void 0, arguments)) ||
                    {}
                  )
                },
                slotGroupProp: function slotGroupProp() {
                  return (
                    (slotGroupPropGetter &&
                      slotGroupPropGetter.apply(void 0, arguments)) ||
                    {}
                  )
                },
                dayProp: function dayProp() {
                  return (
                    (dayPropGetter && dayPropGetter.apply(void 0, arguments)) ||
                    {}
                  )
                },
              },
              components: defaults_1(
                components[view] || {},
                omit_1(components, names),
                {
                  eventWrapper: NoopWrapper,
                  backgroundEventWrapper: NoopWrapper,
                  eventContainerWrapper: NoopWrapper,
                  dateCellWrapper: NoopWrapper,
                  weekWrapper: NoopWrapper,
                  timeSlotWrapper: NoopWrapper,
                  timeGutterWrapper: NoopWrapper,
                  slotChildrenWrapper: function slotChildrenWrapper() {
                    return /*#__PURE__*/ React.createElement(
                      React.Fragment,
                      null
                    )
                  },
                }
              ),
              accessors: {
                start: wrapAccessor(startAccessor),
                end: wrapAccessor(endAccessor),
                allDay: wrapAccessor(allDayAccessor),
                tooltip: wrapAccessor(tooltipAccessor),
                title: wrapAccessor(titleAccessor),
                resource: wrapAccessor(resourceAccessor),
                resourceId: wrapAccessor(resourceIdAccessor),
                resourceTitle: wrapAccessor(resourceTitleAccessor),
              },
            }
          },
        },
      ]
    )
    return Calendar
  })(React.Component)
  Calendar.defaultProps = {
    events: [],
    backgroundEvents: [],
    elementProps: {},
    popup: false,
    toolbar: true,
    view: views.MONTH,
    views: [views.MONTH, views.WEEK, views.DAY, views.AGENDA],
    step: 30,
    length: 30,
    allDayMaxRows: Infinity,
    doShowMoreDrillDown: true,
    drilldownView: views.DAY,
    titleAccessor: 'title',
    tooltipAccessor: 'title',
    allDayAccessor: 'allDay',
    startAccessor: 'start',
    endAccessor: 'end',
    resourceAccessor: 'resourceId',
    resourceIdAccessor: 'id',
    resourceTitleAccessor: 'title',
    longPressThreshold: 250,
    getNow: function getNow() {
      return new Date()
    },
    dayLayoutAlgorithm: 'overlap',
  }
  var Calendar$1 = uncontrollable(Calendar, {
    view: 'onView',
    date: 'onNavigate',
    selected: 'onSelectEvent',
  })

  var weekRangeFormat$5 = function weekRangeFormat(_ref, culture, local) {
    var start = _ref.start,
      end = _ref.end
    return (
      local.format(start, 'MMMM DD', culture) +
      ' – ' +
      // updated to use this localizer 'eq()' method
      local.format(
        end,
        local.eq(start, end, 'month') ? 'DD' : 'MMMM DD',
        culture
      )
    )
  }
  var dateRangeFormat$5 = function dateRangeFormat(_ref2, culture, local) {
    var start = _ref2.start,
      end = _ref2.end
    return (
      local.format(start, 'L', culture) +
      ' – ' +
      local.format(end, 'L', culture)
    )
  }
  var timeRangeFormat$5 = function timeRangeFormat(_ref3, culture, local) {
    var start = _ref3.start,
      end = _ref3.end
    return (
      local.format(start, 'LT', culture) +
      ' – ' +
      local.format(end, 'LT', culture)
    )
  }
  var timeRangeStartFormat$5 = function timeRangeStartFormat(
    _ref4,
    culture,
    local
  ) {
    var start = _ref4.start
    return local.format(start, 'LT', culture) + ' – '
  }
  var timeRangeEndFormat$5 = function timeRangeEndFormat(
    _ref5,
    culture,
    local
  ) {
    var end = _ref5.end
    return ' – ' + local.format(end, 'LT', culture)
  }
  var formats$5 = {
    dateFormat: 'DD',
    dayFormat: 'DD ddd',
    weekdayFormat: 'ddd',
    selectRangeFormat: timeRangeFormat$5,
    eventTimeRangeFormat: timeRangeFormat$5,
    eventTimeRangeStartFormat: timeRangeStartFormat$5,
    eventTimeRangeEndFormat: timeRangeEndFormat$5,
    timeGutterFormat: 'LT',
    monthHeaderFormat: 'MMMM YYYY',
    dayHeaderFormat: 'dddd MMM DD',
    dayRangeHeaderFormat: weekRangeFormat$5,
    agendaHeaderFormat: dateRangeFormat$5,
    agendaDateFormat: 'ddd MMM DD',
    agendaTimeFormat: 'LT',
    agendaTimeRangeFormat: timeRangeFormat$5,
  }
  function fixUnit$2(unit) {
    var datePart = unit ? unit.toLowerCase() : unit
    if (datePart === 'FullYear') {
      datePart = 'year'
    } else if (!datePart) {
      datePart = undefined
    }
    return datePart
  }
  function moment(moment) {
    var locale = function locale(m, c) {
      return c ? m.locale(c) : m
    }
    function getTimezoneOffset(date) {
      // ensures this gets cast to timezone
      return moment(date).toDate().getTimezoneOffset()
    }
    function getDstOffset(start, end) {
      var _st$_z$name, _st$_z
      // convert to moment, in case
      // Calculate the offset in the timezone of the Events (local)
      // not in the timezone of the calendar (moment.tz)
      var st = moment(start).local()
      var ed = moment(end).local()
      // if not using moment timezone
      if (!moment.tz) {
        return st.toDate().getTimezoneOffset() - ed.toDate().getTimezoneOffset()
      }
      /**
       * If using moment-timezone, and a timezone has been applied, then
       * use this to get the proper timezone offset, otherwise default
       * the timezone to the browser local
       */
      var tzName =
        (_st$_z$name =
          st === null || st === void 0
            ? void 0
            : (_st$_z = st._z) === null || _st$_z === void 0
            ? void 0
            : _st$_z.name) !== null && _st$_z$name !== void 0
          ? _st$_z$name
          : moment.tz.guess()
      var startOffset = moment.tz.zone(tzName).utcOffset(+st)
      var endOffset = moment.tz.zone(tzName).utcOffset(+ed)
      return startOffset - endOffset
    }
    function getDayStartDstOffset(start) {
      var dayStart = moment(start).startOf('day')
      return getDstOffset(dayStart, start)
    }

    /*** BEGIN localized date arithmetic methods with moment ***/
    function defineComparators(a, b, unit) {
      var datePart = fixUnit$2(unit)
      var dtA = datePart ? moment(a).startOf(datePart) : moment(a)
      var dtB = datePart ? moment(b).startOf(datePart) : moment(b)
      return [dtA, dtB, datePart]
    }
    function startOf() {
      var date =
        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null
      var unit = arguments.length > 1 ? arguments[1] : undefined
      var datePart = fixUnit$2(unit)
      if (datePart) {
        return moment(date).startOf(datePart).toDate()
      }
      return moment(date).toDate()
    }
    function endOf() {
      var date =
        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null
      var unit = arguments.length > 1 ? arguments[1] : undefined
      var datePart = fixUnit$2(unit)
      if (datePart) {
        return moment(date).endOf(datePart).toDate()
      }
      return moment(date).toDate()
    }

    // moment comparison operations *always* convert both sides to moment objects
    // prior to running the comparisons
    function eq(a, b, unit) {
      var _defineComparators = defineComparators(a, b, unit),
        _defineComparators2 = _slicedToArray(_defineComparators, 3),
        dtA = _defineComparators2[0],
        dtB = _defineComparators2[1],
        datePart = _defineComparators2[2]
      return dtA.isSame(dtB, datePart)
    }
    function neq(a, b, unit) {
      return !eq(a, b, unit)
    }
    function gt(a, b, unit) {
      var _defineComparators3 = defineComparators(a, b, unit),
        _defineComparators4 = _slicedToArray(_defineComparators3, 3),
        dtA = _defineComparators4[0],
        dtB = _defineComparators4[1],
        datePart = _defineComparators4[2]
      return dtA.isAfter(dtB, datePart)
    }
    function lt(a, b, unit) {
      var _defineComparators5 = defineComparators(a, b, unit),
        _defineComparators6 = _slicedToArray(_defineComparators5, 3),
        dtA = _defineComparators6[0],
        dtB = _defineComparators6[1],
        datePart = _defineComparators6[2]
      return dtA.isBefore(dtB, datePart)
    }
    function gte(a, b, unit) {
      var _defineComparators7 = defineComparators(a, b, unit),
        _defineComparators8 = _slicedToArray(_defineComparators7, 3),
        dtA = _defineComparators8[0],
        dtB = _defineComparators8[1],
        datePart = _defineComparators8[2]
      return dtA.isSameOrBefore(dtB, datePart)
    }
    function lte(a, b, unit) {
      var _defineComparators9 = defineComparators(a, b, unit),
        _defineComparators10 = _slicedToArray(_defineComparators9, 3),
        dtA = _defineComparators10[0],
        dtB = _defineComparators10[1],
        datePart = _defineComparators10[2]
      return dtA.isSameOrBefore(dtB, datePart)
    }
    function inRange(day, min, max) {
      var unit =
        arguments.length > 3 && arguments[3] !== undefined
          ? arguments[3]
          : 'day'
      var datePart = fixUnit$2(unit)
      var mDay = moment(day)
      var mMin = moment(min)
      var mMax = moment(max)
      return mDay.isBetween(mMin, mMax, datePart, '[]')
    }
    function min(dateA, dateB) {
      var dtA = moment(dateA)
      var dtB = moment(dateB)
      var minDt = moment.min(dtA, dtB)
      return minDt.toDate()
    }
    function max(dateA, dateB) {
      var dtA = moment(dateA)
      var dtB = moment(dateB)
      var maxDt = moment.max(dtA, dtB)
      return maxDt.toDate()
    }
    function merge(date, time) {
      if (!date && !time) return null
      var tm = moment(time).format('HH:mm:ss')
      var dt = moment(date).startOf('day').format('MM/DD/YYYY')
      // We do it this way to avoid issues when timezone switching
      return moment(
        ''.concat(dt, ' ').concat(tm),
        'MM/DD/YYYY HH:mm:ss'
      ).toDate()
    }
    function add(date, adder, unit) {
      var datePart = fixUnit$2(unit)
      return moment(date).add(adder, datePart).toDate()
    }
    function range(start, end) {
      var unit =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : 'day'
      var datePart = fixUnit$2(unit)
      // because the add method will put these in tz, we have to start that way
      var current = moment(start).toDate()
      var days = []
      while (lte(current, end)) {
        days.push(current)
        current = add(current, 1, datePart)
      }
      return days
    }
    function ceil(date, unit) {
      var datePart = fixUnit$2(unit)
      var floor = startOf(date, datePart)
      return eq(floor, date) ? floor : add(floor, 1, datePart)
    }
    function diff(a, b) {
      var unit =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : 'day'
      var datePart = fixUnit$2(unit)
      // don't use 'defineComparators' here, as we don't want to mutate the values
      var dtA = moment(a)
      var dtB = moment(b)
      return dtB.diff(dtA, datePart)
    }
    function minutes(date) {
      var dt = moment(date)
      return dt.minutes()
    }
    function firstOfWeek(culture) {
      var data = culture ? moment.localeData(culture) : moment.localeData()
      return data ? data.firstDayOfWeek() : 0
    }
    function firstVisibleDay(date) {
      return moment(date).startOf('month').startOf('week').toDate()
    }
    function lastVisibleDay(date) {
      return moment(date).endOf('month').endOf('week').toDate()
    }
    function visibleDays(date) {
      var current = firstVisibleDay(date)
      var last = lastVisibleDay(date)
      var days = []
      while (lte(current, last)) {
        days.push(current)
        current = add(current, 1, 'd')
      }
      return days
    }
    /*** END localized date arithmetic methods with moment ***/

    /**
     * Moved from TimeSlots.js, this method overrides the method of the same name
     * in the localizer.js, using moment to construct the js Date
     * @param {Date} dt - date to start with
     * @param {Number} minutesFromMidnight
     * @param {Number} offset
     * @returns {Date}
     */
    function getSlotDate(dt, minutesFromMidnight, offset) {
      return moment(dt)
        .startOf('day')
        .minute(minutesFromMidnight + offset)
        .toDate()
    }

    // moment will automatically handle DST differences in it's calculations
    function getTotalMin(start, end) {
      return diff(start, end, 'minutes')
    }
    function getMinutesFromMidnight(start) {
      var dayStart = moment(start).startOf('day')
      var day = moment(start)
      return day.diff(dayStart, 'minutes') + getDayStartDstOffset(start)
    }

    // These two are used by DateSlotMetrics
    function continuesPrior(start, first) {
      var mStart = moment(start)
      var mFirst = moment(first)
      return mStart.isBefore(mFirst, 'day')
    }
    function continuesAfter(start, end, last) {
      var mEnd = moment(end)
      var mLast = moment(last)
      return mEnd.isSameOrAfter(mLast, 'minutes')
    }

    // These two are used by eventLevels
    function sortEvents(_ref6) {
      var _ref6$evtA = _ref6.evtA,
        aStart = _ref6$evtA.start,
        aEnd = _ref6$evtA.end,
        aAllDay = _ref6$evtA.allDay,
        _ref6$evtB = _ref6.evtB,
        bStart = _ref6$evtB.start,
        bEnd = _ref6$evtB.end,
        bAllDay = _ref6$evtB.allDay
      var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day')
      var durA = diff(aStart, ceil(aEnd, 'day'), 'day')
      var durB = diff(bStart, ceil(bEnd, 'day'), 'day')
      return (
        startSort ||
        // sort by start Day first
        Math.max(durB, 1) - Math.max(durA, 1) ||
        // events spanning multiple days go first
        !!bAllDay - !!aAllDay ||
        // then allDay single day events
        +aStart - +bStart ||
        // then sort by start time *don't need moment conversion here
        +aEnd - +bEnd // then sort by end time *don't need moment conversion here either
      )
    }

    function inEventRange(_ref7) {
      var _ref7$event = _ref7.event,
        start = _ref7$event.start,
        end = _ref7$event.end,
        _ref7$range = _ref7.range,
        rangeStart = _ref7$range.start,
        rangeEnd = _ref7$range.end
      var startOfDay = moment(start).startOf('day')
      var eEnd = moment(end)
      var rStart = moment(rangeStart)
      var rEnd = moment(rangeEnd)
      var startsBeforeEnd = startOfDay.isSameOrBefore(rEnd, 'day')
      // when the event is zero duration we need to handle a bit differently
      var sameMin = !startOfDay.isSame(eEnd, 'minutes')
      var endsAfterStart = sameMin
        ? eEnd.isAfter(rStart, 'minutes')
        : eEnd.isSameOrAfter(rStart, 'minutes')
      return startsBeforeEnd && endsAfterStart
    }
    function isSameDate(date1, date2) {
      var dt = moment(date1)
      var dt2 = moment(date2)
      return dt.isSame(dt2, 'day')
    }

    /**
     * This method, called once in the localizer constructor, is used by eventLevels
     * 'eventSegments()' to assist in determining the 'span' of the event in the display,
     * specifically when using a timezone that is greater than the browser native timezone.
     * @returns number
     */
    function browserTZOffset() {
      /**
       * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from
       * what you see in it's string, so we have to jump through some hoops to get a value
       * we can actually compare.
       */
      var dt = new Date()
      var neg = /-/.test(dt.toString()) ? '-' : ''
      var dtOffset = dt.getTimezoneOffset()
      var comparator = Number(''.concat(neg).concat(Math.abs(dtOffset)))
      // moment correctly provides positive/negative offset, as expected
      var mtOffset = moment().utcOffset()
      return mtOffset > comparator ? 1 : 0
    }
    return new DateLocalizer({
      formats: formats$5,
      firstOfWeek: firstOfWeek,
      firstVisibleDay: firstVisibleDay,
      lastVisibleDay: lastVisibleDay,
      visibleDays: visibleDays,
      format: function format(value, _format, culture) {
        return locale(moment(value), culture).format(_format)
      },
      lt: lt,
      lte: lte,
      gt: gt,
      gte: gte,
      eq: eq,
      neq: neq,
      merge: merge,
      inRange: inRange,
      startOf: startOf,
      endOf: endOf,
      range: range,
      add: add,
      diff: diff,
      ceil: ceil,
      min: min,
      max: max,
      minutes: minutes,
      getSlotDate: getSlotDate,
      getTimezoneOffset: getTimezoneOffset,
      getDstOffset: getDstOffset,
      getTotalMin: getTotalMin,
      getMinutesFromMidnight: getMinutesFromMidnight,
      continuesPrior: continuesPrior,
      continuesAfter: continuesAfter,
      sortEvents: sortEvents,
      inEventRange: inEventRange,
      isSameDate: isSameDate,
      browserTZOffset: browserTZOffset,
    })
  }

  function pluralizeUnit(unit) {
    return /s$/.test(unit) ? unit : unit + 's'
  }
  var weekRangeFormat$4 = function weekRangeFormat(_ref, culture, local) {
    var start = _ref.start,
      end = _ref.end
    return (
      local.format(start, 'MMMM dd', culture) +
      ' – ' +
      // updated to use this localizer 'eq()' method
      local.format(
        end,
        local.eq(start, end, 'month') ? 'dd' : 'MMMM dd',
        culture
      )
    )
  }
  var dateRangeFormat$4 = function dateRangeFormat(_ref2, culture, local) {
    var start = _ref2.start,
      end = _ref2.end
    return (
      local.format(start, 'D', culture) +
      ' – ' +
      local.format(end, 'D', culture)
    )
  }
  var timeRangeFormat$4 = function timeRangeFormat(_ref3, culture, local) {
    var start = _ref3.start,
      end = _ref3.end
    return (
      local.format(start, 't', culture) +
      ' – ' +
      local.format(end, 't', culture)
    )
  }
  var timeRangeStartFormat$4 = function timeRangeStartFormat(
    _ref4,
    culture,
    local
  ) {
    var start = _ref4.start
    return local.format(start, 't', culture) + ' – '
  }
  var timeRangeEndFormat$4 = function timeRangeEndFormat(
    _ref5,
    culture,
    local
  ) {
    var end = _ref5.end
    return ' – ' + local.format(end, 't', culture)
  }
  var formats$4 = {
    dateFormat: 'dd',
    dayFormat: 'dd EEE',
    weekdayFormat: 'EEE',
    selectRangeFormat: timeRangeFormat$4,
    eventTimeRangeFormat: timeRangeFormat$4,
    eventTimeRangeStartFormat: timeRangeStartFormat$4,
    eventTimeRangeEndFormat: timeRangeEndFormat$4,
    timeGutterFormat: 't',
    monthHeaderFormat: 'MMMM yyyy',
    dayHeaderFormat: 'EEEE MMM dd',
    dayRangeHeaderFormat: weekRangeFormat$4,
    agendaHeaderFormat: dateRangeFormat$4,
    agendaDateFormat: 'EEE MMM dd',
    agendaTimeFormat: 't',
    agendaTimeRangeFormat: timeRangeFormat$4,
  }
  function fixUnit$1(unit) {
    var datePart = unit ? pluralizeUnit(unit.toLowerCase()) : unit
    if (datePart === 'FullYear') {
      datePart = 'year'
    } else if (!datePart) {
      datePart = undefined
    }
    return datePart
  }

  // Luxon does not currently have weekInfo by culture
  // Luxon uses 1 based values for month and weekday
  // So we default to Sunday (7)
  function luxon(DateTime) {
    var _ref6 =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref6$firstDayOfWeek = _ref6.firstDayOfWeek,
      firstDayOfWeek =
        _ref6$firstDayOfWeek === void 0 ? 7 : _ref6$firstDayOfWeek
    function formatDate(value, format) {
      return DateTime.fromJSDate(value).toFormat(format)
    }
    function formatDateWithCulture(value, culture, format) {
      return DateTime.fromJSDate(value).setLocale(culture).toFormat(format)
    }

    /*** BEGIN localized date arithmetic methods with Luxon ***/
    function defineComparators(a, b, unit) {
      var datePart = fixUnit$1(unit)
      var dtA = datePart
        ? DateTime.fromJSDate(a).startOf(datePart)
        : DateTime.fromJSDate(a)
      var dtB = datePart
        ? DateTime.fromJSDate(b).startOf(datePart)
        : DateTime.fromJSDate(b)
      return [dtA, dtB, datePart]
    }

    // Since Luxon (and current Intl API) has no support
    // for culture based weekInfo, we need to handle
    // the start of the week differently
    // depending on locale, the firstDayOfWeek could also be Saturday, Sunday or Monday
    function startOfDTWeek(dtObj) {
      var weekday = dtObj.weekday
      if (weekday === firstDayOfWeek) {
        return dtObj.startOf('day') // already beginning of week
      } else if (firstDayOfWeek === 1) {
        return dtObj.startOf('week') // fow is Monday, which is Luxon default
      }

      var diff = firstDayOfWeek === 7 ? weekday : weekday + (7 - firstDayOfWeek)
      return dtObj
        .minus({
          day: diff,
        })
        .startOf('day')
    }
    function endOfDTWeek(dtObj) {
      var weekday = dtObj.weekday
      var eow = firstDayOfWeek === 1 ? 7 : firstDayOfWeek - 1
      if (weekday === eow) {
        return dtObj.endOf('day') // already last day of the week
      } else if (firstDayOfWeek === 1) {
        return dtObj.endOf('week') // use Luxon default (Sunday)
      }

      var fromDate =
        firstDayOfWeek > eow
          ? dtObj.plus({
              day: firstDayOfWeek - eow,
            })
          : dtObj
      return fromDate
        .set({
          weekday: eow,
        })
        .endOf('day')
    }

    // This returns a DateTime instance
    function startOfDT() {
      var date =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : new Date()
      var unit = arguments.length > 1 ? arguments[1] : undefined
      var datePart = fixUnit$1(unit)
      if (datePart) {
        var dt = DateTime.fromJSDate(date)
        return datePart.includes('week')
          ? startOfDTWeek(dt)
          : dt.startOf(datePart)
      }
      return DateTime.fromJSDate(date)
    }
    function firstOfWeek() {
      return firstDayOfWeek
    }

    // This returns a JS Date from a DateTime instance
    function startOf() {
      var date =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : new Date()
      var unit = arguments.length > 1 ? arguments[1] : undefined
      return startOfDT(date, unit).toJSDate()
    }

    // This returns a DateTime instance
    function endOfDT() {
      var date =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : new Date()
      var unit = arguments.length > 1 ? arguments[1] : undefined
      var datePart = fixUnit$1(unit)
      if (datePart) {
        var dt = DateTime.fromJSDate(date)
        return datePart.includes('week') ? endOfDTWeek(dt) : dt.endOf(datePart)
      }
      return DateTime.fromJSDate(date)
    }
    function endOf() {
      var date =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : new Date()
      var unit = arguments.length > 1 ? arguments[1] : undefined
      return endOfDT(date, unit).toJSDate()
    }
    function eq(a, b, unit) {
      var _defineComparators = defineComparators(a, b, unit),
        _defineComparators2 = _slicedToArray(_defineComparators, 2),
        dtA = _defineComparators2[0],
        dtB = _defineComparators2[1]
      return +dtA == +dtB
    }
    function neq(a, b, unit) {
      return !eq(a, b, unit)
    }
    function gt(a, b, unit) {
      var _defineComparators3 = defineComparators(a, b, unit),
        _defineComparators4 = _slicedToArray(_defineComparators3, 2),
        dtA = _defineComparators4[0],
        dtB = _defineComparators4[1]
      return +dtA > +dtB
    }
    function lt(a, b, unit) {
      var _defineComparators5 = defineComparators(a, b, unit),
        _defineComparators6 = _slicedToArray(_defineComparators5, 2),
        dtA = _defineComparators6[0],
        dtB = _defineComparators6[1]
      return +dtA < +dtB
    }
    function gte(a, b, unit) {
      var _defineComparators7 = defineComparators(a, b, unit),
        _defineComparators8 = _slicedToArray(_defineComparators7, 2),
        dtA = _defineComparators8[0],
        dtB = _defineComparators8[1]
      return +dtA >= +dtB
    }
    function lte(a, b, unit) {
      var _defineComparators9 = defineComparators(a, b, unit),
        _defineComparators10 = _slicedToArray(_defineComparators9, 2),
        dtA = _defineComparators10[0],
        dtB = _defineComparators10[1]
      return +dtA <= +dtB
    }
    function inRange(day, min, max) {
      var unit =
        arguments.length > 3 && arguments[3] !== undefined
          ? arguments[3]
          : 'day'
      var datePart = fixUnit$1(unit)
      var mDay = startOfDT(day, datePart)
      var mMin = startOfDT(min, datePart)
      var mMax = startOfDT(max, datePart)
      return +mDay >= +mMin && +mDay <= +mMax
    }
    function min(dateA, dateB) {
      var dtA = DateTime.fromJSDate(dateA)
      var dtB = DateTime.fromJSDate(dateB)
      var minDt = DateTime.min(dtA, dtB)
      return minDt.toJSDate()
    }
    function max(dateA, dateB) {
      var dtA = DateTime.fromJSDate(dateA)
      var dtB = DateTime.fromJSDate(dateB)
      var maxDt = DateTime.max(dtA, dtB)
      return maxDt.toJSDate()
    }
    function merge(date, time) {
      if (!date && !time) return null
      var tm = DateTime.fromJSDate(time)
      var dt = startOfDT(date, 'day')
      return dt
        .set({
          hour: tm.hour,
          minute: tm.minute,
          second: tm.second,
          millisecond: tm.millisecond,
        })
        .toJSDate()
    }
    function add(date, adder, unit) {
      var datePart = fixUnit$1(unit)
      return DateTime.fromJSDate(date)
        .plus(_defineProperty$1({}, datePart, adder))
        .toJSDate()
    }
    function range(start, end) {
      var unit =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : 'day'
      var datePart = fixUnit$1(unit)
      var current = DateTime.fromJSDate(start).toJSDate() // this is to get it to tz
      var days = []
      while (lte(current, end)) {
        days.push(current)
        current = add(current, 1, datePart)
      }
      return days
    }
    function ceil(date, unit) {
      var datePart = fixUnit$1(unit)
      var floor = startOf(date, datePart)
      return eq(floor, date) ? floor : add(floor, 1, datePart)
    }
    function diff(a, b) {
      var unit =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : 'day'
      var datePart = fixUnit$1(unit)
      // don't use 'defineComparators' here, as we don't want to mutate the values
      var dtA = DateTime.fromJSDate(a)
      var dtB = DateTime.fromJSDate(b)
      return Math.floor(
        dtB
          .diff(dtA, datePart, {
            conversionAccuracy: 'longterm',
          })
          .toObject()[datePart]
      )
    }
    function firstVisibleDay(date) {
      var startOfMonth = startOfDT(date, 'month')
      return startOfDTWeek(startOfMonth).toJSDate()
    }
    function lastVisibleDay(date) {
      var endOfMonth = endOfDT(date, 'month')
      return endOfDTWeek(endOfMonth).toJSDate()
    }
    function visibleDays(date) {
      var current = firstVisibleDay(date)
      var last = lastVisibleDay(date)
      var days = []
      while (lte(current, last)) {
        days.push(current)
        current = add(current, 1, 'day')
      }
      return days
    }
    /*** END localized date arithmetic methods with moment ***/

    /**
     * Moved from TimeSlots.js, this method overrides the method of the same name
     * in the localizer.js, using moment to construct the js Date
     * @param {Date} dt - date to start with
     * @param {Number} minutesFromMidnight
     * @param {Number} offset
     * @returns {Date}
     */
    function getSlotDate(dt, minutesFromMidnight, offset) {
      return startOfDT(dt, 'day')
        .set({
          minutes: minutesFromMidnight + offset,
        })
        .toJSDate()
    }

    // Luxon will automatically handle DST differences in it's calculations
    function getTotalMin(start, end) {
      return diff(start, end, 'minutes')
    }
    function getMinutesFromMidnight(start) {
      var dayStart = startOfDT(start, 'day')
      var day = DateTime.fromJSDate(start)
      return Math.round(
        day
          .diff(dayStart, 'minutes', {
            conversionAccuracy: 'longterm',
          })
          .toObject().minutes
      )
    }

    // These two are used by DateSlotMetrics
    function continuesPrior(start, first) {
      return lt(start, first)
    }
    function continuesAfter(start, end, last) {
      return gte(end, last)
    }

    // These two are used by eventLevels
    function sortEvents(_ref7) {
      var _ref7$evtA = _ref7.evtA,
        aStart = _ref7$evtA.start,
        aEnd = _ref7$evtA.end,
        aAllDay = _ref7$evtA.allDay,
        _ref7$evtB = _ref7.evtB,
        bStart = _ref7$evtB.start,
        bEnd = _ref7$evtB.end,
        bAllDay = _ref7$evtB.allDay
      var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day')
      var durA = diff(aStart, ceil(aEnd, 'day'), 'day')
      var durB = diff(bStart, ceil(bEnd, 'day'), 'day')
      return (
        startSort ||
        // sort by start Day first
        Math.max(durB, 1) - Math.max(durA, 1) ||
        // events spanning multiple days go first
        !!bAllDay - !!aAllDay ||
        // then allDay single day events
        +aStart - +bStart ||
        // then sort by start time *don't need moment conversion here
        +aEnd - +bEnd // then sort by end time *don't need moment conversion here either
      )
    }

    function inEventRange(_ref8) {
      var _ref8$event = _ref8.event,
        start = _ref8$event.start,
        end = _ref8$event.end,
        _ref8$range = _ref8.range,
        rangeStart = _ref8$range.start,
        rangeEnd = _ref8$range.end
      var eStart = startOf(start, 'day')
      var startsBeforeEnd = lte(eStart, rangeEnd, 'day')
      // when the event is zero duration we need to handle a bit differently
      var sameMin = neq(eStart, end, 'minutes')
      var endsAfterStart = sameMin
        ? gt(end, rangeStart, 'minutes')
        : gte(end, rangeStart, 'minutes')
      return startsBeforeEnd && endsAfterStart
    }

    // moment treats 'day' and 'date' equality very different
    // moment(date1).isSame(date2, 'day') would test that they were both the same day of the week
    // moment(date1).isSame(date2, 'date') would test that they were both the same date of the month of the year
    function isSameDate(date1, date2) {
      var dt = DateTime.fromJSDate(date1)
      var dt2 = DateTime.fromJSDate(date2)
      return dt.hasSame(dt2, 'day')
    }

    /**
     * This method, called once in the localizer constructor, is used by eventLevels
     * 'eventSegments()' to assist in determining the 'span' of the event in the display,
     * specifically when using a timezone that is greater than the browser native timezone.
     * @returns number
     */
    function browserTZOffset() {
      /**
       * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from
       * what you see in it's string, so we have to jump through some hoops to get a value
       * we can actually compare.
       */
      var dt = new Date()
      var neg = /-/.test(dt.toString()) ? '-' : ''
      var dtOffset = dt.getTimezoneOffset()
      var comparator = Number(''.concat(neg).concat(Math.abs(dtOffset)))
      // moment correctly provides positive/negative offset, as expected
      var mtOffset = DateTime.local().offset
      return mtOffset > comparator ? 1 : 0
    }
    return new DateLocalizer({
      format: function format(value, _format, culture) {
        if (culture) {
          return formatDateWithCulture(value, culture, _format)
        }
        return formatDate(value, _format)
      },
      formats: formats$4,
      firstOfWeek: firstOfWeek,
      firstVisibleDay: firstVisibleDay,
      lastVisibleDay: lastVisibleDay,
      visibleDays: visibleDays,
      lt: lt,
      lte: lte,
      gt: gt,
      gte: gte,
      eq: eq,
      neq: neq,
      merge: merge,
      inRange: inRange,
      startOf: startOf,
      endOf: endOf,
      range: range,
      add: add,
      diff: diff,
      ceil: ceil,
      min: min,
      max: max,
      getSlotDate: getSlotDate,
      getTotalMin: getTotalMin,
      getMinutesFromMidnight: getMinutesFromMidnight,
      continuesPrior: continuesPrior,
      continuesAfter: continuesAfter,
      sortEvents: sortEvents,
      inEventRange: inEventRange,
      isSameDate: isSameDate,
      browserTZOffset: browserTZOffset,
    })
  }

  var dateRangeFormat$3 = function dateRangeFormat(_ref, culture, local) {
    var start = _ref.start,
      end = _ref.end
    return (
      local.format(start, 'd', culture) +
      ' – ' +
      local.format(end, 'd', culture)
    )
  }
  var timeRangeFormat$3 = function timeRangeFormat(_ref2, culture, local) {
    var start = _ref2.start,
      end = _ref2.end
    return (
      local.format(start, 't', culture) +
      ' – ' +
      local.format(end, 't', culture)
    )
  }
  var timeRangeStartFormat$3 = function timeRangeStartFormat(
    _ref3,
    culture,
    local
  ) {
    var start = _ref3.start
    return local.format(start, 't', culture) + ' – '
  }
  var timeRangeEndFormat$3 = function timeRangeEndFormat(
    _ref4,
    culture,
    local
  ) {
    var end = _ref4.end
    return ' – ' + local.format(end, 't', culture)
  }
  var weekRangeFormat$3 = function weekRangeFormat(_ref5, culture, local) {
    var start = _ref5.start,
      end = _ref5.end
    return (
      local.format(start, 'MMM dd', culture) +
      ' – ' +
      local.format(end, eq$6(start, end, 'month') ? 'dd' : 'MMM dd', culture)
    )
  }
  var formats$3 = {
    dateFormat: 'dd',
    dayFormat: 'ddd dd/MM',
    weekdayFormat: 'ddd',
    selectRangeFormat: timeRangeFormat$3,
    eventTimeRangeFormat: timeRangeFormat$3,
    eventTimeRangeStartFormat: timeRangeStartFormat$3,
    eventTimeRangeEndFormat: timeRangeEndFormat$3,
    timeGutterFormat: 't',
    monthHeaderFormat: 'Y',
    dayHeaderFormat: 'dddd MMM dd',
    dayRangeHeaderFormat: weekRangeFormat$3,
    agendaHeaderFormat: dateRangeFormat$3,
    agendaDateFormat: 'ddd MMM dd',
    agendaTimeFormat: 't',
    agendaTimeRangeFormat: timeRangeFormat$3,
  }
  function oldGlobalize(globalize) {
    function getCulture(culture) {
      return culture
        ? globalize.findClosestCulture(culture)
        : globalize.culture()
    }
    function firstOfWeek(culture) {
      culture = getCulture(culture)
      return (culture && culture.calendar.firstDay) || 0
    }
    return new DateLocalizer({
      firstOfWeek: firstOfWeek,
      formats: formats$3,
      format: function format(value, _format, culture) {
        return globalize.format(value, _format, culture)
      },
    })
  }

  // TODO: fix the globalizeLocalizer to work with globalize 1.x
  var dateRangeFormat$2 = function dateRangeFormat(_ref, culture, local) {
    var start = _ref.start,
      end = _ref.end
    return (
      local.format(
        start,
        {
          date: 'short',
        },
        culture
      ) +
      ' – ' +
      local.format(
        end,
        {
          date: 'short',
        },
        culture
      )
    )
  }
  var timeRangeFormat$2 = function timeRangeFormat(_ref2, culture, local) {
    var start = _ref2.start,
      end = _ref2.end
    return (
      local.format(
        start,
        {
          time: 'short',
        },
        culture
      ) +
      ' – ' +
      local.format(
        end,
        {
          time: 'short',
        },
        culture
      )
    )
  }
  var timeRangeStartFormat$2 = function timeRangeStartFormat(
    _ref3,
    culture,
    local
  ) {
    var start = _ref3.start
    return (
      local.format(
        start,
        {
          time: 'short',
        },
        culture
      ) + ' – '
    )
  }
  var timeRangeEndFormat$2 = function timeRangeEndFormat(
    _ref4,
    culture,
    local
  ) {
    var end = _ref4.end
    return (
      ' – ' +
      local.format(
        end,
        {
          time: 'short',
        },
        culture
      )
    )
  }
  var weekRangeFormat$2 = function weekRangeFormat(_ref5, culture, local) {
    var start = _ref5.start,
      end = _ref5.end
    return (
      local.format(start, 'MMM dd', culture) +
      ' – ' +
      local.format(end, eq$6(start, end, 'month') ? 'dd' : 'MMM dd', culture)
    )
  }
  var formats$2 = {
    dateFormat: 'dd',
    dayFormat: 'eee dd/MM',
    weekdayFormat: 'eee',
    selectRangeFormat: timeRangeFormat$2,
    eventTimeRangeFormat: timeRangeFormat$2,
    eventTimeRangeStartFormat: timeRangeStartFormat$2,
    eventTimeRangeEndFormat: timeRangeEndFormat$2,
    timeGutterFormat: {
      time: 'short',
    },
    monthHeaderFormat: 'MMMM yyyy',
    dayHeaderFormat: 'eeee MMM dd',
    dayRangeHeaderFormat: weekRangeFormat$2,
    agendaHeaderFormat: dateRangeFormat$2,
    agendaDateFormat: 'eee MMM dd',
    agendaTimeFormat: {
      time: 'short',
    },
    agendaTimeRangeFormat: timeRangeFormat$2,
  }
  function globalize(globalize) {
    var locale = function locale(culture) {
      return culture ? globalize(culture) : globalize
    }

    // return the first day of the week from the locale data. Defaults to 'world'
    // territory if no territory is derivable from CLDR.
    // Failing to use CLDR supplemental (not loaded?), revert to the original
    // method of getting first day of week.
    function firstOfWeek(culture) {
      try {
        var days = ['sun', 'mon', 'tue', 'wed', 'thu', 'fri', 'sat']
        var cldr = locale(culture).cldr
        var territory = cldr.attributes.territory
        var weekData = cldr.get('supplemental').weekData
        var firstDay = weekData.firstDay[territory || '001']
        return days.indexOf(firstDay)
      } catch (e) {
        {
          console.error(
            'Failed to accurately determine first day of the week.' +
              ' Is supplemental data loaded into CLDR?'
          )
        }
        // maybe cldr supplemental is not loaded? revert to original method
        var date = new Date()
        //cldr-data doesn't seem to be zero based
        var localeDay = Math.max(
          parseInt(
            locale(culture).formatDate(date, {
              raw: 'e',
            }),
            10
          ) - 1,
          0
        )
        return Math.abs(date.getDay() - localeDay)
      }
    }
    if (!globalize.load) return oldGlobalize(globalize)
    return new DateLocalizer({
      firstOfWeek: firstOfWeek,
      formats: formats$2,
      format: function format(value, _format, culture) {
        _format =
          typeof _format === 'string'
            ? {
                raw: _format,
              }
            : _format
        return locale(culture).formatDate(value, _format)
      },
    })
  }

  var dateRangeFormat$1 = function dateRangeFormat(_ref, culture, local) {
    var start = _ref.start,
      end = _ref.end
    return ''
      .concat(local.format(start, 'P', culture), ' \u2013 ')
      .concat(local.format(end, 'P', culture))
  }
  var timeRangeFormat$1 = function timeRangeFormat(_ref2, culture, local) {
    var start = _ref2.start,
      end = _ref2.end
    return ''
      .concat(local.format(start, 'p', culture), ' \u2013 ')
      .concat(local.format(end, 'p', culture))
  }
  var timeRangeStartFormat$1 = function timeRangeStartFormat(
    _ref3,
    culture,
    local
  ) {
    var start = _ref3.start
    return ''.concat(local.format(start, 'h:mma', culture), ' \u2013 ')
  }
  var timeRangeEndFormat$1 = function timeRangeEndFormat(
    _ref4,
    culture,
    local
  ) {
    var end = _ref4.end
    return ' \u2013 '.concat(local.format(end, 'h:mma', culture))
  }
  var weekRangeFormat$1 = function weekRangeFormat(_ref5, culture, local) {
    var start = _ref5.start,
      end = _ref5.end
    return ''
      .concat(local.format(start, 'MMMM dd', culture), ' \u2013 ')
      .concat(
        local.format(end, eq$6(start, end, 'month') ? 'dd' : 'MMMM dd', culture)
      )
  }
  var formats$1 = {
    dateFormat: 'dd',
    dayFormat: 'dd eee',
    weekdayFormat: 'cccc',
    selectRangeFormat: timeRangeFormat$1,
    eventTimeRangeFormat: timeRangeFormat$1,
    eventTimeRangeStartFormat: timeRangeStartFormat$1,
    eventTimeRangeEndFormat: timeRangeEndFormat$1,
    timeGutterFormat: 'p',
    monthHeaderFormat: 'MMMM yyyy',
    dayHeaderFormat: 'cccc MMM dd',
    dayRangeHeaderFormat: weekRangeFormat$1,
    agendaHeaderFormat: dateRangeFormat$1,
    agendaDateFormat: 'ccc MMM dd',
    agendaTimeFormat: 'p',
    agendaTimeRangeFormat: timeRangeFormat$1,
  }
  var dateFnsLocalizer = function dateFnsLocalizer(_ref6) {
    var startOfWeek = _ref6.startOfWeek,
      getDay = _ref6.getDay,
      _format = _ref6.format,
      locales = _ref6.locales
    return new DateLocalizer({
      formats: formats$1,
      firstOfWeek: function firstOfWeek(culture) {
        return getDay(
          startOfWeek(new Date(), {
            locale: locales[culture],
          })
        )
      },
      format: function format(value, formatString, culture) {
        return _format(new Date(value), formatString, {
          locale: locales[culture],
        })
      },
    })
  }

  var isBetweenExports = {}
  var isBetween$1 = {
    get exports() {
      return isBetweenExports
    },
    set exports(v) {
      isBetweenExports = v
    },
  }

  ;(function (module, exports) {
    !(function (e, i) {
      module.exports = i()
    })(commonjsGlobal, function () {
      return function (e, i, t) {
        i.prototype.isBetween = function (e, i, s, f) {
          var n = t(e),
            o = t(i),
            r = '(' === (f = f || '()')[0],
            u = ')' === f[1]
          return (
            ((r ? this.isAfter(n, s) : !this.isBefore(n, s)) &&
              (u ? this.isBefore(o, s) : !this.isAfter(o, s))) ||
            ((r ? this.isBefore(n, s) : !this.isAfter(n, s)) &&
              (u ? this.isAfter(o, s) : !this.isBefore(o, s)))
          )
        }
      }
    })
  })(isBetween$1)

  var isBetween = isBetweenExports

  var isSameOrAfterExports = {}
  var isSameOrAfter$1 = {
    get exports() {
      return isSameOrAfterExports
    },
    set exports(v) {
      isSameOrAfterExports = v
    },
  }

  ;(function (module, exports) {
    !(function (e, t) {
      module.exports = t()
    })(commonjsGlobal, function () {
      return function (e, t) {
        t.prototype.isSameOrAfter = function (e, t) {
          return this.isSame(e, t) || this.isAfter(e, t)
        }
      }
    })
  })(isSameOrAfter$1)

  var isSameOrAfter = isSameOrAfterExports

  var isSameOrBeforeExports = {}
  var isSameOrBefore$1 = {
    get exports() {
      return isSameOrBeforeExports
    },
    set exports(v) {
      isSameOrBeforeExports = v
    },
  }

  ;(function (module, exports) {
    !(function (e, i) {
      module.exports = i()
    })(commonjsGlobal, function () {
      return function (e, i) {
        i.prototype.isSameOrBefore = function (e, i) {
          return this.isSame(e, i) || this.isBefore(e, i)
        }
      }
    })
  })(isSameOrBefore$1)

  var isSameOrBefore = isSameOrBeforeExports

  var localeDataExports = {}
  var localeData$1 = {
    get exports() {
      return localeDataExports
    },
    set exports(v) {
      localeDataExports = v
    },
  }

  ;(function (module, exports) {
    !(function (n, e) {
      module.exports = e()
    })(commonjsGlobal, function () {
      return function (n, e, t) {
        var r = e.prototype,
          o = function (n) {
            return n && (n.indexOf ? n : n.s)
          },
          u = function (n, e, t, r, u) {
            var i = n.name ? n : n.$locale(),
              a = o(i[e]),
              s = o(i[t]),
              f =
                a ||
                s.map(function (n) {
                  return n.slice(0, r)
                })
            if (!u) return f
            var d = i.weekStart
            return f.map(function (n, e) {
              return f[(e + (d || 0)) % 7]
            })
          },
          i = function () {
            return t.Ls[t.locale()]
          },
          a = function (n, e) {
            return (
              n.formats[e] ||
              (function (n) {
                return n.replace(
                  /(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,
                  function (n, e, t) {
                    return e || t.slice(1)
                  }
                )
              })(n.formats[e.toUpperCase()])
            )
          },
          s = function () {
            var n = this
            return {
              months: function (e) {
                return e ? e.format('MMMM') : u(n, 'months')
              },
              monthsShort: function (e) {
                return e ? e.format('MMM') : u(n, 'monthsShort', 'months', 3)
              },
              firstDayOfWeek: function () {
                return n.$locale().weekStart || 0
              },
              weekdays: function (e) {
                return e ? e.format('dddd') : u(n, 'weekdays')
              },
              weekdaysMin: function (e) {
                return e ? e.format('dd') : u(n, 'weekdaysMin', 'weekdays', 2)
              },
              weekdaysShort: function (e) {
                return e
                  ? e.format('ddd')
                  : u(n, 'weekdaysShort', 'weekdays', 3)
              },
              longDateFormat: function (e) {
                return a(n.$locale(), e)
              },
              meridiem: this.$locale().meridiem,
              ordinal: this.$locale().ordinal,
            }
          }
        ;(r.localeData = function () {
          return s.bind(this)()
        }),
          (t.localeData = function () {
            var n = i()
            return {
              firstDayOfWeek: function () {
                return n.weekStart || 0
              },
              weekdays: function () {
                return t.weekdays()
              },
              weekdaysShort: function () {
                return t.weekdaysShort()
              },
              weekdaysMin: function () {
                return t.weekdaysMin()
              },
              months: function () {
                return t.months()
              },
              monthsShort: function () {
                return t.monthsShort()
              },
              longDateFormat: function (e) {
                return a(n, e)
              },
              meridiem: n.meridiem,
              ordinal: n.ordinal,
            }
          }),
          (t.months = function () {
            return u(i(), 'months')
          }),
          (t.monthsShort = function () {
            return u(i(), 'monthsShort', 'months', 3)
          }),
          (t.weekdays = function (n) {
            return u(i(), 'weekdays', null, null, n)
          }),
          (t.weekdaysShort = function (n) {
            return u(i(), 'weekdaysShort', 'weekdays', 3, n)
          }),
          (t.weekdaysMin = function (n) {
            return u(i(), 'weekdaysMin', 'weekdays', 2, n)
          })
      }
    })
  })(localeData$1)

  var localeData = localeDataExports

  var localizedFormatExports = {}
  var localizedFormat$1 = {
    get exports() {
      return localizedFormatExports
    },
    set exports(v) {
      localizedFormatExports = v
    },
  }

  ;(function (module, exports) {
    !(function (e, t) {
      module.exports = t()
    })(commonjsGlobal, function () {
      var e = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
      }
      return function (t, o, n) {
        var r = o.prototype,
          i = r.format
        ;(n.en.formats = e),
          (r.format = function (t) {
            void 0 === t && (t = 'YYYY-MM-DDTHH:mm:ssZ')
            var o = this.$locale().formats,
              n = (function (t, o) {
                return t.replace(
                  /(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g,
                  function (t, n, r) {
                    var i = r && r.toUpperCase()
                    return (
                      n ||
                      o[r] ||
                      e[r] ||
                      o[i].replace(
                        /(\[[^\]]+])|(MMMM|MM|DD|dddd)/g,
                        function (e, t, o) {
                          return t || o.slice(1)
                        }
                      )
                    )
                  }
                )
              })(t, void 0 === o ? {} : o)
            return i.call(this, n)
          })
      }
    })
  })(localizedFormat$1)

  var localizedFormat = localizedFormatExports

  var minMaxExports = {}
  var minMax$1 = {
    get exports() {
      return minMaxExports
    },
    set exports(v) {
      minMaxExports = v
    },
  }

  ;(function (module, exports) {
    !(function (e, n) {
      module.exports = n()
    })(commonjsGlobal, function () {
      return function (e, n, t) {
        var i = function (e, n) {
          if (!n || !n.length || !n[0] || (1 === n.length && !n[0].length))
            return null
          var t
          1 === n.length && n[0].length > 0 && (n = n[0])
          t = n[0]
          for (var i = 1; i < n.length; i += 1)
            (n[i].isValid() && !n[i][e](t)) || (t = n[i])
          return t
        }
        ;(t.max = function () {
          var e = [].slice.call(arguments, 0)
          return i('isAfter', e)
        }),
          (t.min = function () {
            var e = [].slice.call(arguments, 0)
            return i('isBefore', e)
          })
      }
    })
  })(minMax$1)

  var minMax = minMaxExports

  var utcExports = {}
  var utc$1 = {
    get exports() {
      return utcExports
    },
    set exports(v) {
      utcExports = v
    },
  }

  ;(function (module, exports) {
    !(function (t, i) {
      module.exports = i()
    })(commonjsGlobal, function () {
      var t = 'minute',
        i = /[+-]\d\d(?::?\d\d)?/g,
        e = /([+-]|\d\d)/g
      return function (s, f, n) {
        var u = f.prototype
        ;(n.utc = function (t) {
          var i = { date: t, utc: !0, args: arguments }
          return new f(i)
        }),
          (u.utc = function (i) {
            var e = n(this.toDate(), { locale: this.$L, utc: !0 })
            return i ? e.add(this.utcOffset(), t) : e
          }),
          (u.local = function () {
            return n(this.toDate(), { locale: this.$L, utc: !1 })
          })
        var o = u.parse
        u.parse = function (t) {
          t.utc && (this.$u = !0),
            this.$utils().u(t.$offset) || (this.$offset = t.$offset),
            o.call(this, t)
        }
        var r = u.init
        u.init = function () {
          if (this.$u) {
            var t = this.$d
            ;(this.$y = t.getUTCFullYear()),
              (this.$M = t.getUTCMonth()),
              (this.$D = t.getUTCDate()),
              (this.$W = t.getUTCDay()),
              (this.$H = t.getUTCHours()),
              (this.$m = t.getUTCMinutes()),
              (this.$s = t.getUTCSeconds()),
              (this.$ms = t.getUTCMilliseconds())
          } else r.call(this)
        }
        var a = u.utcOffset
        u.utcOffset = function (s, f) {
          var n = this.$utils().u
          if (n(s))
            return this.$u ? 0 : n(this.$offset) ? a.call(this) : this.$offset
          if (
            'string' == typeof s &&
            ((s = (function (t) {
              void 0 === t && (t = '')
              var s = t.match(i)
              if (!s) return null
              var f = ('' + s[0]).match(e) || ['-', 0, 0],
                n = f[0],
                u = 60 * +f[1] + +f[2]
              return 0 === u ? 0 : '+' === n ? u : -u
            })(s)),
            null === s)
          )
            return this
          var u = Math.abs(s) <= 16 ? 60 * s : s,
            o = this
          if (f) return (o.$offset = u), (o.$u = 0 === s), o
          if (0 !== s) {
            var r = this.$u
              ? this.toDate().getTimezoneOffset()
              : -1 * this.utcOffset()
            ;((o = this.local().add(u + r, t)).$offset = u),
              (o.$x.$localOffset = r)
          } else o = this.utc()
          return o
        }
        var h = u.format
        ;(u.format = function (t) {
          var i = t || (this.$u ? 'YYYY-MM-DDTHH:mm:ss[Z]' : '')
          return h.call(this, i)
        }),
          (u.valueOf = function () {
            var t = this.$utils().u(this.$offset)
              ? 0
              : this.$offset +
                (this.$x.$localOffset || this.$d.getTimezoneOffset())
            return this.$d.valueOf() - 6e4 * t
          }),
          (u.isUTC = function () {
            return !!this.$u
          }),
          (u.toISOString = function () {
            return this.toDate().toISOString()
          }),
          (u.toString = function () {
            return this.toDate().toUTCString()
          })
        var l = u.toDate
        u.toDate = function (t) {
          return 's' === t && this.$offset
            ? n(this.format('YYYY-MM-DD HH:mm:ss:SSS')).toDate()
            : l.call(this)
        }
        var c = u.diff
        u.diff = function (t, i, e) {
          if (t && this.$u === t.$u) return c.call(this, t, i, e)
          var s = this.local(),
            f = n(t).local()
          return c.call(s, f, i, e)
        }
      }
    })
  })(utc$1)

  var utc = utcExports

  var weekRangeFormat = function weekRangeFormat(_ref, culture, local) {
    var start = _ref.start,
      end = _ref.end
    return (
      local.format(start, 'MMMM DD', culture) +
      ' – ' +
      // updated to use this localizer 'eq()' method
      local.format(
        end,
        local.eq(start, end, 'month') ? 'DD' : 'MMMM DD',
        culture
      )
    )
  }
  var dateRangeFormat = function dateRangeFormat(_ref2, culture, local) {
    var start = _ref2.start,
      end = _ref2.end
    return (
      local.format(start, 'L', culture) +
      ' – ' +
      local.format(end, 'L', culture)
    )
  }
  var timeRangeFormat = function timeRangeFormat(_ref3, culture, local) {
    var start = _ref3.start,
      end = _ref3.end
    return (
      local.format(start, 'LT', culture) +
      ' – ' +
      local.format(end, 'LT', culture)
    )
  }
  var timeRangeStartFormat = function timeRangeStartFormat(
    _ref4,
    culture,
    local
  ) {
    var start = _ref4.start
    return local.format(start, 'LT', culture) + ' – '
  }
  var timeRangeEndFormat = function timeRangeEndFormat(_ref5, culture, local) {
    var end = _ref5.end
    return ' – ' + local.format(end, 'LT', culture)
  }
  var formats = {
    dateFormat: 'DD',
    dayFormat: 'DD ddd',
    weekdayFormat: 'ddd',
    selectRangeFormat: timeRangeFormat,
    eventTimeRangeFormat: timeRangeFormat,
    eventTimeRangeStartFormat: timeRangeStartFormat,
    eventTimeRangeEndFormat: timeRangeEndFormat,
    timeGutterFormat: 'LT',
    monthHeaderFormat: 'MMMM YYYY',
    dayHeaderFormat: 'dddd MMM DD',
    dayRangeHeaderFormat: weekRangeFormat,
    agendaHeaderFormat: dateRangeFormat,
    agendaDateFormat: 'ddd MMM DD',
    agendaTimeFormat: 'LT',
    agendaTimeRangeFormat: timeRangeFormat,
  }
  function fixUnit(unit) {
    var datePart = unit ? unit.toLowerCase() : unit
    if (datePart === 'FullYear') {
      datePart = 'year'
    } else if (!datePart) {
      datePart = undefined
    }
    return datePart
  }
  function dayjs(dayjsLib) {
    // load dayjs plugins
    dayjsLib.extend(isBetween)
    dayjsLib.extend(isSameOrAfter)
    dayjsLib.extend(isSameOrBefore)
    dayjsLib.extend(localeData)
    dayjsLib.extend(localizedFormat)
    dayjsLib.extend(minMax)
    dayjsLib.extend(utc)
    var locale = function locale(dj, c) {
      return c ? dj.locale(c) : dj
    }

    // if the timezone plugin is loaded,
    // then use the timezone aware version
    var dayjs = dayjsLib.tz ? dayjsLib.tz : dayjsLib
    function getTimezoneOffset(date) {
      // ensures this gets cast to timezone
      return dayjs(date).toDate().getTimezoneOffset()
    }
    function getDstOffset(start, end) {
      var _st$tz$$x$$timezone
      // convert to dayjs, in case
      var st = dayjs(start)
      var ed = dayjs(end)
      // if not using the dayjs timezone plugin
      if (!dayjs.tz) {
        return st.toDate().getTimezoneOffset() - ed.toDate().getTimezoneOffset()
      }
      /**
       * If a default timezone has been applied, then
       * use this to get the proper timezone offset, otherwise default
       * the timezone to the browser local
       */
      var tzName =
        (_st$tz$$x$$timezone = st.tz().$x.$timezone) !== null &&
        _st$tz$$x$$timezone !== void 0
          ? _st$tz$$x$$timezone
          : dayjsLib.tz.guess()
      // invert offsets to be inline with moment.js
      var startOffset = -dayjs.tz(+st, tzName).utcOffset()
      var endOffset = -dayjs.tz(+ed, tzName).utcOffset()
      return startOffset - endOffset
    }
    function getDayStartDstOffset(start) {
      var dayStart = dayjs(start).startOf('day')
      return getDstOffset(dayStart, start)
    }

    /*** BEGIN localized date arithmetic methods with dayjs ***/
    function defineComparators(a, b, unit) {
      var datePart = fixUnit(unit)
      var dtA = datePart ? dayjs(a).startOf(datePart) : dayjs(a)
      var dtB = datePart ? dayjs(b).startOf(datePart) : dayjs(b)
      return [dtA, dtB, datePart]
    }
    function startOf() {
      var date =
        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null
      var unit = arguments.length > 1 ? arguments[1] : undefined
      var datePart = fixUnit(unit)
      if (datePart) {
        return dayjs(date).startOf(datePart).toDate()
      }
      return dayjs(date).toDate()
    }
    function endOf() {
      var date =
        arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null
      var unit = arguments.length > 1 ? arguments[1] : undefined
      var datePart = fixUnit(unit)
      if (datePart) {
        return dayjs(date).endOf(datePart).toDate()
      }
      return dayjs(date).toDate()
    }

    // dayjs comparison operations *always* convert both sides to dayjs objects
    // prior to running the comparisons
    function eq(a, b, unit) {
      var _defineComparators = defineComparators(a, b, unit),
        _defineComparators2 = _slicedToArray(_defineComparators, 3),
        dtA = _defineComparators2[0],
        dtB = _defineComparators2[1],
        datePart = _defineComparators2[2]
      return dtA.isSame(dtB, datePart)
    }
    function neq(a, b, unit) {
      return !eq(a, b, unit)
    }
    function gt(a, b, unit) {
      var _defineComparators3 = defineComparators(a, b, unit),
        _defineComparators4 = _slicedToArray(_defineComparators3, 3),
        dtA = _defineComparators4[0],
        dtB = _defineComparators4[1],
        datePart = _defineComparators4[2]
      return dtA.isAfter(dtB, datePart)
    }
    function lt(a, b, unit) {
      var _defineComparators5 = defineComparators(a, b, unit),
        _defineComparators6 = _slicedToArray(_defineComparators5, 3),
        dtA = _defineComparators6[0],
        dtB = _defineComparators6[1],
        datePart = _defineComparators6[2]
      return dtA.isBefore(dtB, datePart)
    }
    function gte(a, b, unit) {
      var _defineComparators7 = defineComparators(a, b, unit),
        _defineComparators8 = _slicedToArray(_defineComparators7, 3),
        dtA = _defineComparators8[0],
        dtB = _defineComparators8[1],
        datePart = _defineComparators8[2]
      return dtA.isSameOrBefore(dtB, datePart)
    }
    function lte(a, b, unit) {
      var _defineComparators9 = defineComparators(a, b, unit),
        _defineComparators10 = _slicedToArray(_defineComparators9, 3),
        dtA = _defineComparators10[0],
        dtB = _defineComparators10[1],
        datePart = _defineComparators10[2]
      return dtA.isSameOrBefore(dtB, datePart)
    }
    function inRange(day, min, max) {
      var unit =
        arguments.length > 3 && arguments[3] !== undefined
          ? arguments[3]
          : 'day'
      var datePart = fixUnit(unit)
      var djDay = dayjs(day)
      var djMin = dayjs(min)
      var djMax = dayjs(max)
      return djDay.isBetween(djMin, djMax, datePart, '[]')
    }
    function min(dateA, dateB) {
      var dtA = dayjs(dateA)
      var dtB = dayjs(dateB)
      var minDt = dayjsLib.min(dtA, dtB)
      return minDt.toDate()
    }
    function max(dateA, dateB) {
      var dtA = dayjs(dateA)
      var dtB = dayjs(dateB)
      var maxDt = dayjsLib.max(dtA, dtB)
      return maxDt.toDate()
    }
    function merge(date, time) {
      if (!date && !time) return null
      var tm = dayjs(time).format('HH:mm:ss')
      var dt = dayjs(date).startOf('day').format('MM/DD/YYYY')
      // We do it this way to avoid issues when timezone switching
      return dayjsLib(
        ''.concat(dt, ' ').concat(tm),
        'MM/DD/YYYY HH:mm:ss'
      ).toDate()
    }
    function add(date, adder, unit) {
      var datePart = fixUnit(unit)
      return dayjs(date).add(adder, datePart).toDate()
    }
    function range(start, end) {
      var unit =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : 'day'
      var datePart = fixUnit(unit)
      // because the add method will put these in tz, we have to start that way
      var current = dayjs(start).toDate()
      var days = []
      while (lte(current, end)) {
        days.push(current)
        current = add(current, 1, datePart)
      }
      return days
    }
    function ceil(date, unit) {
      var datePart = fixUnit(unit)
      var floor = startOf(date, datePart)
      return eq(floor, date) ? floor : add(floor, 1, datePart)
    }
    function diff(a, b) {
      var unit =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : 'day'
      var datePart = fixUnit(unit)
      // don't use 'defineComparators' here, as we don't want to mutate the values
      var dtA = dayjs(a)
      var dtB = dayjs(b)
      return dtB.diff(dtA, datePart)
    }
    function minutes(date) {
      var dt = dayjs(date)
      return dt.minutes()
    }
    function firstOfWeek(culture) {
      var data = culture ? dayjsLib.localeData(culture) : dayjsLib.localeData()
      return data ? data.firstDayOfWeek() : 0
    }
    function firstVisibleDay(date) {
      return dayjs(date).startOf('month').startOf('week').toDate()
    }
    function lastVisibleDay(date) {
      return dayjs(date).endOf('month').endOf('week').toDate()
    }
    function visibleDays(date) {
      var current = firstVisibleDay(date)
      var last = lastVisibleDay(date)
      var days = []
      while (lte(current, last)) {
        days.push(current)
        current = add(current, 1, 'd')
      }
      return days
    }
    /*** END localized date arithmetic methods with dayjs ***/

    /**
     * Moved from TimeSlots.js, this method overrides the method of the same name
     * in the localizer.js, using dayjs to construct the js Date
     * @param {Date} dt - date to start with
     * @param {Number} minutesFromMidnight
     * @param {Number} offset
     * @returns {Date}
     */
    function getSlotDate(dt, minutesFromMidnight, offset) {
      return dayjs(dt)
        .startOf('day')
        .minute(minutesFromMidnight + offset)
        .toDate()
    }

    // dayjs will automatically handle DST differences in it's calculations
    function getTotalMin(start, end) {
      return diff(start, end, 'minutes')
    }
    function getMinutesFromMidnight(start) {
      var dayStart = dayjs(start).startOf('day')
      var day = dayjs(start)
      return day.diff(dayStart, 'minutes') + getDayStartDstOffset(start)
    }

    // These two are used by DateSlotMetrics
    function continuesPrior(start, first) {
      var djStart = dayjs(start)
      var djFirst = dayjs(first)
      return djStart.isBefore(djFirst, 'day')
    }
    function continuesAfter(start, end, last) {
      var djEnd = dayjs(end)
      var djLast = dayjs(last)
      return djEnd.isSameOrAfter(djLast, 'minutes')
    }

    // These two are used by eventLevels
    function sortEvents(_ref6) {
      var _ref6$evtA = _ref6.evtA,
        aStart = _ref6$evtA.start,
        aEnd = _ref6$evtA.end,
        aAllDay = _ref6$evtA.allDay,
        _ref6$evtB = _ref6.evtB,
        bStart = _ref6$evtB.start,
        bEnd = _ref6$evtB.end,
        bAllDay = _ref6$evtB.allDay
      var startSort = +startOf(aStart, 'day') - +startOf(bStart, 'day')
      var durA = diff(aStart, ceil(aEnd, 'day'), 'day')
      var durB = diff(bStart, ceil(bEnd, 'day'), 'day')
      return (
        startSort ||
        // sort by start Day first
        Math.max(durB, 1) - Math.max(durA, 1) ||
        // events spanning multiple days go first
        !!bAllDay - !!aAllDay ||
        // then allDay single day events
        +aStart - +bStart ||
        // then sort by start time *don't need dayjs conversion here
        +aEnd - +bEnd // then sort by end time *don't need dayjs conversion here either
      )
    }

    function inEventRange(_ref7) {
      var _ref7$event = _ref7.event,
        start = _ref7$event.start,
        end = _ref7$event.end,
        _ref7$range = _ref7.range,
        rangeStart = _ref7$range.start,
        rangeEnd = _ref7$range.end
      var startOfDay = dayjs(start).startOf('day')
      var eEnd = dayjs(end)
      var rStart = dayjs(rangeStart)
      var rEnd = dayjs(rangeEnd)
      var startsBeforeEnd = startOfDay.isSameOrBefore(rEnd, 'day')
      // when the event is zero duration we need to handle a bit differently
      var sameMin = !startOfDay.isSame(eEnd, 'minutes')
      var endsAfterStart = sameMin
        ? eEnd.isAfter(rStart, 'minutes')
        : eEnd.isSameOrAfter(rStart, 'minutes')
      return startsBeforeEnd && endsAfterStart
    }
    function isSameDate(date1, date2) {
      var dt = dayjs(date1)
      var dt2 = dayjs(date2)
      return dt.isSame(dt2, 'day')
    }

    /**
     * This method, called once in the localizer constructor, is used by eventLevels
     * 'eventSegments()' to assist in determining the 'span' of the event in the display,
     * specifically when using a timezone that is greater than the browser native timezone.
     * @returns number
     */
    function browserTZOffset() {
      /**
       * Date.prototype.getTimezoneOffset horrifically flips the positive/negative from
       * what you see in it's string, so we have to jump through some hoops to get a value
       * we can actually compare.
       */
      var dt = new Date()
      var neg = /-/.test(dt.toString()) ? '-' : ''
      var dtOffset = dt.getTimezoneOffset()
      var comparator = Number(''.concat(neg).concat(Math.abs(dtOffset)))
      // dayjs correctly provides positive/negative offset, as expected
      var mtOffset = dayjs().utcOffset()
      return mtOffset > comparator ? 1 : 0
    }
    return new DateLocalizer({
      formats: formats,
      firstOfWeek: firstOfWeek,
      firstVisibleDay: firstVisibleDay,
      lastVisibleDay: lastVisibleDay,
      visibleDays: visibleDays,
      format: function format(value, _format, culture) {
        return locale(dayjs(value), culture).format(_format)
      },
      lt: lt,
      lte: lte,
      gt: gt,
      gte: gte,
      eq: eq,
      neq: neq,
      merge: merge,
      inRange: inRange,
      startOf: startOf,
      endOf: endOf,
      range: range,
      add: add,
      diff: diff,
      ceil: ceil,
      min: min,
      max: max,
      minutes: minutes,
      getSlotDate: getSlotDate,
      getTimezoneOffset: getTimezoneOffset,
      getDstOffset: getDstOffset,
      getTotalMin: getTotalMin,
      getMinutesFromMidnight: getMinutesFromMidnight,
      continuesPrior: continuesPrior,
      continuesAfter: continuesAfter,
      sortEvents: sortEvents,
      inEventRange: inEventRange,
      isSameDate: isSameDate,
      browserTZOffset: browserTZOffset,
    })
  }

  var components = {
    eventWrapper: NoopWrapper,
    timeSlotWrapper: NoopWrapper,
    dateCellWrapper: NoopWrapper,
  }

  exports.Calendar = Calendar$1
  exports.DateLocalizer = DateLocalizer
  exports.Navigate = navigate
  exports.Views = views
  exports.components = components
  exports.dateFnsLocalizer = dateFnsLocalizer
  exports.dayjsLocalizer = dayjs
  exports.globalizeLocalizer = globalize
  exports.luxonLocalizer = luxon
  exports.momentLocalizer = moment
  exports.move = moveDate
})
